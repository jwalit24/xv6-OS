Binary files xv6-public/.git/index and xv6-new/.git/index differ
diff -ruN xv6-public/.git/logs/HEAD xv6-new/.git/logs/HEAD
--- xv6-public/.git/logs/HEAD	2022-10-07 22:44:57.841887896 +0530
+++ xv6-new/.git/logs/HEAD	2022-10-07 22:43:02.521886261 +0530
@@ -1 +1 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 akshat <akshat@4KxH4T.localdomain> 1665162897 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 akshat <akshat@4KxH4T.localdomain> 1665162782 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
diff -ruN xv6-public/.git/logs/refs/heads/master xv6-new/.git/logs/refs/heads/master
--- xv6-public/.git/logs/refs/heads/master	2022-10-07 22:44:57.841887896 +0530
+++ xv6-new/.git/logs/refs/heads/master	2022-10-07 22:43:02.521886261 +0530
@@ -1 +1 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 akshat <akshat@4KxH4T.localdomain> 1665162897 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 akshat <akshat@4KxH4T.localdomain> 1665162782 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
diff -ruN xv6-public/.git/logs/refs/remotes/origin/HEAD xv6-new/.git/logs/refs/remotes/origin/HEAD
--- xv6-public/.git/logs/refs/remotes/origin/HEAD	2022-10-07 22:44:57.841887896 +0530
+++ xv6-new/.git/logs/refs/remotes/origin/HEAD	2022-10-07 22:43:02.521886261 +0530
@@ -1 +1 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 akshat <akshat@4KxH4T.localdomain> 1665162897 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 akshat <akshat@4KxH4T.localdomain> 1665162782 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
diff -ruN xv6-public/Makefile xv6-new/Makefile
--- xv6-public/Makefile	2022-10-07 22:44:57.841887896 +0530
+++ xv6-new/Makefile	2022-10-07 11:47:05.971328400 +0530
@@ -181,6 +181,13 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_test1\
+	_test2\
+	_test3\
+	_partA_test1\
+	_partA_test2\
+	_partA_test3\
+	_testIO\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -217,7 +224,7 @@
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
@@ -249,8 +256,8 @@
 
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
-	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
+	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c testIO.c\
+	printf.c umalloc.c test1.c test2.c test3.c partA_test1.c partA_test2.c partA_test3.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
@@ -283,4 +290,4 @@
 	cp dist/* dist/.gdbinit.tmpl /tmp/xv6
 	(cd /tmp; tar cf - xv6) | gzip >xv6-rev10.tar.gz  # the next one will be 10 (9/17)
 
-.PHONY: dist-test dist
+.PHONY: dist-test dist
\ No newline at end of file
Binary files xv6-public/_cat and xv6-new/_cat differ
Binary files xv6-public/_echo and xv6-new/_echo differ
Binary files xv6-public/_forktest and xv6-new/_forktest differ
Binary files xv6-public/_grep and xv6-new/_grep differ
Binary files xv6-public/_init and xv6-new/_init differ
Binary files xv6-public/_kill and xv6-new/_kill differ
Binary files xv6-public/_ln and xv6-new/_ln differ
Binary files xv6-public/_ls and xv6-new/_ls differ
Binary files xv6-public/_mkdir and xv6-new/_mkdir differ
Binary files xv6-public/_partA_test1 and xv6-new/_partA_test1 differ
Binary files xv6-public/_partA_test2 and xv6-new/_partA_test2 differ
Binary files xv6-public/_partA_test3 and xv6-new/_partA_test3 differ
Binary files xv6-public/_rm and xv6-new/_rm differ
Binary files xv6-public/_sh and xv6-new/_sh differ
Binary files xv6-public/_stressfs and xv6-new/_stressfs differ
Binary files xv6-public/_test1 and xv6-new/_test1 differ
Binary files xv6-public/_test2 and xv6-new/_test2 differ
Binary files xv6-public/_test3 and xv6-new/_test3 differ
Binary files xv6-public/_testIO and xv6-new/_testIO differ
Binary files xv6-public/_usertests and xv6-new/_usertests differ
Binary files xv6-public/_wc and xv6-new/_wc differ
Binary files xv6-public/_zombie and xv6-new/_zombie differ
Binary files xv6-public/bio.o and xv6-new/bio.o differ
diff -ruN xv6-public/cat.asm xv6-new/cat.asm
--- xv6-public/cat.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/cat.asm	2022-10-07 22:43:42.871886833 +0530
@@ -0,0 +1,1305 @@
+
+_cat:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	be 01 00 00 00       	mov    $0x1,%esi
+  18:	53                   	push   %ebx
+  19:	51                   	push   %ecx
+  1a:	83 ec 18             	sub    $0x18,%esp
+  1d:	8b 01                	mov    (%ecx),%eax
+  1f:	8b 59 04             	mov    0x4(%ecx),%ebx
+  22:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  25:	83 c3 04             	add    $0x4,%ebx
+  int fd, i;
+
+  if(argc <= 1){
+  28:	83 f8 01             	cmp    $0x1,%eax
+  2b:	7e 50                	jle    7d <main+0x7d>
+  2d:	8d 76 00             	lea    0x0(%esi),%esi
+    cat(0);
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+  30:	83 ec 08             	sub    $0x8,%esp
+  33:	6a 00                	push   $0x0
+  35:	ff 33                	pushl  (%ebx)
+  37:	e8 77 03 00 00       	call   3b3 <open>
+  3c:	83 c4 10             	add    $0x10,%esp
+  3f:	89 c7                	mov    %eax,%edi
+  41:	85 c0                	test   %eax,%eax
+  43:	78 24                	js     69 <main+0x69>
+      printf(1, "cat: cannot open %s\n", argv[i]);
+      exit();
+    }
+    cat(fd);
+  45:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 1; i < argc; i++){
+  48:	83 c6 01             	add    $0x1,%esi
+  4b:	83 c3 04             	add    $0x4,%ebx
+    cat(fd);
+  4e:	50                   	push   %eax
+  4f:	e8 3c 00 00 00       	call   90 <cat>
+    close(fd);
+  54:	89 3c 24             	mov    %edi,(%esp)
+  57:	e8 3f 03 00 00       	call   39b <close>
+  for(i = 1; i < argc; i++){
+  5c:	83 c4 10             	add    $0x10,%esp
+  5f:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  62:	75 cc                	jne    30 <main+0x30>
+  }
+  exit();
+  64:	e8 0a 03 00 00       	call   373 <exit>
+      printf(1, "cat: cannot open %s\n", argv[i]);
+  69:	50                   	push   %eax
+  6a:	ff 33                	pushl  (%ebx)
+  6c:	68 7b 08 00 00       	push   $0x87b
+  71:	6a 01                	push   $0x1
+  73:	e8 78 04 00 00       	call   4f0 <printf>
+      exit();
+  78:	e8 f6 02 00 00       	call   373 <exit>
+    cat(0);
+  7d:	83 ec 0c             	sub    $0xc,%esp
+  80:	6a 00                	push   $0x0
+  82:	e8 09 00 00 00       	call   90 <cat>
+    exit();
+  87:	e8 e7 02 00 00       	call   373 <exit>
+  8c:	66 90                	xchg   %ax,%ax
+  8e:	66 90                	xchg   %ax,%ax
+
+00000090 <cat>:
+{
+  90:	f3 0f 1e fb          	endbr32 
+  94:	55                   	push   %ebp
+  95:	89 e5                	mov    %esp,%ebp
+  97:	56                   	push   %esi
+  98:	8b 75 08             	mov    0x8(%ebp),%esi
+  9b:	53                   	push   %ebx
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+  9c:	eb 19                	jmp    b7 <cat+0x27>
+  9e:	66 90                	xchg   %ax,%ax
+    if (write(1, buf, n) != n) {
+  a0:	83 ec 04             	sub    $0x4,%esp
+  a3:	53                   	push   %ebx
+  a4:	68 a0 0b 00 00       	push   $0xba0
+  a9:	6a 01                	push   $0x1
+  ab:	e8 e3 02 00 00       	call   393 <write>
+  b0:	83 c4 10             	add    $0x10,%esp
+  b3:	39 d8                	cmp    %ebx,%eax
+  b5:	75 25                	jne    dc <cat+0x4c>
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+  b7:	83 ec 04             	sub    $0x4,%esp
+  ba:	68 00 02 00 00       	push   $0x200
+  bf:	68 a0 0b 00 00       	push   $0xba0
+  c4:	56                   	push   %esi
+  c5:	e8 c1 02 00 00       	call   38b <read>
+  ca:	83 c4 10             	add    $0x10,%esp
+  cd:	89 c3                	mov    %eax,%ebx
+  cf:	85 c0                	test   %eax,%eax
+  d1:	7f cd                	jg     a0 <cat+0x10>
+  if(n < 0){
+  d3:	75 1b                	jne    f0 <cat+0x60>
+}
+  d5:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  d8:	5b                   	pop    %ebx
+  d9:	5e                   	pop    %esi
+  da:	5d                   	pop    %ebp
+  db:	c3                   	ret    
+      printf(1, "cat: write error\n");
+  dc:	83 ec 08             	sub    $0x8,%esp
+  df:	68 58 08 00 00       	push   $0x858
+  e4:	6a 01                	push   $0x1
+  e6:	e8 05 04 00 00       	call   4f0 <printf>
+      exit();
+  eb:	e8 83 02 00 00       	call   373 <exit>
+    printf(1, "cat: read error\n");
+  f0:	50                   	push   %eax
+  f1:	50                   	push   %eax
+  f2:	68 6a 08 00 00       	push   $0x86a
+  f7:	6a 01                	push   $0x1
+  f9:	e8 f2 03 00 00       	call   4f0 <printf>
+    exit();
+  fe:	e8 70 02 00 00       	call   373 <exit>
+ 103:	66 90                	xchg   %ax,%ax
+ 105:	66 90                	xchg   %ax,%ax
+ 107:	66 90                	xchg   %ax,%ax
+ 109:	66 90                	xchg   %ax,%ax
+ 10b:	66 90                	xchg   %ax,%ax
+ 10d:	66 90                	xchg   %ax,%ax
+ 10f:	90                   	nop
+
+00000110 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 110:	f3 0f 1e fb          	endbr32 
+ 114:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 115:	31 c0                	xor    %eax,%eax
+{
+ 117:	89 e5                	mov    %esp,%ebp
+ 119:	53                   	push   %ebx
+ 11a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 11d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 120:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 124:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 127:	83 c0 01             	add    $0x1,%eax
+ 12a:	84 d2                	test   %dl,%dl
+ 12c:	75 f2                	jne    120 <strcpy+0x10>
+    ;
+  return os;
+}
+ 12e:	89 c8                	mov    %ecx,%eax
+ 130:	5b                   	pop    %ebx
+ 131:	5d                   	pop    %ebp
+ 132:	c3                   	ret    
+ 133:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000140 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+ 145:	89 e5                	mov    %esp,%ebp
+ 147:	53                   	push   %ebx
+ 148:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 14b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 14e:	0f b6 01             	movzbl (%ecx),%eax
+ 151:	0f b6 1a             	movzbl (%edx),%ebx
+ 154:	84 c0                	test   %al,%al
+ 156:	75 19                	jne    171 <strcmp+0x31>
+ 158:	eb 26                	jmp    180 <strcmp+0x40>
+ 15a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 160:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 164:	83 c1 01             	add    $0x1,%ecx
+ 167:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 16a:	0f b6 1a             	movzbl (%edx),%ebx
+ 16d:	84 c0                	test   %al,%al
+ 16f:	74 0f                	je     180 <strcmp+0x40>
+ 171:	38 d8                	cmp    %bl,%al
+ 173:	74 eb                	je     160 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 175:	29 d8                	sub    %ebx,%eax
+}
+ 177:	5b                   	pop    %ebx
+ 178:	5d                   	pop    %ebp
+ 179:	c3                   	ret    
+ 17a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 180:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 182:	29 d8                	sub    %ebx,%eax
+}
+ 184:	5b                   	pop    %ebx
+ 185:	5d                   	pop    %ebp
+ 186:	c3                   	ret    
+ 187:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 18e:	66 90                	xchg   %ax,%ax
+
+00000190 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 190:	f3 0f 1e fb          	endbr32 
+ 194:	55                   	push   %ebp
+ 195:	89 e5                	mov    %esp,%ebp
+ 197:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 19a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 19d:	74 21                	je     1c0 <strlen+0x30>
+ 19f:	31 c0                	xor    %eax,%eax
+ 1a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1a8:	83 c0 01             	add    $0x1,%eax
+ 1ab:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 1af:	89 c1                	mov    %eax,%ecx
+ 1b1:	75 f5                	jne    1a8 <strlen+0x18>
+    ;
+  return n;
+}
+ 1b3:	89 c8                	mov    %ecx,%eax
+ 1b5:	5d                   	pop    %ebp
+ 1b6:	c3                   	ret    
+ 1b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1be:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 1c0:	31 c9                	xor    %ecx,%ecx
+}
+ 1c2:	5d                   	pop    %ebp
+ 1c3:	89 c8                	mov    %ecx,%eax
+ 1c5:	c3                   	ret    
+ 1c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001d0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1d0:	f3 0f 1e fb          	endbr32 
+ 1d4:	55                   	push   %ebp
+ 1d5:	89 e5                	mov    %esp,%ebp
+ 1d7:	57                   	push   %edi
+ 1d8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1db:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1de:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1e1:	89 d7                	mov    %edx,%edi
+ 1e3:	fc                   	cld    
+ 1e4:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1e6:	89 d0                	mov    %edx,%eax
+ 1e8:	5f                   	pop    %edi
+ 1e9:	5d                   	pop    %ebp
+ 1ea:	c3                   	ret    
+ 1eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1ef:	90                   	nop
+
+000001f0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1f0:	f3 0f 1e fb          	endbr32 
+ 1f4:	55                   	push   %ebp
+ 1f5:	89 e5                	mov    %esp,%ebp
+ 1f7:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1fa:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 1fe:	0f b6 10             	movzbl (%eax),%edx
+ 201:	84 d2                	test   %dl,%dl
+ 203:	75 16                	jne    21b <strchr+0x2b>
+ 205:	eb 21                	jmp    228 <strchr+0x38>
+ 207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20e:	66 90                	xchg   %ax,%ax
+ 210:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 214:	83 c0 01             	add    $0x1,%eax
+ 217:	84 d2                	test   %dl,%dl
+ 219:	74 0d                	je     228 <strchr+0x38>
+    if(*s == c)
+ 21b:	38 d1                	cmp    %dl,%cl
+ 21d:	75 f1                	jne    210 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 21f:	5d                   	pop    %ebp
+ 220:	c3                   	ret    
+ 221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 228:	31 c0                	xor    %eax,%eax
+}
+ 22a:	5d                   	pop    %ebp
+ 22b:	c3                   	ret    
+ 22c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000230 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 230:	f3 0f 1e fb          	endbr32 
+ 234:	55                   	push   %ebp
+ 235:	89 e5                	mov    %esp,%ebp
+ 237:	57                   	push   %edi
+ 238:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 239:	31 f6                	xor    %esi,%esi
+{
+ 23b:	53                   	push   %ebx
+ 23c:	89 f3                	mov    %esi,%ebx
+ 23e:	83 ec 1c             	sub    $0x1c,%esp
+ 241:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 244:	eb 33                	jmp    279 <gets+0x49>
+ 246:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 250:	83 ec 04             	sub    $0x4,%esp
+ 253:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 256:	6a 01                	push   $0x1
+ 258:	50                   	push   %eax
+ 259:	6a 00                	push   $0x0
+ 25b:	e8 2b 01 00 00       	call   38b <read>
+    if(cc < 1)
+ 260:	83 c4 10             	add    $0x10,%esp
+ 263:	85 c0                	test   %eax,%eax
+ 265:	7e 1c                	jle    283 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 267:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 26b:	83 c7 01             	add    $0x1,%edi
+ 26e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 271:	3c 0a                	cmp    $0xa,%al
+ 273:	74 23                	je     298 <gets+0x68>
+ 275:	3c 0d                	cmp    $0xd,%al
+ 277:	74 1f                	je     298 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 279:	83 c3 01             	add    $0x1,%ebx
+ 27c:	89 fe                	mov    %edi,%esi
+ 27e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 281:	7c cd                	jl     250 <gets+0x20>
+ 283:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 285:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 288:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 28b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 28e:	5b                   	pop    %ebx
+ 28f:	5e                   	pop    %esi
+ 290:	5f                   	pop    %edi
+ 291:	5d                   	pop    %ebp
+ 292:	c3                   	ret    
+ 293:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 297:	90                   	nop
+ 298:	8b 75 08             	mov    0x8(%ebp),%esi
+ 29b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 29e:	01 de                	add    %ebx,%esi
+ 2a0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2a2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2a5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2a8:	5b                   	pop    %ebx
+ 2a9:	5e                   	pop    %esi
+ 2aa:	5f                   	pop    %edi
+ 2ab:	5d                   	pop    %ebp
+ 2ac:	c3                   	ret    
+ 2ad:	8d 76 00             	lea    0x0(%esi),%esi
+
+000002b0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	56                   	push   %esi
+ 2b8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2b9:	83 ec 08             	sub    $0x8,%esp
+ 2bc:	6a 00                	push   $0x0
+ 2be:	ff 75 08             	pushl  0x8(%ebp)
+ 2c1:	e8 ed 00 00 00       	call   3b3 <open>
+  if(fd < 0)
+ 2c6:	83 c4 10             	add    $0x10,%esp
+ 2c9:	85 c0                	test   %eax,%eax
+ 2cb:	78 2b                	js     2f8 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 2cd:	83 ec 08             	sub    $0x8,%esp
+ 2d0:	ff 75 0c             	pushl  0xc(%ebp)
+ 2d3:	89 c3                	mov    %eax,%ebx
+ 2d5:	50                   	push   %eax
+ 2d6:	e8 f0 00 00 00       	call   3cb <fstat>
+  close(fd);
+ 2db:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2de:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2e0:	e8 b6 00 00 00       	call   39b <close>
+  return r;
+ 2e5:	83 c4 10             	add    $0x10,%esp
+}
+ 2e8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2eb:	89 f0                	mov    %esi,%eax
+ 2ed:	5b                   	pop    %ebx
+ 2ee:	5e                   	pop    %esi
+ 2ef:	5d                   	pop    %ebp
+ 2f0:	c3                   	ret    
+ 2f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 2f8:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2fd:	eb e9                	jmp    2e8 <stat+0x38>
+ 2ff:	90                   	nop
+
+00000300 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 300:	f3 0f 1e fb          	endbr32 
+ 304:	55                   	push   %ebp
+ 305:	89 e5                	mov    %esp,%ebp
+ 307:	53                   	push   %ebx
+ 308:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 30b:	0f be 02             	movsbl (%edx),%eax
+ 30e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 311:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 314:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 319:	77 1a                	ja     335 <atoi+0x35>
+ 31b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 31f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 320:	83 c2 01             	add    $0x1,%edx
+ 323:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 326:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 32a:	0f be 02             	movsbl (%edx),%eax
+ 32d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 330:	80 fb 09             	cmp    $0x9,%bl
+ 333:	76 eb                	jbe    320 <atoi+0x20>
+  return n;
+}
+ 335:	89 c8                	mov    %ecx,%eax
+ 337:	5b                   	pop    %ebx
+ 338:	5d                   	pop    %ebp
+ 339:	c3                   	ret    
+ 33a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000340 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 340:	f3 0f 1e fb          	endbr32 
+ 344:	55                   	push   %ebp
+ 345:	89 e5                	mov    %esp,%ebp
+ 347:	57                   	push   %edi
+ 348:	8b 45 10             	mov    0x10(%ebp),%eax
+ 34b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 34e:	56                   	push   %esi
+ 34f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 352:	85 c0                	test   %eax,%eax
+ 354:	7e 0f                	jle    365 <memmove+0x25>
+ 356:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 358:	89 d7                	mov    %edx,%edi
+ 35a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 360:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 361:	39 f8                	cmp    %edi,%eax
+ 363:	75 fb                	jne    360 <memmove+0x20>
+  return vdst;
+}
+ 365:	5e                   	pop    %esi
+ 366:	89 d0                	mov    %edx,%eax
+ 368:	5f                   	pop    %edi
+ 369:	5d                   	pop    %ebp
+ 36a:	c3                   	ret    
+
+0000036b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 36b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <exit>:
+SYSCALL(exit)
+ 373:	b8 02 00 00 00       	mov    $0x2,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <wait>:
+SYSCALL(wait)
+ 37b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <pipe>:
+SYSCALL(pipe)
+ 383:	b8 04 00 00 00       	mov    $0x4,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <read>:
+SYSCALL(read)
+ 38b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <write>:
+SYSCALL(write)
+ 393:	b8 10 00 00 00       	mov    $0x10,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <close>:
+SYSCALL(close)
+ 39b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <kill>:
+SYSCALL(kill)
+ 3a3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <exec>:
+SYSCALL(exec)
+ 3ab:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <open>:
+SYSCALL(open)
+ 3b3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <mknod>:
+SYSCALL(mknod)
+ 3bb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <unlink>:
+SYSCALL(unlink)
+ 3c3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <fstat>:
+SYSCALL(fstat)
+ 3cb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <link>:
+SYSCALL(link)
+ 3d3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <mkdir>:
+SYSCALL(mkdir)
+ 3db:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <chdir>:
+SYSCALL(chdir)
+ 3e3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <dup>:
+SYSCALL(dup)
+ 3eb:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <getpid>:
+SYSCALL(getpid)
+ 3f3:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <sbrk>:
+SYSCALL(sbrk)
+ 3fb:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <sleep>:
+SYSCALL(sleep)
+ 403:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <uptime>:
+SYSCALL(uptime)
+ 40b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <getNumProc>:
+SYSCALL(getNumProc)
+ 413:	b8 16 00 00 00       	mov    $0x16,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 41b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 423:	b8 18 00 00 00       	mov    $0x18,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 42b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <get_burst_time>:
+ 433:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+ 43b:	66 90                	xchg   %ax,%ax
+ 43d:	66 90                	xchg   %ax,%ax
+ 43f:	90                   	nop
+
+00000440 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 440:	55                   	push   %ebp
+ 441:	89 e5                	mov    %esp,%ebp
+ 443:	57                   	push   %edi
+ 444:	56                   	push   %esi
+ 445:	53                   	push   %ebx
+ 446:	83 ec 3c             	sub    $0x3c,%esp
+ 449:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 44c:	89 d1                	mov    %edx,%ecx
+{
+ 44e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 451:	85 d2                	test   %edx,%edx
+ 453:	0f 89 7f 00 00 00    	jns    4d8 <printint+0x98>
+ 459:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 45d:	74 79                	je     4d8 <printint+0x98>
+    neg = 1;
+ 45f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 466:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 468:	31 db                	xor    %ebx,%ebx
+ 46a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 46d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 470:	89 c8                	mov    %ecx,%eax
+ 472:	31 d2                	xor    %edx,%edx
+ 474:	89 cf                	mov    %ecx,%edi
+ 476:	f7 75 c4             	divl   -0x3c(%ebp)
+ 479:	0f b6 92 98 08 00 00 	movzbl 0x898(%edx),%edx
+ 480:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 483:	89 d8                	mov    %ebx,%eax
+ 485:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 488:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 48b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 48e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 491:	76 dd                	jbe    470 <printint+0x30>
+  if(neg)
+ 493:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 496:	85 c9                	test   %ecx,%ecx
+ 498:	74 0c                	je     4a6 <printint+0x66>
+    buf[i++] = '-';
+ 49a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 49f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 4a1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 4a6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 4a9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4ad:	eb 07                	jmp    4b6 <printint+0x76>
+ 4af:	90                   	nop
+ 4b0:	0f b6 13             	movzbl (%ebx),%edx
+ 4b3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 4b6:	83 ec 04             	sub    $0x4,%esp
+ 4b9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4bc:	6a 01                	push   $0x1
+ 4be:	56                   	push   %esi
+ 4bf:	57                   	push   %edi
+ 4c0:	e8 ce fe ff ff       	call   393 <write>
+  while(--i >= 0)
+ 4c5:	83 c4 10             	add    $0x10,%esp
+ 4c8:	39 de                	cmp    %ebx,%esi
+ 4ca:	75 e4                	jne    4b0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 4cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4cf:	5b                   	pop    %ebx
+ 4d0:	5e                   	pop    %esi
+ 4d1:	5f                   	pop    %edi
+ 4d2:	5d                   	pop    %ebp
+ 4d3:	c3                   	ret    
+ 4d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4d8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4df:	eb 87                	jmp    468 <printint+0x28>
+ 4e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ef:	90                   	nop
+
+000004f0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4f0:	f3 0f 1e fb          	endbr32 
+ 4f4:	55                   	push   %ebp
+ 4f5:	89 e5                	mov    %esp,%ebp
+ 4f7:	57                   	push   %edi
+ 4f8:	56                   	push   %esi
+ 4f9:	53                   	push   %ebx
+ 4fa:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4fd:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 500:	0f b6 1e             	movzbl (%esi),%ebx
+ 503:	84 db                	test   %bl,%bl
+ 505:	0f 84 b4 00 00 00    	je     5bf <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 50b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 50e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 511:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 514:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 516:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 519:	eb 33                	jmp    54e <printf+0x5e>
+ 51b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 51f:	90                   	nop
+ 520:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 523:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 528:	83 f8 25             	cmp    $0x25,%eax
+ 52b:	74 17                	je     544 <printf+0x54>
+  write(fd, &c, 1);
+ 52d:	83 ec 04             	sub    $0x4,%esp
+ 530:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 533:	6a 01                	push   $0x1
+ 535:	57                   	push   %edi
+ 536:	ff 75 08             	pushl  0x8(%ebp)
+ 539:	e8 55 fe ff ff       	call   393 <write>
+ 53e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 541:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 544:	0f b6 1e             	movzbl (%esi),%ebx
+ 547:	83 c6 01             	add    $0x1,%esi
+ 54a:	84 db                	test   %bl,%bl
+ 54c:	74 71                	je     5bf <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 54e:	0f be cb             	movsbl %bl,%ecx
+ 551:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 554:	85 d2                	test   %edx,%edx
+ 556:	74 c8                	je     520 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 558:	83 fa 25             	cmp    $0x25,%edx
+ 55b:	75 e7                	jne    544 <printf+0x54>
+      if(c == 'd'){
+ 55d:	83 f8 64             	cmp    $0x64,%eax
+ 560:	0f 84 9a 00 00 00    	je     600 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 566:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 56c:	83 f9 70             	cmp    $0x70,%ecx
+ 56f:	74 5f                	je     5d0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 571:	83 f8 73             	cmp    $0x73,%eax
+ 574:	0f 84 d6 00 00 00    	je     650 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 57a:	83 f8 63             	cmp    $0x63,%eax
+ 57d:	0f 84 8d 00 00 00    	je     610 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 583:	83 f8 25             	cmp    $0x25,%eax
+ 586:	0f 84 b4 00 00 00    	je     640 <printf+0x150>
+  write(fd, &c, 1);
+ 58c:	83 ec 04             	sub    $0x4,%esp
+ 58f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 593:	6a 01                	push   $0x1
+ 595:	57                   	push   %edi
+ 596:	ff 75 08             	pushl  0x8(%ebp)
+ 599:	e8 f5 fd ff ff       	call   393 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 59e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5a1:	83 c4 0c             	add    $0xc,%esp
+ 5a4:	6a 01                	push   $0x1
+ 5a6:	83 c6 01             	add    $0x1,%esi
+ 5a9:	57                   	push   %edi
+ 5aa:	ff 75 08             	pushl  0x8(%ebp)
+ 5ad:	e8 e1 fd ff ff       	call   393 <write>
+  for(i = 0; fmt[i]; i++){
+ 5b2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 5b6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 5b9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 5bb:	84 db                	test   %bl,%bl
+ 5bd:	75 8f                	jne    54e <printf+0x5e>
+    }
+  }
+}
+ 5bf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5c2:	5b                   	pop    %ebx
+ 5c3:	5e                   	pop    %esi
+ 5c4:	5f                   	pop    %edi
+ 5c5:	5d                   	pop    %ebp
+ 5c6:	c3                   	ret    
+ 5c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ce:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 5d0:	83 ec 0c             	sub    $0xc,%esp
+ 5d3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5d8:	6a 00                	push   $0x0
+ 5da:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 5dd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5e0:	8b 13                	mov    (%ebx),%edx
+ 5e2:	e8 59 fe ff ff       	call   440 <printint>
+        ap++;
+ 5e7:	89 d8                	mov    %ebx,%eax
+ 5e9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5ec:	31 d2                	xor    %edx,%edx
+        ap++;
+ 5ee:	83 c0 04             	add    $0x4,%eax
+ 5f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5f4:	e9 4b ff ff ff       	jmp    544 <printf+0x54>
+ 5f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 600:	83 ec 0c             	sub    $0xc,%esp
+ 603:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 608:	6a 01                	push   $0x1
+ 60a:	eb ce                	jmp    5da <printf+0xea>
+ 60c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 610:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 613:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 616:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 618:	6a 01                	push   $0x1
+        ap++;
+ 61a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 61d:	57                   	push   %edi
+ 61e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 621:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 624:	e8 6a fd ff ff       	call   393 <write>
+        ap++;
+ 629:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 62c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 62f:	31 d2                	xor    %edx,%edx
+ 631:	e9 0e ff ff ff       	jmp    544 <printf+0x54>
+ 636:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 63d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 640:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 643:	83 ec 04             	sub    $0x4,%esp
+ 646:	e9 59 ff ff ff       	jmp    5a4 <printf+0xb4>
+ 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+        s = (char*)*ap;
+ 650:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 653:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 655:	83 c0 04             	add    $0x4,%eax
+ 658:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 65b:	85 db                	test   %ebx,%ebx
+ 65d:	74 17                	je     676 <printf+0x186>
+        while(*s != 0){
+ 65f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 662:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 664:	84 c0                	test   %al,%al
+ 666:	0f 84 d8 fe ff ff    	je     544 <printf+0x54>
+ 66c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 66f:	89 de                	mov    %ebx,%esi
+ 671:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 674:	eb 1a                	jmp    690 <printf+0x1a0>
+          s = "(null)";
+ 676:	bb 90 08 00 00       	mov    $0x890,%ebx
+        while(*s != 0){
+ 67b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 67e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 683:	89 de                	mov    %ebx,%esi
+ 685:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 688:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 68f:	90                   	nop
+  write(fd, &c, 1);
+ 690:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 693:	83 c6 01             	add    $0x1,%esi
+ 696:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 699:	6a 01                	push   $0x1
+ 69b:	57                   	push   %edi
+ 69c:	53                   	push   %ebx
+ 69d:	e8 f1 fc ff ff       	call   393 <write>
+        while(*s != 0){
+ 6a2:	0f b6 06             	movzbl (%esi),%eax
+ 6a5:	83 c4 10             	add    $0x10,%esp
+ 6a8:	84 c0                	test   %al,%al
+ 6aa:	75 e4                	jne    690 <printf+0x1a0>
+ 6ac:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 6af:	31 d2                	xor    %edx,%edx
+ 6b1:	e9 8e fe ff ff       	jmp    544 <printf+0x54>
+ 6b6:	66 90                	xchg   %ax,%ax
+ 6b8:	66 90                	xchg   %ax,%ax
+ 6ba:	66 90                	xchg   %ax,%ax
+ 6bc:	66 90                	xchg   %ax,%ax
+ 6be:	66 90                	xchg   %ax,%ax
+
+000006c0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6c0:	f3 0f 1e fb          	endbr32 
+ 6c4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6c5:	a1 80 0b 00 00       	mov    0xb80,%eax
+{
+ 6ca:	89 e5                	mov    %esp,%ebp
+ 6cc:	57                   	push   %edi
+ 6cd:	56                   	push   %esi
+ 6ce:	53                   	push   %ebx
+ 6cf:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6d2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 6d4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6d7:	39 c8                	cmp    %ecx,%eax
+ 6d9:	73 15                	jae    6f0 <free+0x30>
+ 6db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6df:	90                   	nop
+ 6e0:	39 d1                	cmp    %edx,%ecx
+ 6e2:	72 14                	jb     6f8 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6e4:	39 d0                	cmp    %edx,%eax
+ 6e6:	73 10                	jae    6f8 <free+0x38>
+{
+ 6e8:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6ea:	8b 10                	mov    (%eax),%edx
+ 6ec:	39 c8                	cmp    %ecx,%eax
+ 6ee:	72 f0                	jb     6e0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6f0:	39 d0                	cmp    %edx,%eax
+ 6f2:	72 f4                	jb     6e8 <free+0x28>
+ 6f4:	39 d1                	cmp    %edx,%ecx
+ 6f6:	73 f0                	jae    6e8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6fe:	39 fa                	cmp    %edi,%edx
+ 700:	74 1e                	je     720 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 702:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 705:	8b 50 04             	mov    0x4(%eax),%edx
+ 708:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 70b:	39 f1                	cmp    %esi,%ecx
+ 70d:	74 28                	je     737 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 70f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 711:	5b                   	pop    %ebx
+  freep = p;
+ 712:	a3 80 0b 00 00       	mov    %eax,0xb80
+}
+ 717:	5e                   	pop    %esi
+ 718:	5f                   	pop    %edi
+ 719:	5d                   	pop    %ebp
+ 71a:	c3                   	ret    
+ 71b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 71f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 720:	03 72 04             	add    0x4(%edx),%esi
+ 723:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 726:	8b 10                	mov    (%eax),%edx
+ 728:	8b 12                	mov    (%edx),%edx
+ 72a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 72d:	8b 50 04             	mov    0x4(%eax),%edx
+ 730:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 733:	39 f1                	cmp    %esi,%ecx
+ 735:	75 d8                	jne    70f <free+0x4f>
+    p->s.size += bp->s.size;
+ 737:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 73a:	a3 80 0b 00 00       	mov    %eax,0xb80
+    p->s.size += bp->s.size;
+ 73f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 742:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 745:	89 10                	mov    %edx,(%eax)
+}
+ 747:	5b                   	pop    %ebx
+ 748:	5e                   	pop    %esi
+ 749:	5f                   	pop    %edi
+ 74a:	5d                   	pop    %ebp
+ 74b:	c3                   	ret    
+ 74c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000750 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 750:	f3 0f 1e fb          	endbr32 
+ 754:	55                   	push   %ebp
+ 755:	89 e5                	mov    %esp,%ebp
+ 757:	57                   	push   %edi
+ 758:	56                   	push   %esi
+ 759:	53                   	push   %ebx
+ 75a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 75d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 760:	8b 3d 80 0b 00 00    	mov    0xb80,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 766:	8d 70 07             	lea    0x7(%eax),%esi
+ 769:	c1 ee 03             	shr    $0x3,%esi
+ 76c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 76f:	85 ff                	test   %edi,%edi
+ 771:	0f 84 a9 00 00 00    	je     820 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 777:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 779:	8b 48 04             	mov    0x4(%eax),%ecx
+ 77c:	39 f1                	cmp    %esi,%ecx
+ 77e:	73 6d                	jae    7ed <malloc+0x9d>
+ 780:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 786:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 78b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 78e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 795:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 798:	eb 17                	jmp    7b1 <malloc+0x61>
+ 79a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 7a2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 7a5:	39 f1                	cmp    %esi,%ecx
+ 7a7:	73 4f                	jae    7f8 <malloc+0xa8>
+ 7a9:	8b 3d 80 0b 00 00    	mov    0xb80,%edi
+ 7af:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7b1:	39 c7                	cmp    %eax,%edi
+ 7b3:	75 eb                	jne    7a0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 7b5:	83 ec 0c             	sub    $0xc,%esp
+ 7b8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 7bb:	e8 3b fc ff ff       	call   3fb <sbrk>
+  if(p == (char*)-1)
+ 7c0:	83 c4 10             	add    $0x10,%esp
+ 7c3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7c6:	74 1b                	je     7e3 <malloc+0x93>
+  hp->s.size = nu;
+ 7c8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7cb:	83 ec 0c             	sub    $0xc,%esp
+ 7ce:	83 c0 08             	add    $0x8,%eax
+ 7d1:	50                   	push   %eax
+ 7d2:	e8 e9 fe ff ff       	call   6c0 <free>
+  return freep;
+ 7d7:	a1 80 0b 00 00       	mov    0xb80,%eax
+      if((p = morecore(nunits)) == 0)
+ 7dc:	83 c4 10             	add    $0x10,%esp
+ 7df:	85 c0                	test   %eax,%eax
+ 7e1:	75 bd                	jne    7a0 <malloc+0x50>
+        return 0;
+  }
+}
+ 7e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7e6:	31 c0                	xor    %eax,%eax
+}
+ 7e8:	5b                   	pop    %ebx
+ 7e9:	5e                   	pop    %esi
+ 7ea:	5f                   	pop    %edi
+ 7eb:	5d                   	pop    %ebp
+ 7ec:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 7ed:	89 c2                	mov    %eax,%edx
+ 7ef:	89 f8                	mov    %edi,%eax
+ 7f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 7f8:	39 ce                	cmp    %ecx,%esi
+ 7fa:	74 54                	je     850 <malloc+0x100>
+        p->s.size -= nunits;
+ 7fc:	29 f1                	sub    %esi,%ecx
+ 7fe:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 801:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 804:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 807:	a3 80 0b 00 00       	mov    %eax,0xb80
+}
+ 80c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 80f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 812:	5b                   	pop    %ebx
+ 813:	5e                   	pop    %esi
+ 814:	5f                   	pop    %edi
+ 815:	5d                   	pop    %ebp
+ 816:	c3                   	ret    
+ 817:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 81e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 820:	c7 05 80 0b 00 00 84 	movl   $0xb84,0xb80
+ 827:	0b 00 00 
+    base.s.size = 0;
+ 82a:	bf 84 0b 00 00       	mov    $0xb84,%edi
+    base.s.ptr = freep = prevp = &base;
+ 82f:	c7 05 84 0b 00 00 84 	movl   $0xb84,0xb84
+ 836:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 839:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 83b:	c7 05 88 0b 00 00 00 	movl   $0x0,0xb88
+ 842:	00 00 00 
+    if(p->s.size >= nunits){
+ 845:	e9 36 ff ff ff       	jmp    780 <malloc+0x30>
+ 84a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 850:	8b 0a                	mov    (%edx),%ecx
+ 852:	89 08                	mov    %ecx,(%eax)
+ 854:	eb b1                	jmp    807 <malloc+0xb7>
diff -ruN xv6-public/cat.d xv6-new/cat.d
--- xv6-public/cat.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/cat.d	2022-10-07 22:43:42.871886833 +0530
@@ -0,0 +1 @@
+cat.o: cat.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/cat.o and xv6-new/cat.o differ
diff -ruN xv6-public/cat.sym xv6-new/cat.sym
--- xv6-public/cat.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/cat.sym	2022-10-07 22:43:42.871886833 +0530
@@ -0,0 +1,64 @@
+00000000 .text
+00000858 .rodata
+000008ac .eh_frame
+00000b80 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 cat.c
+00000000 ulib.c
+00000000 printf.c
+00000440 printint
+00000898 digits.1096
+00000000 umalloc.c
+00000b80 freep
+00000b84 base
+00000110 strcpy
+000004f0 printf
+00000340 memmove
+000003bb mknod
+00000230 gets
+000003f3 getpid
+00000090 cat
+00000750 malloc
+00000403 sleep
+00000433 get_burst_time
+00000383 pipe
+00000393 write
+000003cb fstat
+000003a3 kill
+000003e3 chdir
+000003ab exec
+0000037b wait
+0000038b read
+000003c3 unlink
+0000036b fork
+000003fb sbrk
+0000040b uptime
+00000b7c __bss_start
+000001d0 memset
+00000000 main
+0000042b set_burst_time
+00000140 strcmp
+000003eb dup
+0000041b getMaxPid
+00000ba0 buf
+00000413 getNumProc
+00000423 getProcInfo
+000002b0 stat
+00000b7c _edata
+00000da0 _end
+000003d3 link
+00000373 exit
+00000300 atoi
+00000190 strlen
+000003b3 open
+000001f0 strchr
+000003db mkdir
+0000039b close
+000006c0 free
Binary files xv6-public/console.o and xv6-new/console.o differ
diff -ruN xv6-public/defs.h xv6-new/defs.h
--- xv6-public/defs.h	2022-10-07 22:44:57.841887896 +0530
+++ xv6-new/defs.h	2022-10-05 11:40:59.843739400 +0530
@@ -8,6 +8,7 @@
 struct spinlock;
 struct sleeplock;
 struct stat;
+struct processInfo;
 struct superblock;
 
 // bio.c
@@ -120,6 +121,12 @@
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int             getNumProc(void);
+int             getMaxPid(void);
+int             getProcInfo(int,struct processInfo*);
+int             set_burst_time(int);
+int             get_burst_time(void);
+
 
 // swtch.S
 void            swtch(struct context**, struct context*);
@@ -187,4 +194,4 @@
 void            clearpteu(pde_t *pgdir, char *uva);
 
 // number of elements in fixed-size array
-#define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+#define NELEM(x) (sizeof(x)/sizeof((x)[0]))
\ No newline at end of file
diff -ruN xv6-public/echo.asm xv6-new/echo.asm
--- xv6-public/echo.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/echo.asm	2022-10-07 22:43:42.871886833 +0530
@@ -0,0 +1,1224 @@
+
+_echo:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	56                   	push   %esi
+  12:	53                   	push   %ebx
+  13:	51                   	push   %ecx
+  14:	83 ec 0c             	sub    $0xc,%esp
+  17:	8b 01                	mov    (%ecx),%eax
+  19:	8b 51 04             	mov    0x4(%ecx),%edx
+  int i;
+
+  for(i = 1; i < argc; i++)
+  1c:	83 f8 01             	cmp    $0x1,%eax
+  1f:	7e 4b                	jle    6c <main+0x6c>
+  21:	8d 5a 04             	lea    0x4(%edx),%ebx
+  24:	8d 34 82             	lea    (%edx,%eax,4),%esi
+    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
+  27:	83 c3 04             	add    $0x4,%ebx
+  2a:	8b 43 fc             	mov    -0x4(%ebx),%eax
+  2d:	39 f3                	cmp    %esi,%ebx
+  2f:	74 26                	je     57 <main+0x57>
+  31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  38:	68 c8 07 00 00       	push   $0x7c8
+  3d:	83 c3 04             	add    $0x4,%ebx
+  40:	50                   	push   %eax
+  41:	68 ca 07 00 00       	push   $0x7ca
+  46:	6a 01                	push   $0x1
+  48:	e8 13 04 00 00       	call   460 <printf>
+  for(i = 1; i < argc; i++)
+  4d:	8b 43 fc             	mov    -0x4(%ebx),%eax
+    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
+  50:	83 c4 10             	add    $0x10,%esp
+  53:	39 f3                	cmp    %esi,%ebx
+  55:	75 e1                	jne    38 <main+0x38>
+  57:	68 cf 07 00 00       	push   $0x7cf
+  5c:	50                   	push   %eax
+  5d:	68 ca 07 00 00       	push   $0x7ca
+  62:	6a 01                	push   $0x1
+  64:	e8 f7 03 00 00       	call   460 <printf>
+  69:	83 c4 10             	add    $0x10,%esp
+  exit();
+  6c:	e8 72 02 00 00       	call   2e3 <exit>
+  71:	66 90                	xchg   %ax,%ax
+  73:	66 90                	xchg   %ax,%ax
+  75:	66 90                	xchg   %ax,%ax
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	f3 0f 1e fb          	endbr32 
+  84:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  85:	31 c0                	xor    %eax,%eax
+{
+  87:	89 e5                	mov    %esp,%ebp
+  89:	53                   	push   %ebx
+  8a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  8d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  90:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  94:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  97:	83 c0 01             	add    $0x1,%eax
+  9a:	84 d2                	test   %dl,%dl
+  9c:	75 f2                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  9e:	89 c8                	mov    %ecx,%eax
+  a0:	5b                   	pop    %ebx
+  a1:	5d                   	pop    %ebp
+  a2:	c3                   	ret    
+  a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	f3 0f 1e fb          	endbr32 
+  b4:	55                   	push   %ebp
+  b5:	89 e5                	mov    %esp,%ebp
+  b7:	53                   	push   %ebx
+  b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  bb:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  be:	0f b6 01             	movzbl (%ecx),%eax
+  c1:	0f b6 1a             	movzbl (%edx),%ebx
+  c4:	84 c0                	test   %al,%al
+  c6:	75 19                	jne    e1 <strcmp+0x31>
+  c8:	eb 26                	jmp    f0 <strcmp+0x40>
+  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  d0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  d4:	83 c1 01             	add    $0x1,%ecx
+  d7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  da:	0f b6 1a             	movzbl (%edx),%ebx
+  dd:	84 c0                	test   %al,%al
+  df:	74 0f                	je     f0 <strcmp+0x40>
+  e1:	38 d8                	cmp    %bl,%al
+  e3:	74 eb                	je     d0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  e5:	29 d8                	sub    %ebx,%eax
+}
+  e7:	5b                   	pop    %ebx
+  e8:	5d                   	pop    %ebp
+  e9:	c3                   	ret    
+  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  f0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  f2:	29 d8                	sub    %ebx,%eax
+}
+  f4:	5b                   	pop    %ebx
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fe:	66 90                	xchg   %ax,%ax
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	f3 0f 1e fb          	endbr32 
+ 104:	55                   	push   %ebp
+ 105:	89 e5                	mov    %esp,%ebp
+ 107:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 10a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 10d:	74 21                	je     130 <strlen+0x30>
+ 10f:	31 c0                	xor    %eax,%eax
+ 111:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 118:	83 c0 01             	add    $0x1,%eax
+ 11b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 11f:	89 c1                	mov    %eax,%ecx
+ 121:	75 f5                	jne    118 <strlen+0x18>
+    ;
+  return n;
+}
+ 123:	89 c8                	mov    %ecx,%eax
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 130:	31 c9                	xor    %ecx,%ecx
+}
+ 132:	5d                   	pop    %ebp
+ 133:	89 c8                	mov    %ecx,%eax
+ 135:	c3                   	ret    
+ 136:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000140 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+ 145:	89 e5                	mov    %esp,%ebp
+ 147:	57                   	push   %edi
+ 148:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 14b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 14e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 151:	89 d7                	mov    %edx,%edi
+ 153:	fc                   	cld    
+ 154:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 156:	89 d0                	mov    %edx,%eax
+ 158:	5f                   	pop    %edi
+ 159:	5d                   	pop    %ebp
+ 15a:	c3                   	ret    
+ 15b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 15f:	90                   	nop
+
+00000160 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 160:	f3 0f 1e fb          	endbr32 
+ 164:	55                   	push   %ebp
+ 165:	89 e5                	mov    %esp,%ebp
+ 167:	8b 45 08             	mov    0x8(%ebp),%eax
+ 16a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 16e:	0f b6 10             	movzbl (%eax),%edx
+ 171:	84 d2                	test   %dl,%dl
+ 173:	75 16                	jne    18b <strchr+0x2b>
+ 175:	eb 21                	jmp    198 <strchr+0x38>
+ 177:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17e:	66 90                	xchg   %ax,%ax
+ 180:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 184:	83 c0 01             	add    $0x1,%eax
+ 187:	84 d2                	test   %dl,%dl
+ 189:	74 0d                	je     198 <strchr+0x38>
+    if(*s == c)
+ 18b:	38 d1                	cmp    %dl,%cl
+ 18d:	75 f1                	jne    180 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 18f:	5d                   	pop    %ebp
+ 190:	c3                   	ret    
+ 191:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 198:	31 c0                	xor    %eax,%eax
+}
+ 19a:	5d                   	pop    %ebp
+ 19b:	c3                   	ret    
+ 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001a0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1a0:	f3 0f 1e fb          	endbr32 
+ 1a4:	55                   	push   %ebp
+ 1a5:	89 e5                	mov    %esp,%ebp
+ 1a7:	57                   	push   %edi
+ 1a8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1a9:	31 f6                	xor    %esi,%esi
+{
+ 1ab:	53                   	push   %ebx
+ 1ac:	89 f3                	mov    %esi,%ebx
+ 1ae:	83 ec 1c             	sub    $0x1c,%esp
+ 1b1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1b4:	eb 33                	jmp    1e9 <gets+0x49>
+ 1b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bd:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1c0:	83 ec 04             	sub    $0x4,%esp
+ 1c3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1c6:	6a 01                	push   $0x1
+ 1c8:	50                   	push   %eax
+ 1c9:	6a 00                	push   $0x0
+ 1cb:	e8 2b 01 00 00       	call   2fb <read>
+    if(cc < 1)
+ 1d0:	83 c4 10             	add    $0x10,%esp
+ 1d3:	85 c0                	test   %eax,%eax
+ 1d5:	7e 1c                	jle    1f3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1d7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1db:	83 c7 01             	add    $0x1,%edi
+ 1de:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1e1:	3c 0a                	cmp    $0xa,%al
+ 1e3:	74 23                	je     208 <gets+0x68>
+ 1e5:	3c 0d                	cmp    $0xd,%al
+ 1e7:	74 1f                	je     208 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1e9:	83 c3 01             	add    $0x1,%ebx
+ 1ec:	89 fe                	mov    %edi,%esi
+ 1ee:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1f1:	7c cd                	jl     1c0 <gets+0x20>
+ 1f3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1f8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1fe:	5b                   	pop    %ebx
+ 1ff:	5e                   	pop    %esi
+ 200:	5f                   	pop    %edi
+ 201:	5d                   	pop    %ebp
+ 202:	c3                   	ret    
+ 203:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 207:	90                   	nop
+ 208:	8b 75 08             	mov    0x8(%ebp),%esi
+ 20b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 20e:	01 de                	add    %ebx,%esi
+ 210:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 212:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 215:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 218:	5b                   	pop    %ebx
+ 219:	5e                   	pop    %esi
+ 21a:	5f                   	pop    %edi
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000220 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	56                   	push   %esi
+ 228:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	6a 00                	push   $0x0
+ 22e:	ff 75 08             	pushl  0x8(%ebp)
+ 231:	e8 ed 00 00 00       	call   323 <open>
+  if(fd < 0)
+ 236:	83 c4 10             	add    $0x10,%esp
+ 239:	85 c0                	test   %eax,%eax
+ 23b:	78 2b                	js     268 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 23d:	83 ec 08             	sub    $0x8,%esp
+ 240:	ff 75 0c             	pushl  0xc(%ebp)
+ 243:	89 c3                	mov    %eax,%ebx
+ 245:	50                   	push   %eax
+ 246:	e8 f0 00 00 00       	call   33b <fstat>
+  close(fd);
+ 24b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 24e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 250:	e8 b6 00 00 00       	call   30b <close>
+  return r;
+ 255:	83 c4 10             	add    $0x10,%esp
+}
+ 258:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 25b:	89 f0                	mov    %esi,%eax
+ 25d:	5b                   	pop    %ebx
+ 25e:	5e                   	pop    %esi
+ 25f:	5d                   	pop    %ebp
+ 260:	c3                   	ret    
+ 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 268:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 26d:	eb e9                	jmp    258 <stat+0x38>
+ 26f:	90                   	nop
+
+00000270 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	53                   	push   %ebx
+ 278:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 27b:	0f be 02             	movsbl (%edx),%eax
+ 27e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 281:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 284:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 289:	77 1a                	ja     2a5 <atoi+0x35>
+ 28b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 28f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 290:	83 c2 01             	add    $0x1,%edx
+ 293:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 296:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 29a:	0f be 02             	movsbl (%edx),%eax
+ 29d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 2a0:	80 fb 09             	cmp    $0x9,%bl
+ 2a3:	76 eb                	jbe    290 <atoi+0x20>
+  return n;
+}
+ 2a5:	89 c8                	mov    %ecx,%eax
+ 2a7:	5b                   	pop    %ebx
+ 2a8:	5d                   	pop    %ebp
+ 2a9:	c3                   	ret    
+ 2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000002b0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	57                   	push   %edi
+ 2b8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2bb:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2be:	56                   	push   %esi
+ 2bf:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2c2:	85 c0                	test   %eax,%eax
+ 2c4:	7e 0f                	jle    2d5 <memmove+0x25>
+ 2c6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2c8:	89 d7                	mov    %edx,%edi
+ 2ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2d0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2d1:	39 f8                	cmp    %edi,%eax
+ 2d3:	75 fb                	jne    2d0 <memmove+0x20>
+  return vdst;
+}
+ 2d5:	5e                   	pop    %esi
+ 2d6:	89 d0                	mov    %edx,%eax
+ 2d8:	5f                   	pop    %edi
+ 2d9:	5d                   	pop    %ebp
+ 2da:	c3                   	ret    
+
+000002db <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2db:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <exit>:
+SYSCALL(exit)
+ 2e3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <wait>:
+SYSCALL(wait)
+ 2eb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <pipe>:
+SYSCALL(pipe)
+ 2f3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <read>:
+SYSCALL(read)
+ 2fb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <write>:
+SYSCALL(write)
+ 303:	b8 10 00 00 00       	mov    $0x10,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <close>:
+SYSCALL(close)
+ 30b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <kill>:
+SYSCALL(kill)
+ 313:	b8 06 00 00 00       	mov    $0x6,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <exec>:
+SYSCALL(exec)
+ 31b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <open>:
+SYSCALL(open)
+ 323:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <mknod>:
+SYSCALL(mknod)
+ 32b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <unlink>:
+SYSCALL(unlink)
+ 333:	b8 12 00 00 00       	mov    $0x12,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <fstat>:
+SYSCALL(fstat)
+ 33b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <link>:
+SYSCALL(link)
+ 343:	b8 13 00 00 00       	mov    $0x13,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <mkdir>:
+SYSCALL(mkdir)
+ 34b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <chdir>:
+SYSCALL(chdir)
+ 353:	b8 09 00 00 00       	mov    $0x9,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <dup>:
+SYSCALL(dup)
+ 35b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <getpid>:
+SYSCALL(getpid)
+ 363:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <sbrk>:
+SYSCALL(sbrk)
+ 36b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <sleep>:
+SYSCALL(sleep)
+ 373:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <uptime>:
+SYSCALL(uptime)
+ 37b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <getNumProc>:
+SYSCALL(getNumProc)
+ 383:	b8 16 00 00 00       	mov    $0x16,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 38b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 393:	b8 18 00 00 00       	mov    $0x18,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 39b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <get_burst_time>:
+ 3a3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+ 3ab:	66 90                	xchg   %ax,%ax
+ 3ad:	66 90                	xchg   %ax,%ax
+ 3af:	90                   	nop
+
+000003b0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3b0:	55                   	push   %ebp
+ 3b1:	89 e5                	mov    %esp,%ebp
+ 3b3:	57                   	push   %edi
+ 3b4:	56                   	push   %esi
+ 3b5:	53                   	push   %ebx
+ 3b6:	83 ec 3c             	sub    $0x3c,%esp
+ 3b9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3bc:	89 d1                	mov    %edx,%ecx
+{
+ 3be:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3c1:	85 d2                	test   %edx,%edx
+ 3c3:	0f 89 7f 00 00 00    	jns    448 <printint+0x98>
+ 3c9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3cd:	74 79                	je     448 <printint+0x98>
+    neg = 1;
+ 3cf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3d6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3d8:	31 db                	xor    %ebx,%ebx
+ 3da:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3e0:	89 c8                	mov    %ecx,%eax
+ 3e2:	31 d2                	xor    %edx,%edx
+ 3e4:	89 cf                	mov    %ecx,%edi
+ 3e6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3e9:	0f b6 92 d8 07 00 00 	movzbl 0x7d8(%edx),%edx
+ 3f0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3f3:	89 d8                	mov    %ebx,%eax
+ 3f5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3f8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3fb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3fe:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 401:	76 dd                	jbe    3e0 <printint+0x30>
+  if(neg)
+ 403:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 406:	85 c9                	test   %ecx,%ecx
+ 408:	74 0c                	je     416 <printint+0x66>
+    buf[i++] = '-';
+ 40a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 40f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 411:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 416:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 419:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 41d:	eb 07                	jmp    426 <printint+0x76>
+ 41f:	90                   	nop
+ 420:	0f b6 13             	movzbl (%ebx),%edx
+ 423:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 426:	83 ec 04             	sub    $0x4,%esp
+ 429:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 42c:	6a 01                	push   $0x1
+ 42e:	56                   	push   %esi
+ 42f:	57                   	push   %edi
+ 430:	e8 ce fe ff ff       	call   303 <write>
+  while(--i >= 0)
+ 435:	83 c4 10             	add    $0x10,%esp
+ 438:	39 de                	cmp    %ebx,%esi
+ 43a:	75 e4                	jne    420 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 43c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 43f:	5b                   	pop    %ebx
+ 440:	5e                   	pop    %esi
+ 441:	5f                   	pop    %edi
+ 442:	5d                   	pop    %ebp
+ 443:	c3                   	ret    
+ 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 448:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 44f:	eb 87                	jmp    3d8 <printint+0x28>
+ 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 458:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45f:	90                   	nop
+
+00000460 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 460:	f3 0f 1e fb          	endbr32 
+ 464:	55                   	push   %ebp
+ 465:	89 e5                	mov    %esp,%ebp
+ 467:	57                   	push   %edi
+ 468:	56                   	push   %esi
+ 469:	53                   	push   %ebx
+ 46a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 46d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 470:	0f b6 1e             	movzbl (%esi),%ebx
+ 473:	84 db                	test   %bl,%bl
+ 475:	0f 84 b4 00 00 00    	je     52f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 47b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 47e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 481:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 484:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 486:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 489:	eb 33                	jmp    4be <printf+0x5e>
+ 48b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 48f:	90                   	nop
+ 490:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 493:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	74 17                	je     4b4 <printf+0x54>
+  write(fd, &c, 1);
+ 49d:	83 ec 04             	sub    $0x4,%esp
+ 4a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4a3:	6a 01                	push   $0x1
+ 4a5:	57                   	push   %edi
+ 4a6:	ff 75 08             	pushl  0x8(%ebp)
+ 4a9:	e8 55 fe ff ff       	call   303 <write>
+ 4ae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 4b1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4b4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4b7:	83 c6 01             	add    $0x1,%esi
+ 4ba:	84 db                	test   %bl,%bl
+ 4bc:	74 71                	je     52f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 4be:	0f be cb             	movsbl %bl,%ecx
+ 4c1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4c4:	85 d2                	test   %edx,%edx
+ 4c6:	74 c8                	je     490 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4c8:	83 fa 25             	cmp    $0x25,%edx
+ 4cb:	75 e7                	jne    4b4 <printf+0x54>
+      if(c == 'd'){
+ 4cd:	83 f8 64             	cmp    $0x64,%eax
+ 4d0:	0f 84 9a 00 00 00    	je     570 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4d6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4dc:	83 f9 70             	cmp    $0x70,%ecx
+ 4df:	74 5f                	je     540 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4e1:	83 f8 73             	cmp    $0x73,%eax
+ 4e4:	0f 84 d6 00 00 00    	je     5c0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ea:	83 f8 63             	cmp    $0x63,%eax
+ 4ed:	0f 84 8d 00 00 00    	je     580 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4f3:	83 f8 25             	cmp    $0x25,%eax
+ 4f6:	0f 84 b4 00 00 00    	je     5b0 <printf+0x150>
+  write(fd, &c, 1);
+ 4fc:	83 ec 04             	sub    $0x4,%esp
+ 4ff:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 503:	6a 01                	push   $0x1
+ 505:	57                   	push   %edi
+ 506:	ff 75 08             	pushl  0x8(%ebp)
+ 509:	e8 f5 fd ff ff       	call   303 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 50e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 511:	83 c4 0c             	add    $0xc,%esp
+ 514:	6a 01                	push   $0x1
+ 516:	83 c6 01             	add    $0x1,%esi
+ 519:	57                   	push   %edi
+ 51a:	ff 75 08             	pushl  0x8(%ebp)
+ 51d:	e8 e1 fd ff ff       	call   303 <write>
+  for(i = 0; fmt[i]; i++){
+ 522:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 526:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 529:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 52b:	84 db                	test   %bl,%bl
+ 52d:	75 8f                	jne    4be <printf+0x5e>
+    }
+  }
+}
+ 52f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 532:	5b                   	pop    %ebx
+ 533:	5e                   	pop    %esi
+ 534:	5f                   	pop    %edi
+ 535:	5d                   	pop    %ebp
+ 536:	c3                   	ret    
+ 537:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 540:	83 ec 0c             	sub    $0xc,%esp
+ 543:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 548:	6a 00                	push   $0x0
+ 54a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 54d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 550:	8b 13                	mov    (%ebx),%edx
+ 552:	e8 59 fe ff ff       	call   3b0 <printint>
+        ap++;
+ 557:	89 d8                	mov    %ebx,%eax
+ 559:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 55c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 55e:	83 c0 04             	add    $0x4,%eax
+ 561:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 564:	e9 4b ff ff ff       	jmp    4b4 <printf+0x54>
+ 569:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	eb ce                	jmp    54a <printf+0xea>
+ 57c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 580:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 583:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 586:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 588:	6a 01                	push   $0x1
+        ap++;
+ 58a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 58d:	57                   	push   %edi
+ 58e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 591:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 594:	e8 6a fd ff ff       	call   303 <write>
+        ap++;
+ 599:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 59c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 59f:	31 d2                	xor    %edx,%edx
+ 5a1:	e9 0e ff ff ff       	jmp    4b4 <printf+0x54>
+ 5a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ad:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5b3:	83 ec 04             	sub    $0x4,%esp
+ 5b6:	e9 59 ff ff ff       	jmp    514 <printf+0xb4>
+ 5bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5bf:	90                   	nop
+        s = (char*)*ap;
+ 5c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5c3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5c5:	83 c0 04             	add    $0x4,%eax
+ 5c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5cb:	85 db                	test   %ebx,%ebx
+ 5cd:	74 17                	je     5e6 <printf+0x186>
+        while(*s != 0){
+ 5cf:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5d2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5d4:	84 c0                	test   %al,%al
+ 5d6:	0f 84 d8 fe ff ff    	je     4b4 <printf+0x54>
+ 5dc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5df:	89 de                	mov    %ebx,%esi
+ 5e1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e4:	eb 1a                	jmp    600 <printf+0x1a0>
+          s = "(null)";
+ 5e6:	bb d1 07 00 00       	mov    $0x7d1,%ebx
+        while(*s != 0){
+ 5eb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ee:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5f3:	89 de                	mov    %ebx,%esi
+ 5f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ff:	90                   	nop
+  write(fd, &c, 1);
+ 600:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 603:	83 c6 01             	add    $0x1,%esi
+ 606:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 609:	6a 01                	push   $0x1
+ 60b:	57                   	push   %edi
+ 60c:	53                   	push   %ebx
+ 60d:	e8 f1 fc ff ff       	call   303 <write>
+        while(*s != 0){
+ 612:	0f b6 06             	movzbl (%esi),%eax
+ 615:	83 c4 10             	add    $0x10,%esp
+ 618:	84 c0                	test   %al,%al
+ 61a:	75 e4                	jne    600 <printf+0x1a0>
+ 61c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 61f:	31 d2                	xor    %edx,%edx
+ 621:	e9 8e fe ff ff       	jmp    4b4 <printf+0x54>
+ 626:	66 90                	xchg   %ax,%ax
+ 628:	66 90                	xchg   %ax,%ax
+ 62a:	66 90                	xchg   %ax,%ax
+ 62c:	66 90                	xchg   %ax,%ax
+ 62e:	66 90                	xchg   %ax,%ax
+
+00000630 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 630:	f3 0f 1e fb          	endbr32 
+ 634:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 635:	a1 88 0a 00 00       	mov    0xa88,%eax
+{
+ 63a:	89 e5                	mov    %esp,%ebp
+ 63c:	57                   	push   %edi
+ 63d:	56                   	push   %esi
+ 63e:	53                   	push   %ebx
+ 63f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 642:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 644:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 647:	39 c8                	cmp    %ecx,%eax
+ 649:	73 15                	jae    660 <free+0x30>
+ 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+ 650:	39 d1                	cmp    %edx,%ecx
+ 652:	72 14                	jb     668 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 654:	39 d0                	cmp    %edx,%eax
+ 656:	73 10                	jae    668 <free+0x38>
+{
+ 658:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 65a:	8b 10                	mov    (%eax),%edx
+ 65c:	39 c8                	cmp    %ecx,%eax
+ 65e:	72 f0                	jb     650 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 660:	39 d0                	cmp    %edx,%eax
+ 662:	72 f4                	jb     658 <free+0x28>
+ 664:	39 d1                	cmp    %edx,%ecx
+ 666:	73 f0                	jae    658 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 668:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 66b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 66e:	39 fa                	cmp    %edi,%edx
+ 670:	74 1e                	je     690 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 672:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 675:	8b 50 04             	mov    0x4(%eax),%edx
+ 678:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 67b:	39 f1                	cmp    %esi,%ecx
+ 67d:	74 28                	je     6a7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 67f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 681:	5b                   	pop    %ebx
+  freep = p;
+ 682:	a3 88 0a 00 00       	mov    %eax,0xa88
+}
+ 687:	5e                   	pop    %esi
+ 688:	5f                   	pop    %edi
+ 689:	5d                   	pop    %ebp
+ 68a:	c3                   	ret    
+ 68b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 68f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 690:	03 72 04             	add    0x4(%edx),%esi
+ 693:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 696:	8b 10                	mov    (%eax),%edx
+ 698:	8b 12                	mov    (%edx),%edx
+ 69a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 69d:	8b 50 04             	mov    0x4(%eax),%edx
+ 6a0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6a3:	39 f1                	cmp    %esi,%ecx
+ 6a5:	75 d8                	jne    67f <free+0x4f>
+    p->s.size += bp->s.size;
+ 6a7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6aa:	a3 88 0a 00 00       	mov    %eax,0xa88
+    p->s.size += bp->s.size;
+ 6af:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6b2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6b5:	89 10                	mov    %edx,(%eax)
+}
+ 6b7:	5b                   	pop    %ebx
+ 6b8:	5e                   	pop    %esi
+ 6b9:	5f                   	pop    %edi
+ 6ba:	5d                   	pop    %ebp
+ 6bb:	c3                   	ret    
+ 6bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006c0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6c0:	f3 0f 1e fb          	endbr32 
+ 6c4:	55                   	push   %ebp
+ 6c5:	89 e5                	mov    %esp,%ebp
+ 6c7:	57                   	push   %edi
+ 6c8:	56                   	push   %esi
+ 6c9:	53                   	push   %ebx
+ 6ca:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6d0:	8b 3d 88 0a 00 00    	mov    0xa88,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6d6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6d9:	c1 ee 03             	shr    $0x3,%esi
+ 6dc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6df:	85 ff                	test   %edi,%edi
+ 6e1:	0f 84 a9 00 00 00    	je     790 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6e7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6e9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ec:	39 f1                	cmp    %esi,%ecx
+ 6ee:	73 6d                	jae    75d <malloc+0x9d>
+ 6f0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6f6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6fb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6fe:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 705:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 708:	eb 17                	jmp    721 <malloc+0x61>
+ 70a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 710:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 712:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 715:	39 f1                	cmp    %esi,%ecx
+ 717:	73 4f                	jae    768 <malloc+0xa8>
+ 719:	8b 3d 88 0a 00 00    	mov    0xa88,%edi
+ 71f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 721:	39 c7                	cmp    %eax,%edi
+ 723:	75 eb                	jne    710 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 725:	83 ec 0c             	sub    $0xc,%esp
+ 728:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 72b:	e8 3b fc ff ff       	call   36b <sbrk>
+  if(p == (char*)-1)
+ 730:	83 c4 10             	add    $0x10,%esp
+ 733:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 736:	74 1b                	je     753 <malloc+0x93>
+  hp->s.size = nu;
+ 738:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 73b:	83 ec 0c             	sub    $0xc,%esp
+ 73e:	83 c0 08             	add    $0x8,%eax
+ 741:	50                   	push   %eax
+ 742:	e8 e9 fe ff ff       	call   630 <free>
+  return freep;
+ 747:	a1 88 0a 00 00       	mov    0xa88,%eax
+      if((p = morecore(nunits)) == 0)
+ 74c:	83 c4 10             	add    $0x10,%esp
+ 74f:	85 c0                	test   %eax,%eax
+ 751:	75 bd                	jne    710 <malloc+0x50>
+        return 0;
+  }
+}
+ 753:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 756:	31 c0                	xor    %eax,%eax
+}
+ 758:	5b                   	pop    %ebx
+ 759:	5e                   	pop    %esi
+ 75a:	5f                   	pop    %edi
+ 75b:	5d                   	pop    %ebp
+ 75c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 75d:	89 c2                	mov    %eax,%edx
+ 75f:	89 f8                	mov    %edi,%eax
+ 761:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 768:	39 ce                	cmp    %ecx,%esi
+ 76a:	74 54                	je     7c0 <malloc+0x100>
+        p->s.size -= nunits;
+ 76c:	29 f1                	sub    %esi,%ecx
+ 76e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 771:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 774:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 777:	a3 88 0a 00 00       	mov    %eax,0xa88
+}
+ 77c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 77f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 782:	5b                   	pop    %ebx
+ 783:	5e                   	pop    %esi
+ 784:	5f                   	pop    %edi
+ 785:	5d                   	pop    %ebp
+ 786:	c3                   	ret    
+ 787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 78e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 790:	c7 05 88 0a 00 00 8c 	movl   $0xa8c,0xa88
+ 797:	0a 00 00 
+    base.s.size = 0;
+ 79a:	bf 8c 0a 00 00       	mov    $0xa8c,%edi
+    base.s.ptr = freep = prevp = &base;
+ 79f:	c7 05 8c 0a 00 00 8c 	movl   $0xa8c,0xa8c
+ 7a6:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a9:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 7ab:	c7 05 90 0a 00 00 00 	movl   $0x0,0xa90
+ 7b2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7b5:	e9 36 ff ff ff       	jmp    6f0 <malloc+0x30>
+ 7ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7c0:	8b 0a                	mov    (%edx),%ecx
+ 7c2:	89 08                	mov    %ecx,(%eax)
+ 7c4:	eb b1                	jmp    777 <malloc+0xb7>
diff -ruN xv6-public/echo.d xv6-new/echo.d
--- xv6-public/echo.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/echo.d	2022-10-07 22:43:42.871886833 +0530
@@ -0,0 +1 @@
+echo.o: echo.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/echo.o and xv6-new/echo.o differ
diff -ruN xv6-public/echo.sym xv6-new/echo.sym
--- xv6-public/echo.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/echo.sym	2022-10-07 22:43:42.871886833 +0530
@@ -0,0 +1,62 @@
+00000000 .text
+000007c8 .rodata
+000007ec .eh_frame
+00000a88 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 echo.c
+00000000 ulib.c
+00000000 printf.c
+000003b0 printint
+000007d8 digits.1096
+00000000 umalloc.c
+00000a88 freep
+00000a8c base
+00000080 strcpy
+00000460 printf
+000002b0 memmove
+0000032b mknod
+000001a0 gets
+00000363 getpid
+000006c0 malloc
+00000373 sleep
+000003a3 get_burst_time
+000002f3 pipe
+00000303 write
+0000033b fstat
+00000313 kill
+00000353 chdir
+0000031b exec
+000002eb wait
+000002fb read
+00000333 unlink
+000002db fork
+0000036b sbrk
+0000037b uptime
+00000a88 __bss_start
+00000140 memset
+00000000 main
+0000039b set_burst_time
+000000b0 strcmp
+0000035b dup
+0000038b getMaxPid
+00000383 getNumProc
+00000393 getProcInfo
+00000220 stat
+00000a88 _edata
+00000a94 _end
+00000343 link
+000002e3 exit
+00000270 atoi
+00000100 strlen
+00000323 open
+00000160 strchr
+0000034b mkdir
+0000030b close
+00000630 free
Binary files xv6-public/exec.o and xv6-new/exec.o differ
Binary files xv6-public/file.o and xv6-new/file.o differ
diff -ruN xv6-public/forktest.asm xv6-new/forktest.asm
--- xv6-public/forktest.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/forktest.asm	2022-10-07 22:43:42.871886833 +0530
@@ -0,0 +1,708 @@
+
+_forktest:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  printf(1, "fork test OK\n");
+}
+
+int
+main(void)
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	55                   	push   %ebp
+   5:	89 e5                	mov    %esp,%ebp
+   7:	83 e4 f0             	and    $0xfffffff0,%esp
+  forktest();
+   a:	e8 41 00 00 00       	call   50 <forktest>
+  exit();
+   f:	e8 9f 03 00 00       	call   3b3 <exit>
+  14:	66 90                	xchg   %ax,%ax
+  16:	66 90                	xchg   %ax,%ax
+  18:	66 90                	xchg   %ax,%ax
+  1a:	66 90                	xchg   %ax,%ax
+  1c:	66 90                	xchg   %ax,%ax
+  1e:	66 90                	xchg   %ax,%ax
+
+00000020 <printf>:
+{
+  20:	f3 0f 1e fb          	endbr32 
+  24:	55                   	push   %ebp
+  25:	89 e5                	mov    %esp,%ebp
+  27:	53                   	push   %ebx
+  28:	83 ec 10             	sub    $0x10,%esp
+  2b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  write(fd, s, strlen(s));
+  2e:	53                   	push   %ebx
+  2f:	e8 9c 01 00 00       	call   1d0 <strlen>
+  34:	83 c4 0c             	add    $0xc,%esp
+  37:	50                   	push   %eax
+  38:	53                   	push   %ebx
+  39:	ff 75 08             	pushl  0x8(%ebp)
+  3c:	e8 92 03 00 00       	call   3d3 <write>
+}
+  41:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  44:	83 c4 10             	add    $0x10,%esp
+  47:	c9                   	leave  
+  48:	c3                   	ret    
+  49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000050 <forktest>:
+{
+  50:	f3 0f 1e fb          	endbr32 
+  54:	55                   	push   %ebp
+  55:	89 e5                	mov    %esp,%ebp
+  57:	53                   	push   %ebx
+  for(n=0; n<N; n++){
+  58:	31 db                	xor    %ebx,%ebx
+{
+  5a:	83 ec 10             	sub    $0x10,%esp
+  write(fd, s, strlen(s));
+  5d:	68 7c 04 00 00       	push   $0x47c
+  62:	e8 69 01 00 00       	call   1d0 <strlen>
+  67:	83 c4 0c             	add    $0xc,%esp
+  6a:	50                   	push   %eax
+  6b:	68 7c 04 00 00       	push   $0x47c
+  70:	6a 01                	push   $0x1
+  72:	e8 5c 03 00 00       	call   3d3 <write>
+  77:	83 c4 10             	add    $0x10,%esp
+  7a:	eb 15                	jmp    91 <forktest+0x41>
+  7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(pid == 0)
+  80:	74 58                	je     da <forktest+0x8a>
+  for(n=0; n<N; n++){
+  82:	83 c3 01             	add    $0x1,%ebx
+  85:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
+  8b:	0f 84 92 00 00 00    	je     123 <forktest+0xd3>
+    pid = fork();
+  91:	e8 15 03 00 00       	call   3ab <fork>
+    if(pid < 0)
+  96:	85 c0                	test   %eax,%eax
+  98:	79 e6                	jns    80 <forktest+0x30>
+  for(; n > 0; n--){
+  9a:	85 db                	test   %ebx,%ebx
+  9c:	74 10                	je     ae <forktest+0x5e>
+  9e:	66 90                	xchg   %ax,%ax
+    if(wait() < 0){
+  a0:	e8 16 03 00 00       	call   3bb <wait>
+  a5:	85 c0                	test   %eax,%eax
+  a7:	78 36                	js     df <forktest+0x8f>
+  for(; n > 0; n--){
+  a9:	83 eb 01             	sub    $0x1,%ebx
+  ac:	75 f2                	jne    a0 <forktest+0x50>
+  if(wait() != -1){
+  ae:	e8 08 03 00 00       	call   3bb <wait>
+  b3:	83 f8 ff             	cmp    $0xffffffff,%eax
+  b6:	75 49                	jne    101 <forktest+0xb1>
+  write(fd, s, strlen(s));
+  b8:	83 ec 0c             	sub    $0xc,%esp
+  bb:	68 ae 04 00 00       	push   $0x4ae
+  c0:	e8 0b 01 00 00       	call   1d0 <strlen>
+  c5:	83 c4 0c             	add    $0xc,%esp
+  c8:	50                   	push   %eax
+  c9:	68 ae 04 00 00       	push   $0x4ae
+  ce:	6a 01                	push   $0x1
+  d0:	e8 fe 02 00 00       	call   3d3 <write>
+}
+  d5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  d8:	c9                   	leave  
+  d9:	c3                   	ret    
+      exit();
+  da:	e8 d4 02 00 00       	call   3b3 <exit>
+  write(fd, s, strlen(s));
+  df:	83 ec 0c             	sub    $0xc,%esp
+  e2:	68 87 04 00 00       	push   $0x487
+  e7:	e8 e4 00 00 00       	call   1d0 <strlen>
+  ec:	83 c4 0c             	add    $0xc,%esp
+  ef:	50                   	push   %eax
+  f0:	68 87 04 00 00       	push   $0x487
+  f5:	6a 01                	push   $0x1
+  f7:	e8 d7 02 00 00       	call   3d3 <write>
+      exit();
+  fc:	e8 b2 02 00 00       	call   3b3 <exit>
+  write(fd, s, strlen(s));
+ 101:	83 ec 0c             	sub    $0xc,%esp
+ 104:	68 9b 04 00 00       	push   $0x49b
+ 109:	e8 c2 00 00 00       	call   1d0 <strlen>
+ 10e:	83 c4 0c             	add    $0xc,%esp
+ 111:	50                   	push   %eax
+ 112:	68 9b 04 00 00       	push   $0x49b
+ 117:	6a 01                	push   $0x1
+ 119:	e8 b5 02 00 00       	call   3d3 <write>
+    exit();
+ 11e:	e8 90 02 00 00       	call   3b3 <exit>
+  write(fd, s, strlen(s));
+ 123:	83 ec 0c             	sub    $0xc,%esp
+ 126:	68 bc 04 00 00       	push   $0x4bc
+ 12b:	e8 a0 00 00 00       	call   1d0 <strlen>
+ 130:	83 c4 0c             	add    $0xc,%esp
+ 133:	50                   	push   %eax
+ 134:	68 bc 04 00 00       	push   $0x4bc
+ 139:	6a 01                	push   $0x1
+ 13b:	e8 93 02 00 00       	call   3d3 <write>
+    exit();
+ 140:	e8 6e 02 00 00       	call   3b3 <exit>
+ 145:	66 90                	xchg   %ax,%ax
+ 147:	66 90                	xchg   %ax,%ax
+ 149:	66 90                	xchg   %ax,%ax
+ 14b:	66 90                	xchg   %ax,%ax
+ 14d:	66 90                	xchg   %ax,%ax
+ 14f:	90                   	nop
+
+00000150 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 150:	f3 0f 1e fb          	endbr32 
+ 154:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 155:	31 c0                	xor    %eax,%eax
+{
+ 157:	89 e5                	mov    %esp,%ebp
+ 159:	53                   	push   %ebx
+ 15a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 15d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 160:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 164:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 167:	83 c0 01             	add    $0x1,%eax
+ 16a:	84 d2                	test   %dl,%dl
+ 16c:	75 f2                	jne    160 <strcpy+0x10>
+    ;
+  return os;
+}
+ 16e:	89 c8                	mov    %ecx,%eax
+ 170:	5b                   	pop    %ebx
+ 171:	5d                   	pop    %ebp
+ 172:	c3                   	ret    
+ 173:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000180 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 180:	f3 0f 1e fb          	endbr32 
+ 184:	55                   	push   %ebp
+ 185:	89 e5                	mov    %esp,%ebp
+ 187:	53                   	push   %ebx
+ 188:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 18b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 18e:	0f b6 01             	movzbl (%ecx),%eax
+ 191:	0f b6 1a             	movzbl (%edx),%ebx
+ 194:	84 c0                	test   %al,%al
+ 196:	75 19                	jne    1b1 <strcmp+0x31>
+ 198:	eb 26                	jmp    1c0 <strcmp+0x40>
+ 19a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1a0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 1a4:	83 c1 01             	add    $0x1,%ecx
+ 1a7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 1aa:	0f b6 1a             	movzbl (%edx),%ebx
+ 1ad:	84 c0                	test   %al,%al
+ 1af:	74 0f                	je     1c0 <strcmp+0x40>
+ 1b1:	38 d8                	cmp    %bl,%al
+ 1b3:	74 eb                	je     1a0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 1b5:	29 d8                	sub    %ebx,%eax
+}
+ 1b7:	5b                   	pop    %ebx
+ 1b8:	5d                   	pop    %ebp
+ 1b9:	c3                   	ret    
+ 1ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1c0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 1c2:	29 d8                	sub    %ebx,%eax
+}
+ 1c4:	5b                   	pop    %ebx
+ 1c5:	5d                   	pop    %ebp
+ 1c6:	c3                   	ret    
+ 1c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ce:	66 90                	xchg   %ax,%ax
+
+000001d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1d0:	f3 0f 1e fb          	endbr32 
+ 1d4:	55                   	push   %ebp
+ 1d5:	89 e5                	mov    %esp,%ebp
+ 1d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1da:	80 3a 00             	cmpb   $0x0,(%edx)
+ 1dd:	74 21                	je     200 <strlen+0x30>
+ 1df:	31 c0                	xor    %eax,%eax
+ 1e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1e8:	83 c0 01             	add    $0x1,%eax
+ 1eb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 1ef:	89 c1                	mov    %eax,%ecx
+ 1f1:	75 f5                	jne    1e8 <strlen+0x18>
+    ;
+  return n;
+}
+ 1f3:	89 c8                	mov    %ecx,%eax
+ 1f5:	5d                   	pop    %ebp
+ 1f6:	c3                   	ret    
+ 1f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1fe:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 200:	31 c9                	xor    %ecx,%ecx
+}
+ 202:	5d                   	pop    %ebp
+ 203:	89 c8                	mov    %ecx,%eax
+ 205:	c3                   	ret    
+ 206:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000210 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 210:	f3 0f 1e fb          	endbr32 
+ 214:	55                   	push   %ebp
+ 215:	89 e5                	mov    %esp,%ebp
+ 217:	57                   	push   %edi
+ 218:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 21b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 21e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 221:	89 d7                	mov    %edx,%edi
+ 223:	fc                   	cld    
+ 224:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 226:	89 d0                	mov    %edx,%eax
+ 228:	5f                   	pop    %edi
+ 229:	5d                   	pop    %ebp
+ 22a:	c3                   	ret    
+ 22b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 22f:	90                   	nop
+
+00000230 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 230:	f3 0f 1e fb          	endbr32 
+ 234:	55                   	push   %ebp
+ 235:	89 e5                	mov    %esp,%ebp
+ 237:	8b 45 08             	mov    0x8(%ebp),%eax
+ 23a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 23e:	0f b6 10             	movzbl (%eax),%edx
+ 241:	84 d2                	test   %dl,%dl
+ 243:	75 16                	jne    25b <strchr+0x2b>
+ 245:	eb 21                	jmp    268 <strchr+0x38>
+ 247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24e:	66 90                	xchg   %ax,%ax
+ 250:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 254:	83 c0 01             	add    $0x1,%eax
+ 257:	84 d2                	test   %dl,%dl
+ 259:	74 0d                	je     268 <strchr+0x38>
+    if(*s == c)
+ 25b:	38 d1                	cmp    %dl,%cl
+ 25d:	75 f1                	jne    250 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 25f:	5d                   	pop    %ebp
+ 260:	c3                   	ret    
+ 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 268:	31 c0                	xor    %eax,%eax
+}
+ 26a:	5d                   	pop    %ebp
+ 26b:	c3                   	ret    
+ 26c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000270 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	57                   	push   %edi
+ 278:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 279:	31 f6                	xor    %esi,%esi
+{
+ 27b:	53                   	push   %ebx
+ 27c:	89 f3                	mov    %esi,%ebx
+ 27e:	83 ec 1c             	sub    $0x1c,%esp
+ 281:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 284:	eb 33                	jmp    2b9 <gets+0x49>
+ 286:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 28d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 290:	83 ec 04             	sub    $0x4,%esp
+ 293:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 296:	6a 01                	push   $0x1
+ 298:	50                   	push   %eax
+ 299:	6a 00                	push   $0x0
+ 29b:	e8 2b 01 00 00       	call   3cb <read>
+    if(cc < 1)
+ 2a0:	83 c4 10             	add    $0x10,%esp
+ 2a3:	85 c0                	test   %eax,%eax
+ 2a5:	7e 1c                	jle    2c3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 2a7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 2ab:	83 c7 01             	add    $0x1,%edi
+ 2ae:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 2b1:	3c 0a                	cmp    $0xa,%al
+ 2b3:	74 23                	je     2d8 <gets+0x68>
+ 2b5:	3c 0d                	cmp    $0xd,%al
+ 2b7:	74 1f                	je     2d8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 2b9:	83 c3 01             	add    $0x1,%ebx
+ 2bc:	89 fe                	mov    %edi,%esi
+ 2be:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 2c1:	7c cd                	jl     290 <gets+0x20>
+ 2c3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 2c5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 2c8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2cb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2ce:	5b                   	pop    %ebx
+ 2cf:	5e                   	pop    %esi
+ 2d0:	5f                   	pop    %edi
+ 2d1:	5d                   	pop    %ebp
+ 2d2:	c3                   	ret    
+ 2d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2d7:	90                   	nop
+ 2d8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 2db:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2de:	01 de                	add    %ebx,%esi
+ 2e0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2e2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2e5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2e8:	5b                   	pop    %ebx
+ 2e9:	5e                   	pop    %esi
+ 2ea:	5f                   	pop    %edi
+ 2eb:	5d                   	pop    %ebp
+ 2ec:	c3                   	ret    
+ 2ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000002f0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2f0:	f3 0f 1e fb          	endbr32 
+ 2f4:	55                   	push   %ebp
+ 2f5:	89 e5                	mov    %esp,%ebp
+ 2f7:	56                   	push   %esi
+ 2f8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2f9:	83 ec 08             	sub    $0x8,%esp
+ 2fc:	6a 00                	push   $0x0
+ 2fe:	ff 75 08             	pushl  0x8(%ebp)
+ 301:	e8 ed 00 00 00       	call   3f3 <open>
+  if(fd < 0)
+ 306:	83 c4 10             	add    $0x10,%esp
+ 309:	85 c0                	test   %eax,%eax
+ 30b:	78 2b                	js     338 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 30d:	83 ec 08             	sub    $0x8,%esp
+ 310:	ff 75 0c             	pushl  0xc(%ebp)
+ 313:	89 c3                	mov    %eax,%ebx
+ 315:	50                   	push   %eax
+ 316:	e8 f0 00 00 00       	call   40b <fstat>
+  close(fd);
+ 31b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 31e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 320:	e8 b6 00 00 00       	call   3db <close>
+  return r;
+ 325:	83 c4 10             	add    $0x10,%esp
+}
+ 328:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 32b:	89 f0                	mov    %esi,%eax
+ 32d:	5b                   	pop    %ebx
+ 32e:	5e                   	pop    %esi
+ 32f:	5d                   	pop    %ebp
+ 330:	c3                   	ret    
+ 331:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 338:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 33d:	eb e9                	jmp    328 <stat+0x38>
+ 33f:	90                   	nop
+
+00000340 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 340:	f3 0f 1e fb          	endbr32 
+ 344:	55                   	push   %ebp
+ 345:	89 e5                	mov    %esp,%ebp
+ 347:	53                   	push   %ebx
+ 348:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 34b:	0f be 02             	movsbl (%edx),%eax
+ 34e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 351:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 354:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 359:	77 1a                	ja     375 <atoi+0x35>
+ 35b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 35f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 360:	83 c2 01             	add    $0x1,%edx
+ 363:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 366:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 36a:	0f be 02             	movsbl (%edx),%eax
+ 36d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 370:	80 fb 09             	cmp    $0x9,%bl
+ 373:	76 eb                	jbe    360 <atoi+0x20>
+  return n;
+}
+ 375:	89 c8                	mov    %ecx,%eax
+ 377:	5b                   	pop    %ebx
+ 378:	5d                   	pop    %ebp
+ 379:	c3                   	ret    
+ 37a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000380 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 380:	f3 0f 1e fb          	endbr32 
+ 384:	55                   	push   %ebp
+ 385:	89 e5                	mov    %esp,%ebp
+ 387:	57                   	push   %edi
+ 388:	8b 45 10             	mov    0x10(%ebp),%eax
+ 38b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 38e:	56                   	push   %esi
+ 38f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 392:	85 c0                	test   %eax,%eax
+ 394:	7e 0f                	jle    3a5 <memmove+0x25>
+ 396:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 398:	89 d7                	mov    %edx,%edi
+ 39a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 3a0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 3a1:	39 f8                	cmp    %edi,%eax
+ 3a3:	75 fb                	jne    3a0 <memmove+0x20>
+  return vdst;
+}
+ 3a5:	5e                   	pop    %esi
+ 3a6:	89 d0                	mov    %edx,%eax
+ 3a8:	5f                   	pop    %edi
+ 3a9:	5d                   	pop    %ebp
+ 3aa:	c3                   	ret    
+
+000003ab <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 3ab:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <exit>:
+SYSCALL(exit)
+ 3b3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <wait>:
+SYSCALL(wait)
+ 3bb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <pipe>:
+SYSCALL(pipe)
+ 3c3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <read>:
+SYSCALL(read)
+ 3cb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <write>:
+SYSCALL(write)
+ 3d3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <close>:
+SYSCALL(close)
+ 3db:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <kill>:
+SYSCALL(kill)
+ 3e3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <exec>:
+SYSCALL(exec)
+ 3eb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <open>:
+SYSCALL(open)
+ 3f3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <mknod>:
+SYSCALL(mknod)
+ 3fb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <unlink>:
+SYSCALL(unlink)
+ 403:	b8 12 00 00 00       	mov    $0x12,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <fstat>:
+SYSCALL(fstat)
+ 40b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <link>:
+SYSCALL(link)
+ 413:	b8 13 00 00 00       	mov    $0x13,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <mkdir>:
+SYSCALL(mkdir)
+ 41b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <chdir>:
+SYSCALL(chdir)
+ 423:	b8 09 00 00 00       	mov    $0x9,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <dup>:
+SYSCALL(dup)
+ 42b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <getpid>:
+SYSCALL(getpid)
+ 433:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <sbrk>:
+SYSCALL(sbrk)
+ 43b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <sleep>:
+SYSCALL(sleep)
+ 443:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <uptime>:
+SYSCALL(uptime)
+ 44b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+
+00000453 <getNumProc>:
+SYSCALL(getNumProc)
+ 453:	b8 16 00 00 00       	mov    $0x16,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+
+0000045b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 45b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 460:	cd 40                	int    $0x40
+ 462:	c3                   	ret    
+
+00000463 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 463:	b8 18 00 00 00       	mov    $0x18,%eax
+ 468:	cd 40                	int    $0x40
+ 46a:	c3                   	ret    
+
+0000046b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 46b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 470:	cd 40                	int    $0x40
+ 472:	c3                   	ret    
+
+00000473 <get_burst_time>:
+ 473:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 478:	cd 40                	int    $0x40
+ 47a:	c3                   	ret    
diff -ruN xv6-public/forktest.d xv6-new/forktest.d
--- xv6-public/forktest.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/forktest.d	2022-10-07 22:43:42.871886833 +0530
@@ -0,0 +1 @@
+forktest.o: forktest.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/forktest.o and xv6-new/forktest.o differ
Binary files xv6-public/fs.img and xv6-new/fs.img differ
Binary files xv6-public/fs.o and xv6-new/fs.o differ
diff -ruN xv6-public/grep.asm xv6-new/grep.asm
--- xv6-public/grep.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/grep.asm	2022-10-07 22:43:42.871886833 +0530
@@ -0,0 +1,1590 @@
+
+_grep:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	53                   	push   %ebx
+  14:	51                   	push   %ecx
+  15:	83 ec 18             	sub    $0x18,%esp
+  18:	8b 01                	mov    (%ecx),%eax
+  1a:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  int fd, i;
+  char *pattern;
+
+  if(argc <= 1){
+  20:	83 f8 01             	cmp    $0x1,%eax
+  23:	7e 6b                	jle    90 <main+0x90>
+    printf(2, "usage: grep pattern [file ...]\n");
+    exit();
+  }
+  pattern = argv[1];
+  25:	8b 43 04             	mov    0x4(%ebx),%eax
+  28:	83 c3 08             	add    $0x8,%ebx
+
+  if(argc <= 2){
+  2b:	83 7d e4 02          	cmpl   $0x2,-0x1c(%ebp)
+    grep(pattern, 0);
+    exit();
+  }
+
+  for(i = 2; i < argc; i++){
+  2f:	be 02 00 00 00       	mov    $0x2,%esi
+  pattern = argv[1];
+  34:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  if(argc <= 2){
+  37:	75 29                	jne    62 <main+0x62>
+  39:	eb 68                	jmp    a3 <main+0xa3>
+  3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  3f:	90                   	nop
+    if((fd = open(argv[i], 0)) < 0){
+      printf(1, "grep: cannot open %s\n", argv[i]);
+      exit();
+    }
+    grep(pattern, fd);
+  40:	83 ec 08             	sub    $0x8,%esp
+  for(i = 2; i < argc; i++){
+  43:	83 c6 01             	add    $0x1,%esi
+  46:	83 c3 04             	add    $0x4,%ebx
+    grep(pattern, fd);
+  49:	50                   	push   %eax
+  4a:	ff 75 e0             	pushl  -0x20(%ebp)
+  4d:	e8 de 01 00 00       	call   230 <grep>
+    close(fd);
+  52:	89 3c 24             	mov    %edi,(%esp)
+  55:	e8 71 05 00 00       	call   5cb <close>
+  for(i = 2; i < argc; i++){
+  5a:	83 c4 10             	add    $0x10,%esp
+  5d:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  60:	7e 29                	jle    8b <main+0x8b>
+    if((fd = open(argv[i], 0)) < 0){
+  62:	83 ec 08             	sub    $0x8,%esp
+  65:	6a 00                	push   $0x0
+  67:	ff 33                	pushl  (%ebx)
+  69:	e8 75 05 00 00       	call   5e3 <open>
+  6e:	83 c4 10             	add    $0x10,%esp
+  71:	89 c7                	mov    %eax,%edi
+  73:	85 c0                	test   %eax,%eax
+  75:	79 c9                	jns    40 <main+0x40>
+      printf(1, "grep: cannot open %s\n", argv[i]);
+  77:	50                   	push   %eax
+  78:	ff 33                	pushl  (%ebx)
+  7a:	68 a8 0a 00 00       	push   $0xaa8
+  7f:	6a 01                	push   $0x1
+  81:	e8 9a 06 00 00       	call   720 <printf>
+      exit();
+  86:	e8 18 05 00 00       	call   5a3 <exit>
+  }
+  exit();
+  8b:	e8 13 05 00 00       	call   5a3 <exit>
+    printf(2, "usage: grep pattern [file ...]\n");
+  90:	51                   	push   %ecx
+  91:	51                   	push   %ecx
+  92:	68 88 0a 00 00       	push   $0xa88
+  97:	6a 02                	push   $0x2
+  99:	e8 82 06 00 00       	call   720 <printf>
+    exit();
+  9e:	e8 00 05 00 00       	call   5a3 <exit>
+    grep(pattern, 0);
+  a3:	52                   	push   %edx
+  a4:	52                   	push   %edx
+  a5:	6a 00                	push   $0x0
+  a7:	50                   	push   %eax
+  a8:	e8 83 01 00 00       	call   230 <grep>
+    exit();
+  ad:	e8 f1 04 00 00       	call   5a3 <exit>
+  b2:	66 90                	xchg   %ax,%ax
+  b4:	66 90                	xchg   %ax,%ax
+  b6:	66 90                	xchg   %ax,%ax
+  b8:	66 90                	xchg   %ax,%ax
+  ba:	66 90                	xchg   %ax,%ax
+  bc:	66 90                	xchg   %ax,%ax
+  be:	66 90                	xchg   %ax,%ax
+
+000000c0 <matchstar>:
+  return 0;
+}
+
+// matchstar: search for c*re at beginning of text
+int matchstar(int c, char *re, char *text)
+{
+  c0:	f3 0f 1e fb          	endbr32 
+  c4:	55                   	push   %ebp
+  c5:	89 e5                	mov    %esp,%ebp
+  c7:	57                   	push   %edi
+  c8:	56                   	push   %esi
+  c9:	53                   	push   %ebx
+  ca:	83 ec 0c             	sub    $0xc,%esp
+  cd:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  d0:	8b 75 0c             	mov    0xc(%ebp),%esi
+  d3:	8b 7d 10             	mov    0x10(%ebp),%edi
+  d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  dd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{  // a * matches zero or more instances
+    if(matchhere(re, text))
+  e0:	83 ec 08             	sub    $0x8,%esp
+  e3:	57                   	push   %edi
+  e4:	56                   	push   %esi
+  e5:	e8 36 00 00 00       	call   120 <matchhere>
+  ea:	83 c4 10             	add    $0x10,%esp
+  ed:	85 c0                	test   %eax,%eax
+  ef:	75 1f                	jne    110 <matchstar+0x50>
+      return 1;
+  }while(*text!='\0' && (*text++==c || c=='.'));
+  f1:	0f be 17             	movsbl (%edi),%edx
+  f4:	84 d2                	test   %dl,%dl
+  f6:	74 0c                	je     104 <matchstar+0x44>
+  f8:	83 c7 01             	add    $0x1,%edi
+  fb:	39 da                	cmp    %ebx,%edx
+  fd:	74 e1                	je     e0 <matchstar+0x20>
+  ff:	83 fb 2e             	cmp    $0x2e,%ebx
+ 102:	74 dc                	je     e0 <matchstar+0x20>
+  return 0;
+}
+ 104:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 107:	5b                   	pop    %ebx
+ 108:	5e                   	pop    %esi
+ 109:	5f                   	pop    %edi
+ 10a:	5d                   	pop    %ebp
+ 10b:	c3                   	ret    
+ 10c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 110:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return 1;
+ 113:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 118:	5b                   	pop    %ebx
+ 119:	5e                   	pop    %esi
+ 11a:	5f                   	pop    %edi
+ 11b:	5d                   	pop    %ebp
+ 11c:	c3                   	ret    
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000120 <matchhere>:
+{
+ 120:	f3 0f 1e fb          	endbr32 
+ 124:	55                   	push   %ebp
+ 125:	89 e5                	mov    %esp,%ebp
+ 127:	57                   	push   %edi
+ 128:	56                   	push   %esi
+ 129:	53                   	push   %ebx
+ 12a:	83 ec 0c             	sub    $0xc,%esp
+ 12d:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 130:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  if(re[0] == '\0')
+ 133:	0f b6 01             	movzbl (%ecx),%eax
+ 136:	84 c0                	test   %al,%al
+ 138:	75 2b                	jne    165 <matchhere+0x45>
+ 13a:	eb 64                	jmp    1a0 <matchhere+0x80>
+ 13c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  if(re[0] == '$' && re[1] == '\0')
+ 140:	0f b6 37             	movzbl (%edi),%esi
+ 143:	80 fa 24             	cmp    $0x24,%dl
+ 146:	75 04                	jne    14c <matchhere+0x2c>
+ 148:	84 c0                	test   %al,%al
+ 14a:	74 61                	je     1ad <matchhere+0x8d>
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+ 14c:	89 f3                	mov    %esi,%ebx
+ 14e:	84 db                	test   %bl,%bl
+ 150:	74 3e                	je     190 <matchhere+0x70>
+ 152:	80 fa 2e             	cmp    $0x2e,%dl
+ 155:	74 04                	je     15b <matchhere+0x3b>
+ 157:	38 d3                	cmp    %dl,%bl
+ 159:	75 35                	jne    190 <matchhere+0x70>
+    return matchhere(re+1, text+1);
+ 15b:	83 c7 01             	add    $0x1,%edi
+ 15e:	83 c1 01             	add    $0x1,%ecx
+  if(re[0] == '\0')
+ 161:	84 c0                	test   %al,%al
+ 163:	74 3b                	je     1a0 <matchhere+0x80>
+  if(re[1] == '*')
+ 165:	0f be d0             	movsbl %al,%edx
+ 168:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+ 16c:	3c 2a                	cmp    $0x2a,%al
+ 16e:	75 d0                	jne    140 <matchhere+0x20>
+    return matchstar(re[0], re+2, text);
+ 170:	83 ec 04             	sub    $0x4,%esp
+ 173:	83 c1 02             	add    $0x2,%ecx
+ 176:	57                   	push   %edi
+ 177:	51                   	push   %ecx
+ 178:	52                   	push   %edx
+ 179:	e8 42 ff ff ff       	call   c0 <matchstar>
+ 17e:	83 c4 10             	add    $0x10,%esp
+}
+ 181:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 184:	5b                   	pop    %ebx
+ 185:	5e                   	pop    %esi
+ 186:	5f                   	pop    %edi
+ 187:	5d                   	pop    %ebp
+ 188:	c3                   	ret    
+ 189:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 190:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+ 193:	31 c0                	xor    %eax,%eax
+}
+ 195:	5b                   	pop    %ebx
+ 196:	5e                   	pop    %esi
+ 197:	5f                   	pop    %edi
+ 198:	5d                   	pop    %ebp
+ 199:	c3                   	ret    
+ 19a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return 1;
+ 1a3:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 1a8:	5b                   	pop    %ebx
+ 1a9:	5e                   	pop    %esi
+ 1aa:	5f                   	pop    %edi
+ 1ab:	5d                   	pop    %ebp
+ 1ac:	c3                   	ret    
+    return *text == '\0';
+ 1ad:	89 f0                	mov    %esi,%eax
+ 1af:	84 c0                	test   %al,%al
+ 1b1:	0f 94 c0             	sete   %al
+ 1b4:	0f b6 c0             	movzbl %al,%eax
+ 1b7:	eb c8                	jmp    181 <matchhere+0x61>
+ 1b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000001c0 <match>:
+{
+ 1c0:	f3 0f 1e fb          	endbr32 
+ 1c4:	55                   	push   %ebp
+ 1c5:	89 e5                	mov    %esp,%ebp
+ 1c7:	56                   	push   %esi
+ 1c8:	53                   	push   %ebx
+ 1c9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 1cc:	8b 75 0c             	mov    0xc(%ebp),%esi
+  if(re[0] == '^')
+ 1cf:	80 3b 5e             	cmpb   $0x5e,(%ebx)
+ 1d2:	75 15                	jne    1e9 <match+0x29>
+ 1d4:	eb 3a                	jmp    210 <match+0x50>
+ 1d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1dd:	8d 76 00             	lea    0x0(%esi),%esi
+  }while(*text++ != '\0');
+ 1e0:	83 c6 01             	add    $0x1,%esi
+ 1e3:	80 7e ff 00          	cmpb   $0x0,-0x1(%esi)
+ 1e7:	74 16                	je     1ff <match+0x3f>
+    if(matchhere(re, text))
+ 1e9:	83 ec 08             	sub    $0x8,%esp
+ 1ec:	56                   	push   %esi
+ 1ed:	53                   	push   %ebx
+ 1ee:	e8 2d ff ff ff       	call   120 <matchhere>
+ 1f3:	83 c4 10             	add    $0x10,%esp
+ 1f6:	85 c0                	test   %eax,%eax
+ 1f8:	74 e6                	je     1e0 <match+0x20>
+      return 1;
+ 1fa:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 1ff:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 202:	5b                   	pop    %ebx
+ 203:	5e                   	pop    %esi
+ 204:	5d                   	pop    %ebp
+ 205:	c3                   	ret    
+ 206:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20d:	8d 76 00             	lea    0x0(%esi),%esi
+    return matchhere(re+1, text);
+ 210:	83 c3 01             	add    $0x1,%ebx
+ 213:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+ 216:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 219:	5b                   	pop    %ebx
+ 21a:	5e                   	pop    %esi
+ 21b:	5d                   	pop    %ebp
+    return matchhere(re+1, text);
+ 21c:	e9 ff fe ff ff       	jmp    120 <matchhere>
+ 221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 228:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22f:	90                   	nop
+
+00000230 <grep>:
+{
+ 230:	f3 0f 1e fb          	endbr32 
+ 234:	55                   	push   %ebp
+ 235:	89 e5                	mov    %esp,%ebp
+ 237:	57                   	push   %edi
+ 238:	56                   	push   %esi
+ 239:	53                   	push   %ebx
+ 23a:	83 ec 1c             	sub    $0x1c,%esp
+  m = 0;
+ 23d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+{
+ 244:	8b 75 08             	mov    0x8(%ebp),%esi
+ 247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24e:	66 90                	xchg   %ax,%ax
+  while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
+ 250:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+ 253:	b8 ff 03 00 00       	mov    $0x3ff,%eax
+ 258:	83 ec 04             	sub    $0x4,%esp
+ 25b:	29 c8                	sub    %ecx,%eax
+ 25d:	50                   	push   %eax
+ 25e:	8d 81 a0 0e 00 00    	lea    0xea0(%ecx),%eax
+ 264:	50                   	push   %eax
+ 265:	ff 75 0c             	pushl  0xc(%ebp)
+ 268:	e8 4e 03 00 00       	call   5bb <read>
+ 26d:	83 c4 10             	add    $0x10,%esp
+ 270:	85 c0                	test   %eax,%eax
+ 272:	0f 8e b8 00 00 00    	jle    330 <grep+0x100>
+    m += n;
+ 278:	01 45 e4             	add    %eax,-0x1c(%ebp)
+ 27b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+    p = buf;
+ 27e:	bb a0 0e 00 00       	mov    $0xea0,%ebx
+    buf[m] = '\0';
+ 283:	c6 81 a0 0e 00 00 00 	movb   $0x0,0xea0(%ecx)
+    while((q = strchr(p, '\n')) != 0){
+ 28a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 290:	83 ec 08             	sub    $0x8,%esp
+ 293:	6a 0a                	push   $0xa
+ 295:	53                   	push   %ebx
+ 296:	e8 85 01 00 00       	call   420 <strchr>
+ 29b:	83 c4 10             	add    $0x10,%esp
+ 29e:	89 c7                	mov    %eax,%edi
+ 2a0:	85 c0                	test   %eax,%eax
+ 2a2:	74 3c                	je     2e0 <grep+0xb0>
+      if(match(pattern, p)){
+ 2a4:	83 ec 08             	sub    $0x8,%esp
+      *q = 0;
+ 2a7:	c6 07 00             	movb   $0x0,(%edi)
+      if(match(pattern, p)){
+ 2aa:	53                   	push   %ebx
+ 2ab:	56                   	push   %esi
+ 2ac:	e8 0f ff ff ff       	call   1c0 <match>
+ 2b1:	83 c4 10             	add    $0x10,%esp
+ 2b4:	8d 57 01             	lea    0x1(%edi),%edx
+ 2b7:	85 c0                	test   %eax,%eax
+ 2b9:	75 05                	jne    2c0 <grep+0x90>
+      p = q+1;
+ 2bb:	89 d3                	mov    %edx,%ebx
+ 2bd:	eb d1                	jmp    290 <grep+0x60>
+ 2bf:	90                   	nop
+        write(1, p, q+1 - p);
+ 2c0:	89 d0                	mov    %edx,%eax
+ 2c2:	83 ec 04             	sub    $0x4,%esp
+        *q = '\n';
+ 2c5:	c6 07 0a             	movb   $0xa,(%edi)
+        write(1, p, q+1 - p);
+ 2c8:	29 d8                	sub    %ebx,%eax
+ 2ca:	89 55 e0             	mov    %edx,-0x20(%ebp)
+ 2cd:	50                   	push   %eax
+ 2ce:	53                   	push   %ebx
+ 2cf:	6a 01                	push   $0x1
+ 2d1:	e8 ed 02 00 00       	call   5c3 <write>
+ 2d6:	8b 55 e0             	mov    -0x20(%ebp),%edx
+ 2d9:	83 c4 10             	add    $0x10,%esp
+      p = q+1;
+ 2dc:	89 d3                	mov    %edx,%ebx
+ 2de:	eb b0                	jmp    290 <grep+0x60>
+    if(p == buf)
+ 2e0:	81 fb a0 0e 00 00    	cmp    $0xea0,%ebx
+ 2e6:	74 38                	je     320 <grep+0xf0>
+    if(m > 0){
+ 2e8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+ 2eb:	85 c9                	test   %ecx,%ecx
+ 2ed:	0f 8e 5d ff ff ff    	jle    250 <grep+0x20>
+      m -= p - buf;
+ 2f3:	89 d8                	mov    %ebx,%eax
+      memmove(buf, p, m);
+ 2f5:	83 ec 04             	sub    $0x4,%esp
+      m -= p - buf;
+ 2f8:	2d a0 0e 00 00       	sub    $0xea0,%eax
+ 2fd:	29 c1                	sub    %eax,%ecx
+      memmove(buf, p, m);
+ 2ff:	51                   	push   %ecx
+ 300:	53                   	push   %ebx
+ 301:	68 a0 0e 00 00       	push   $0xea0
+      m -= p - buf;
+ 306:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+      memmove(buf, p, m);
+ 309:	e8 62 02 00 00       	call   570 <memmove>
+ 30e:	83 c4 10             	add    $0x10,%esp
+ 311:	e9 3a ff ff ff       	jmp    250 <grep+0x20>
+ 316:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 31d:	8d 76 00             	lea    0x0(%esi),%esi
+      m = 0;
+ 320:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+ 327:	e9 24 ff ff ff       	jmp    250 <grep+0x20>
+ 32c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+}
+ 330:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 333:	5b                   	pop    %ebx
+ 334:	5e                   	pop    %esi
+ 335:	5f                   	pop    %edi
+ 336:	5d                   	pop    %ebp
+ 337:	c3                   	ret    
+ 338:	66 90                	xchg   %ax,%ax
+ 33a:	66 90                	xchg   %ax,%ax
+ 33c:	66 90                	xchg   %ax,%ax
+ 33e:	66 90                	xchg   %ax,%ax
+
+00000340 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 340:	f3 0f 1e fb          	endbr32 
+ 344:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 345:	31 c0                	xor    %eax,%eax
+{
+ 347:	89 e5                	mov    %esp,%ebp
+ 349:	53                   	push   %ebx
+ 34a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 34d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 350:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 354:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 357:	83 c0 01             	add    $0x1,%eax
+ 35a:	84 d2                	test   %dl,%dl
+ 35c:	75 f2                	jne    350 <strcpy+0x10>
+    ;
+  return os;
+}
+ 35e:	89 c8                	mov    %ecx,%eax
+ 360:	5b                   	pop    %ebx
+ 361:	5d                   	pop    %ebp
+ 362:	c3                   	ret    
+ 363:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000370 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 370:	f3 0f 1e fb          	endbr32 
+ 374:	55                   	push   %ebp
+ 375:	89 e5                	mov    %esp,%ebp
+ 377:	53                   	push   %ebx
+ 378:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 37b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 37e:	0f b6 01             	movzbl (%ecx),%eax
+ 381:	0f b6 1a             	movzbl (%edx),%ebx
+ 384:	84 c0                	test   %al,%al
+ 386:	75 19                	jne    3a1 <strcmp+0x31>
+ 388:	eb 26                	jmp    3b0 <strcmp+0x40>
+ 38a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 390:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 394:	83 c1 01             	add    $0x1,%ecx
+ 397:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 39a:	0f b6 1a             	movzbl (%edx),%ebx
+ 39d:	84 c0                	test   %al,%al
+ 39f:	74 0f                	je     3b0 <strcmp+0x40>
+ 3a1:	38 d8                	cmp    %bl,%al
+ 3a3:	74 eb                	je     390 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 3a5:	29 d8                	sub    %ebx,%eax
+}
+ 3a7:	5b                   	pop    %ebx
+ 3a8:	5d                   	pop    %ebp
+ 3a9:	c3                   	ret    
+ 3aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 3b0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 3b2:	29 d8                	sub    %ebx,%eax
+}
+ 3b4:	5b                   	pop    %ebx
+ 3b5:	5d                   	pop    %ebp
+ 3b6:	c3                   	ret    
+ 3b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3be:	66 90                	xchg   %ax,%ax
+
+000003c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 3c0:	f3 0f 1e fb          	endbr32 
+ 3c4:	55                   	push   %ebp
+ 3c5:	89 e5                	mov    %esp,%ebp
+ 3c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3ca:	80 3a 00             	cmpb   $0x0,(%edx)
+ 3cd:	74 21                	je     3f0 <strlen+0x30>
+ 3cf:	31 c0                	xor    %eax,%eax
+ 3d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3d8:	83 c0 01             	add    $0x1,%eax
+ 3db:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 3df:	89 c1                	mov    %eax,%ecx
+ 3e1:	75 f5                	jne    3d8 <strlen+0x18>
+    ;
+  return n;
+}
+ 3e3:	89 c8                	mov    %ecx,%eax
+ 3e5:	5d                   	pop    %ebp
+ 3e6:	c3                   	ret    
+ 3e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ee:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 3f0:	31 c9                	xor    %ecx,%ecx
+}
+ 3f2:	5d                   	pop    %ebp
+ 3f3:	89 c8                	mov    %ecx,%eax
+ 3f5:	c3                   	ret    
+ 3f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000400 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 400:	f3 0f 1e fb          	endbr32 
+ 404:	55                   	push   %ebp
+ 405:	89 e5                	mov    %esp,%ebp
+ 407:	57                   	push   %edi
+ 408:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 40b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 40e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 411:	89 d7                	mov    %edx,%edi
+ 413:	fc                   	cld    
+ 414:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 416:	89 d0                	mov    %edx,%eax
+ 418:	5f                   	pop    %edi
+ 419:	5d                   	pop    %ebp
+ 41a:	c3                   	ret    
+ 41b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 41f:	90                   	nop
+
+00000420 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 420:	f3 0f 1e fb          	endbr32 
+ 424:	55                   	push   %ebp
+ 425:	89 e5                	mov    %esp,%ebp
+ 427:	8b 45 08             	mov    0x8(%ebp),%eax
+ 42a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 42e:	0f b6 10             	movzbl (%eax),%edx
+ 431:	84 d2                	test   %dl,%dl
+ 433:	75 16                	jne    44b <strchr+0x2b>
+ 435:	eb 21                	jmp    458 <strchr+0x38>
+ 437:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 43e:	66 90                	xchg   %ax,%ax
+ 440:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 444:	83 c0 01             	add    $0x1,%eax
+ 447:	84 d2                	test   %dl,%dl
+ 449:	74 0d                	je     458 <strchr+0x38>
+    if(*s == c)
+ 44b:	38 d1                	cmp    %dl,%cl
+ 44d:	75 f1                	jne    440 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 44f:	5d                   	pop    %ebp
+ 450:	c3                   	ret    
+ 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 458:	31 c0                	xor    %eax,%eax
+}
+ 45a:	5d                   	pop    %ebp
+ 45b:	c3                   	ret    
+ 45c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000460 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 460:	f3 0f 1e fb          	endbr32 
+ 464:	55                   	push   %ebp
+ 465:	89 e5                	mov    %esp,%ebp
+ 467:	57                   	push   %edi
+ 468:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 469:	31 f6                	xor    %esi,%esi
+{
+ 46b:	53                   	push   %ebx
+ 46c:	89 f3                	mov    %esi,%ebx
+ 46e:	83 ec 1c             	sub    $0x1c,%esp
+ 471:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 474:	eb 33                	jmp    4a9 <gets+0x49>
+ 476:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 47d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 480:	83 ec 04             	sub    $0x4,%esp
+ 483:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 486:	6a 01                	push   $0x1
+ 488:	50                   	push   %eax
+ 489:	6a 00                	push   $0x0
+ 48b:	e8 2b 01 00 00       	call   5bb <read>
+    if(cc < 1)
+ 490:	83 c4 10             	add    $0x10,%esp
+ 493:	85 c0                	test   %eax,%eax
+ 495:	7e 1c                	jle    4b3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 497:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 49b:	83 c7 01             	add    $0x1,%edi
+ 49e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 4a1:	3c 0a                	cmp    $0xa,%al
+ 4a3:	74 23                	je     4c8 <gets+0x68>
+ 4a5:	3c 0d                	cmp    $0xd,%al
+ 4a7:	74 1f                	je     4c8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 4a9:	83 c3 01             	add    $0x1,%ebx
+ 4ac:	89 fe                	mov    %edi,%esi
+ 4ae:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 4b1:	7c cd                	jl     480 <gets+0x20>
+ 4b3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 4b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 4b8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4be:	5b                   	pop    %ebx
+ 4bf:	5e                   	pop    %esi
+ 4c0:	5f                   	pop    %edi
+ 4c1:	5d                   	pop    %ebp
+ 4c2:	c3                   	ret    
+ 4c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4c7:	90                   	nop
+ 4c8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4cb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4ce:	01 de                	add    %ebx,%esi
+ 4d0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 4d2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4d8:	5b                   	pop    %ebx
+ 4d9:	5e                   	pop    %esi
+ 4da:	5f                   	pop    %edi
+ 4db:	5d                   	pop    %ebp
+ 4dc:	c3                   	ret    
+ 4dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000004e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 4e0:	f3 0f 1e fb          	endbr32 
+ 4e4:	55                   	push   %ebp
+ 4e5:	89 e5                	mov    %esp,%ebp
+ 4e7:	56                   	push   %esi
+ 4e8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 4e9:	83 ec 08             	sub    $0x8,%esp
+ 4ec:	6a 00                	push   $0x0
+ 4ee:	ff 75 08             	pushl  0x8(%ebp)
+ 4f1:	e8 ed 00 00 00       	call   5e3 <open>
+  if(fd < 0)
+ 4f6:	83 c4 10             	add    $0x10,%esp
+ 4f9:	85 c0                	test   %eax,%eax
+ 4fb:	78 2b                	js     528 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 4fd:	83 ec 08             	sub    $0x8,%esp
+ 500:	ff 75 0c             	pushl  0xc(%ebp)
+ 503:	89 c3                	mov    %eax,%ebx
+ 505:	50                   	push   %eax
+ 506:	e8 f0 00 00 00       	call   5fb <fstat>
+  close(fd);
+ 50b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 50e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 510:	e8 b6 00 00 00       	call   5cb <close>
+  return r;
+ 515:	83 c4 10             	add    $0x10,%esp
+}
+ 518:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 51b:	89 f0                	mov    %esi,%eax
+ 51d:	5b                   	pop    %ebx
+ 51e:	5e                   	pop    %esi
+ 51f:	5d                   	pop    %ebp
+ 520:	c3                   	ret    
+ 521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 528:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 52d:	eb e9                	jmp    518 <stat+0x38>
+ 52f:	90                   	nop
+
+00000530 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 530:	f3 0f 1e fb          	endbr32 
+ 534:	55                   	push   %ebp
+ 535:	89 e5                	mov    %esp,%ebp
+ 537:	53                   	push   %ebx
+ 538:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 53b:	0f be 02             	movsbl (%edx),%eax
+ 53e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 541:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 544:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 549:	77 1a                	ja     565 <atoi+0x35>
+ 54b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 54f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 550:	83 c2 01             	add    $0x1,%edx
+ 553:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 556:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 55a:	0f be 02             	movsbl (%edx),%eax
+ 55d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 560:	80 fb 09             	cmp    $0x9,%bl
+ 563:	76 eb                	jbe    550 <atoi+0x20>
+  return n;
+}
+ 565:	89 c8                	mov    %ecx,%eax
+ 567:	5b                   	pop    %ebx
+ 568:	5d                   	pop    %ebp
+ 569:	c3                   	ret    
+ 56a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000570 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 570:	f3 0f 1e fb          	endbr32 
+ 574:	55                   	push   %ebp
+ 575:	89 e5                	mov    %esp,%ebp
+ 577:	57                   	push   %edi
+ 578:	8b 45 10             	mov    0x10(%ebp),%eax
+ 57b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 57e:	56                   	push   %esi
+ 57f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 582:	85 c0                	test   %eax,%eax
+ 584:	7e 0f                	jle    595 <memmove+0x25>
+ 586:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 588:	89 d7                	mov    %edx,%edi
+ 58a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 590:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 591:	39 f8                	cmp    %edi,%eax
+ 593:	75 fb                	jne    590 <memmove+0x20>
+  return vdst;
+}
+ 595:	5e                   	pop    %esi
+ 596:	89 d0                	mov    %edx,%eax
+ 598:	5f                   	pop    %edi
+ 599:	5d                   	pop    %ebp
+ 59a:	c3                   	ret    
+
+0000059b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 59b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 5a0:	cd 40                	int    $0x40
+ 5a2:	c3                   	ret    
+
+000005a3 <exit>:
+SYSCALL(exit)
+ 5a3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 5a8:	cd 40                	int    $0x40
+ 5aa:	c3                   	ret    
+
+000005ab <wait>:
+SYSCALL(wait)
+ 5ab:	b8 03 00 00 00       	mov    $0x3,%eax
+ 5b0:	cd 40                	int    $0x40
+ 5b2:	c3                   	ret    
+
+000005b3 <pipe>:
+SYSCALL(pipe)
+ 5b3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 5b8:	cd 40                	int    $0x40
+ 5ba:	c3                   	ret    
+
+000005bb <read>:
+SYSCALL(read)
+ 5bb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 5c0:	cd 40                	int    $0x40
+ 5c2:	c3                   	ret    
+
+000005c3 <write>:
+SYSCALL(write)
+ 5c3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5c8:	cd 40                	int    $0x40
+ 5ca:	c3                   	ret    
+
+000005cb <close>:
+SYSCALL(close)
+ 5cb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5d0:	cd 40                	int    $0x40
+ 5d2:	c3                   	ret    
+
+000005d3 <kill>:
+SYSCALL(kill)
+ 5d3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5d8:	cd 40                	int    $0x40
+ 5da:	c3                   	ret    
+
+000005db <exec>:
+SYSCALL(exec)
+ 5db:	b8 07 00 00 00       	mov    $0x7,%eax
+ 5e0:	cd 40                	int    $0x40
+ 5e2:	c3                   	ret    
+
+000005e3 <open>:
+SYSCALL(open)
+ 5e3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 5e8:	cd 40                	int    $0x40
+ 5ea:	c3                   	ret    
+
+000005eb <mknod>:
+SYSCALL(mknod)
+ 5eb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 5f0:	cd 40                	int    $0x40
+ 5f2:	c3                   	ret    
+
+000005f3 <unlink>:
+SYSCALL(unlink)
+ 5f3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 5f8:	cd 40                	int    $0x40
+ 5fa:	c3                   	ret    
+
+000005fb <fstat>:
+SYSCALL(fstat)
+ 5fb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 600:	cd 40                	int    $0x40
+ 602:	c3                   	ret    
+
+00000603 <link>:
+SYSCALL(link)
+ 603:	b8 13 00 00 00       	mov    $0x13,%eax
+ 608:	cd 40                	int    $0x40
+ 60a:	c3                   	ret    
+
+0000060b <mkdir>:
+SYSCALL(mkdir)
+ 60b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 610:	cd 40                	int    $0x40
+ 612:	c3                   	ret    
+
+00000613 <chdir>:
+SYSCALL(chdir)
+ 613:	b8 09 00 00 00       	mov    $0x9,%eax
+ 618:	cd 40                	int    $0x40
+ 61a:	c3                   	ret    
+
+0000061b <dup>:
+SYSCALL(dup)
+ 61b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 620:	cd 40                	int    $0x40
+ 622:	c3                   	ret    
+
+00000623 <getpid>:
+SYSCALL(getpid)
+ 623:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 628:	cd 40                	int    $0x40
+ 62a:	c3                   	ret    
+
+0000062b <sbrk>:
+SYSCALL(sbrk)
+ 62b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 630:	cd 40                	int    $0x40
+ 632:	c3                   	ret    
+
+00000633 <sleep>:
+SYSCALL(sleep)
+ 633:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 638:	cd 40                	int    $0x40
+ 63a:	c3                   	ret    
+
+0000063b <uptime>:
+SYSCALL(uptime)
+ 63b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 640:	cd 40                	int    $0x40
+ 642:	c3                   	ret    
+
+00000643 <getNumProc>:
+SYSCALL(getNumProc)
+ 643:	b8 16 00 00 00       	mov    $0x16,%eax
+ 648:	cd 40                	int    $0x40
+ 64a:	c3                   	ret    
+
+0000064b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 64b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 650:	cd 40                	int    $0x40
+ 652:	c3                   	ret    
+
+00000653 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 653:	b8 18 00 00 00       	mov    $0x18,%eax
+ 658:	cd 40                	int    $0x40
+ 65a:	c3                   	ret    
+
+0000065b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 65b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 660:	cd 40                	int    $0x40
+ 662:	c3                   	ret    
+
+00000663 <get_burst_time>:
+ 663:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 668:	cd 40                	int    $0x40
+ 66a:	c3                   	ret    
+ 66b:	66 90                	xchg   %ax,%ax
+ 66d:	66 90                	xchg   %ax,%ax
+ 66f:	90                   	nop
+
+00000670 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 670:	55                   	push   %ebp
+ 671:	89 e5                	mov    %esp,%ebp
+ 673:	57                   	push   %edi
+ 674:	56                   	push   %esi
+ 675:	53                   	push   %ebx
+ 676:	83 ec 3c             	sub    $0x3c,%esp
+ 679:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 67c:	89 d1                	mov    %edx,%ecx
+{
+ 67e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 681:	85 d2                	test   %edx,%edx
+ 683:	0f 89 7f 00 00 00    	jns    708 <printint+0x98>
+ 689:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 68d:	74 79                	je     708 <printint+0x98>
+    neg = 1;
+ 68f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 696:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 698:	31 db                	xor    %ebx,%ebx
+ 69a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 69d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 6a0:	89 c8                	mov    %ecx,%eax
+ 6a2:	31 d2                	xor    %edx,%edx
+ 6a4:	89 cf                	mov    %ecx,%edi
+ 6a6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 6a9:	0f b6 92 c8 0a 00 00 	movzbl 0xac8(%edx),%edx
+ 6b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 6b3:	89 d8                	mov    %ebx,%eax
+ 6b5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 6b8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 6bb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 6be:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 6c1:	76 dd                	jbe    6a0 <printint+0x30>
+  if(neg)
+ 6c3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 6c6:	85 c9                	test   %ecx,%ecx
+ 6c8:	74 0c                	je     6d6 <printint+0x66>
+    buf[i++] = '-';
+ 6ca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 6cf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 6d1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 6d6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 6d9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6dd:	eb 07                	jmp    6e6 <printint+0x76>
+ 6df:	90                   	nop
+ 6e0:	0f b6 13             	movzbl (%ebx),%edx
+ 6e3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 6e6:	83 ec 04             	sub    $0x4,%esp
+ 6e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 6ec:	6a 01                	push   $0x1
+ 6ee:	56                   	push   %esi
+ 6ef:	57                   	push   %edi
+ 6f0:	e8 ce fe ff ff       	call   5c3 <write>
+  while(--i >= 0)
+ 6f5:	83 c4 10             	add    $0x10,%esp
+ 6f8:	39 de                	cmp    %ebx,%esi
+ 6fa:	75 e4                	jne    6e0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 6fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6ff:	5b                   	pop    %ebx
+ 700:	5e                   	pop    %esi
+ 701:	5f                   	pop    %edi
+ 702:	5d                   	pop    %ebp
+ 703:	c3                   	ret    
+ 704:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 708:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 70f:	eb 87                	jmp    698 <printint+0x28>
+ 711:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 718:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 71f:	90                   	nop
+
+00000720 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 720:	f3 0f 1e fb          	endbr32 
+ 724:	55                   	push   %ebp
+ 725:	89 e5                	mov    %esp,%ebp
+ 727:	57                   	push   %edi
+ 728:	56                   	push   %esi
+ 729:	53                   	push   %ebx
+ 72a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 72d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 730:	0f b6 1e             	movzbl (%esi),%ebx
+ 733:	84 db                	test   %bl,%bl
+ 735:	0f 84 b4 00 00 00    	je     7ef <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 73b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 73e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 741:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 744:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 746:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 749:	eb 33                	jmp    77e <printf+0x5e>
+ 74b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 74f:	90                   	nop
+ 750:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 753:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 758:	83 f8 25             	cmp    $0x25,%eax
+ 75b:	74 17                	je     774 <printf+0x54>
+  write(fd, &c, 1);
+ 75d:	83 ec 04             	sub    $0x4,%esp
+ 760:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 763:	6a 01                	push   $0x1
+ 765:	57                   	push   %edi
+ 766:	ff 75 08             	pushl  0x8(%ebp)
+ 769:	e8 55 fe ff ff       	call   5c3 <write>
+ 76e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 771:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 774:	0f b6 1e             	movzbl (%esi),%ebx
+ 777:	83 c6 01             	add    $0x1,%esi
+ 77a:	84 db                	test   %bl,%bl
+ 77c:	74 71                	je     7ef <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 77e:	0f be cb             	movsbl %bl,%ecx
+ 781:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 784:	85 d2                	test   %edx,%edx
+ 786:	74 c8                	je     750 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 788:	83 fa 25             	cmp    $0x25,%edx
+ 78b:	75 e7                	jne    774 <printf+0x54>
+      if(c == 'd'){
+ 78d:	83 f8 64             	cmp    $0x64,%eax
+ 790:	0f 84 9a 00 00 00    	je     830 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 796:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 79c:	83 f9 70             	cmp    $0x70,%ecx
+ 79f:	74 5f                	je     800 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 7a1:	83 f8 73             	cmp    $0x73,%eax
+ 7a4:	0f 84 d6 00 00 00    	je     880 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 7aa:	83 f8 63             	cmp    $0x63,%eax
+ 7ad:	0f 84 8d 00 00 00    	je     840 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 7b3:	83 f8 25             	cmp    $0x25,%eax
+ 7b6:	0f 84 b4 00 00 00    	je     870 <printf+0x150>
+  write(fd, &c, 1);
+ 7bc:	83 ec 04             	sub    $0x4,%esp
+ 7bf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7c3:	6a 01                	push   $0x1
+ 7c5:	57                   	push   %edi
+ 7c6:	ff 75 08             	pushl  0x8(%ebp)
+ 7c9:	e8 f5 fd ff ff       	call   5c3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 7ce:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 7d1:	83 c4 0c             	add    $0xc,%esp
+ 7d4:	6a 01                	push   $0x1
+ 7d6:	83 c6 01             	add    $0x1,%esi
+ 7d9:	57                   	push   %edi
+ 7da:	ff 75 08             	pushl  0x8(%ebp)
+ 7dd:	e8 e1 fd ff ff       	call   5c3 <write>
+  for(i = 0; fmt[i]; i++){
+ 7e2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 7e6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 7e9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 7eb:	84 db                	test   %bl,%bl
+ 7ed:	75 8f                	jne    77e <printf+0x5e>
+    }
+  }
+}
+ 7ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7f2:	5b                   	pop    %ebx
+ 7f3:	5e                   	pop    %esi
+ 7f4:	5f                   	pop    %edi
+ 7f5:	5d                   	pop    %ebp
+ 7f6:	c3                   	ret    
+ 7f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7fe:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 800:	83 ec 0c             	sub    $0xc,%esp
+ 803:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 808:	6a 00                	push   $0x0
+ 80a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 80d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 810:	8b 13                	mov    (%ebx),%edx
+ 812:	e8 59 fe ff ff       	call   670 <printint>
+        ap++;
+ 817:	89 d8                	mov    %ebx,%eax
+ 819:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 81c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 81e:	83 c0 04             	add    $0x4,%eax
+ 821:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 824:	e9 4b ff ff ff       	jmp    774 <printf+0x54>
+ 829:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 830:	83 ec 0c             	sub    $0xc,%esp
+ 833:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 838:	6a 01                	push   $0x1
+ 83a:	eb ce                	jmp    80a <printf+0xea>
+ 83c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 840:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 843:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 846:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 848:	6a 01                	push   $0x1
+        ap++;
+ 84a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 84d:	57                   	push   %edi
+ 84e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 851:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 854:	e8 6a fd ff ff       	call   5c3 <write>
+        ap++;
+ 859:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 85c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 85f:	31 d2                	xor    %edx,%edx
+ 861:	e9 0e ff ff ff       	jmp    774 <printf+0x54>
+ 866:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 86d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 870:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 873:	83 ec 04             	sub    $0x4,%esp
+ 876:	e9 59 ff ff ff       	jmp    7d4 <printf+0xb4>
+ 87b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 87f:	90                   	nop
+        s = (char*)*ap;
+ 880:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 883:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 885:	83 c0 04             	add    $0x4,%eax
+ 888:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 88b:	85 db                	test   %ebx,%ebx
+ 88d:	74 17                	je     8a6 <printf+0x186>
+        while(*s != 0){
+ 88f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 892:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 894:	84 c0                	test   %al,%al
+ 896:	0f 84 d8 fe ff ff    	je     774 <printf+0x54>
+ 89c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 89f:	89 de                	mov    %ebx,%esi
+ 8a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8a4:	eb 1a                	jmp    8c0 <printf+0x1a0>
+          s = "(null)";
+ 8a6:	bb be 0a 00 00       	mov    $0xabe,%ebx
+        while(*s != 0){
+ 8ab:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 8ae:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8b3:	89 de                	mov    %ebx,%esi
+ 8b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8bf:	90                   	nop
+  write(fd, &c, 1);
+ 8c0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 8c3:	83 c6 01             	add    $0x1,%esi
+ 8c6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 8c9:	6a 01                	push   $0x1
+ 8cb:	57                   	push   %edi
+ 8cc:	53                   	push   %ebx
+ 8cd:	e8 f1 fc ff ff       	call   5c3 <write>
+        while(*s != 0){
+ 8d2:	0f b6 06             	movzbl (%esi),%eax
+ 8d5:	83 c4 10             	add    $0x10,%esp
+ 8d8:	84 c0                	test   %al,%al
+ 8da:	75 e4                	jne    8c0 <printf+0x1a0>
+ 8dc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 8df:	31 d2                	xor    %edx,%edx
+ 8e1:	e9 8e fe ff ff       	jmp    774 <printf+0x54>
+ 8e6:	66 90                	xchg   %ax,%ax
+ 8e8:	66 90                	xchg   %ax,%ax
+ 8ea:	66 90                	xchg   %ax,%ax
+ 8ec:	66 90                	xchg   %ax,%ax
+ 8ee:	66 90                	xchg   %ax,%ax
+
+000008f0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 8f0:	f3 0f 1e fb          	endbr32 
+ 8f4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8f5:	a1 80 0e 00 00       	mov    0xe80,%eax
+{
+ 8fa:	89 e5                	mov    %esp,%ebp
+ 8fc:	57                   	push   %edi
+ 8fd:	56                   	push   %esi
+ 8fe:	53                   	push   %ebx
+ 8ff:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 902:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 904:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 907:	39 c8                	cmp    %ecx,%eax
+ 909:	73 15                	jae    920 <free+0x30>
+ 90b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 90f:	90                   	nop
+ 910:	39 d1                	cmp    %edx,%ecx
+ 912:	72 14                	jb     928 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 914:	39 d0                	cmp    %edx,%eax
+ 916:	73 10                	jae    928 <free+0x38>
+{
+ 918:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 91a:	8b 10                	mov    (%eax),%edx
+ 91c:	39 c8                	cmp    %ecx,%eax
+ 91e:	72 f0                	jb     910 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 920:	39 d0                	cmp    %edx,%eax
+ 922:	72 f4                	jb     918 <free+0x28>
+ 924:	39 d1                	cmp    %edx,%ecx
+ 926:	73 f0                	jae    918 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 928:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 92b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 92e:	39 fa                	cmp    %edi,%edx
+ 930:	74 1e                	je     950 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 932:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 935:	8b 50 04             	mov    0x4(%eax),%edx
+ 938:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 93b:	39 f1                	cmp    %esi,%ecx
+ 93d:	74 28                	je     967 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 93f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 941:	5b                   	pop    %ebx
+  freep = p;
+ 942:	a3 80 0e 00 00       	mov    %eax,0xe80
+}
+ 947:	5e                   	pop    %esi
+ 948:	5f                   	pop    %edi
+ 949:	5d                   	pop    %ebp
+ 94a:	c3                   	ret    
+ 94b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 94f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 950:	03 72 04             	add    0x4(%edx),%esi
+ 953:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 956:	8b 10                	mov    (%eax),%edx
+ 958:	8b 12                	mov    (%edx),%edx
+ 95a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 95d:	8b 50 04             	mov    0x4(%eax),%edx
+ 960:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 963:	39 f1                	cmp    %esi,%ecx
+ 965:	75 d8                	jne    93f <free+0x4f>
+    p->s.size += bp->s.size;
+ 967:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 96a:	a3 80 0e 00 00       	mov    %eax,0xe80
+    p->s.size += bp->s.size;
+ 96f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 972:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 975:	89 10                	mov    %edx,(%eax)
+}
+ 977:	5b                   	pop    %ebx
+ 978:	5e                   	pop    %esi
+ 979:	5f                   	pop    %edi
+ 97a:	5d                   	pop    %ebp
+ 97b:	c3                   	ret    
+ 97c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000980 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 980:	f3 0f 1e fb          	endbr32 
+ 984:	55                   	push   %ebp
+ 985:	89 e5                	mov    %esp,%ebp
+ 987:	57                   	push   %edi
+ 988:	56                   	push   %esi
+ 989:	53                   	push   %ebx
+ 98a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 98d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 990:	8b 3d 80 0e 00 00    	mov    0xe80,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 996:	8d 70 07             	lea    0x7(%eax),%esi
+ 999:	c1 ee 03             	shr    $0x3,%esi
+ 99c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 99f:	85 ff                	test   %edi,%edi
+ 9a1:	0f 84 a9 00 00 00    	je     a50 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9a7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 9a9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 9ac:	39 f1                	cmp    %esi,%ecx
+ 9ae:	73 6d                	jae    a1d <malloc+0x9d>
+ 9b0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 9b6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 9bb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 9be:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 9c5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 9c8:	eb 17                	jmp    9e1 <malloc+0x61>
+ 9ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9d0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 9d2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 9d5:	39 f1                	cmp    %esi,%ecx
+ 9d7:	73 4f                	jae    a28 <malloc+0xa8>
+ 9d9:	8b 3d 80 0e 00 00    	mov    0xe80,%edi
+ 9df:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 9e1:	39 c7                	cmp    %eax,%edi
+ 9e3:	75 eb                	jne    9d0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 9e5:	83 ec 0c             	sub    $0xc,%esp
+ 9e8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 9eb:	e8 3b fc ff ff       	call   62b <sbrk>
+  if(p == (char*)-1)
+ 9f0:	83 c4 10             	add    $0x10,%esp
+ 9f3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 9f6:	74 1b                	je     a13 <malloc+0x93>
+  hp->s.size = nu;
+ 9f8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 9fb:	83 ec 0c             	sub    $0xc,%esp
+ 9fe:	83 c0 08             	add    $0x8,%eax
+ a01:	50                   	push   %eax
+ a02:	e8 e9 fe ff ff       	call   8f0 <free>
+  return freep;
+ a07:	a1 80 0e 00 00       	mov    0xe80,%eax
+      if((p = morecore(nunits)) == 0)
+ a0c:	83 c4 10             	add    $0x10,%esp
+ a0f:	85 c0                	test   %eax,%eax
+ a11:	75 bd                	jne    9d0 <malloc+0x50>
+        return 0;
+  }
+}
+ a13:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ a16:	31 c0                	xor    %eax,%eax
+}
+ a18:	5b                   	pop    %ebx
+ a19:	5e                   	pop    %esi
+ a1a:	5f                   	pop    %edi
+ a1b:	5d                   	pop    %ebp
+ a1c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ a1d:	89 c2                	mov    %eax,%edx
+ a1f:	89 f8                	mov    %edi,%eax
+ a21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ a28:	39 ce                	cmp    %ecx,%esi
+ a2a:	74 54                	je     a80 <malloc+0x100>
+        p->s.size -= nunits;
+ a2c:	29 f1                	sub    %esi,%ecx
+ a2e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ a31:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ a34:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ a37:	a3 80 0e 00 00       	mov    %eax,0xe80
+}
+ a3c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ a3f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ a42:	5b                   	pop    %ebx
+ a43:	5e                   	pop    %esi
+ a44:	5f                   	pop    %edi
+ a45:	5d                   	pop    %ebp
+ a46:	c3                   	ret    
+ a47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a4e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ a50:	c7 05 80 0e 00 00 84 	movl   $0xe84,0xe80
+ a57:	0e 00 00 
+    base.s.size = 0;
+ a5a:	bf 84 0e 00 00       	mov    $0xe84,%edi
+    base.s.ptr = freep = prevp = &base;
+ a5f:	c7 05 84 0e 00 00 84 	movl   $0xe84,0xe84
+ a66:	0e 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a69:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ a6b:	c7 05 88 0e 00 00 00 	movl   $0x0,0xe88
+ a72:	00 00 00 
+    if(p->s.size >= nunits){
+ a75:	e9 36 ff ff ff       	jmp    9b0 <malloc+0x30>
+ a7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ a80:	8b 0a                	mov    (%edx),%ecx
+ a82:	89 08                	mov    %ecx,(%eax)
+ a84:	eb b1                	jmp    a37 <malloc+0xb7>
diff -ruN xv6-public/grep.d xv6-new/grep.d
--- xv6-public/grep.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/grep.d	2022-10-07 22:43:42.871886833 +0530
@@ -0,0 +1 @@
+grep.o: grep.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/grep.o and xv6-new/grep.o differ
diff -ruN xv6-public/grep.sym xv6-new/grep.sym
--- xv6-public/grep.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/grep.sym	2022-10-07 22:43:42.871886833 +0530
@@ -0,0 +1,67 @@
+00000000 .text
+00000a88 .rodata
+00000adc .eh_frame
+00000e80 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 grep.c
+00000000 ulib.c
+00000000 printf.c
+00000670 printint
+00000ac8 digits.1096
+00000000 umalloc.c
+00000e80 freep
+00000e84 base
+00000340 strcpy
+00000720 printf
+00000570 memmove
+00000120 matchhere
+000005eb mknod
+00000460 gets
+00000623 getpid
+00000230 grep
+00000980 malloc
+00000633 sleep
+00000663 get_burst_time
+000005b3 pipe
+000005c3 write
+000005fb fstat
+000005d3 kill
+00000613 chdir
+000005db exec
+000005ab wait
+000005bb read
+000005f3 unlink
+0000059b fork
+0000062b sbrk
+0000063b uptime
+00000e64 __bss_start
+00000400 memset
+00000000 main
+0000065b set_burst_time
+000000c0 matchstar
+00000370 strcmp
+0000061b dup
+0000064b getMaxPid
+00000ea0 buf
+00000643 getNumProc
+00000653 getProcInfo
+000004e0 stat
+00000e64 _edata
+000012a0 _end
+000001c0 match
+00000603 link
+000005a3 exit
+00000530 atoi
+000003c0 strlen
+000005e3 open
+00000420 strchr
+0000060b mkdir
+000005cb close
+000008f0 free
Binary files xv6-public/ide.o and xv6-new/ide.o differ
diff -ruN xv6-public/init.asm xv6-new/init.asm
--- xv6-public/init.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/init.asm	2022-10-07 22:43:42.871886833 +0530
@@ -0,0 +1,1279 @@
+
+_init:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+
+char *argv[] = { "sh", 0 };
+
+int
+main(void)
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	53                   	push   %ebx
+  12:	51                   	push   %ecx
+  int pid, wpid;
+
+  if(open("console", O_RDWR) < 0){
+  13:	83 ec 08             	sub    $0x8,%esp
+  16:	6a 02                	push   $0x2
+  18:	68 38 08 00 00       	push   $0x838
+  1d:	e8 71 03 00 00       	call   393 <open>
+  22:	83 c4 10             	add    $0x10,%esp
+  25:	85 c0                	test   %eax,%eax
+  27:	0f 88 9b 00 00 00    	js     c8 <main+0xc8>
+    mknod("console", 1, 1);
+    open("console", O_RDWR);
+  }
+  dup(0);  // stdout
+  2d:	83 ec 0c             	sub    $0xc,%esp
+  30:	6a 00                	push   $0x0
+  32:	e8 94 03 00 00       	call   3cb <dup>
+  dup(0);  // stderr
+  37:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  3e:	e8 88 03 00 00       	call   3cb <dup>
+  43:	83 c4 10             	add    $0x10,%esp
+  46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  4d:	8d 76 00             	lea    0x0(%esi),%esi
+
+  for(;;){
+    printf(1, "init: starting sh\n");
+  50:	83 ec 08             	sub    $0x8,%esp
+  53:	68 40 08 00 00       	push   $0x840
+  58:	6a 01                	push   $0x1
+  5a:	e8 71 04 00 00       	call   4d0 <printf>
+    pid = fork();
+  5f:	e8 e7 02 00 00       	call   34b <fork>
+    if(pid < 0){
+  64:	83 c4 10             	add    $0x10,%esp
+    pid = fork();
+  67:	89 c3                	mov    %eax,%ebx
+    if(pid < 0){
+  69:	85 c0                	test   %eax,%eax
+  6b:	78 24                	js     91 <main+0x91>
+      printf(1, "init: fork failed\n");
+      exit();
+    }
+    if(pid == 0){
+  6d:	74 35                	je     a4 <main+0xa4>
+  6f:	90                   	nop
+      exec("sh", argv);
+      printf(1, "init: exec sh failed\n");
+      exit();
+    }
+    while((wpid=wait()) >= 0 && wpid != pid)
+  70:	e8 e6 02 00 00       	call   35b <wait>
+  75:	85 c0                	test   %eax,%eax
+  77:	78 d7                	js     50 <main+0x50>
+  79:	39 c3                	cmp    %eax,%ebx
+  7b:	74 d3                	je     50 <main+0x50>
+      printf(1, "zombie!\n");
+  7d:	83 ec 08             	sub    $0x8,%esp
+  80:	68 7f 08 00 00       	push   $0x87f
+  85:	6a 01                	push   $0x1
+  87:	e8 44 04 00 00       	call   4d0 <printf>
+  8c:	83 c4 10             	add    $0x10,%esp
+  8f:	eb df                	jmp    70 <main+0x70>
+      printf(1, "init: fork failed\n");
+  91:	53                   	push   %ebx
+  92:	53                   	push   %ebx
+  93:	68 53 08 00 00       	push   $0x853
+  98:	6a 01                	push   $0x1
+  9a:	e8 31 04 00 00       	call   4d0 <printf>
+      exit();
+  9f:	e8 af 02 00 00       	call   353 <exit>
+      exec("sh", argv);
+  a4:	50                   	push   %eax
+  a5:	50                   	push   %eax
+  a6:	68 3c 0b 00 00       	push   $0xb3c
+  ab:	68 66 08 00 00       	push   $0x866
+  b0:	e8 d6 02 00 00       	call   38b <exec>
+      printf(1, "init: exec sh failed\n");
+  b5:	5a                   	pop    %edx
+  b6:	59                   	pop    %ecx
+  b7:	68 69 08 00 00       	push   $0x869
+  bc:	6a 01                	push   $0x1
+  be:	e8 0d 04 00 00       	call   4d0 <printf>
+      exit();
+  c3:	e8 8b 02 00 00       	call   353 <exit>
+    mknod("console", 1, 1);
+  c8:	50                   	push   %eax
+  c9:	6a 01                	push   $0x1
+  cb:	6a 01                	push   $0x1
+  cd:	68 38 08 00 00       	push   $0x838
+  d2:	e8 c4 02 00 00       	call   39b <mknod>
+    open("console", O_RDWR);
+  d7:	58                   	pop    %eax
+  d8:	5a                   	pop    %edx
+  d9:	6a 02                	push   $0x2
+  db:	68 38 08 00 00       	push   $0x838
+  e0:	e8 ae 02 00 00       	call   393 <open>
+  e5:	83 c4 10             	add    $0x10,%esp
+  e8:	e9 40 ff ff ff       	jmp    2d <main+0x2d>
+  ed:	66 90                	xchg   %ax,%ax
+  ef:	90                   	nop
+
+000000f0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  f0:	f3 0f 1e fb          	endbr32 
+  f4:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  f5:	31 c0                	xor    %eax,%eax
+{
+  f7:	89 e5                	mov    %esp,%ebp
+  f9:	53                   	push   %ebx
+  fa:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  fd:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 100:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 104:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 107:	83 c0 01             	add    $0x1,%eax
+ 10a:	84 d2                	test   %dl,%dl
+ 10c:	75 f2                	jne    100 <strcpy+0x10>
+    ;
+  return os;
+}
+ 10e:	89 c8                	mov    %ecx,%eax
+ 110:	5b                   	pop    %ebx
+ 111:	5d                   	pop    %ebp
+ 112:	c3                   	ret    
+ 113:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000120 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 120:	f3 0f 1e fb          	endbr32 
+ 124:	55                   	push   %ebp
+ 125:	89 e5                	mov    %esp,%ebp
+ 127:	53                   	push   %ebx
+ 128:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 12b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 12e:	0f b6 01             	movzbl (%ecx),%eax
+ 131:	0f b6 1a             	movzbl (%edx),%ebx
+ 134:	84 c0                	test   %al,%al
+ 136:	75 19                	jne    151 <strcmp+0x31>
+ 138:	eb 26                	jmp    160 <strcmp+0x40>
+ 13a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 140:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 144:	83 c1 01             	add    $0x1,%ecx
+ 147:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 14a:	0f b6 1a             	movzbl (%edx),%ebx
+ 14d:	84 c0                	test   %al,%al
+ 14f:	74 0f                	je     160 <strcmp+0x40>
+ 151:	38 d8                	cmp    %bl,%al
+ 153:	74 eb                	je     140 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 155:	29 d8                	sub    %ebx,%eax
+}
+ 157:	5b                   	pop    %ebx
+ 158:	5d                   	pop    %ebp
+ 159:	c3                   	ret    
+ 15a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 160:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 162:	29 d8                	sub    %ebx,%eax
+}
+ 164:	5b                   	pop    %ebx
+ 165:	5d                   	pop    %ebp
+ 166:	c3                   	ret    
+ 167:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16e:	66 90                	xchg   %ax,%ax
+
+00000170 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 170:	f3 0f 1e fb          	endbr32 
+ 174:	55                   	push   %ebp
+ 175:	89 e5                	mov    %esp,%ebp
+ 177:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 17a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 17d:	74 21                	je     1a0 <strlen+0x30>
+ 17f:	31 c0                	xor    %eax,%eax
+ 181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 188:	83 c0 01             	add    $0x1,%eax
+ 18b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 18f:	89 c1                	mov    %eax,%ecx
+ 191:	75 f5                	jne    188 <strlen+0x18>
+    ;
+  return n;
+}
+ 193:	89 c8                	mov    %ecx,%eax
+ 195:	5d                   	pop    %ebp
+ 196:	c3                   	ret    
+ 197:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 19e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 1a0:	31 c9                	xor    %ecx,%ecx
+}
+ 1a2:	5d                   	pop    %ebp
+ 1a3:	89 c8                	mov    %ecx,%eax
+ 1a5:	c3                   	ret    
+ 1a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ad:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001b0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1b0:	f3 0f 1e fb          	endbr32 
+ 1b4:	55                   	push   %ebp
+ 1b5:	89 e5                	mov    %esp,%ebp
+ 1b7:	57                   	push   %edi
+ 1b8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1bb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1be:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1c1:	89 d7                	mov    %edx,%edi
+ 1c3:	fc                   	cld    
+ 1c4:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1c6:	89 d0                	mov    %edx,%eax
+ 1c8:	5f                   	pop    %edi
+ 1c9:	5d                   	pop    %ebp
+ 1ca:	c3                   	ret    
+ 1cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1cf:	90                   	nop
+
+000001d0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1d0:	f3 0f 1e fb          	endbr32 
+ 1d4:	55                   	push   %ebp
+ 1d5:	89 e5                	mov    %esp,%ebp
+ 1d7:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1da:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 1de:	0f b6 10             	movzbl (%eax),%edx
+ 1e1:	84 d2                	test   %dl,%dl
+ 1e3:	75 16                	jne    1fb <strchr+0x2b>
+ 1e5:	eb 21                	jmp    208 <strchr+0x38>
+ 1e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ee:	66 90                	xchg   %ax,%ax
+ 1f0:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 1f4:	83 c0 01             	add    $0x1,%eax
+ 1f7:	84 d2                	test   %dl,%dl
+ 1f9:	74 0d                	je     208 <strchr+0x38>
+    if(*s == c)
+ 1fb:	38 d1                	cmp    %dl,%cl
+ 1fd:	75 f1                	jne    1f0 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 1ff:	5d                   	pop    %ebp
+ 200:	c3                   	ret    
+ 201:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 208:	31 c0                	xor    %eax,%eax
+}
+ 20a:	5d                   	pop    %ebp
+ 20b:	c3                   	ret    
+ 20c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000210 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 210:	f3 0f 1e fb          	endbr32 
+ 214:	55                   	push   %ebp
+ 215:	89 e5                	mov    %esp,%ebp
+ 217:	57                   	push   %edi
+ 218:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 219:	31 f6                	xor    %esi,%esi
+{
+ 21b:	53                   	push   %ebx
+ 21c:	89 f3                	mov    %esi,%ebx
+ 21e:	83 ec 1c             	sub    $0x1c,%esp
+ 221:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 224:	eb 33                	jmp    259 <gets+0x49>
+ 226:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 230:	83 ec 04             	sub    $0x4,%esp
+ 233:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 236:	6a 01                	push   $0x1
+ 238:	50                   	push   %eax
+ 239:	6a 00                	push   $0x0
+ 23b:	e8 2b 01 00 00       	call   36b <read>
+    if(cc < 1)
+ 240:	83 c4 10             	add    $0x10,%esp
+ 243:	85 c0                	test   %eax,%eax
+ 245:	7e 1c                	jle    263 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 247:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 24b:	83 c7 01             	add    $0x1,%edi
+ 24e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 251:	3c 0a                	cmp    $0xa,%al
+ 253:	74 23                	je     278 <gets+0x68>
+ 255:	3c 0d                	cmp    $0xd,%al
+ 257:	74 1f                	je     278 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 259:	83 c3 01             	add    $0x1,%ebx
+ 25c:	89 fe                	mov    %edi,%esi
+ 25e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 261:	7c cd                	jl     230 <gets+0x20>
+ 263:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 265:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 268:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 26b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 26e:	5b                   	pop    %ebx
+ 26f:	5e                   	pop    %esi
+ 270:	5f                   	pop    %edi
+ 271:	5d                   	pop    %ebp
+ 272:	c3                   	ret    
+ 273:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 277:	90                   	nop
+ 278:	8b 75 08             	mov    0x8(%ebp),%esi
+ 27b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 27e:	01 de                	add    %ebx,%esi
+ 280:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 282:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 285:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 288:	5b                   	pop    %ebx
+ 289:	5e                   	pop    %esi
+ 28a:	5f                   	pop    %edi
+ 28b:	5d                   	pop    %ebp
+ 28c:	c3                   	ret    
+ 28d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000290 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 290:	f3 0f 1e fb          	endbr32 
+ 294:	55                   	push   %ebp
+ 295:	89 e5                	mov    %esp,%ebp
+ 297:	56                   	push   %esi
+ 298:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 299:	83 ec 08             	sub    $0x8,%esp
+ 29c:	6a 00                	push   $0x0
+ 29e:	ff 75 08             	pushl  0x8(%ebp)
+ 2a1:	e8 ed 00 00 00       	call   393 <open>
+  if(fd < 0)
+ 2a6:	83 c4 10             	add    $0x10,%esp
+ 2a9:	85 c0                	test   %eax,%eax
+ 2ab:	78 2b                	js     2d8 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 2ad:	83 ec 08             	sub    $0x8,%esp
+ 2b0:	ff 75 0c             	pushl  0xc(%ebp)
+ 2b3:	89 c3                	mov    %eax,%ebx
+ 2b5:	50                   	push   %eax
+ 2b6:	e8 f0 00 00 00       	call   3ab <fstat>
+  close(fd);
+ 2bb:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2be:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2c0:	e8 b6 00 00 00       	call   37b <close>
+  return r;
+ 2c5:	83 c4 10             	add    $0x10,%esp
+}
+ 2c8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2cb:	89 f0                	mov    %esi,%eax
+ 2cd:	5b                   	pop    %ebx
+ 2ce:	5e                   	pop    %esi
+ 2cf:	5d                   	pop    %ebp
+ 2d0:	c3                   	ret    
+ 2d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 2d8:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2dd:	eb e9                	jmp    2c8 <stat+0x38>
+ 2df:	90                   	nop
+
+000002e0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2e0:	f3 0f 1e fb          	endbr32 
+ 2e4:	55                   	push   %ebp
+ 2e5:	89 e5                	mov    %esp,%ebp
+ 2e7:	53                   	push   %ebx
+ 2e8:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2eb:	0f be 02             	movsbl (%edx),%eax
+ 2ee:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 2f1:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 2f4:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 2f9:	77 1a                	ja     315 <atoi+0x35>
+ 2fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2ff:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 300:	83 c2 01             	add    $0x1,%edx
+ 303:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 306:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 30a:	0f be 02             	movsbl (%edx),%eax
+ 30d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 310:	80 fb 09             	cmp    $0x9,%bl
+ 313:	76 eb                	jbe    300 <atoi+0x20>
+  return n;
+}
+ 315:	89 c8                	mov    %ecx,%eax
+ 317:	5b                   	pop    %ebx
+ 318:	5d                   	pop    %ebp
+ 319:	c3                   	ret    
+ 31a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000320 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 320:	f3 0f 1e fb          	endbr32 
+ 324:	55                   	push   %ebp
+ 325:	89 e5                	mov    %esp,%ebp
+ 327:	57                   	push   %edi
+ 328:	8b 45 10             	mov    0x10(%ebp),%eax
+ 32b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 32e:	56                   	push   %esi
+ 32f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 332:	85 c0                	test   %eax,%eax
+ 334:	7e 0f                	jle    345 <memmove+0x25>
+ 336:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 338:	89 d7                	mov    %edx,%edi
+ 33a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 340:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 341:	39 f8                	cmp    %edi,%eax
+ 343:	75 fb                	jne    340 <memmove+0x20>
+  return vdst;
+}
+ 345:	5e                   	pop    %esi
+ 346:	89 d0                	mov    %edx,%eax
+ 348:	5f                   	pop    %edi
+ 349:	5d                   	pop    %ebp
+ 34a:	c3                   	ret    
+
+0000034b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 34b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <exit>:
+SYSCALL(exit)
+ 353:	b8 02 00 00 00       	mov    $0x2,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <wait>:
+SYSCALL(wait)
+ 35b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <pipe>:
+SYSCALL(pipe)
+ 363:	b8 04 00 00 00       	mov    $0x4,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <read>:
+SYSCALL(read)
+ 36b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <write>:
+SYSCALL(write)
+ 373:	b8 10 00 00 00       	mov    $0x10,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <close>:
+SYSCALL(close)
+ 37b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <kill>:
+SYSCALL(kill)
+ 383:	b8 06 00 00 00       	mov    $0x6,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <exec>:
+SYSCALL(exec)
+ 38b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <open>:
+SYSCALL(open)
+ 393:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <mknod>:
+SYSCALL(mknod)
+ 39b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <unlink>:
+SYSCALL(unlink)
+ 3a3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <fstat>:
+SYSCALL(fstat)
+ 3ab:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <link>:
+SYSCALL(link)
+ 3b3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <mkdir>:
+SYSCALL(mkdir)
+ 3bb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <chdir>:
+SYSCALL(chdir)
+ 3c3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <dup>:
+SYSCALL(dup)
+ 3cb:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <getpid>:
+SYSCALL(getpid)
+ 3d3:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <sbrk>:
+SYSCALL(sbrk)
+ 3db:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <sleep>:
+SYSCALL(sleep)
+ 3e3:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <uptime>:
+SYSCALL(uptime)
+ 3eb:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <getNumProc>:
+SYSCALL(getNumProc)
+ 3f3:	b8 16 00 00 00       	mov    $0x16,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <getMaxPid>:
+SYSCALL(getMaxPid)
+ 3fb:	b8 17 00 00 00       	mov    $0x17,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 403:	b8 18 00 00 00       	mov    $0x18,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 40b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <get_burst_time>:
+ 413:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+ 41b:	66 90                	xchg   %ax,%ax
+ 41d:	66 90                	xchg   %ax,%ax
+ 41f:	90                   	nop
+
+00000420 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 420:	55                   	push   %ebp
+ 421:	89 e5                	mov    %esp,%ebp
+ 423:	57                   	push   %edi
+ 424:	56                   	push   %esi
+ 425:	53                   	push   %ebx
+ 426:	83 ec 3c             	sub    $0x3c,%esp
+ 429:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 42c:	89 d1                	mov    %edx,%ecx
+{
+ 42e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 431:	85 d2                	test   %edx,%edx
+ 433:	0f 89 7f 00 00 00    	jns    4b8 <printint+0x98>
+ 439:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 43d:	74 79                	je     4b8 <printint+0x98>
+    neg = 1;
+ 43f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 446:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 448:	31 db                	xor    %ebx,%ebx
+ 44a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 44d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 450:	89 c8                	mov    %ecx,%eax
+ 452:	31 d2                	xor    %edx,%edx
+ 454:	89 cf                	mov    %ecx,%edi
+ 456:	f7 75 c4             	divl   -0x3c(%ebp)
+ 459:	0f b6 92 90 08 00 00 	movzbl 0x890(%edx),%edx
+ 460:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 463:	89 d8                	mov    %ebx,%eax
+ 465:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 468:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 46b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 46e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 471:	76 dd                	jbe    450 <printint+0x30>
+  if(neg)
+ 473:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 476:	85 c9                	test   %ecx,%ecx
+ 478:	74 0c                	je     486 <printint+0x66>
+    buf[i++] = '-';
+ 47a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 47f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 481:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 486:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 489:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 48d:	eb 07                	jmp    496 <printint+0x76>
+ 48f:	90                   	nop
+ 490:	0f b6 13             	movzbl (%ebx),%edx
+ 493:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 496:	83 ec 04             	sub    $0x4,%esp
+ 499:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 49c:	6a 01                	push   $0x1
+ 49e:	56                   	push   %esi
+ 49f:	57                   	push   %edi
+ 4a0:	e8 ce fe ff ff       	call   373 <write>
+  while(--i >= 0)
+ 4a5:	83 c4 10             	add    $0x10,%esp
+ 4a8:	39 de                	cmp    %ebx,%esi
+ 4aa:	75 e4                	jne    490 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 4ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4af:	5b                   	pop    %ebx
+ 4b0:	5e                   	pop    %esi
+ 4b1:	5f                   	pop    %edi
+ 4b2:	5d                   	pop    %ebp
+ 4b3:	c3                   	ret    
+ 4b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4b8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4bf:	eb 87                	jmp    448 <printint+0x28>
+ 4c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4cf:	90                   	nop
+
+000004d0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4d0:	f3 0f 1e fb          	endbr32 
+ 4d4:	55                   	push   %ebp
+ 4d5:	89 e5                	mov    %esp,%ebp
+ 4d7:	57                   	push   %edi
+ 4d8:	56                   	push   %esi
+ 4d9:	53                   	push   %ebx
+ 4da:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4dd:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 4e0:	0f b6 1e             	movzbl (%esi),%ebx
+ 4e3:	84 db                	test   %bl,%bl
+ 4e5:	0f 84 b4 00 00 00    	je     59f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 4eb:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4ee:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 4f1:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 4f4:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 4f6:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4f9:	eb 33                	jmp    52e <printf+0x5e>
+ 4fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4ff:	90                   	nop
+ 500:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 503:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 508:	83 f8 25             	cmp    $0x25,%eax
+ 50b:	74 17                	je     524 <printf+0x54>
+  write(fd, &c, 1);
+ 50d:	83 ec 04             	sub    $0x4,%esp
+ 510:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 513:	6a 01                	push   $0x1
+ 515:	57                   	push   %edi
+ 516:	ff 75 08             	pushl  0x8(%ebp)
+ 519:	e8 55 fe ff ff       	call   373 <write>
+ 51e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 521:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 524:	0f b6 1e             	movzbl (%esi),%ebx
+ 527:	83 c6 01             	add    $0x1,%esi
+ 52a:	84 db                	test   %bl,%bl
+ 52c:	74 71                	je     59f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 52e:	0f be cb             	movsbl %bl,%ecx
+ 531:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 534:	85 d2                	test   %edx,%edx
+ 536:	74 c8                	je     500 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 538:	83 fa 25             	cmp    $0x25,%edx
+ 53b:	75 e7                	jne    524 <printf+0x54>
+      if(c == 'd'){
+ 53d:	83 f8 64             	cmp    $0x64,%eax
+ 540:	0f 84 9a 00 00 00    	je     5e0 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 546:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 54c:	83 f9 70             	cmp    $0x70,%ecx
+ 54f:	74 5f                	je     5b0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 551:	83 f8 73             	cmp    $0x73,%eax
+ 554:	0f 84 d6 00 00 00    	je     630 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 55a:	83 f8 63             	cmp    $0x63,%eax
+ 55d:	0f 84 8d 00 00 00    	je     5f0 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 563:	83 f8 25             	cmp    $0x25,%eax
+ 566:	0f 84 b4 00 00 00    	je     620 <printf+0x150>
+  write(fd, &c, 1);
+ 56c:	83 ec 04             	sub    $0x4,%esp
+ 56f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 573:	6a 01                	push   $0x1
+ 575:	57                   	push   %edi
+ 576:	ff 75 08             	pushl  0x8(%ebp)
+ 579:	e8 f5 fd ff ff       	call   373 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 57e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 581:	83 c4 0c             	add    $0xc,%esp
+ 584:	6a 01                	push   $0x1
+ 586:	83 c6 01             	add    $0x1,%esi
+ 589:	57                   	push   %edi
+ 58a:	ff 75 08             	pushl  0x8(%ebp)
+ 58d:	e8 e1 fd ff ff       	call   373 <write>
+  for(i = 0; fmt[i]; i++){
+ 592:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 596:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 599:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 59b:	84 db                	test   %bl,%bl
+ 59d:	75 8f                	jne    52e <printf+0x5e>
+    }
+  }
+}
+ 59f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5a2:	5b                   	pop    %ebx
+ 5a3:	5e                   	pop    %esi
+ 5a4:	5f                   	pop    %edi
+ 5a5:	5d                   	pop    %ebp
+ 5a6:	c3                   	ret    
+ 5a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ae:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 5b0:	83 ec 0c             	sub    $0xc,%esp
+ 5b3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5b8:	6a 00                	push   $0x0
+ 5ba:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 5bd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5c0:	8b 13                	mov    (%ebx),%edx
+ 5c2:	e8 59 fe ff ff       	call   420 <printint>
+        ap++;
+ 5c7:	89 d8                	mov    %ebx,%eax
+ 5c9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5cc:	31 d2                	xor    %edx,%edx
+        ap++;
+ 5ce:	83 c0 04             	add    $0x4,%eax
+ 5d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5d4:	e9 4b ff ff ff       	jmp    524 <printf+0x54>
+ 5d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 5e0:	83 ec 0c             	sub    $0xc,%esp
+ 5e3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5e8:	6a 01                	push   $0x1
+ 5ea:	eb ce                	jmp    5ba <printf+0xea>
+ 5ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 5f0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 5f3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5f6:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 5f8:	6a 01                	push   $0x1
+        ap++;
+ 5fa:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 5fd:	57                   	push   %edi
+ 5fe:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 601:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 604:	e8 6a fd ff ff       	call   373 <write>
+        ap++;
+ 609:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 60c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 60f:	31 d2                	xor    %edx,%edx
+ 611:	e9 0e ff ff ff       	jmp    524 <printf+0x54>
+ 616:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 61d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 620:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 623:	83 ec 04             	sub    $0x4,%esp
+ 626:	e9 59 ff ff ff       	jmp    584 <printf+0xb4>
+ 62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 62f:	90                   	nop
+        s = (char*)*ap;
+ 630:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 633:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 635:	83 c0 04             	add    $0x4,%eax
+ 638:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 63b:	85 db                	test   %ebx,%ebx
+ 63d:	74 17                	je     656 <printf+0x186>
+        while(*s != 0){
+ 63f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 642:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 644:	84 c0                	test   %al,%al
+ 646:	0f 84 d8 fe ff ff    	je     524 <printf+0x54>
+ 64c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 64f:	89 de                	mov    %ebx,%esi
+ 651:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 654:	eb 1a                	jmp    670 <printf+0x1a0>
+          s = "(null)";
+ 656:	bb 88 08 00 00       	mov    $0x888,%ebx
+        while(*s != 0){
+ 65b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 65e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 663:	89 de                	mov    %ebx,%esi
+ 665:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 668:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 66f:	90                   	nop
+  write(fd, &c, 1);
+ 670:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 673:	83 c6 01             	add    $0x1,%esi
+ 676:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 679:	6a 01                	push   $0x1
+ 67b:	57                   	push   %edi
+ 67c:	53                   	push   %ebx
+ 67d:	e8 f1 fc ff ff       	call   373 <write>
+        while(*s != 0){
+ 682:	0f b6 06             	movzbl (%esi),%eax
+ 685:	83 c4 10             	add    $0x10,%esp
+ 688:	84 c0                	test   %al,%al
+ 68a:	75 e4                	jne    670 <printf+0x1a0>
+ 68c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 68f:	31 d2                	xor    %edx,%edx
+ 691:	e9 8e fe ff ff       	jmp    524 <printf+0x54>
+ 696:	66 90                	xchg   %ax,%ax
+ 698:	66 90                	xchg   %ax,%ax
+ 69a:	66 90                	xchg   %ax,%ax
+ 69c:	66 90                	xchg   %ax,%ax
+ 69e:	66 90                	xchg   %ax,%ax
+
+000006a0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6a0:	f3 0f 1e fb          	endbr32 
+ 6a4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6a5:	a1 44 0b 00 00       	mov    0xb44,%eax
+{
+ 6aa:	89 e5                	mov    %esp,%ebp
+ 6ac:	57                   	push   %edi
+ 6ad:	56                   	push   %esi
+ 6ae:	53                   	push   %ebx
+ 6af:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6b2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 6b4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6b7:	39 c8                	cmp    %ecx,%eax
+ 6b9:	73 15                	jae    6d0 <free+0x30>
+ 6bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6bf:	90                   	nop
+ 6c0:	39 d1                	cmp    %edx,%ecx
+ 6c2:	72 14                	jb     6d8 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6c4:	39 d0                	cmp    %edx,%eax
+ 6c6:	73 10                	jae    6d8 <free+0x38>
+{
+ 6c8:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6ca:	8b 10                	mov    (%eax),%edx
+ 6cc:	39 c8                	cmp    %ecx,%eax
+ 6ce:	72 f0                	jb     6c0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6d0:	39 d0                	cmp    %edx,%eax
+ 6d2:	72 f4                	jb     6c8 <free+0x28>
+ 6d4:	39 d1                	cmp    %edx,%ecx
+ 6d6:	73 f0                	jae    6c8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6de:	39 fa                	cmp    %edi,%edx
+ 6e0:	74 1e                	je     700 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 6e2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6e5:	8b 50 04             	mov    0x4(%eax),%edx
+ 6e8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6eb:	39 f1                	cmp    %esi,%ecx
+ 6ed:	74 28                	je     717 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 6ef:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 6f1:	5b                   	pop    %ebx
+  freep = p;
+ 6f2:	a3 44 0b 00 00       	mov    %eax,0xb44
+}
+ 6f7:	5e                   	pop    %esi
+ 6f8:	5f                   	pop    %edi
+ 6f9:	5d                   	pop    %ebp
+ 6fa:	c3                   	ret    
+ 6fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6ff:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 700:	03 72 04             	add    0x4(%edx),%esi
+ 703:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 706:	8b 10                	mov    (%eax),%edx
+ 708:	8b 12                	mov    (%edx),%edx
+ 70a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 70d:	8b 50 04             	mov    0x4(%eax),%edx
+ 710:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 713:	39 f1                	cmp    %esi,%ecx
+ 715:	75 d8                	jne    6ef <free+0x4f>
+    p->s.size += bp->s.size;
+ 717:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 71a:	a3 44 0b 00 00       	mov    %eax,0xb44
+    p->s.size += bp->s.size;
+ 71f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 722:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 725:	89 10                	mov    %edx,(%eax)
+}
+ 727:	5b                   	pop    %ebx
+ 728:	5e                   	pop    %esi
+ 729:	5f                   	pop    %edi
+ 72a:	5d                   	pop    %ebp
+ 72b:	c3                   	ret    
+ 72c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000730 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 730:	f3 0f 1e fb          	endbr32 
+ 734:	55                   	push   %ebp
+ 735:	89 e5                	mov    %esp,%ebp
+ 737:	57                   	push   %edi
+ 738:	56                   	push   %esi
+ 739:	53                   	push   %ebx
+ 73a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 73d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 740:	8b 3d 44 0b 00 00    	mov    0xb44,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 746:	8d 70 07             	lea    0x7(%eax),%esi
+ 749:	c1 ee 03             	shr    $0x3,%esi
+ 74c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 74f:	85 ff                	test   %edi,%edi
+ 751:	0f 84 a9 00 00 00    	je     800 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 757:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 759:	8b 48 04             	mov    0x4(%eax),%ecx
+ 75c:	39 f1                	cmp    %esi,%ecx
+ 75e:	73 6d                	jae    7cd <malloc+0x9d>
+ 760:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 766:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 76b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 76e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 775:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 778:	eb 17                	jmp    791 <malloc+0x61>
+ 77a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 780:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 782:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 785:	39 f1                	cmp    %esi,%ecx
+ 787:	73 4f                	jae    7d8 <malloc+0xa8>
+ 789:	8b 3d 44 0b 00 00    	mov    0xb44,%edi
+ 78f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 791:	39 c7                	cmp    %eax,%edi
+ 793:	75 eb                	jne    780 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 795:	83 ec 0c             	sub    $0xc,%esp
+ 798:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 79b:	e8 3b fc ff ff       	call   3db <sbrk>
+  if(p == (char*)-1)
+ 7a0:	83 c4 10             	add    $0x10,%esp
+ 7a3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7a6:	74 1b                	je     7c3 <malloc+0x93>
+  hp->s.size = nu;
+ 7a8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7ab:	83 ec 0c             	sub    $0xc,%esp
+ 7ae:	83 c0 08             	add    $0x8,%eax
+ 7b1:	50                   	push   %eax
+ 7b2:	e8 e9 fe ff ff       	call   6a0 <free>
+  return freep;
+ 7b7:	a1 44 0b 00 00       	mov    0xb44,%eax
+      if((p = morecore(nunits)) == 0)
+ 7bc:	83 c4 10             	add    $0x10,%esp
+ 7bf:	85 c0                	test   %eax,%eax
+ 7c1:	75 bd                	jne    780 <malloc+0x50>
+        return 0;
+  }
+}
+ 7c3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7c6:	31 c0                	xor    %eax,%eax
+}
+ 7c8:	5b                   	pop    %ebx
+ 7c9:	5e                   	pop    %esi
+ 7ca:	5f                   	pop    %edi
+ 7cb:	5d                   	pop    %ebp
+ 7cc:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 7cd:	89 c2                	mov    %eax,%edx
+ 7cf:	89 f8                	mov    %edi,%eax
+ 7d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 7d8:	39 ce                	cmp    %ecx,%esi
+ 7da:	74 54                	je     830 <malloc+0x100>
+        p->s.size -= nunits;
+ 7dc:	29 f1                	sub    %esi,%ecx
+ 7de:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 7e1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 7e4:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 7e7:	a3 44 0b 00 00       	mov    %eax,0xb44
+}
+ 7ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 7ef:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 7f2:	5b                   	pop    %ebx
+ 7f3:	5e                   	pop    %esi
+ 7f4:	5f                   	pop    %edi
+ 7f5:	5d                   	pop    %ebp
+ 7f6:	c3                   	ret    
+ 7f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7fe:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 800:	c7 05 44 0b 00 00 48 	movl   $0xb48,0xb44
+ 807:	0b 00 00 
+    base.s.size = 0;
+ 80a:	bf 48 0b 00 00       	mov    $0xb48,%edi
+    base.s.ptr = freep = prevp = &base;
+ 80f:	c7 05 48 0b 00 00 48 	movl   $0xb48,0xb48
+ 816:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 819:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 81b:	c7 05 4c 0b 00 00 00 	movl   $0x0,0xb4c
+ 822:	00 00 00 
+    if(p->s.size >= nunits){
+ 825:	e9 36 ff ff ff       	jmp    760 <malloc+0x30>
+ 82a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 830:	8b 0a                	mov    (%edx),%ecx
+ 832:	89 08                	mov    %ecx,(%eax)
+ 834:	eb b1                	jmp    7e7 <malloc+0xb7>
diff -ruN xv6-public/init.d xv6-new/init.d
--- xv6-public/init.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/init.d	2022-10-07 22:43:42.871886833 +0530
@@ -0,0 +1 @@
+init.o: init.c /usr/include/stdc-predef.h types.h stat.h user.h fcntl.h
Binary files xv6-public/init.o and xv6-new/init.o differ
diff -ruN xv6-public/init.sym xv6-new/init.sym
--- xv6-public/init.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/init.sym	2022-10-07 22:43:42.871886833 +0530
@@ -0,0 +1,64 @@
+00000000 .text
+00000838 .rodata
+000008a4 .eh_frame
+00000b3c .data
+00000b44 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 init.c
+00000000 ulib.c
+00000000 printf.c
+00000420 printint
+00000890 digits.1096
+00000000 umalloc.c
+00000b44 freep
+00000b48 base
+000000f0 strcpy
+000004d0 printf
+00000b3c argv
+00000320 memmove
+0000039b mknod
+00000210 gets
+000003d3 getpid
+00000730 malloc
+000003e3 sleep
+00000413 get_burst_time
+00000363 pipe
+00000373 write
+000003ab fstat
+00000383 kill
+000003c3 chdir
+0000038b exec
+0000035b wait
+0000036b read
+000003a3 unlink
+0000034b fork
+000003db sbrk
+000003eb uptime
+00000b44 __bss_start
+000001b0 memset
+00000000 main
+0000040b set_burst_time
+00000120 strcmp
+000003cb dup
+000003fb getMaxPid
+000003f3 getNumProc
+00000403 getProcInfo
+00000290 stat
+00000b44 _edata
+00000b50 _end
+000003b3 link
+00000353 exit
+000002e0 atoi
+00000170 strlen
+00000393 open
+000001d0 strchr
+000003bb mkdir
+0000037b close
+000006a0 free
Binary files xv6-public/ioapic.o and xv6-new/ioapic.o differ
Binary files xv6-public/kalloc.o and xv6-new/kalloc.o differ
Binary files xv6-public/kbd.o and xv6-new/kbd.o differ
Binary files xv6-public/kernel and xv6-new/kernel differ
diff -ruN xv6-public/kernel.asm xv6-new/kernel.asm
--- xv6-public/kernel.asm	2022-10-07 22:45:12.281888101 +0530
+++ xv6-new/kernel.asm	2022-10-07 22:43:37.601886759 +0530
@@ -75,9 +75,9 @@
 {
 8010004d:	83 ec 0c             	sub    $0xc,%esp
   initlock(&bcache.lock, "bcache");
-80100050:	68 e0 70 10 80       	push   $0x801070e0
+80100050:	68 60 73 10 80       	push   $0x80107360
 80100055:	68 c0 b5 10 80       	push   $0x8010b5c0
-8010005a:	e8 81 43 00 00       	call   801043e0 <initlock>
+8010005a:	e8 81 45 00 00       	call   801045e0 <initlock>
   bcache.head.next = &bcache.head;
 8010005f:	83 c4 10             	add    $0x10,%esp
 80100062:	b8 bc fc 10 80       	mov    $0x8010fcbc,%eax
@@ -100,9 +100,9 @@
     b->prev = &bcache.head;
 8010008b:	c7 43 50 bc fc 10 80 	movl   $0x8010fcbc,0x50(%ebx)
     initsleeplock(&b->lock, "buffer");
-80100092:	68 e7 70 10 80       	push   $0x801070e7
+80100092:	68 67 73 10 80       	push   $0x80107367
 80100097:	50                   	push   %eax
-80100098:	e8 03 42 00 00       	call   801042a0 <initsleeplock>
+80100098:	e8 03 44 00 00       	call   801044a0 <initsleeplock>
     bcache.head.next->prev = b;
 8010009d:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
@@ -142,7 +142,7 @@
 801000e0:	8b 75 0c             	mov    0xc(%ebp),%esi
   acquire(&bcache.lock);
 801000e3:	68 c0 b5 10 80       	push   $0x8010b5c0
-801000e8:	e8 73 44 00 00       	call   80104560 <acquire>
+801000e8:	e8 73 46 00 00       	call   80104760 <acquire>
   for(b = bcache.head.next; b != &bcache.head; b = b->next){
 801000ed:	8b 1d 10 fd 10 80    	mov    0x8010fd10,%ebx
 801000f3:	83 c4 10             	add    $0x10,%esp
@@ -188,11 +188,11 @@
       release(&bcache.lock);
 8010015a:	83 ec 0c             	sub    $0xc,%esp
 8010015d:	68 c0 b5 10 80       	push   $0x8010b5c0
-80100162:	e8 b9 44 00 00       	call   80104620 <release>
+80100162:	e8 b9 46 00 00       	call   80104820 <release>
       acquiresleep(&b->lock);
 80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
 8010016a:	89 04 24             	mov    %eax,(%esp)
-8010016d:	e8 6e 41 00 00       	call   801042e0 <acquiresleep>
+8010016d:	e8 6e 43 00 00       	call   801044e0 <acquiresleep>
       return b;
 80100172:	83 c4 10             	add    $0x10,%esp
   struct buf *b;
@@ -229,7 +229,7 @@
 8010019e:	66 90                	xchg   %ax,%ax
   panic("bget: no buffers");
 801001a0:	83 ec 0c             	sub    $0xc,%esp
-801001a3:	68 ee 70 10 80       	push   $0x801070ee
+801001a3:	68 6e 73 10 80       	push   $0x8010736e
 801001a8:	e8 e3 01 00 00       	call   80100390 <panic>
 801001ad:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -248,7 +248,7 @@
   if(!holdingsleep(&b->lock))
 801001be:	8d 43 0c             	lea    0xc(%ebx),%eax
 801001c1:	50                   	push   %eax
-801001c2:	e8 b9 41 00 00       	call   80104380 <holdingsleep>
+801001c2:	e8 b9 43 00 00       	call   80104580 <holdingsleep>
 801001c7:	83 c4 10             	add    $0x10,%esp
 801001ca:	85 c0                	test   %eax,%eax
 801001cc:	74 0f                	je     801001dd <bwrite+0x2d>
@@ -264,7 +264,7 @@
 801001d8:	e9 a3 20 00 00       	jmp    80102280 <iderw>
     panic("bwrite");
 801001dd:	83 ec 0c             	sub    $0xc,%esp
-801001e0:	68 ff 70 10 80       	push   $0x801070ff
+801001e0:	68 7f 73 10 80       	push   $0x8010737f
 801001e5:	e8 a6 01 00 00       	call   80100390 <panic>
 801001ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
@@ -285,7 +285,7 @@
 801001fc:	8d 73 0c             	lea    0xc(%ebx),%esi
 801001ff:	83 ec 0c             	sub    $0xc,%esp
 80100202:	56                   	push   %esi
-80100203:	e8 78 41 00 00       	call   80104380 <holdingsleep>
+80100203:	e8 78 43 00 00       	call   80104580 <holdingsleep>
 80100208:	83 c4 10             	add    $0x10,%esp
 8010020b:	85 c0                	test   %eax,%eax
 8010020d:	74 66                	je     80100275 <brelse+0x85>
@@ -294,11 +294,11 @@
   releasesleep(&b->lock);
 8010020f:	83 ec 0c             	sub    $0xc,%esp
 80100212:	56                   	push   %esi
-80100213:	e8 28 41 00 00       	call   80104340 <releasesleep>
+80100213:	e8 28 43 00 00       	call   80104540 <releasesleep>
 
   acquire(&bcache.lock);
 80100218:	c7 04 24 c0 b5 10 80 	movl   $0x8010b5c0,(%esp)
-8010021f:	e8 3c 43 00 00       	call   80104560 <acquire>
+8010021f:	e8 3c 45 00 00       	call   80104760 <acquire>
   b->refcnt--;
 80100224:	8b 43 4c             	mov    0x4c(%ebx),%eax
   if (b->refcnt == 0) {
@@ -339,10 +339,10 @@
 8010026e:	5e                   	pop    %esi
 8010026f:	5d                   	pop    %ebp
   release(&bcache.lock);
-80100270:	e9 ab 43 00 00       	jmp    80104620 <release>
+80100270:	e9 ab 45 00 00       	jmp    80104820 <release>
     panic("brelse");
 80100275:	83 ec 0c             	sub    $0xc,%esp
-80100278:	68 06 71 10 80       	push   $0x80107106
+80100278:	68 86 73 10 80       	push   $0x80107386
 8010027d:	e8 0e 01 00 00       	call   80100390 <panic>
 80100282:	66 90                	xchg   %ax,%ax
 80100284:	66 90                	xchg   %ax,%ax
@@ -379,7 +379,7 @@
 801002a5:	e8 96 15 00 00       	call   80101840 <iunlock>
   acquire(&cons.lock);
 801002aa:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-801002b1:	e8 aa 42 00 00       	call   80104560 <acquire>
+801002b1:	e8 aa 44 00 00       	call   80104760 <acquire>
         // caller gets a 0-byte result.
         input.r--;
       }
@@ -404,21 +404,21 @@
 801002d8:	83 ec 08             	sub    $0x8,%esp
 801002db:	68 20 a5 10 80       	push   $0x8010a520
 801002e0:	68 a0 ff 10 80       	push   $0x8010ffa0
-801002e5:	e8 36 3c 00 00       	call   80103f20 <sleep>
+801002e5:	e8 86 3c 00 00       	call   80103f70 <sleep>
     while(input.r == input.w){
 801002ea:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
 801002ef:	83 c4 10             	add    $0x10,%esp
 801002f2:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
 801002f8:	75 36                	jne    80100330 <consoleread+0xa0>
       if(myproc()->killed){
-801002fa:	e8 61 36 00 00       	call   80103960 <myproc>
+801002fa:	e8 81 36 00 00       	call   80103980 <myproc>
 801002ff:	8b 48 24             	mov    0x24(%eax),%ecx
 80100302:	85 c9                	test   %ecx,%ecx
 80100304:	74 d2                	je     801002d8 <consoleread+0x48>
         release(&cons.lock);
 80100306:	83 ec 0c             	sub    $0xc,%esp
 80100309:	68 20 a5 10 80       	push   $0x8010a520
-8010030e:	e8 0d 43 00 00       	call   80104620 <release>
+8010030e:	e8 0d 45 00 00       	call   80104820 <release>
         ilock(ip);
 80100313:	5a                   	pop    %edx
 80100314:	ff 75 08             	pushl  0x8(%ebp)
@@ -463,7 +463,7 @@
   release(&cons.lock);
 8010035d:	83 ec 0c             	sub    $0xc,%esp
 80100360:	68 20 a5 10 80       	push   $0x8010a520
-80100365:	e8 b6 42 00 00       	call   80104620 <release>
+80100365:	e8 b6 44 00 00       	call   80104820 <release>
   ilock(ip);
 8010036a:	58                   	pop    %eax
 8010036b:	ff 75 08             	pushl  0x8(%ebp)
@@ -514,14 +514,14 @@
 801003ad:	e8 ee 24 00 00       	call   801028a0 <lapicid>
 801003b2:	83 ec 08             	sub    $0x8,%esp
 801003b5:	50                   	push   %eax
-801003b6:	68 0d 71 10 80       	push   $0x8010710d
+801003b6:	68 8d 73 10 80       	push   $0x8010738d
 801003bb:	e8 f0 02 00 00       	call   801006b0 <cprintf>
   cprintf(s);
 801003c0:	58                   	pop    %eax
 801003c1:	ff 75 08             	pushl  0x8(%ebp)
 801003c4:	e8 e7 02 00 00       	call   801006b0 <cprintf>
   cprintf("\n");
-801003c9:	c7 04 24 37 7a 10 80 	movl   $0x80107a37,(%esp)
+801003c9:	c7 04 24 cb 7c 10 80 	movl   $0x80107ccb,(%esp)
 801003d0:	e8 db 02 00 00       	call   801006b0 <cprintf>
   getcallerpcs(&s, pcs);
 801003d5:	8d 45 08             	lea    0x8(%ebp),%eax
@@ -529,14 +529,14 @@
 801003d9:	59                   	pop    %ecx
 801003da:	53                   	push   %ebx
 801003db:	50                   	push   %eax
-801003dc:	e8 1f 40 00 00       	call   80104400 <getcallerpcs>
+801003dc:	e8 1f 42 00 00       	call   80104600 <getcallerpcs>
   for(i=0; i<10; i++)
 801003e1:	83 c4 10             	add    $0x10,%esp
     cprintf(" %p", pcs[i]);
 801003e4:	83 ec 08             	sub    $0x8,%esp
 801003e7:	ff 33                	pushl  (%ebx)
 801003e9:	83 c3 04             	add    $0x4,%ebx
-801003ec:	68 21 71 10 80       	push   $0x80107121
+801003ec:	68 a1 73 10 80       	push   $0x801073a1
 801003f1:	e8 ba 02 00 00       	call   801006b0 <cprintf>
   for(i=0; i<10; i++)
 801003f6:	83 c4 10             	add    $0x10,%esp
@@ -564,7 +564,7 @@
     uartputc(c);
 80100426:	83 ec 0c             	sub    $0xc,%esp
 80100429:	50                   	push   %eax
-8010042a:	e8 b1 58 00 00       	call   80105ce0 <uartputc>
+8010042a:	e8 31 5b 00 00       	call   80105f60 <uartputc>
 8010042f:	83 c4 10             	add    $0x10,%esp
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
 80100432:	bf d4 03 00 00       	mov    $0x3d4,%edi
@@ -657,11 +657,11 @@
     uartputc('\b'); uartputc(' '); uartputc('\b');
 80100510:	83 ec 0c             	sub    $0xc,%esp
 80100513:	6a 08                	push   $0x8
-80100515:	e8 c6 57 00 00       	call   80105ce0 <uartputc>
+80100515:	e8 46 5a 00 00       	call   80105f60 <uartputc>
 8010051a:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
-80100521:	e8 ba 57 00 00       	call   80105ce0 <uartputc>
+80100521:	e8 3a 5a 00 00       	call   80105f60 <uartputc>
 80100526:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-8010052d:	e8 ae 57 00 00       	call   80105ce0 <uartputc>
+8010052d:	e8 2e 5a 00 00       	call   80105f60 <uartputc>
 80100532:	83 c4 10             	add    $0x10,%esp
 80100535:	e9 f8 fe ff ff       	jmp    80100432 <consputc.part.0+0x22>
 8010053a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -676,7 +676,7 @@
 80100552:	68 60 0e 00 00       	push   $0xe60
 80100557:	68 a0 80 0b 80       	push   $0x800b80a0
 8010055c:	68 00 80 0b 80       	push   $0x800b8000
-80100561:	e8 aa 41 00 00       	call   80104710 <memmove>
+80100561:	e8 aa 43 00 00       	call   80104910 <memmove>
     memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
 80100566:	b8 80 07 00 00       	mov    $0x780,%eax
 8010056b:	83 c4 0c             	add    $0xc,%esp
@@ -685,13 +685,13 @@
 80100572:	50                   	push   %eax
 80100573:	6a 00                	push   $0x0
 80100575:	56                   	push   %esi
-80100576:	e8 f5 40 00 00       	call   80104670 <memset>
+80100576:	e8 f5 42 00 00       	call   80104870 <memset>
 8010057b:	88 5d e7             	mov    %bl,-0x19(%ebp)
 8010057e:	83 c4 10             	add    $0x10,%esp
 80100581:	e9 22 ff ff ff       	jmp    801004a8 <consputc.part.0+0x98>
     panic("pos under/overflow");
 80100586:	83 ec 0c             	sub    $0xc,%esp
-80100589:	68 25 71 10 80       	push   $0x80107125
+80100589:	68 a5 73 10 80       	push   $0x801073a5
 8010058e:	e8 fd fd ff ff       	call   80100390 <panic>
 80100593:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010059a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -722,7 +722,7 @@
 801005c2:	31 d2                	xor    %edx,%edx
 801005c4:	89 ce                	mov    %ecx,%esi
 801005c6:	f7 75 d4             	divl   -0x2c(%ebp)
-801005c9:	0f b6 92 50 71 10 80 	movzbl -0x7fef8eb0(%edx),%edx
+801005c9:	0f b6 92 d0 73 10 80 	movzbl -0x7fef8c30(%edx),%edx
 801005d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
 801005d3:	89 d8                	mov    %ebx,%eax
 801005d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
@@ -801,7 +801,7 @@
 80100653:	e8 e8 11 00 00       	call   80101840 <iunlock>
   acquire(&cons.lock);
 80100658:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-8010065f:	e8 fc 3e 00 00       	call   80104560 <acquire>
+8010065f:	e8 fc 40 00 00       	call   80104760 <acquire>
   for(i = 0; i < n; i++)
 80100664:	83 c4 10             	add    $0x10,%esp
 80100667:	85 db                	test   %ebx,%ebx
@@ -826,7 +826,7 @@
   release(&cons.lock);
 8010068f:	83 ec 0c             	sub    $0xc,%esp
 80100692:	68 20 a5 10 80       	push   $0x8010a520
-80100697:	e8 84 3f 00 00       	call   80104620 <release>
+80100697:	e8 84 41 00 00       	call   80104820 <release>
   ilock(ip);
 8010069c:	58                   	pop    %eax
 8010069d:	ff 75 08             	pushl  0x8(%ebp)
@@ -936,7 +936,7 @@
 80100779:	85 db                	test   %ebx,%ebx
 8010077b:	75 55                	jne    801007d2 <cprintf+0x122>
         s = "(null)";
-8010077d:	bb 38 71 10 80       	mov    $0x80107138,%ebx
+8010077d:	bb b8 73 10 80       	mov    $0x801073b8,%ebx
       for(; *s; s++)
 80100782:	b8 28 00 00 00       	mov    $0x28,%eax
   if(panicked){
@@ -962,7 +962,7 @@
     acquire(&cons.lock);
 801007b5:	83 ec 0c             	sub    $0xc,%esp
 801007b8:	68 20 a5 10 80       	push   $0x8010a520
-801007bd:	e8 9e 3d 00 00       	call   80104560 <acquire>
+801007bd:	e8 9e 3f 00 00       	call   80104760 <acquire>
 801007c2:	83 c4 10             	add    $0x10,%esp
 801007c5:	e9 03 ff ff ff       	jmp    801006cd <cprintf+0x1d>
 801007ca:	e8 41 fc ff ff       	call   80100410 <consputc.part.0>
@@ -1003,13 +1003,13 @@
     release(&cons.lock);
 80100820:	83 ec 0c             	sub    $0xc,%esp
 80100823:	68 20 a5 10 80       	push   $0x8010a520
-80100828:	e8 f3 3d 00 00       	call   80104620 <release>
+80100828:	e8 f3 3f 00 00       	call   80104820 <release>
 8010082d:	83 c4 10             	add    $0x10,%esp
 }
 80100830:	e9 ee fe ff ff       	jmp    80100723 <cprintf+0x73>
     panic("null fmt");
 80100835:	83 ec 0c             	sub    $0xc,%esp
-80100838:	68 3f 71 10 80       	push   $0x8010713f
+80100838:	68 bf 73 10 80       	push   $0x801073bf
 8010083d:	e8 4e fb ff ff       	call   80100390 <panic>
 80100842:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80100848:	89 f8                	mov    %edi,%eax
@@ -1034,7 +1034,7 @@
 8010086f:	8b 7d 08             	mov    0x8(%ebp),%edi
   acquire(&cons.lock);
 80100872:	68 20 a5 10 80       	push   $0x8010a520
-80100877:	e8 e4 3c 00 00       	call   80104560 <acquire>
+80100877:	e8 e4 3e 00 00       	call   80104760 <acquire>
   while((c = getc()) >= 0){
 8010087c:	83 c4 10             	add    $0x10,%esp
 8010087f:	eb 17                	jmp    80100898 <consoleintr+0x38>
@@ -1145,7 +1145,7 @@
   release(&cons.lock);
 801009c7:	83 ec 0c             	sub    $0xc,%esp
 801009ca:	68 20 a5 10 80       	push   $0x8010a520
-801009cf:	e8 4c 3c 00 00       	call   80104620 <release>
+801009cf:	e8 4c 3e 00 00       	call   80104820 <release>
   if(doprocdump) {
 801009d4:	83 c4 10             	add    $0x10,%esp
 801009d7:	85 f6                	test   %esi,%esi
@@ -1173,7 +1173,7 @@
 801009fd:	5f                   	pop    %edi
 801009fe:	5d                   	pop    %ebp
     procdump();  // now call procdump() wo. cons.lock held
-801009ff:	e9 cc 37 00 00       	jmp    801041d0 <procdump>
+801009ff:	e9 2c 38 00 00       	jmp    80104230 <procdump>
 80100a04:	b8 0a 00 00 00       	mov    $0xa,%eax
 80100a09:	e8 02 fa ff ff       	call   80100410 <consputc.part.0>
         if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
@@ -1184,7 +1184,7 @@
 80100a16:	a3 a4 ff 10 80       	mov    %eax,0x8010ffa4
           wakeup(&input.r);
 80100a1b:	68 a0 ff 10 80       	push   $0x8010ffa0
-80100a20:	e8 bb 36 00 00       	call   801040e0 <wakeup>
+80100a20:	e8 0b 37 00 00       	call   80104130 <wakeup>
 80100a25:	83 c4 10             	add    $0x10,%esp
 80100a28:	e9 6b fe ff ff       	jmp    80100898 <consoleintr+0x38>
 80100a2d:	8d 76 00             	lea    0x0(%esi),%esi
@@ -1199,9 +1199,9 @@
 80100a35:	89 e5                	mov    %esp,%ebp
 80100a37:	83 ec 10             	sub    $0x10,%esp
   initlock(&cons.lock, "console");
-80100a3a:	68 48 71 10 80       	push   $0x80107148
+80100a3a:	68 c8 73 10 80       	push   $0x801073c8
 80100a3f:	68 20 a5 10 80       	push   $0x8010a520
-80100a44:	e8 97 39 00 00       	call   801043e0 <initlock>
+80100a44:	e8 97 3b 00 00       	call   801045e0 <initlock>
 
   devsw[CONSOLE].write = consolewrite;
   devsw[CONSOLE].read = consoleread;
@@ -1253,7 +1253,7 @@
   struct proghdr ph;
   pde_t *pgdir, *oldpgdir;
   struct proc *curproc = myproc();
-80100a90:	e8 cb 2e 00 00       	call   80103960 <myproc>
+80100a90:	e8 eb 2e 00 00       	call   80103980 <myproc>
 80100a95:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
 
   begin_op();
@@ -1317,7 +1317,7 @@
 80100b07:	45 4c 46 
 80100b0a:	75 ce                	jne    80100ada <exec+0x5a>
   if((pgdir = setupkvm()) == 0)
-80100b0c:	e8 3f 63 00 00       	call   80106e50 <setupkvm>
+80100b0c:	e8 bf 65 00 00       	call   801070d0 <setupkvm>
 80100b11:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
 80100b17:	85 c0                	test   %eax,%eax
 80100b19:	74 bf                	je     80100ada <exec+0x5a>
@@ -1347,7 +1347,7 @@
 80100b66:	50                   	push   %eax
 80100b67:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
 80100b6d:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100b73:	e8 f8 60 00 00       	call   80106c70 <allocuvm>
+80100b73:	e8 78 63 00 00       	call   80106ef0 <allocuvm>
 80100b78:	83 c4 10             	add    $0x10,%esp
 80100b7b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
 80100b81:	85 c0                	test   %eax,%eax
@@ -1363,7 +1363,7 @@
 80100ba1:	53                   	push   %ebx
 80100ba2:	50                   	push   %eax
 80100ba3:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100ba9:	e8 f2 5f 00 00       	call   80106ba0 <loaduvm>
+80100ba9:	e8 72 62 00 00       	call   80106e20 <loaduvm>
 80100bae:	83 c4 20             	add    $0x20,%esp
 80100bb1:	85 c0                	test   %eax,%eax
 80100bb3:	78 2d                	js     80100be2 <exec+0x162>
@@ -1386,7 +1386,7 @@
     freevm(pgdir);
 80100be2:	83 ec 0c             	sub    $0xc,%esp
 80100be5:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100beb:	e8 e0 61 00 00       	call   80106dd0 <freevm>
+80100beb:	e8 60 64 00 00       	call   80107050 <freevm>
   if(ip){
 80100bf0:	83 c4 10             	add    $0x10,%esp
 80100bf3:	e9 e2 fe ff ff       	jmp    80100ada <exec+0x5a>
@@ -1408,7 +1408,7 @@
 80100c2a:	57                   	push   %edi
 80100c2b:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
 80100c31:	57                   	push   %edi
-80100c32:	e8 39 60 00 00       	call   80106c70 <allocuvm>
+80100c32:	e8 b9 62 00 00       	call   80106ef0 <allocuvm>
 80100c37:	83 c4 10             	add    $0x10,%esp
 80100c3a:	89 c6                	mov    %eax,%esi
 80100c3c:	85 c0                	test   %eax,%eax
@@ -1424,7 +1424,7 @@
   for(argc = 0; argv[argc]; argc++) {
 80100c51:	31 ff                	xor    %edi,%edi
   clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
-80100c53:	e8 98 62 00 00       	call   80106ef0 <clearpteu>
+80100c53:	e8 18 65 00 00       	call   80107170 <clearpteu>
   for(argc = 0; argv[argc]; argc++) {
 80100c58:	8b 45 0c             	mov    0xc(%ebp),%eax
 80100c5b:	83 c4 10             	add    $0x10,%esp
@@ -1453,7 +1453,7 @@
     sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
 80100c9f:	83 ec 0c             	sub    $0xc,%esp
 80100ca2:	50                   	push   %eax
-80100ca3:	e8 c8 3b 00 00       	call   80104870 <strlen>
+80100ca3:	e8 c8 3d 00 00       	call   80104a70 <strlen>
 80100ca8:	f7 d0                	not    %eax
 80100caa:	01 c3                	add    %eax,%ebx
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
@@ -1463,14 +1463,14 @@
 80100cb0:	83 e3 fc             	and    $0xfffffffc,%ebx
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
 80100cb3:	ff 34 b8             	pushl  (%eax,%edi,4)
-80100cb6:	e8 b5 3b 00 00       	call   80104870 <strlen>
+80100cb6:	e8 b5 3d 00 00       	call   80104a70 <strlen>
 80100cbb:	83 c0 01             	add    $0x1,%eax
 80100cbe:	50                   	push   %eax
 80100cbf:	8b 45 0c             	mov    0xc(%ebp),%eax
 80100cc2:	ff 34 b8             	pushl  (%eax,%edi,4)
 80100cc5:	53                   	push   %ebx
 80100cc6:	56                   	push   %esi
-80100cc7:	e8 84 63 00 00       	call   80107050 <copyout>
+80100cc7:	e8 04 66 00 00       	call   801072d0 <copyout>
 80100ccc:	83 c4 20             	add    $0x20,%esp
 80100ccf:	85 c0                	test   %eax,%eax
 80100cd1:	79 ad                	jns    80100c80 <exec+0x200>
@@ -1479,7 +1479,7 @@
     freevm(pgdir);
 80100cd8:	83 ec 0c             	sub    $0xc,%esp
 80100cdb:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100ce1:	e8 ea 60 00 00       	call   80106dd0 <freevm>
+80100ce1:	e8 6a 63 00 00       	call   80107050 <freevm>
 80100ce6:	83 c4 10             	add    $0x10,%esp
   return -1;
 80100ce9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
@@ -1510,7 +1510,7 @@
   ustack[2] = sp - (argc+1)*4;  // argv pointer
 80100d2d:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
   if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-80100d33:	e8 18 63 00 00       	call   80107050 <copyout>
+80100d33:	e8 98 65 00 00       	call   801072d0 <copyout>
 80100d38:	83 c4 10             	add    $0x10,%esp
 80100d3b:	85 c0                	test   %eax,%eax
 80100d3d:	78 99                	js     80100cd8 <exec+0x258>
@@ -1540,7 +1540,7 @@
 80100d6c:	52                   	push   %edx
 80100d6d:	83 c0 6c             	add    $0x6c,%eax
 80100d70:	50                   	push   %eax
-80100d71:	e8 ba 3a 00 00       	call   80104830 <safestrcpy>
+80100d71:	e8 ba 3c 00 00       	call   80104a30 <safestrcpy>
   curproc->pgdir = pgdir;
 80100d76:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
   oldpgdir = curproc->pgdir;
@@ -1560,10 +1560,10 @@
 80100d97:	89 58 44             	mov    %ebx,0x44(%eax)
   switchuvm(curproc);
 80100d9a:	89 0c 24             	mov    %ecx,(%esp)
-80100d9d:	e8 6e 5c 00 00       	call   80106a10 <switchuvm>
+80100d9d:	e8 ee 5e 00 00       	call   80106c90 <switchuvm>
   freevm(oldpgdir);
 80100da2:	89 3c 24             	mov    %edi,(%esp)
-80100da5:	e8 26 60 00 00       	call   80106dd0 <freevm>
+80100da5:	e8 a6 62 00 00       	call   80107050 <freevm>
   return 0;
 80100daa:	83 c4 10             	add    $0x10,%esp
 80100dad:	31 c0                	xor    %eax,%eax
@@ -1572,7 +1572,7 @@
 80100db4:	e8 e7 1f 00 00       	call   80102da0 <end_op>
     cprintf("exec: fail\n");
 80100db9:	83 ec 0c             	sub    $0xc,%esp
-80100dbc:	68 61 71 10 80       	push   $0x80107161
+80100dbc:	68 e1 73 10 80       	push   $0x801073e1
 80100dc1:	e8 ea f8 ff ff       	call   801006b0 <cprintf>
     return -1;
 80100dc6:	83 c4 10             	add    $0x10,%esp
@@ -1596,9 +1596,9 @@
 80100de5:	89 e5                	mov    %esp,%ebp
 80100de7:	83 ec 10             	sub    $0x10,%esp
   initlock(&ftable.lock, "ftable");
-80100dea:	68 6d 71 10 80       	push   $0x8010716d
+80100dea:	68 ed 73 10 80       	push   $0x801073ed
 80100def:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100df4:	e8 e7 35 00 00       	call   801043e0 <initlock>
+80100df4:	e8 e7 37 00 00       	call   801045e0 <initlock>
 }
 80100df9:	83 c4 10             	add    $0x10,%esp
 80100dfc:	c9                   	leave  
@@ -1624,7 +1624,7 @@
 80100e0d:	83 ec 10             	sub    $0x10,%esp
   acquire(&ftable.lock);
 80100e10:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e15:	e8 46 37 00 00       	call   80104560 <acquire>
+80100e15:	e8 46 39 00 00       	call   80104760 <acquire>
 80100e1a:	83 c4 10             	add    $0x10,%esp
 80100e1d:	eb 0c                	jmp    80100e2b <filealloc+0x2b>
 80100e1f:	90                   	nop
@@ -1643,7 +1643,7 @@
 80100e35:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
       release(&ftable.lock);
 80100e3c:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e41:	e8 da 37 00 00       	call   80104620 <release>
+80100e41:	e8 da 39 00 00       	call   80104820 <release>
       return f;
     }
   }
@@ -1663,7 +1663,7 @@
 80100e53:	31 db                	xor    %ebx,%ebx
   release(&ftable.lock);
 80100e55:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e5a:	e8 c1 37 00 00       	call   80104620 <release>
+80100e5a:	e8 c1 39 00 00       	call   80104820 <release>
 }
 80100e5f:	89 d8                	mov    %ebx,%eax
   return 0;
@@ -1688,7 +1688,7 @@
 80100e7b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ftable.lock);
 80100e7e:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e83:	e8 d8 36 00 00       	call   80104560 <acquire>
+80100e83:	e8 d8 38 00 00       	call   80104760 <acquire>
   if(f->ref < 1)
 80100e88:	8b 43 04             	mov    0x4(%ebx),%eax
 80100e8b:	83 c4 10             	add    $0x10,%esp
@@ -1703,7 +1703,7 @@
 80100e98:	89 43 04             	mov    %eax,0x4(%ebx)
   release(&ftable.lock);
 80100e9b:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100ea0:	e8 7b 37 00 00       	call   80104620 <release>
+80100ea0:	e8 7b 39 00 00       	call   80104820 <release>
   return f;
 }
 80100ea5:	89 d8                	mov    %ebx,%eax
@@ -1712,7 +1712,7 @@
 80100eab:	c3                   	ret    
     panic("filedup");
 80100eac:	83 ec 0c             	sub    $0xc,%esp
-80100eaf:	68 74 71 10 80       	push   $0x80107174
+80100eaf:	68 f4 73 10 80       	push   $0x801073f4
 80100eb4:	e8 d7 f4 ff ff       	call   80100390 <panic>
 80100eb9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
@@ -1734,7 +1734,7 @@
 
   acquire(&ftable.lock);
 80100ed0:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100ed5:	e8 86 36 00 00       	call   80104560 <acquire>
+80100ed5:	e8 86 38 00 00       	call   80104760 <acquire>
   if(f->ref < 1)
 80100eda:	8b 53 04             	mov    0x4(%ebx),%edx
 80100edd:	83 c4 10             	add    $0x10,%esp
@@ -1767,7 +1767,7 @@
   ff = *f;
 80100f0d:	89 45 e0             	mov    %eax,-0x20(%ebp)
   release(&ftable.lock);
-80100f10:	e8 0b 37 00 00       	call   80104620 <release>
+80100f10:	e8 0b 39 00 00       	call   80104820 <release>
 
   if(ff.type == FD_PIPE)
 80100f15:	83 c4 10             	add    $0x10,%esp
@@ -1798,7 +1798,7 @@
 80100f3c:	5f                   	pop    %edi
 80100f3d:	5d                   	pop    %ebp
     release(&ftable.lock);
-80100f3e:	e9 dd 36 00 00       	jmp    80104620 <release>
+80100f3e:	e9 dd 38 00 00       	jmp    80104820 <release>
 80100f43:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80100f47:	90                   	nop
     begin_op();
@@ -1835,7 +1835,7 @@
 80100f88:	c3                   	ret    
     panic("fileclose");
 80100f89:	83 ec 0c             	sub    $0xc,%esp
-80100f8c:	68 7c 71 10 80       	push   $0x8010717c
+80100f8c:	68 fc 73 10 80       	push   $0x801073fc
 80100f91:	e8 fa f3 ff ff       	call   80100390 <panic>
 80100f96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80100f9d:	8d 76 00             	lea    0x0(%esi),%esi
@@ -1969,7 +1969,7 @@
 80101075:	eb d3                	jmp    8010104a <fileread+0x5a>
   panic("fileread");
 80101077:	83 ec 0c             	sub    $0xc,%esp
-8010107a:	68 86 71 10 80       	push   $0x80107186
+8010107a:	68 06 74 10 80       	push   $0x80107406
 8010107f:	e8 0c f3 ff ff       	call   80100390 <panic>
 80101084:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010108b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2093,7 +2093,7 @@
 8010115e:	75 17                	jne    80101177 <filewrite+0xe7>
         panic("short filewrite");
 80101160:	83 ec 0c             	sub    $0xc,%esp
-80101163:	68 8f 71 10 80       	push   $0x8010718f
+80101163:	68 0f 74 10 80       	push   $0x8010740f
 80101168:	e8 23 f2 ff ff       	call   80100390 <panic>
 8010116d:	8d 76 00             	lea    0x0(%esi),%esi
     }
@@ -2124,7 +2124,7 @@
 80101191:	e9 0a 24 00 00       	jmp    801035a0 <pipewrite>
   panic("filewrite");
 80101196:	83 ec 0c             	sub    $0xc,%esp
-80101199:	68 95 71 10 80       	push   $0x80107195
+80101199:	68 15 74 10 80       	push   $0x80107415
 8010119e:	e8 ed f1 ff ff       	call   80100390 <panic>
 801011a3:	66 90                	xchg   %ax,%ax
 801011a5:	66 90                	xchg   %ax,%ax
@@ -2201,7 +2201,7 @@
 80101213:	c3                   	ret    
     panic("freeing free block");
 80101214:	83 ec 0c             	sub    $0xc,%esp
-80101217:	68 9f 71 10 80       	push   $0x8010719f
+80101217:	68 1f 74 10 80       	push   $0x8010741f
 8010121c:	e8 6f f1 ff ff       	call   80100390 <panic>
 80101221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80101228:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -2274,7 +2274,7 @@
 801012cf:	77 80                	ja     80101251 <balloc+0x21>
   panic("balloc: out of blocks");
 801012d1:	83 ec 0c             	sub    $0xc,%esp
-801012d4:	68 b2 71 10 80       	push   $0x801071b2
+801012d4:	68 32 74 10 80       	push   $0x80107432
 801012d9:	e8 b2 f0 ff ff       	call   80100390 <panic>
 801012de:	66 90                	xchg   %ax,%ax
         bp->data[bi/8] |= m;  // Mark block in use.
@@ -2305,7 +2305,7 @@
 8010130d:	68 00 02 00 00       	push   $0x200
 80101312:	6a 00                	push   $0x0
 80101314:	50                   	push   %eax
-80101315:	e8 56 33 00 00       	call   80104670 <memset>
+80101315:	e8 56 35 00 00       	call   80104870 <memset>
   log_write(bp);
 8010131a:	89 1c 24             	mov    %ebx,(%esp)
 8010131d:	e8 ee 1b 00 00       	call   80102f10 <log_write>
@@ -2352,7 +2352,7 @@
 80101352:	89 55 e4             	mov    %edx,-0x1c(%ebp)
   acquire(&icache.lock);
 80101355:	68 e0 09 11 80       	push   $0x801109e0
-8010135a:	e8 01 32 00 00       	call   80104560 <acquire>
+8010135a:	e8 01 34 00 00       	call   80104760 <acquire>
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
 8010135f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   acquire(&icache.lock);
@@ -2412,7 +2412,7 @@
 801013bb:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
   release(&icache.lock);
 801013c2:	68 e0 09 11 80       	push   $0x801109e0
-801013c7:	e8 54 32 00 00       	call   80104620 <release>
+801013c7:	e8 54 34 00 00       	call   80104820 <release>
 
   return ip;
 801013cc:	83 c4 10             	add    $0x10,%esp
@@ -2439,7 +2439,7 @@
       ip->ref++;
 801013f2:	89 4b 08             	mov    %ecx,0x8(%ebx)
       release(&icache.lock);
-801013f5:	e8 26 32 00 00       	call   80104620 <release>
+801013f5:	e8 26 34 00 00       	call   80104820 <release>
       return ip;
 801013fa:	83 c4 10             	add    $0x10,%esp
 }
@@ -2460,7 +2460,7 @@
 8010141a:	e9 6e ff ff ff       	jmp    8010138d <iget+0x4d>
     panic("iget: no inodes");
 8010141f:	83 ec 0c             	sub    $0xc,%esp
-80101422:	68 c8 71 10 80       	push   $0x801071c8
+80101422:	68 48 74 10 80       	push   $0x80107448
 80101427:	e8 64 ef ff ff       	call   80100390 <panic>
 8010142c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
@@ -2581,7 +2581,7 @@
 801014e7:	c3                   	ret    
   panic("bmap: out of range");
 801014e8:	83 ec 0c             	sub    $0xc,%esp
-801014eb:	68 d8 71 10 80       	push   $0x801071d8
+801014eb:	68 58 74 10 80       	push   $0x80107458
 801014f0:	e8 9b ee ff ff       	call   80100390 <panic>
 801014f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 801014fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2608,7 +2608,7 @@
 80101521:	6a 1c                	push   $0x1c
 80101523:	50                   	push   %eax
 80101524:	56                   	push   %esi
-80101525:	e8 e6 31 00 00       	call   80104710 <memmove>
+80101525:	e8 e6 33 00 00       	call   80104910 <memmove>
   brelse(bp);
 8010152a:	89 5d 08             	mov    %ebx,0x8(%ebp)
 8010152d:	83 c4 10             	add    $0x10,%esp
@@ -2631,18 +2631,18 @@
 80101548:	bb 20 0a 11 80       	mov    $0x80110a20,%ebx
 8010154d:	83 ec 0c             	sub    $0xc,%esp
   initlock(&icache.lock, "icache");
-80101550:	68 eb 71 10 80       	push   $0x801071eb
+80101550:	68 6b 74 10 80       	push   $0x8010746b
 80101555:	68 e0 09 11 80       	push   $0x801109e0
-8010155a:	e8 81 2e 00 00       	call   801043e0 <initlock>
+8010155a:	e8 81 30 00 00       	call   801045e0 <initlock>
   for(i = 0; i < NINODE; i++) {
 8010155f:	83 c4 10             	add    $0x10,%esp
 80101562:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     initsleeplock(&icache.inode[i].lock, "inode");
 80101568:	83 ec 08             	sub    $0x8,%esp
-8010156b:	68 f2 71 10 80       	push   $0x801071f2
+8010156b:	68 72 74 10 80       	push   $0x80107472
 80101570:	53                   	push   %ebx
 80101571:	81 c3 90 00 00 00    	add    $0x90,%ebx
-80101577:	e8 24 2d 00 00       	call   801042a0 <initsleeplock>
+80101577:	e8 24 2f 00 00       	call   801044a0 <initsleeplock>
   for(i = 0; i < NINODE; i++) {
 8010157c:	83 c4 10             	add    $0x10,%esp
 8010157f:	81 fb 40 26 11 80    	cmp    $0x80112640,%ebx
@@ -2660,7 +2660,7 @@
 801015af:	ff 35 c8 09 11 80    	pushl  0x801109c8
 801015b5:	ff 35 c4 09 11 80    	pushl  0x801109c4
 801015bb:	ff 35 c0 09 11 80    	pushl  0x801109c0
-801015c1:	68 58 72 10 80       	push   $0x80107258
+801015c1:	68 d8 74 10 80       	push   $0x801074d8
 801015c6:	e8 e5 f0 ff ff       	call   801006b0 <cprintf>
 }
 801015cb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
@@ -2727,7 +2727,7 @@
 80101659:	6a 40                	push   $0x40
 8010165b:	6a 00                	push   $0x0
 8010165d:	51                   	push   %ecx
-8010165e:	e8 0d 30 00 00       	call   80104670 <memset>
+8010165e:	e8 0d 32 00 00       	call   80104870 <memset>
       dip->type = type;
 80101663:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
 80101667:	8b 4d e0             	mov    -0x20(%ebp),%ecx
@@ -2756,7 +2756,7 @@
 8010168b:	e9 b0 fc ff ff       	jmp    80101340 <iget>
   panic("ialloc: no inodes");
 80101690:	83 ec 0c             	sub    $0xc,%esp
-80101693:	68 f8 71 10 80       	push   $0x801071f8
+80101693:	68 78 74 10 80       	push   $0x80107478
 80101698:	e8 f3 ec ff ff       	call   80100390 <panic>
 8010169d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -2811,7 +2811,7 @@
 80101701:	6a 34                	push   $0x34
 80101703:	53                   	push   %ebx
 80101704:	50                   	push   %eax
-80101705:	e8 06 30 00 00       	call   80104710 <memmove>
+80101705:	e8 06 32 00 00       	call   80104910 <memmove>
   log_write(bp);
 8010170a:	89 34 24             	mov    %esi,(%esp)
 8010170d:	e8 fe 17 00 00       	call   80102f10 <log_write>
@@ -2838,12 +2838,12 @@
 8010173b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&icache.lock);
 8010173e:	68 e0 09 11 80       	push   $0x801109e0
-80101743:	e8 18 2e 00 00       	call   80104560 <acquire>
+80101743:	e8 18 30 00 00       	call   80104760 <acquire>
   ip->ref++;
 80101748:	83 43 08 01          	addl   $0x1,0x8(%ebx)
   release(&icache.lock);
 8010174c:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101753:	e8 c8 2e 00 00       	call   80104620 <release>
+80101753:	e8 c8 30 00 00       	call   80104820 <release>
 }
 80101758:	89 d8                	mov    %ebx,%eax
 8010175a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
@@ -2869,7 +2869,7 @@
 8010177f:	83 ec 0c             	sub    $0xc,%esp
 80101782:	8d 43 0c             	lea    0xc(%ebx),%eax
 80101785:	50                   	push   %eax
-80101786:	e8 55 2b 00 00       	call   801042e0 <acquiresleep>
+80101786:	e8 55 2d 00 00       	call   801044e0 <acquiresleep>
   if(ip->valid == 0){
 8010178b:	8b 43 4c             	mov    0x4c(%ebx),%eax
 8010178e:	83 c4 10             	add    $0x10,%esp
@@ -2922,7 +2922,7 @@
 801017f3:	50                   	push   %eax
 801017f4:	8d 43 5c             	lea    0x5c(%ebx),%eax
 801017f7:	50                   	push   %eax
-801017f8:	e8 13 2f 00 00       	call   80104710 <memmove>
+801017f8:	e8 13 31 00 00       	call   80104910 <memmove>
     brelse(bp);
 801017fd:	89 34 24             	mov    %esi,(%esp)
 80101800:	e8 eb e9 ff ff       	call   801001f0 <brelse>
@@ -2935,11 +2935,11 @@
 80101814:	0f 85 7b ff ff ff    	jne    80101795 <ilock+0x35>
       panic("ilock: no type");
 8010181a:	83 ec 0c             	sub    $0xc,%esp
-8010181d:	68 10 72 10 80       	push   $0x80107210
+8010181d:	68 90 74 10 80       	push   $0x80107490
 80101822:	e8 69 eb ff ff       	call   80100390 <panic>
     panic("ilock");
 80101827:	83 ec 0c             	sub    $0xc,%esp
-8010182a:	68 0a 72 10 80       	push   $0x8010720a
+8010182a:	68 8a 74 10 80       	push   $0x8010748a
 8010182f:	e8 5c eb ff ff       	call   80100390 <panic>
 80101834:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010183b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2959,7 +2959,7 @@
 80101850:	83 ec 0c             	sub    $0xc,%esp
 80101853:	8d 73 0c             	lea    0xc(%ebx),%esi
 80101856:	56                   	push   %esi
-80101857:	e8 24 2b 00 00       	call   80104380 <holdingsleep>
+80101857:	e8 24 2d 00 00       	call   80104580 <holdingsleep>
 8010185c:	83 c4 10             	add    $0x10,%esp
 8010185f:	85 c0                	test   %eax,%eax
 80101861:	74 15                	je     80101878 <iunlock+0x38>
@@ -2974,10 +2974,10 @@
 80101871:	5e                   	pop    %esi
 80101872:	5d                   	pop    %ebp
   releasesleep(&ip->lock);
-80101873:	e9 c8 2a 00 00       	jmp    80104340 <releasesleep>
+80101873:	e9 c8 2c 00 00       	jmp    80104540 <releasesleep>
     panic("iunlock");
 80101878:	83 ec 0c             	sub    $0xc,%esp
-8010187b:	68 1f 72 10 80       	push   $0x8010721f
+8010187b:	68 9f 74 10 80       	push   $0x8010749f
 80101880:	e8 0b eb ff ff       	call   80100390 <panic>
 80101885:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010188c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2995,7 +2995,7 @@
   acquiresleep(&ip->lock);
 801018a0:	8d 7b 0c             	lea    0xc(%ebx),%edi
 801018a3:	57                   	push   %edi
-801018a4:	e8 37 2a 00 00       	call   801042e0 <acquiresleep>
+801018a4:	e8 37 2c 00 00       	call   801044e0 <acquiresleep>
   if(ip->valid && ip->nlink == 0){
 801018a9:	8b 53 4c             	mov    0x4c(%ebx),%edx
 801018ac:	83 c4 10             	add    $0x10,%esp
@@ -3006,10 +3006,10 @@
   releasesleep(&ip->lock);
 801018ba:	83 ec 0c             	sub    $0xc,%esp
 801018bd:	57                   	push   %edi
-801018be:	e8 7d 2a 00 00       	call   80104340 <releasesleep>
+801018be:	e8 7d 2c 00 00       	call   80104540 <releasesleep>
   acquire(&icache.lock);
 801018c3:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-801018ca:	e8 91 2c 00 00       	call   80104560 <acquire>
+801018ca:	e8 91 2e 00 00       	call   80104760 <acquire>
   ip->ref--;
 801018cf:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
   release(&icache.lock);
@@ -3022,17 +3022,17 @@
 801018e2:	5f                   	pop    %edi
 801018e3:	5d                   	pop    %ebp
   release(&icache.lock);
-801018e4:	e9 37 2d 00 00       	jmp    80104620 <release>
+801018e4:	e9 37 2f 00 00       	jmp    80104820 <release>
 801018e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     acquire(&icache.lock);
 801018f0:	83 ec 0c             	sub    $0xc,%esp
 801018f3:	68 e0 09 11 80       	push   $0x801109e0
-801018f8:	e8 63 2c 00 00       	call   80104560 <acquire>
+801018f8:	e8 63 2e 00 00       	call   80104760 <acquire>
     int r = ip->ref;
 801018fd:	8b 73 08             	mov    0x8(%ebx),%esi
     release(&icache.lock);
 80101900:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101907:	e8 14 2d 00 00       	call   80104620 <release>
+80101907:	e8 14 2f 00 00       	call   80104820 <release>
     if(r == 1){
 8010190c:	83 c4 10             	add    $0x10,%esp
 8010190f:	83 fe 01             	cmp    $0x1,%esi
@@ -3287,7 +3287,7 @@
     memmove(dst, bp->data + off%BSIZE, m);
 80101b03:	50                   	push   %eax
 80101b04:	ff 75 e0             	pushl  -0x20(%ebp)
-80101b07:	e8 04 2c 00 00       	call   80104710 <memmove>
+80101b07:	e8 04 2e 00 00       	call   80104910 <memmove>
     brelse(bp);
 80101b0c:	8b 55 dc             	mov    -0x24(%ebp),%edx
 80101b0f:	89 14 24             	mov    %edx,(%esp)
@@ -3417,7 +3417,7 @@
     memmove(bp->data + off%BSIZE, src, m);
 80101bff:	ff 75 dc             	pushl  -0x24(%ebp)
 80101c02:	50                   	push   %eax
-80101c03:	e8 08 2b 00 00       	call   80104710 <memmove>
+80101c03:	e8 08 2d 00 00       	call   80104910 <memmove>
     log_write(bp);
 80101c08:	89 3c 24             	mov    %edi,(%esp)
 80101c0b:	e8 00 13 00 00       	call   80102f10 <log_write>
@@ -3500,7 +3500,7 @@
 80101c9a:	6a 0e                	push   $0xe
 80101c9c:	ff 75 0c             	pushl  0xc(%ebp)
 80101c9f:	ff 75 08             	pushl  0x8(%ebp)
-80101ca2:	e8 d9 2a 00 00       	call   80104780 <strncmp>
+80101ca2:	e8 d9 2c 00 00       	call   80104980 <strncmp>
 }
 80101ca7:	c9                   	leave  
 80101ca8:	c3                   	ret    
@@ -3556,7 +3556,7 @@
 80101cff:	6a 0e                	push   $0xe
 80101d01:	50                   	push   %eax
 80101d02:	ff 75 0c             	pushl  0xc(%ebp)
-80101d05:	e8 76 2a 00 00       	call   80104780 <strncmp>
+80101d05:	e8 76 2c 00 00       	call   80104980 <strncmp>
       continue;
     if(namecmp(name, de.name) == 0){
 80101d0a:	83 c4 10             	add    $0x10,%esp
@@ -3604,11 +3604,11 @@
 80101d46:	c3                   	ret    
       panic("dirlookup read");
 80101d47:	83 ec 0c             	sub    $0xc,%esp
-80101d4a:	68 39 72 10 80       	push   $0x80107239
+80101d4a:	68 b9 74 10 80       	push   $0x801074b9
 80101d4f:	e8 3c e6 ff ff       	call   80100390 <panic>
     panic("dirlookup not DIR");
 80101d54:	83 ec 0c             	sub    $0xc,%esp
-80101d57:	68 27 72 10 80       	push   $0x80107227
+80101d57:	68 a7 74 10 80       	push   $0x801074a7
 80101d5c:	e8 2f e6 ff ff       	call   80100390 <panic>
 80101d61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80101d68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -3640,7 +3640,7 @@
     ip = iget(ROOTDEV, ROOTINO);
   else
     ip = idup(myproc()->cwd);
-80101d8a:	e8 d1 1b 00 00       	call   80103960 <myproc>
+80101d8a:	e8 f1 1b 00 00       	call   80103980 <myproc>
   acquire(&icache.lock);
 80101d8f:	83 ec 0c             	sub    $0xc,%esp
 80101d92:	89 df                	mov    %ebx,%edi
@@ -3648,12 +3648,12 @@
 80101d94:	8b 70 68             	mov    0x68(%eax),%esi
   acquire(&icache.lock);
 80101d97:	68 e0 09 11 80       	push   $0x801109e0
-80101d9c:	e8 bf 27 00 00       	call   80104560 <acquire>
+80101d9c:	e8 bf 29 00 00       	call   80104760 <acquire>
   ip->ref++;
 80101da1:	83 46 08 01          	addl   $0x1,0x8(%esi)
   release(&icache.lock);
 80101da5:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101dac:	e8 6f 28 00 00       	call   80104620 <release>
+80101dac:	e8 6f 2a 00 00       	call   80104820 <release>
 80101db1:	83 c4 10             	add    $0x10,%esp
 80101db4:	eb 0d                	jmp    80101dc3 <namex+0x53>
 80101db6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -3698,7 +3698,7 @@
 80101e12:	89 df                	mov    %ebx,%edi
     memmove(name, s, DIRSIZ);
 80101e14:	ff 75 e4             	pushl  -0x1c(%ebp)
-80101e17:	e8 f4 28 00 00       	call   80104710 <memmove>
+80101e17:	e8 f4 2a 00 00       	call   80104910 <memmove>
 80101e1c:	83 c4 10             	add    $0x10,%esp
   while(*path == '/')
 80101e1f:	80 3b 2f             	cmpb   $0x2f,(%ebx)
@@ -3764,7 +3764,7 @@
 80101e9e:	89 df                	mov    %ebx,%edi
     memmove(name, s, len);
 80101ea0:	ff 75 e4             	pushl  -0x1c(%ebp)
-80101ea3:	e8 68 28 00 00       	call   80104710 <memmove>
+80101ea3:	e8 68 2a 00 00       	call   80104910 <memmove>
     name[len] = 0;
 80101ea8:	8b 45 dc             	mov    -0x24(%ebp),%eax
 80101eab:	83 c4 10             	add    $0x10,%esp
@@ -3910,7 +3910,7 @@
 80101fcf:	6a 0e                	push   $0xe
 80101fd1:	ff 75 0c             	pushl  0xc(%ebp)
 80101fd4:	50                   	push   %eax
-80101fd5:	e8 f6 27 00 00       	call   801047d0 <strncpy>
+80101fd5:	e8 f6 29 00 00       	call   801049d0 <strncpy>
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
 80101fda:	6a 10                	push   $0x10
   de.inum = inum;
@@ -3945,11 +3945,11 @@
 8010200e:	eb e5                	jmp    80101ff5 <dirlink+0x85>
       panic("dirlink read");
 80102010:	83 ec 0c             	sub    $0xc,%esp
-80102013:	68 48 72 10 80       	push   $0x80107248
+80102013:	68 c8 74 10 80       	push   $0x801074c8
 80102018:	e8 73 e3 ff ff       	call   80100390 <panic>
     panic("dirlink");
 8010201d:	83 ec 0c             	sub    $0xc,%esp
-80102020:	68 1e 78 10 80       	push   $0x8010781e
+80102020:	68 b2 7a 10 80       	push   $0x80107ab2
 80102025:	e8 66 e3 ff ff       	call   80100390 <panic>
 8010202a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
@@ -4100,11 +4100,11 @@
 80102127:	c3                   	ret    
     panic("incorrect blockno");
 80102128:	83 ec 0c             	sub    $0xc,%esp
-8010212b:	68 b4 72 10 80       	push   $0x801072b4
+8010212b:	68 34 75 10 80       	push   $0x80107534
 80102130:	e8 5b e2 ff ff       	call   80100390 <panic>
     panic("idestart");
 80102135:	83 ec 0c             	sub    $0xc,%esp
-80102138:	68 ab 72 10 80       	push   $0x801072ab
+80102138:	68 2b 75 10 80       	push   $0x8010752b
 8010213d:	e8 4e e2 ff ff       	call   80100390 <panic>
 80102142:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80102149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -4116,9 +4116,9 @@
 80102155:	89 e5                	mov    %esp,%ebp
 80102157:	83 ec 10             	sub    $0x10,%esp
   initlock(&idelock, "ide");
-8010215a:	68 c6 72 10 80       	push   $0x801072c6
+8010215a:	68 46 75 10 80       	push   $0x80107546
 8010215f:	68 80 a5 10 80       	push   $0x8010a580
-80102164:	e8 77 22 00 00       	call   801043e0 <initlock>
+80102164:	e8 77 24 00 00       	call   801045e0 <initlock>
   ioapicenable(IRQ_IDE, ncpu - 1);
 80102169:	58                   	pop    %eax
 8010216a:	a1 00 2d 11 80       	mov    0x80112d00,%eax
@@ -4186,7 +4186,7 @@
   // First queued buffer is the active request.
   acquire(&idelock);
 801021ed:	68 80 a5 10 80       	push   $0x8010a580
-801021f2:	e8 69 23 00 00       	call   80104560 <acquire>
+801021f2:	e8 69 25 00 00       	call   80104760 <acquire>
 
   if((b = idequeue) == 0){
 801021f7:	8b 1d 64 a5 10 80    	mov    0x8010a564,%ebx
@@ -4238,7 +4238,7 @@
 8010224a:	89 33                	mov    %esi,(%ebx)
   wakeup(b);
 8010224c:	53                   	push   %ebx
-8010224d:	e8 8e 1e 00 00       	call   801040e0 <wakeup>
+8010224d:	e8 de 1e 00 00       	call   80104130 <wakeup>
 
   // Start disk on next buf in queue.
   if(idequeue != 0)
@@ -4251,7 +4251,7 @@
     release(&idelock);
 80102263:	83 ec 0c             	sub    $0xc,%esp
 80102266:	68 80 a5 10 80       	push   $0x8010a580
-8010226b:	e8 b0 23 00 00       	call   80104620 <release>
+8010226b:	e8 b0 25 00 00       	call   80104820 <release>
 
   release(&idelock);
 }
@@ -4282,7 +4282,7 @@
   if(!holdingsleep(&b->lock))
 8010228e:	8d 43 0c             	lea    0xc(%ebx),%eax
 80102291:	50                   	push   %eax
-80102292:	e8 e9 20 00 00       	call   80104380 <holdingsleep>
+80102292:	e8 e9 22 00 00       	call   80104580 <holdingsleep>
 80102297:	83 c4 10             	add    $0x10,%esp
 8010229a:	85 c0                	test   %eax,%eax
 8010229c:	0f 84 cf 00 00 00    	je     80102371 <iderw+0xf1>
@@ -4305,7 +4305,7 @@
   acquire(&idelock);  //DOC:acquire-lock
 801022c4:	83 ec 0c             	sub    $0xc,%esp
 801022c7:	68 80 a5 10 80       	push   $0x8010a580
-801022cc:	e8 8f 22 00 00       	call   80104560 <acquire>
+801022cc:	e8 8f 24 00 00       	call   80104760 <acquire>
 
   // Append b to idequeue.
   b->qnext = 0;
@@ -4345,7 +4345,7 @@
 80102310:	83 ec 08             	sub    $0x8,%esp
 80102313:	68 80 a5 10 80       	push   $0x8010a580
 80102318:	53                   	push   %ebx
-80102319:	e8 02 1c 00 00       	call   80103f20 <sleep>
+80102319:	e8 52 1c 00 00       	call   80103f70 <sleep>
   while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
 8010231e:	8b 03                	mov    (%ebx),%eax
 80102320:	83 c4 10             	add    $0x10,%esp
@@ -4361,7 +4361,7 @@
 80102332:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 80102335:	c9                   	leave  
   release(&idelock);
-80102336:	e9 e5 22 00 00       	jmp    80104620 <release>
+80102336:	e9 e5 24 00 00       	jmp    80104820 <release>
 8010233b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8010233f:	90                   	nop
     idestart(b);
@@ -4374,15 +4374,15 @@
 80102355:	eb 9d                	jmp    801022f4 <iderw+0x74>
     panic("iderw: ide disk 1 not present");
 80102357:	83 ec 0c             	sub    $0xc,%esp
-8010235a:	68 f5 72 10 80       	push   $0x801072f5
+8010235a:	68 75 75 10 80       	push   $0x80107575
 8010235f:	e8 2c e0 ff ff       	call   80100390 <panic>
     panic("iderw: nothing to do");
 80102364:	83 ec 0c             	sub    $0xc,%esp
-80102367:	68 e0 72 10 80       	push   $0x801072e0
+80102367:	68 60 75 10 80       	push   $0x80107560
 8010236c:	e8 1f e0 ff ff       	call   80100390 <panic>
     panic("iderw: buf not locked");
 80102371:	83 ec 0c             	sub    $0xc,%esp
-80102374:	68 ca 72 10 80       	push   $0x801072ca
+80102374:	68 4a 75 10 80       	push   $0x8010754a
 80102379:	e8 12 e0 ff ff       	call   80100390 <panic>
 8010237e:	66 90                	xchg   %ax,%ax
 
@@ -4431,7 +4431,7 @@
 801023c9:	74 16                	je     801023e1 <ioapicinit+0x61>
     cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
 801023cb:	83 ec 0c             	sub    $0xc,%esp
-801023ce:	68 14 73 10 80       	push   $0x80107314
+801023ce:	68 94 75 10 80       	push   $0x80107594
 801023d3:	e8 d8 e2 ff ff       	call   801006b0 <cprintf>
 801023d8:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
 801023de:	83 c4 10             	add    $0x10,%esp
@@ -4539,7 +4539,7 @@
   if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
 8010247e:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
 80102484:	75 7a                	jne    80102500 <kfree+0x90>
-80102486:	81 fb a8 54 11 80    	cmp    $0x801154a8,%ebx
+80102486:	81 fb a8 56 11 80    	cmp    $0x801156a8,%ebx
 8010248c:	72 72                	jb     80102500 <kfree+0x90>
 8010248e:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
 80102494:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
@@ -4552,7 +4552,7 @@
 8010249e:	68 00 10 00 00       	push   $0x1000
 801024a3:	6a 01                	push   $0x1
 801024a5:	53                   	push   %ebx
-801024a6:	e8 c5 21 00 00       	call   80104670 <memset>
+801024a6:	e8 c5 23 00 00       	call   80104870 <memset>
 
   if(kmem.use_lock)
 801024ab:	8b 15 74 26 11 80    	mov    0x80112674,%edx
@@ -4582,7 +4582,7 @@
     acquire(&kmem.lock);
 801024d8:	83 ec 0c             	sub    $0xc,%esp
 801024db:	68 40 26 11 80       	push   $0x80112640
-801024e0:	e8 7b 20 00 00       	call   80104560 <acquire>
+801024e0:	e8 7b 22 00 00       	call   80104760 <acquire>
 801024e5:	83 c4 10             	add    $0x10,%esp
 801024e8:	eb ce                	jmp    801024b8 <kfree+0x48>
 801024ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -4592,10 +4592,10 @@
 801024f7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 801024fa:	c9                   	leave  
     release(&kmem.lock);
-801024fb:	e9 20 21 00 00       	jmp    80104620 <release>
+801024fb:	e9 20 23 00 00       	jmp    80104820 <release>
     panic("kfree");
 80102500:	83 ec 0c             	sub    $0xc,%esp
-80102503:	68 46 73 10 80       	push   $0x80107346
+80102503:	68 c6 75 10 80       	push   $0x801075c6
 80102508:	e8 83 de ff ff       	call   80100390 <panic>
 8010250d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -4649,9 +4649,9 @@
 80102569:	8b 75 0c             	mov    0xc(%ebp),%esi
   initlock(&kmem.lock, "kmem");
 8010256c:	83 ec 08             	sub    $0x8,%esp
-8010256f:	68 4c 73 10 80       	push   $0x8010734c
+8010256f:	68 cc 75 10 80       	push   $0x801075cc
 80102574:	68 40 26 11 80       	push   $0x80112640
-80102579:	e8 62 1e 00 00       	call   801043e0 <initlock>
+80102579:	e8 62 20 00 00       	call   801045e0 <initlock>
   p = (char*)PGROUNDUP((uint)vstart);
 8010257e:	8b 45 08             	mov    0x8(%ebp),%eax
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
@@ -4768,7 +4768,7 @@
 8010265b:	83 ec 24             	sub    $0x24,%esp
     acquire(&kmem.lock);
 8010265e:	68 40 26 11 80       	push   $0x80112640
-80102663:	e8 f8 1e 00 00       	call   80104560 <acquire>
+80102663:	e8 f8 20 00 00       	call   80104760 <acquire>
   r = kmem.freelist;
 80102668:	a1 78 26 11 80       	mov    0x80112678,%eax
   if(r)
@@ -4786,7 +4786,7 @@
 80102686:	83 ec 0c             	sub    $0xc,%esp
 80102689:	89 45 f4             	mov    %eax,-0xc(%ebp)
 8010268c:	68 40 26 11 80       	push   $0x80112640
-80102691:	e8 8a 1f 00 00       	call   80104620 <release>
+80102691:	e8 8a 21 00 00       	call   80104820 <release>
   return (char*)r;
 80102696:	8b 45 f4             	mov    -0xc(%ebp),%eax
     release(&kmem.lock);
@@ -4854,9 +4854,9 @@
   }
 
   shift |= shiftcode[data];
-801026df:	0f b6 8a 80 74 10 80 	movzbl -0x7fef8b80(%edx),%ecx
+801026df:	0f b6 8a 00 77 10 80 	movzbl -0x7fef8900(%edx),%ecx
   shift ^= togglecode[data];
-801026e6:	0f b6 82 80 73 10 80 	movzbl -0x7fef8c80(%edx),%eax
+801026e6:	0f b6 82 00 76 10 80 	movzbl -0x7fef8a00(%edx),%eax
   shift |= shiftcode[data];
 801026ed:	09 d9                	or     %ebx,%ecx
   shift ^= togglecode[data];
@@ -4870,7 +4870,7 @@
   if(shift & CAPSLOCK){
 801026fc:	83 e1 08             	and    $0x8,%ecx
   c = charcode[shift & (CTL | SHIFT)][data];
-801026ff:	8b 04 85 60 73 10 80 	mov    -0x7fef8ca0(,%eax,4),%eax
+801026ff:	8b 04 85 e0 75 10 80 	mov    -0x7fef8a20(,%eax,4),%eax
 80102706:	0f b6 04 10          	movzbl (%eax,%edx,1),%eax
   if(shift & CAPSLOCK){
 8010270a:	74 0b                	je     80102717 <kbdgetc+0x77>
@@ -4907,7 +4907,7 @@
     return 0;
 80102738:	31 c0                	xor    %eax,%eax
     shift &= ~(shiftcode[data] | E0ESC);
-8010273a:	0f b6 8a 80 74 10 80 	movzbl -0x7fef8b80(%edx),%ecx
+8010273a:	0f b6 8a 00 77 10 80 	movzbl -0x7fef8900(%edx),%ecx
 80102741:	83 c9 40             	or     $0x40,%ecx
 80102744:	0f b6 c9             	movzbl %cl,%ecx
 80102747:	f7 d1                	not    %ecx
@@ -5402,7 +5402,7 @@
 80102aba:	50                   	push   %eax
 80102abb:	8d 45 b8             	lea    -0x48(%ebp),%eax
 80102abe:	50                   	push   %eax
-80102abf:	e8 fc 1b 00 00       	call   801046c0 <memcmp>
+80102abf:	e8 fc 1d 00 00       	call   801048c0 <memcmp>
 80102ac4:	83 c4 10             	add    $0x10,%esp
 80102ac7:	85 c0                	test   %eax,%eax
 80102ac9:	0f 85 f1 fe ff ff    	jne    801029c0 <cmostime+0x30>
@@ -5545,7 +5545,7 @@
 80102bef:	50                   	push   %eax
 80102bf0:	8d 43 5c             	lea    0x5c(%ebx),%eax
 80102bf3:	50                   	push   %eax
-80102bf4:	e8 17 1b 00 00       	call   80104710 <memmove>
+80102bf4:	e8 17 1d 00 00       	call   80104910 <memmove>
     bwrite(dbuf);  // write dst to disk
 80102bf9:	89 1c 24             	mov    %ebx,(%esp)
 80102bfc:	e8 af d5 ff ff       	call   801001b0 <bwrite>
@@ -5634,9 +5634,9 @@
 80102c98:	83 ec 2c             	sub    $0x2c,%esp
 80102c9b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&log.lock, "log");
-80102c9e:	68 80 75 10 80       	push   $0x80107580
+80102c9e:	68 00 78 10 80       	push   $0x80107800
 80102ca3:	68 80 26 11 80       	push   $0x80112680
-80102ca8:	e8 33 17 00 00       	call   801043e0 <initlock>
+80102ca8:	e8 33 19 00 00       	call   801045e0 <initlock>
   readsb(dev, &sb);
 80102cad:	58                   	pop    %eax
 80102cae:	8d 45 dc             	lea    -0x24(%ebp),%eax
@@ -5716,7 +5716,7 @@
 80102d37:	83 ec 14             	sub    $0x14,%esp
   acquire(&log.lock);
 80102d3a:	68 80 26 11 80       	push   $0x80112680
-80102d3f:	e8 1c 18 00 00       	call   80104560 <acquire>
+80102d3f:	e8 1c 1a 00 00       	call   80104760 <acquire>
 80102d44:	83 c4 10             	add    $0x10,%esp
 80102d47:	eb 1c                	jmp    80102d65 <begin_op+0x35>
 80102d49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -5726,7 +5726,7 @@
 80102d50:	83 ec 08             	sub    $0x8,%esp
 80102d53:	68 80 26 11 80       	push   $0x80112680
 80102d58:	68 80 26 11 80       	push   $0x80112680
-80102d5d:	e8 be 11 00 00       	call   80103f20 <sleep>
+80102d5d:	e8 0e 12 00 00       	call   80103f70 <sleep>
 80102d62:	83 c4 10             	add    $0x10,%esp
     if(log.committing){
 80102d65:	a1 c0 26 11 80       	mov    0x801126c0,%eax
@@ -5750,7 +5750,7 @@
 80102d8a:	a3 bc 26 11 80       	mov    %eax,0x801126bc
       release(&log.lock);
 80102d8f:	68 80 26 11 80       	push   $0x80112680
-80102d94:	e8 87 18 00 00       	call   80104620 <release>
+80102d94:	e8 87 1a 00 00       	call   80104820 <release>
       break;
     }
   }
@@ -5778,7 +5778,7 @@
 
   acquire(&log.lock);
 80102dad:	68 80 26 11 80       	push   $0x80112680
-80102db2:	e8 a9 17 00 00       	call   80104560 <acquire>
+80102db2:	e8 a9 19 00 00       	call   80104760 <acquire>
   log.outstanding -= 1;
 80102db7:	a1 bc 26 11 80       	mov    0x801126bc,%eax
   if(log.committing)
@@ -5806,7 +5806,7 @@
   release(&log.lock);
 80102de8:	83 ec 0c             	sub    $0xc,%esp
 80102deb:	68 80 26 11 80       	push   $0x80112680
-80102df0:	e8 2b 18 00 00       	call   80104620 <release>
+80102df0:	e8 2b 1a 00 00       	call   80104820 <release>
 }
 
 static void
@@ -5820,17 +5820,17 @@
     acquire(&log.lock);
 80102e02:	83 ec 0c             	sub    $0xc,%esp
 80102e05:	68 80 26 11 80       	push   $0x80112680
-80102e0a:	e8 51 17 00 00       	call   80104560 <acquire>
+80102e0a:	e8 51 19 00 00       	call   80104760 <acquire>
     wakeup(&log);
 80102e0f:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
     log.committing = 0;
 80102e16:	c7 05 c0 26 11 80 00 	movl   $0x0,0x801126c0
 80102e1d:	00 00 00 
     wakeup(&log);
-80102e20:	e8 bb 12 00 00       	call   801040e0 <wakeup>
+80102e20:	e8 0b 13 00 00       	call   80104130 <wakeup>
     release(&log.lock);
 80102e25:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-80102e2c:	e8 ef 17 00 00       	call   80104620 <release>
+80102e2c:	e8 ef 19 00 00       	call   80104820 <release>
 80102e31:	83 c4 10             	add    $0x10,%esp
 }
 80102e34:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -5868,7 +5868,7 @@
 80102e7f:	50                   	push   %eax
 80102e80:	8d 46 5c             	lea    0x5c(%esi),%eax
 80102e83:	50                   	push   %eax
-80102e84:	e8 87 18 00 00       	call   80104710 <memmove>
+80102e84:	e8 87 1a 00 00       	call   80104910 <memmove>
     bwrite(to);  // write the log
 80102e89:	89 34 24             	mov    %esi,(%esp)
 80102e8c:	e8 1f d3 ff ff       	call   801001b0 <bwrite>
@@ -5897,10 +5897,10 @@
     wakeup(&log);
 80102ed0:	83 ec 0c             	sub    $0xc,%esp
 80102ed3:	68 80 26 11 80       	push   $0x80112680
-80102ed8:	e8 03 12 00 00       	call   801040e0 <wakeup>
+80102ed8:	e8 53 12 00 00       	call   80104130 <wakeup>
   release(&log.lock);
 80102edd:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-80102ee4:	e8 37 17 00 00       	call   80104620 <release>
+80102ee4:	e8 37 19 00 00       	call   80104820 <release>
 80102ee9:	83 c4 10             	add    $0x10,%esp
 }
 80102eec:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -5911,7 +5911,7 @@
 80102ef3:	c3                   	ret    
     panic("log.committing");
 80102ef4:	83 ec 0c             	sub    $0xc,%esp
-80102ef7:	68 84 75 10 80       	push   $0x80107584
+80102ef7:	68 04 78 10 80       	push   $0x80107804
 80102efc:	e8 8f d4 ff ff       	call   80100390 <panic>
 80102f01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80102f08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -5952,7 +5952,7 @@
   acquire(&log.lock);
 80102f4a:	83 ec 0c             	sub    $0xc,%esp
 80102f4d:	68 80 26 11 80       	push   $0x80112680
-80102f52:	e8 09 16 00 00       	call   80104560 <acquire>
+80102f52:	e8 09 18 00 00       	call   80104760 <acquire>
   for (i = 0; i < log.lh.n; i++) {
 80102f57:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
 80102f5d:	83 c4 10             	add    $0x10,%esp
@@ -5987,7 +5987,7 @@
 }
 80102f94:	c9                   	leave  
   release(&log.lock);
-80102f95:	e9 86 16 00 00       	jmp    80104620 <release>
+80102f95:	e9 86 18 00 00       	jmp    80104820 <release>
 80102f9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   log.lh.block[i] = b->blockno;
 80102fa0:	89 0c 95 cc 26 11 80 	mov    %ecx,-0x7feed934(,%edx,4)
@@ -6003,11 +6003,11 @@
 80102fbc:	eb e9                	jmp    80102fa7 <log_write+0x97>
     panic("too big a transaction");
 80102fbe:	83 ec 0c             	sub    $0xc,%esp
-80102fc1:	68 93 75 10 80       	push   $0x80107593
+80102fc1:	68 13 78 10 80       	push   $0x80107813
 80102fc6:	e8 c5 d3 ff ff       	call   80100390 <panic>
     panic("log_write outside of trans");
 80102fcb:	83 ec 0c             	sub    $0xc,%esp
-80102fce:	68 a9 75 10 80       	push   $0x801075a9
+80102fce:	68 29 78 10 80       	push   $0x80107829
 80102fd3:	e8 b8 d3 ff ff       	call   80100390 <panic>
 80102fd8:	66 90                	xchg   %ax,%ax
 80102fda:	66 90                	xchg   %ax,%ax
@@ -6026,18 +6026,18 @@
 80102fe3:	53                   	push   %ebx
 80102fe4:	83 ec 04             	sub    $0x4,%esp
   cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
-80102fe7:	e8 54 09 00 00       	call   80103940 <cpuid>
+80102fe7:	e8 74 09 00 00       	call   80103960 <cpuid>
 80102fec:	89 c3                	mov    %eax,%ebx
-80102fee:	e8 4d 09 00 00       	call   80103940 <cpuid>
+80102fee:	e8 6d 09 00 00       	call   80103960 <cpuid>
 80102ff3:	83 ec 04             	sub    $0x4,%esp
 80102ff6:	53                   	push   %ebx
 80102ff7:	50                   	push   %eax
-80102ff8:	68 c4 75 10 80       	push   $0x801075c4
+80102ff8:	68 44 78 10 80       	push   $0x80107844
 80102ffd:	e8 ae d6 ff ff       	call   801006b0 <cprintf>
   idtinit();       // load idt register
-80103002:	e8 19 29 00 00       	call   80105920 <idtinit>
+80103002:	e8 b9 2b 00 00       	call   80105bc0 <idtinit>
   xchg(&(mycpu()->started), 1); // tell startothers() we're up
-80103007:	e8 c4 08 00 00       	call   801038d0 <mycpu>
+80103007:	e8 e4 08 00 00       	call   801038f0 <mycpu>
 8010300c:	89 c2                	mov    %eax,%edx
 xchg(volatile uint *addr, uint newval)
 {
@@ -6048,7 +6048,7 @@
 8010300e:	b8 01 00 00 00       	mov    $0x1,%eax
 80103013:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
   scheduler();     // start running processes
-8010301a:	e8 11 0c 00 00       	call   80103c30 <scheduler>
+8010301a:	e8 31 0c 00 00       	call   80103c50 <scheduler>
 8010301f:	90                   	nop
 
 80103020 <mpenter>:
@@ -6058,9 +6058,9 @@
 80103025:	89 e5                	mov    %esp,%ebp
 80103027:	83 ec 08             	sub    $0x8,%esp
   switchkvm();
-8010302a:	e8 c1 39 00 00       	call   801069f0 <switchkvm>
+8010302a:	e8 41 3c 00 00       	call   80106c70 <switchkvm>
   seginit();
-8010302f:	e8 2c 39 00 00       	call   80106960 <seginit>
+8010302f:	e8 ac 3b 00 00       	call   80106be0 <seginit>
   lapicinit();
 80103034:	e8 67 f7 ff ff       	call   801027a0 <lapicinit>
   mpmain();
@@ -6080,16 +6080,16 @@
   kinit1(end, P2V(4*1024*1024)); // phys page allocator
 80103053:	83 ec 08             	sub    $0x8,%esp
 80103056:	68 00 00 40 80       	push   $0x80400000
-8010305b:	68 a8 54 11 80       	push   $0x801154a8
+8010305b:	68 a8 56 11 80       	push   $0x801156a8
 80103060:	e8 fb f4 ff ff       	call   80102560 <kinit1>
   kvmalloc();      // kernel page table
-80103065:	e8 66 3e 00 00       	call   80106ed0 <kvmalloc>
+80103065:	e8 e6 40 00 00       	call   80107150 <kvmalloc>
   mpinit();        // detect other processors
 8010306a:	e8 81 01 00 00       	call   801031f0 <mpinit>
   lapicinit();     // interrupt controller
 8010306f:	e8 2c f7 ff ff       	call   801027a0 <lapicinit>
   seginit();       // segment descriptors
-80103074:	e8 e7 38 00 00       	call   80106960 <seginit>
+80103074:	e8 67 3b 00 00       	call   80106be0 <seginit>
   picinit();       // disable pic
 80103079:	e8 52 03 00 00       	call   801033d0 <picinit>
   ioapicinit();    // another interrupt controller
@@ -6097,11 +6097,11 @@
   consoleinit();   // console hardware
 80103083:	e8 a8 d9 ff ff       	call   80100a30 <consoleinit>
   uartinit();      // serial port
-80103088:	e8 93 2b 00 00       	call   80105c20 <uartinit>
+80103088:	e8 13 2e 00 00       	call   80105ea0 <uartinit>
   pinit();         // process table
-8010308d:	e8 1e 08 00 00       	call   801038b0 <pinit>
+8010308d:	e8 3e 08 00 00       	call   801038d0 <pinit>
   tvinit();        // trap vectors
-80103092:	e8 09 28 00 00       	call   801058a0 <tvinit>
+80103092:	e8 a9 2a 00 00       	call   80105b40 <tvinit>
   binit();         // buffer cache
 80103097:	e8 a4 cf ff ff       	call   80100040 <binit>
   fileinit();      // file table
@@ -6118,7 +6118,7 @@
 801030a9:	68 8a 00 00 00       	push   $0x8a
 801030ae:	68 8c a4 10 80       	push   $0x8010a48c
 801030b3:	68 00 70 00 80       	push   $0x80007000
-801030b8:	e8 53 16 00 00       	call   80104710 <memmove>
+801030b8:	e8 53 18 00 00       	call   80104910 <memmove>
 
   for(c = cpus; c < cpus+ncpu; c++){
 801030bd:	83 c4 10             	add    $0x10,%esp
@@ -6137,7 +6137,7 @@
 801030f5:	39 c3                	cmp    %eax,%ebx
 801030f7:	73 57                	jae    80103150 <main+0x110>
     if(c == mycpu())  // We've started already.
-801030f9:	e8 d2 07 00 00       	call   801038d0 <mycpu>
+801030f9:	e8 f2 07 00 00       	call   801038f0 <mycpu>
 801030fe:	39 c3                	cmp    %eax,%ebx
 80103100:	74 de                	je     801030e0 <main+0xa0>
       continue;
@@ -6183,7 +6183,7 @@
 80103158:	68 00 00 40 80       	push   $0x80400000
 8010315d:	e8 6e f4 ff ff       	call   801025d0 <kinit2>
   userinit();      // first user process
-80103162:	e8 29 08 00 00       	call   80103990 <userinit>
+80103162:	e8 49 08 00 00       	call   801039b0 <userinit>
   mpmain();        // finish this processor's setup
 80103167:	e8 74 fe ff ff       	call   80102fe0 <mpmain>
 8010316c:	66 90                	xchg   %ax,%ax
@@ -6223,9 +6223,9 @@
 80103196:	83 ec 04             	sub    $0x4,%esp
 80103199:	8d 7e 10             	lea    0x10(%esi),%edi
 8010319c:	6a 04                	push   $0x4
-8010319e:	68 d8 75 10 80       	push   $0x801075d8
+8010319e:	68 58 78 10 80       	push   $0x80107858
 801031a3:	56                   	push   %esi
-801031a4:	e8 17 15 00 00       	call   801046c0 <memcmp>
+801031a4:	e8 17 17 00 00       	call   801048c0 <memcmp>
 801031a9:	83 c4 10             	add    $0x10,%esp
 801031ac:	85 c0                	test   %eax,%eax
 801031ae:	75 e0                	jne    80103190 <mpsearch1+0x20>
@@ -6311,12 +6311,12 @@
 80103252:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
   if(memcmp(conf, "PCMP", 4) != 0)
 80103258:	6a 04                	push   $0x4
-8010325a:	68 dd 75 10 80       	push   $0x801075dd
+8010325a:	68 5d 78 10 80       	push   $0x8010785d
 8010325f:	50                   	push   %eax
   conf = (struct mpconf*) P2V((uint) mp->physaddr);
 80103260:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(memcmp(conf, "PCMP", 4) != 0)
-80103263:	e8 58 14 00 00       	call   801046c0 <memcmp>
+80103263:	e8 58 16 00 00       	call   801048c0 <memcmp>
 80103268:	83 c4 10             	add    $0x10,%esp
 8010326b:	85 c0                	test   %eax,%eax
 8010326d:	0f 85 3d 01 00 00    	jne    801033b0 <mpinit+0x1c0>
@@ -6466,11 +6466,11 @@
 801033a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     panic("Expect to run on an SMP");
 801033b0:	83 ec 0c             	sub    $0xc,%esp
-801033b3:	68 e2 75 10 80       	push   $0x801075e2
+801033b3:	68 62 78 10 80       	push   $0x80107862
 801033b8:	e8 d3 cf ff ff       	call   80100390 <panic>
     panic("Didn't find a suitable machine");
 801033bd:	83 ec 0c             	sub    $0xc,%esp
-801033c0:	68 fc 75 10 80       	push   $0x801075fc
+801033c0:	68 7c 78 10 80       	push   $0x8010787c
 801033c5:	e8 c6 cf ff ff       	call   80100390 <panic>
 801033ca:	66 90                	xchg   %ax,%ax
 801033cc:	66 90                	xchg   %ax,%ax
@@ -6556,9 +6556,9 @@
 8010345d:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
 80103464:	00 00 00 
   initlock(&p->lock, "pipe");
-80103467:	68 1b 76 10 80       	push   $0x8010761b
+80103467:	68 9b 78 10 80       	push   $0x8010789b
 8010346c:	50                   	push   %eax
-8010346d:	e8 6e 0f 00 00       	call   801043e0 <initlock>
+8010346d:	e8 6e 11 00 00       	call   801045e0 <initlock>
   (*f0)->type = FD_PIPE;
 80103472:	8b 03                	mov    (%ebx),%eax
   (*f0)->pipe = p;
@@ -6659,7 +6659,7 @@
   acquire(&p->lock);
 8010350f:	83 ec 0c             	sub    $0xc,%esp
 80103512:	53                   	push   %ebx
-80103513:	e8 48 10 00 00       	call   80104560 <acquire>
+80103513:	e8 48 12 00 00       	call   80104760 <acquire>
   if(writable){
 80103518:	83 c4 10             	add    $0x10,%esp
 8010351b:	85 f6                	test   %esi,%esi
@@ -6673,7 +6673,7 @@
 8010352f:	00 00 00 
     wakeup(&p->nread);
 80103532:	50                   	push   %eax
-80103533:	e8 a8 0b 00 00       	call   801040e0 <wakeup>
+80103533:	e8 f8 0b 00 00       	call   80104130 <wakeup>
 80103538:	83 c4 10             	add    $0x10,%esp
   } else {
     p->readopen = 0;
@@ -6697,7 +6697,7 @@
 80103556:	5e                   	pop    %esi
 80103557:	5d                   	pop    %ebp
     release(&p->lock);
-80103558:	e9 c3 10 00 00       	jmp    80104620 <release>
+80103558:	e9 c3 12 00 00       	jmp    80104820 <release>
 8010355d:	8d 76 00             	lea    0x0(%esi),%esi
     wakeup(&p->nwrite);
 80103560:	83 ec 0c             	sub    $0xc,%esp
@@ -6707,14 +6707,14 @@
 80103570:	00 00 00 
     wakeup(&p->nwrite);
 80103573:	50                   	push   %eax
-80103574:	e8 67 0b 00 00       	call   801040e0 <wakeup>
+80103574:	e8 b7 0b 00 00       	call   80104130 <wakeup>
 80103579:	83 c4 10             	add    $0x10,%esp
 8010357c:	eb bd                	jmp    8010353b <pipeclose+0x3b>
 8010357e:	66 90                	xchg   %ax,%ax
     release(&p->lock);
 80103580:	83 ec 0c             	sub    $0xc,%esp
 80103583:	53                   	push   %ebx
-80103584:	e8 97 10 00 00       	call   80104620 <release>
+80103584:	e8 97 12 00 00       	call   80104820 <release>
     kfree((char*)p);
 80103589:	89 5d 08             	mov    %ebx,0x8(%ebp)
 8010358c:	83 c4 10             	add    $0x10,%esp
@@ -6745,7 +6745,7 @@
 
   acquire(&p->lock);
 801035b0:	53                   	push   %ebx
-801035b1:	e8 aa 0f 00 00       	call   80104560 <acquire>
+801035b1:	e8 aa 11 00 00       	call   80104760 <acquire>
   for(i = 0; i < n; i++){
 801035b6:	8b 45 10             	mov    0x10(%ebp),%eax
 801035b9:	83 c4 10             	add    $0x10,%esp
@@ -6775,20 +6775,20 @@
 801035f3:	eb 63                	jmp    80103658 <pipewrite+0xb8>
 801035f5:	8d 76 00             	lea    0x0(%esi),%esi
       if(p->readopen == 0 || myproc()->killed){
-801035f8:	e8 63 03 00 00       	call   80103960 <myproc>
+801035f8:	e8 83 03 00 00       	call   80103980 <myproc>
 801035fd:	8b 48 24             	mov    0x24(%eax),%ecx
 80103600:	85 c9                	test   %ecx,%ecx
 80103602:	75 34                	jne    80103638 <pipewrite+0x98>
       wakeup(&p->nread);
 80103604:	83 ec 0c             	sub    $0xc,%esp
 80103607:	57                   	push   %edi
-80103608:	e8 d3 0a 00 00       	call   801040e0 <wakeup>
+80103608:	e8 23 0b 00 00       	call   80104130 <wakeup>
       sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
 8010360d:	58                   	pop    %eax
 8010360e:	5a                   	pop    %edx
 8010360f:	53                   	push   %ebx
 80103610:	56                   	push   %esi
-80103611:	e8 0a 09 00 00       	call   80103f20 <sleep>
+80103611:	e8 5a 09 00 00       	call   80103f70 <sleep>
     while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
 80103616:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
 8010361c:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
@@ -6803,7 +6803,7 @@
         release(&p->lock);
 80103638:	83 ec 0c             	sub    $0xc,%esp
 8010363b:	53                   	push   %ebx
-8010363c:	e8 df 0f 00 00       	call   80104620 <release>
+8010363c:	e8 df 11 00 00       	call   80104820 <release>
         return -1;
 80103641:	83 c4 10             	add    $0x10,%esp
 80103644:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
@@ -6836,10 +6836,10 @@
 80103680:	83 ec 0c             	sub    $0xc,%esp
 80103683:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
 80103689:	50                   	push   %eax
-8010368a:	e8 51 0a 00 00       	call   801040e0 <wakeup>
+8010368a:	e8 a1 0a 00 00       	call   80104130 <wakeup>
   release(&p->lock);
 8010368f:	89 1c 24             	mov    %ebx,(%esp)
-80103692:	e8 89 0f 00 00       	call   80104620 <release>
+80103692:	e8 89 11 00 00       	call   80104820 <release>
   return n;
 80103697:	8b 45 10             	mov    0x10(%ebp),%eax
 8010369a:	83 c4 10             	add    $0x10,%esp
@@ -6865,7 +6865,7 @@
   acquire(&p->lock);
 801036b3:	56                   	push   %esi
 801036b4:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
-801036ba:	e8 a1 0e 00 00       	call   80104560 <acquire>
+801036ba:	e8 a1 10 00 00       	call   80104760 <acquire>
   while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
 801036bf:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
 801036c5:	83 c4 10             	add    $0x10,%esp
@@ -6874,7 +6874,7 @@
 801036d0:	eb 3b                	jmp    8010370d <piperead+0x6d>
 801036d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(myproc()->killed){
-801036d8:	e8 83 02 00 00       	call   80103960 <myproc>
+801036d8:	e8 a3 02 00 00       	call   80103980 <myproc>
 801036dd:	8b 48 24             	mov    0x24(%eax),%ecx
 801036e0:	85 c9                	test   %ecx,%ecx
 801036e2:	0f 85 88 00 00 00    	jne    80103770 <piperead+0xd0>
@@ -6885,7 +6885,7 @@
 801036e8:	83 ec 08             	sub    $0x8,%esp
 801036eb:	56                   	push   %esi
 801036ec:	53                   	push   %ebx
-801036ed:	e8 2e 08 00 00       	call   80103f20 <sleep>
+801036ed:	e8 7e 08 00 00       	call   80103f70 <sleep>
   while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
 801036f2:	8b 86 38 02 00 00    	mov    0x238(%esi),%eax
 801036f8:	83 c4 10             	add    $0x10,%esp
@@ -6924,10 +6924,10 @@
 8010374c:	83 ec 0c             	sub    $0xc,%esp
 8010374f:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
 80103755:	50                   	push   %eax
-80103756:	e8 85 09 00 00       	call   801040e0 <wakeup>
+80103756:	e8 d5 09 00 00       	call   80104130 <wakeup>
   release(&p->lock);
 8010375b:	89 34 24             	mov    %esi,(%esp)
-8010375e:	e8 bd 0e 00 00       	call   80104620 <release>
+8010375e:	e8 bd 10 00 00       	call   80104820 <release>
   return i;
 80103763:	83 c4 10             	add    $0x10,%esp
 }
@@ -6944,7 +6944,7 @@
 80103773:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
       release(&p->lock);
 80103778:	56                   	push   %esi
-80103779:	e8 a2 0e 00 00       	call   80104620 <release>
+80103779:	e8 a2 10 00 00       	call   80104820 <release>
       return -1;
 8010377e:	83 c4 10             	add    $0x10,%esp
 }
@@ -6980,8606 +6980,8930 @@
 80103799:	83 ec 10             	sub    $0x10,%esp
   acquire(&ptable.lock);
 8010379c:	68 20 2d 11 80       	push   $0x80112d20
-801037a1:	e8 ba 0d 00 00       	call   80104560 <acquire>
+801037a1:	e8 ba 0f 00 00       	call   80104760 <acquire>
 801037a6:	83 c4 10             	add    $0x10,%esp
-801037a9:	eb 10                	jmp    801037bb <allocproc+0x2b>
+801037a9:	eb 17                	jmp    801037c2 <allocproc+0x32>
 801037ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 801037af:	90                   	nop
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801037b0:	83 c3 7c             	add    $0x7c,%ebx
-801037b3:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
-801037b9:	74 75                	je     80103830 <allocproc+0xa0>
+801037b0:	81 c3 84 00 00 00    	add    $0x84,%ebx
+801037b6:	81 fb 54 4e 11 80    	cmp    $0x80114e54,%ebx
+801037bc:	0f 84 8e 00 00 00    	je     80103850 <allocproc+0xc0>
     if(p->state == UNUSED)
-801037bb:	8b 43 0c             	mov    0xc(%ebx),%eax
-801037be:	85 c0                	test   %eax,%eax
-801037c0:	75 ee                	jne    801037b0 <allocproc+0x20>
+801037c2:	8b 43 0c             	mov    0xc(%ebx),%eax
+801037c5:	85 c0                	test   %eax,%eax
+801037c7:	75 e7                	jne    801037b0 <allocproc+0x20>
   release(&ptable.lock);
   return 0;
 
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-801037c2:	a1 04 a0 10 80       	mov    0x8010a004,%eax
-
+801037c9:	a1 04 a0 10 80       	mov    0x8010a004,%eax
+  p->number_of_context_switches = 0;  
+  p->burst_time = 0;
   release(&ptable.lock);
-801037c7:	83 ec 0c             	sub    $0xc,%esp
+801037ce:	83 ec 0c             	sub    $0xc,%esp
   p->state = EMBRYO;
-801037ca:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
+801037d1:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
+  p->number_of_context_switches = 0;  
+801037d8:	c7 43 7c 00 00 00 00 	movl   $0x0,0x7c(%ebx)
   p->pid = nextpid++;
-801037d1:	89 43 10             	mov    %eax,0x10(%ebx)
-801037d4:	8d 50 01             	lea    0x1(%eax),%edx
+801037df:	89 43 10             	mov    %eax,0x10(%ebx)
+801037e2:	8d 50 01             	lea    0x1(%eax),%edx
+  p->burst_time = 0;
+801037e5:	c7 83 80 00 00 00 00 	movl   $0x0,0x80(%ebx)
+801037ec:	00 00 00 
   release(&ptable.lock);
-801037d7:	68 20 2d 11 80       	push   $0x80112d20
+801037ef:	68 20 2d 11 80       	push   $0x80112d20
   p->pid = nextpid++;
-801037dc:	89 15 04 a0 10 80    	mov    %edx,0x8010a004
+801037f4:	89 15 04 a0 10 80    	mov    %edx,0x8010a004
   release(&ptable.lock);
-801037e2:	e8 39 0e 00 00       	call   80104620 <release>
+801037fa:	e8 21 10 00 00       	call   80104820 <release>
 
   // Allocate kernel stack.
   if((p->kstack = kalloc()) == 0){
-801037e7:	e8 44 ee ff ff       	call   80102630 <kalloc>
-801037ec:	83 c4 10             	add    $0x10,%esp
-801037ef:	89 43 08             	mov    %eax,0x8(%ebx)
-801037f2:	85 c0                	test   %eax,%eax
-801037f4:	74 53                	je     80103849 <allocproc+0xb9>
+801037ff:	e8 2c ee ff ff       	call   80102630 <kalloc>
+80103804:	83 c4 10             	add    $0x10,%esp
+80103807:	89 43 08             	mov    %eax,0x8(%ebx)
+8010380a:	85 c0                	test   %eax,%eax
+8010380c:	74 5b                	je     80103869 <allocproc+0xd9>
     return 0;
   }
   sp = p->kstack + KSTACKSIZE;
 
   // Leave room for trap frame.
   sp -= sizeof *p->tf;
-801037f6:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
+8010380e:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
   sp -= 4;
   *(uint*)sp = (uint)trapret;
 
   sp -= sizeof *p->context;
   p->context = (struct context*)sp;
   memset(p->context, 0, sizeof *p->context);
-801037fc:	83 ec 04             	sub    $0x4,%esp
+80103814:	83 ec 04             	sub    $0x4,%esp
   sp -= sizeof *p->context;
-801037ff:	05 9c 0f 00 00       	add    $0xf9c,%eax
+80103817:	05 9c 0f 00 00       	add    $0xf9c,%eax
   sp -= sizeof *p->tf;
-80103804:	89 53 18             	mov    %edx,0x18(%ebx)
+8010381c:	89 53 18             	mov    %edx,0x18(%ebx)
   *(uint*)sp = (uint)trapret;
-80103807:	c7 40 14 86 58 10 80 	movl   $0x80105886,0x14(%eax)
+8010381f:	c7 40 14 31 5b 10 80 	movl   $0x80105b31,0x14(%eax)
   p->context = (struct context*)sp;
-8010380e:	89 43 1c             	mov    %eax,0x1c(%ebx)
+80103826:	89 43 1c             	mov    %eax,0x1c(%ebx)
   memset(p->context, 0, sizeof *p->context);
-80103811:	6a 14                	push   $0x14
-80103813:	6a 00                	push   $0x0
-80103815:	50                   	push   %eax
-80103816:	e8 55 0e 00 00       	call   80104670 <memset>
+80103829:	6a 14                	push   $0x14
+8010382b:	6a 00                	push   $0x0
+8010382d:	50                   	push   %eax
+8010382e:	e8 3d 10 00 00       	call   80104870 <memset>
   p->context->eip = (uint)forkret;
-8010381b:	8b 43 1c             	mov    0x1c(%ebx),%eax
+80103833:	8b 43 1c             	mov    0x1c(%ebx),%eax
 
   return p;
-8010381e:	83 c4 10             	add    $0x10,%esp
+80103836:	83 c4 10             	add    $0x10,%esp
   p->context->eip = (uint)forkret;
-80103821:	c7 40 10 60 38 10 80 	movl   $0x80103860,0x10(%eax)
+80103839:	c7 40 10 80 38 10 80 	movl   $0x80103880,0x10(%eax)
 }
-80103828:	89 d8                	mov    %ebx,%eax
-8010382a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010382d:	c9                   	leave  
-8010382e:	c3                   	ret    
-8010382f:	90                   	nop
+80103840:	89 d8                	mov    %ebx,%eax
+80103842:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103845:	c9                   	leave  
+80103846:	c3                   	ret    
+80103847:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010384e:	66 90                	xchg   %ax,%ax
   release(&ptable.lock);
-80103830:	83 ec 0c             	sub    $0xc,%esp
+80103850:	83 ec 0c             	sub    $0xc,%esp
   return 0;
-80103833:	31 db                	xor    %ebx,%ebx
+80103853:	31 db                	xor    %ebx,%ebx
   release(&ptable.lock);
-80103835:	68 20 2d 11 80       	push   $0x80112d20
-8010383a:	e8 e1 0d 00 00       	call   80104620 <release>
+80103855:	68 20 2d 11 80       	push   $0x80112d20
+8010385a:	e8 c1 0f 00 00       	call   80104820 <release>
 }
-8010383f:	89 d8                	mov    %ebx,%eax
+8010385f:	89 d8                	mov    %ebx,%eax
   return 0;
-80103841:	83 c4 10             	add    $0x10,%esp
+80103861:	83 c4 10             	add    $0x10,%esp
 }
-80103844:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103847:	c9                   	leave  
-80103848:	c3                   	ret    
+80103864:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103867:	c9                   	leave  
+80103868:	c3                   	ret    
     p->state = UNUSED;
-80103849:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80103869:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
     return 0;
-80103850:	31 db                	xor    %ebx,%ebx
+80103870:	31 db                	xor    %ebx,%ebx
 }
-80103852:	89 d8                	mov    %ebx,%eax
-80103854:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103857:	c9                   	leave  
-80103858:	c3                   	ret    
-80103859:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103872:	89 d8                	mov    %ebx,%eax
+80103874:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103877:	c9                   	leave  
+80103878:	c3                   	ret    
+80103879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80103860 <forkret>:
+80103880 <forkret>:
 
 // A fork child's very first scheduling by scheduler()
 // will swtch here.  "Return" to user space.
 void
 forkret(void)
 {
-80103860:	f3 0f 1e fb          	endbr32 
-80103864:	55                   	push   %ebp
-80103865:	89 e5                	mov    %esp,%ebp
-80103867:	83 ec 14             	sub    $0x14,%esp
+80103880:	f3 0f 1e fb          	endbr32 
+80103884:	55                   	push   %ebp
+80103885:	89 e5                	mov    %esp,%ebp
+80103887:	83 ec 14             	sub    $0x14,%esp
   static int first = 1;
   // Still holding ptable.lock from scheduler.
   release(&ptable.lock);
-8010386a:	68 20 2d 11 80       	push   $0x80112d20
-8010386f:	e8 ac 0d 00 00       	call   80104620 <release>
+8010388a:	68 20 2d 11 80       	push   $0x80112d20
+8010388f:	e8 8c 0f 00 00       	call   80104820 <release>
 
   if (first) {
-80103874:	a1 00 a0 10 80       	mov    0x8010a000,%eax
-80103879:	83 c4 10             	add    $0x10,%esp
-8010387c:	85 c0                	test   %eax,%eax
-8010387e:	75 08                	jne    80103888 <forkret+0x28>
+80103894:	a1 00 a0 10 80       	mov    0x8010a000,%eax
+80103899:	83 c4 10             	add    $0x10,%esp
+8010389c:	85 c0                	test   %eax,%eax
+8010389e:	75 08                	jne    801038a8 <forkret+0x28>
     iinit(ROOTDEV);
     initlog(ROOTDEV);
   }
 
   // Return to "caller", actually trapret (see allocproc).
 }
-80103880:	c9                   	leave  
-80103881:	c3                   	ret    
-80103882:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801038a0:	c9                   	leave  
+801038a1:	c3                   	ret    
+801038a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     first = 0;
-80103888:	c7 05 00 a0 10 80 00 	movl   $0x0,0x8010a000
-8010388f:	00 00 00 
+801038a8:	c7 05 00 a0 10 80 00 	movl   $0x0,0x8010a000
+801038af:	00 00 00 
     iinit(ROOTDEV);
-80103892:	83 ec 0c             	sub    $0xc,%esp
-80103895:	6a 01                	push   $0x1
-80103897:	e8 a4 dc ff ff       	call   80101540 <iinit>
+801038b2:	83 ec 0c             	sub    $0xc,%esp
+801038b5:	6a 01                	push   $0x1
+801038b7:	e8 84 dc ff ff       	call   80101540 <iinit>
     initlog(ROOTDEV);
-8010389c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-801038a3:	e8 e8 f3 ff ff       	call   80102c90 <initlog>
+801038bc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+801038c3:	e8 c8 f3 ff ff       	call   80102c90 <initlog>
 }
-801038a8:	83 c4 10             	add    $0x10,%esp
-801038ab:	c9                   	leave  
-801038ac:	c3                   	ret    
-801038ad:	8d 76 00             	lea    0x0(%esi),%esi
-
-801038b0 <pinit>:
-{
-801038b0:	f3 0f 1e fb          	endbr32 
-801038b4:	55                   	push   %ebp
-801038b5:	89 e5                	mov    %esp,%ebp
-801038b7:	83 ec 10             	sub    $0x10,%esp
-  initlock(&ptable.lock, "ptable");
-801038ba:	68 20 76 10 80       	push   $0x80107620
-801038bf:	68 20 2d 11 80       	push   $0x80112d20
-801038c4:	e8 17 0b 00 00       	call   801043e0 <initlock>
-}
-801038c9:	83 c4 10             	add    $0x10,%esp
-801038cc:	c9                   	leave  
-801038cd:	c3                   	ret    
-801038ce:	66 90                	xchg   %ax,%ax
+801038c8:	83 c4 10             	add    $0x10,%esp
+801038cb:	c9                   	leave  
+801038cc:	c3                   	ret    
+801038cd:	8d 76 00             	lea    0x0(%esi),%esi
 
-801038d0 <mycpu>:
+801038d0 <pinit>:
 {
 801038d0:	f3 0f 1e fb          	endbr32 
 801038d4:	55                   	push   %ebp
 801038d5:	89 e5                	mov    %esp,%ebp
-801038d7:	56                   	push   %esi
-801038d8:	53                   	push   %ebx
+801038d7:	83 ec 10             	sub    $0x10,%esp
+  initlock(&ptable.lock, "ptable");
+801038da:	68 a0 78 10 80       	push   $0x801078a0
+801038df:	68 20 2d 11 80       	push   $0x80112d20
+801038e4:	e8 f7 0c 00 00       	call   801045e0 <initlock>
+}
+801038e9:	83 c4 10             	add    $0x10,%esp
+801038ec:	c9                   	leave  
+801038ed:	c3                   	ret    
+801038ee:	66 90                	xchg   %ax,%ax
+
+801038f0 <mycpu>:
+{
+801038f0:	f3 0f 1e fb          	endbr32 
+801038f4:	55                   	push   %ebp
+801038f5:	89 e5                	mov    %esp,%ebp
+801038f7:	56                   	push   %esi
+801038f8:	53                   	push   %ebx
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-801038d9:	9c                   	pushf  
-801038da:	58                   	pop    %eax
+801038f9:	9c                   	pushf  
+801038fa:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-801038db:	f6 c4 02             	test   $0x2,%ah
-801038de:	75 4a                	jne    8010392a <mycpu+0x5a>
+801038fb:	f6 c4 02             	test   $0x2,%ah
+801038fe:	75 4a                	jne    8010394a <mycpu+0x5a>
   apicid = lapicid();
-801038e0:	e8 bb ef ff ff       	call   801028a0 <lapicid>
+80103900:	e8 9b ef ff ff       	call   801028a0 <lapicid>
   for (i = 0; i < ncpu; ++i) {
-801038e5:	8b 35 00 2d 11 80    	mov    0x80112d00,%esi
+80103905:	8b 35 00 2d 11 80    	mov    0x80112d00,%esi
   apicid = lapicid();
-801038eb:	89 c3                	mov    %eax,%ebx
+8010390b:	89 c3                	mov    %eax,%ebx
   for (i = 0; i < ncpu; ++i) {
-801038ed:	85 f6                	test   %esi,%esi
-801038ef:	7e 2c                	jle    8010391d <mycpu+0x4d>
-801038f1:	31 d2                	xor    %edx,%edx
-801038f3:	eb 0a                	jmp    801038ff <mycpu+0x2f>
-801038f5:	8d 76 00             	lea    0x0(%esi),%esi
-801038f8:	83 c2 01             	add    $0x1,%edx
-801038fb:	39 f2                	cmp    %esi,%edx
-801038fd:	74 1e                	je     8010391d <mycpu+0x4d>
+8010390d:	85 f6                	test   %esi,%esi
+8010390f:	7e 2c                	jle    8010393d <mycpu+0x4d>
+80103911:	31 d2                	xor    %edx,%edx
+80103913:	eb 0a                	jmp    8010391f <mycpu+0x2f>
+80103915:	8d 76 00             	lea    0x0(%esi),%esi
+80103918:	83 c2 01             	add    $0x1,%edx
+8010391b:	39 f2                	cmp    %esi,%edx
+8010391d:	74 1e                	je     8010393d <mycpu+0x4d>
     if (cpus[i].apicid == apicid)
-801038ff:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
-80103905:	0f b6 81 80 27 11 80 	movzbl -0x7feed880(%ecx),%eax
-8010390c:	39 d8                	cmp    %ebx,%eax
-8010390e:	75 e8                	jne    801038f8 <mycpu+0x28>
+8010391f:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
+80103925:	0f b6 81 80 27 11 80 	movzbl -0x7feed880(%ecx),%eax
+8010392c:	39 d8                	cmp    %ebx,%eax
+8010392e:	75 e8                	jne    80103918 <mycpu+0x28>
 }
-80103910:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103930:	8d 65 f8             	lea    -0x8(%ebp),%esp
       return &cpus[i];
-80103913:	8d 81 80 27 11 80    	lea    -0x7feed880(%ecx),%eax
+80103933:	8d 81 80 27 11 80    	lea    -0x7feed880(%ecx),%eax
 }
-80103919:	5b                   	pop    %ebx
-8010391a:	5e                   	pop    %esi
-8010391b:	5d                   	pop    %ebp
-8010391c:	c3                   	ret    
+80103939:	5b                   	pop    %ebx
+8010393a:	5e                   	pop    %esi
+8010393b:	5d                   	pop    %ebp
+8010393c:	c3                   	ret    
   panic("unknown apicid\n");
-8010391d:	83 ec 0c             	sub    $0xc,%esp
-80103920:	68 27 76 10 80       	push   $0x80107627
-80103925:	e8 66 ca ff ff       	call   80100390 <panic>
+8010393d:	83 ec 0c             	sub    $0xc,%esp
+80103940:	68 a7 78 10 80       	push   $0x801078a7
+80103945:	e8 46 ca ff ff       	call   80100390 <panic>
     panic("mycpu called with interrupts enabled\n");
-8010392a:	83 ec 0c             	sub    $0xc,%esp
-8010392d:	68 04 77 10 80       	push   $0x80107704
-80103932:	e8 59 ca ff ff       	call   80100390 <panic>
-80103937:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010393e:	66 90                	xchg   %ax,%ax
+8010394a:	83 ec 0c             	sub    $0xc,%esp
+8010394d:	68 84 79 10 80       	push   $0x80107984
+80103952:	e8 39 ca ff ff       	call   80100390 <panic>
+80103957:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010395e:	66 90                	xchg   %ax,%ax
 
-80103940 <cpuid>:
+80103960 <cpuid>:
 cpuid() {
-80103940:	f3 0f 1e fb          	endbr32 
-80103944:	55                   	push   %ebp
-80103945:	89 e5                	mov    %esp,%ebp
-80103947:	83 ec 08             	sub    $0x8,%esp
+80103960:	f3 0f 1e fb          	endbr32 
+80103964:	55                   	push   %ebp
+80103965:	89 e5                	mov    %esp,%ebp
+80103967:	83 ec 08             	sub    $0x8,%esp
   return mycpu()-cpus;
-8010394a:	e8 81 ff ff ff       	call   801038d0 <mycpu>
+8010396a:	e8 81 ff ff ff       	call   801038f0 <mycpu>
 }
-8010394f:	c9                   	leave  
+8010396f:	c9                   	leave  
   return mycpu()-cpus;
-80103950:	2d 80 27 11 80       	sub    $0x80112780,%eax
-80103955:	c1 f8 04             	sar    $0x4,%eax
-80103958:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
+80103970:	2d 80 27 11 80       	sub    $0x80112780,%eax
+80103975:	c1 f8 04             	sar    $0x4,%eax
+80103978:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
 }
-8010395e:	c3                   	ret    
-8010395f:	90                   	nop
+8010397e:	c3                   	ret    
+8010397f:	90                   	nop
 
-80103960 <myproc>:
+80103980 <myproc>:
 myproc(void) {
-80103960:	f3 0f 1e fb          	endbr32 
-80103964:	55                   	push   %ebp
-80103965:	89 e5                	mov    %esp,%ebp
-80103967:	53                   	push   %ebx
-80103968:	83 ec 04             	sub    $0x4,%esp
+80103980:	f3 0f 1e fb          	endbr32 
+80103984:	55                   	push   %ebp
+80103985:	89 e5                	mov    %esp,%ebp
+80103987:	53                   	push   %ebx
+80103988:	83 ec 04             	sub    $0x4,%esp
   pushcli();
-8010396b:	e8 f0 0a 00 00       	call   80104460 <pushcli>
+8010398b:	e8 d0 0c 00 00       	call   80104660 <pushcli>
   c = mycpu();
-80103970:	e8 5b ff ff ff       	call   801038d0 <mycpu>
+80103990:	e8 5b ff ff ff       	call   801038f0 <mycpu>
   p = c->proc;
-80103975:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103995:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-8010397b:	e8 30 0b 00 00       	call   801044b0 <popcli>
+8010399b:	e8 10 0d 00 00       	call   801046b0 <popcli>
 }
-80103980:	83 c4 04             	add    $0x4,%esp
-80103983:	89 d8                	mov    %ebx,%eax
-80103985:	5b                   	pop    %ebx
-80103986:	5d                   	pop    %ebp
-80103987:	c3                   	ret    
-80103988:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010398f:	90                   	nop
-
-80103990 <userinit>:
-{
-80103990:	f3 0f 1e fb          	endbr32 
-80103994:	55                   	push   %ebp
-80103995:	89 e5                	mov    %esp,%ebp
-80103997:	53                   	push   %ebx
-80103998:	83 ec 04             	sub    $0x4,%esp
+801039a0:	83 c4 04             	add    $0x4,%esp
+801039a3:	89 d8                	mov    %ebx,%eax
+801039a5:	5b                   	pop    %ebx
+801039a6:	5d                   	pop    %ebp
+801039a7:	c3                   	ret    
+801039a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801039af:	90                   	nop
+
+801039b0 <userinit>:
+{
+801039b0:	f3 0f 1e fb          	endbr32 
+801039b4:	55                   	push   %ebp
+801039b5:	89 e5                	mov    %esp,%ebp
+801039b7:	53                   	push   %ebx
+801039b8:	83 ec 04             	sub    $0x4,%esp
   p = allocproc();
-8010399b:	e8 f0 fd ff ff       	call   80103790 <allocproc>
-801039a0:	89 c3                	mov    %eax,%ebx
+801039bb:	e8 d0 fd ff ff       	call   80103790 <allocproc>
+801039c0:	89 c3                	mov    %eax,%ebx
   initproc = p;
-801039a2:	a3 b8 a5 10 80       	mov    %eax,0x8010a5b8
+801039c2:	a3 b8 a5 10 80       	mov    %eax,0x8010a5b8
   if((p->pgdir = setupkvm()) == 0)
-801039a7:	e8 a4 34 00 00       	call   80106e50 <setupkvm>
-801039ac:	89 43 04             	mov    %eax,0x4(%ebx)
-801039af:	85 c0                	test   %eax,%eax
-801039b1:	0f 84 bd 00 00 00    	je     80103a74 <userinit+0xe4>
+801039c7:	e8 04 37 00 00       	call   801070d0 <setupkvm>
+801039cc:	89 43 04             	mov    %eax,0x4(%ebx)
+801039cf:	85 c0                	test   %eax,%eax
+801039d1:	0f 84 bd 00 00 00    	je     80103a94 <userinit+0xe4>
   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
-801039b7:	83 ec 04             	sub    $0x4,%esp
-801039ba:	68 2c 00 00 00       	push   $0x2c
-801039bf:	68 60 a4 10 80       	push   $0x8010a460
-801039c4:	50                   	push   %eax
-801039c5:	e8 56 31 00 00       	call   80106b20 <inituvm>
+801039d7:	83 ec 04             	sub    $0x4,%esp
+801039da:	68 2c 00 00 00       	push   $0x2c
+801039df:	68 60 a4 10 80       	push   $0x8010a460
+801039e4:	50                   	push   %eax
+801039e5:	e8 b6 33 00 00       	call   80106da0 <inituvm>
   memset(p->tf, 0, sizeof(*p->tf));
-801039ca:	83 c4 0c             	add    $0xc,%esp
+801039ea:	83 c4 0c             	add    $0xc,%esp
   p->sz = PGSIZE;
-801039cd:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
+801039ed:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
   memset(p->tf, 0, sizeof(*p->tf));
-801039d3:	6a 4c                	push   $0x4c
-801039d5:	6a 00                	push   $0x0
-801039d7:	ff 73 18             	pushl  0x18(%ebx)
-801039da:	e8 91 0c 00 00       	call   80104670 <memset>
+801039f3:	6a 4c                	push   $0x4c
+801039f5:	6a 00                	push   $0x0
+801039f7:	ff 73 18             	pushl  0x18(%ebx)
+801039fa:	e8 71 0e 00 00       	call   80104870 <memset>
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-801039df:	8b 43 18             	mov    0x18(%ebx),%eax
-801039e2:	ba 1b 00 00 00       	mov    $0x1b,%edx
+801039ff:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a02:	ba 1b 00 00 00       	mov    $0x1b,%edx
   safestrcpy(p->name, "initcode", sizeof(p->name));
-801039e7:	83 c4 0c             	add    $0xc,%esp
+80103a07:	83 c4 0c             	add    $0xc,%esp
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-801039ea:	b9 23 00 00 00       	mov    $0x23,%ecx
+80103a0a:	b9 23 00 00 00       	mov    $0x23,%ecx
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-801039ef:	66 89 50 3c          	mov    %dx,0x3c(%eax)
+80103a0f:	66 89 50 3c          	mov    %dx,0x3c(%eax)
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-801039f3:	8b 43 18             	mov    0x18(%ebx),%eax
-801039f6:	66 89 48 2c          	mov    %cx,0x2c(%eax)
+80103a13:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a16:	66 89 48 2c          	mov    %cx,0x2c(%eax)
   p->tf->es = p->tf->ds;
-801039fa:	8b 43 18             	mov    0x18(%ebx),%eax
-801039fd:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
-80103a01:	66 89 50 28          	mov    %dx,0x28(%eax)
+80103a1a:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a1d:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80103a21:	66 89 50 28          	mov    %dx,0x28(%eax)
   p->tf->ss = p->tf->ds;
-80103a05:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a08:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
-80103a0c:	66 89 50 48          	mov    %dx,0x48(%eax)
+80103a25:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a28:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80103a2c:	66 89 50 48          	mov    %dx,0x48(%eax)
   p->tf->eflags = FL_IF;
-80103a10:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a13:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
+80103a30:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a33:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
   p->tf->esp = PGSIZE;
-80103a1a:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a1d:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
+80103a3a:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a3d:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
   p->tf->eip = 0;  // beginning of initcode.S
-80103a24:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a27:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
+80103a44:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a47:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
   safestrcpy(p->name, "initcode", sizeof(p->name));
-80103a2e:	8d 43 6c             	lea    0x6c(%ebx),%eax
-80103a31:	6a 10                	push   $0x10
-80103a33:	68 50 76 10 80       	push   $0x80107650
-80103a38:	50                   	push   %eax
-80103a39:	e8 f2 0d 00 00       	call   80104830 <safestrcpy>
+80103a4e:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80103a51:	6a 10                	push   $0x10
+80103a53:	68 d0 78 10 80       	push   $0x801078d0
+80103a58:	50                   	push   %eax
+80103a59:	e8 d2 0f 00 00       	call   80104a30 <safestrcpy>
   p->cwd = namei("/");
-80103a3e:	c7 04 24 59 76 10 80 	movl   $0x80107659,(%esp)
-80103a45:	e8 e6 e5 ff ff       	call   80102030 <namei>
-80103a4a:	89 43 68             	mov    %eax,0x68(%ebx)
+80103a5e:	c7 04 24 d9 78 10 80 	movl   $0x801078d9,(%esp)
+80103a65:	e8 c6 e5 ff ff       	call   80102030 <namei>
+80103a6a:	89 43 68             	mov    %eax,0x68(%ebx)
   acquire(&ptable.lock);
-80103a4d:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103a54:	e8 07 0b 00 00       	call   80104560 <acquire>
+80103a6d:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103a74:	e8 e7 0c 00 00       	call   80104760 <acquire>
   p->state = RUNNABLE;
-80103a59:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+80103a79:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
   release(&ptable.lock);
-80103a60:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103a67:	e8 b4 0b 00 00       	call   80104620 <release>
+80103a80:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103a87:	e8 94 0d 00 00       	call   80104820 <release>
 }
-80103a6c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103a6f:	83 c4 10             	add    $0x10,%esp
-80103a72:	c9                   	leave  
-80103a73:	c3                   	ret    
+80103a8c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103a8f:	83 c4 10             	add    $0x10,%esp
+80103a92:	c9                   	leave  
+80103a93:	c3                   	ret    
     panic("userinit: out of memory?");
-80103a74:	83 ec 0c             	sub    $0xc,%esp
-80103a77:	68 37 76 10 80       	push   $0x80107637
-80103a7c:	e8 0f c9 ff ff       	call   80100390 <panic>
-80103a81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103a88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103a8f:	90                   	nop
-
-80103a90 <growproc>:
-{
-80103a90:	f3 0f 1e fb          	endbr32 
-80103a94:	55                   	push   %ebp
-80103a95:	89 e5                	mov    %esp,%ebp
-80103a97:	56                   	push   %esi
-80103a98:	53                   	push   %ebx
-80103a99:	8b 75 08             	mov    0x8(%ebp),%esi
+80103a94:	83 ec 0c             	sub    $0xc,%esp
+80103a97:	68 b7 78 10 80       	push   $0x801078b7
+80103a9c:	e8 ef c8 ff ff       	call   80100390 <panic>
+80103aa1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103aa8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103aaf:	90                   	nop
+
+80103ab0 <growproc>:
+{
+80103ab0:	f3 0f 1e fb          	endbr32 
+80103ab4:	55                   	push   %ebp
+80103ab5:	89 e5                	mov    %esp,%ebp
+80103ab7:	56                   	push   %esi
+80103ab8:	53                   	push   %ebx
+80103ab9:	8b 75 08             	mov    0x8(%ebp),%esi
   pushcli();
-80103a9c:	e8 bf 09 00 00       	call   80104460 <pushcli>
+80103abc:	e8 9f 0b 00 00       	call   80104660 <pushcli>
   c = mycpu();
-80103aa1:	e8 2a fe ff ff       	call   801038d0 <mycpu>
+80103ac1:	e8 2a fe ff ff       	call   801038f0 <mycpu>
   p = c->proc;
-80103aa6:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103ac6:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103aac:	e8 ff 09 00 00       	call   801044b0 <popcli>
+80103acc:	e8 df 0b 00 00       	call   801046b0 <popcli>
   sz = curproc->sz;
-80103ab1:	8b 03                	mov    (%ebx),%eax
+80103ad1:	8b 03                	mov    (%ebx),%eax
   if(n > 0){
-80103ab3:	85 f6                	test   %esi,%esi
-80103ab5:	7f 19                	jg     80103ad0 <growproc+0x40>
+80103ad3:	85 f6                	test   %esi,%esi
+80103ad5:	7f 19                	jg     80103af0 <growproc+0x40>
   } else if(n < 0){
-80103ab7:	75 37                	jne    80103af0 <growproc+0x60>
+80103ad7:	75 37                	jne    80103b10 <growproc+0x60>
   switchuvm(curproc);
-80103ab9:	83 ec 0c             	sub    $0xc,%esp
+80103ad9:	83 ec 0c             	sub    $0xc,%esp
   curproc->sz = sz;
-80103abc:	89 03                	mov    %eax,(%ebx)
+80103adc:	89 03                	mov    %eax,(%ebx)
   switchuvm(curproc);
-80103abe:	53                   	push   %ebx
-80103abf:	e8 4c 2f 00 00       	call   80106a10 <switchuvm>
+80103ade:	53                   	push   %ebx
+80103adf:	e8 ac 31 00 00       	call   80106c90 <switchuvm>
   return 0;
-80103ac4:	83 c4 10             	add    $0x10,%esp
-80103ac7:	31 c0                	xor    %eax,%eax
+80103ae4:	83 c4 10             	add    $0x10,%esp
+80103ae7:	31 c0                	xor    %eax,%eax
 }
-80103ac9:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103acc:	5b                   	pop    %ebx
-80103acd:	5e                   	pop    %esi
-80103ace:	5d                   	pop    %ebp
-80103acf:	c3                   	ret    
+80103ae9:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103aec:	5b                   	pop    %ebx
+80103aed:	5e                   	pop    %esi
+80103aee:	5d                   	pop    %ebp
+80103aef:	c3                   	ret    
     if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
-80103ad0:	83 ec 04             	sub    $0x4,%esp
-80103ad3:	01 c6                	add    %eax,%esi
-80103ad5:	56                   	push   %esi
-80103ad6:	50                   	push   %eax
-80103ad7:	ff 73 04             	pushl  0x4(%ebx)
-80103ada:	e8 91 31 00 00       	call   80106c70 <allocuvm>
-80103adf:	83 c4 10             	add    $0x10,%esp
-80103ae2:	85 c0                	test   %eax,%eax
-80103ae4:	75 d3                	jne    80103ab9 <growproc+0x29>
-      return -1;
-80103ae6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80103aeb:	eb dc                	jmp    80103ac9 <growproc+0x39>
-80103aed:	8d 76 00             	lea    0x0(%esi),%esi
-    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
 80103af0:	83 ec 04             	sub    $0x4,%esp
 80103af3:	01 c6                	add    %eax,%esi
 80103af5:	56                   	push   %esi
 80103af6:	50                   	push   %eax
 80103af7:	ff 73 04             	pushl  0x4(%ebx)
-80103afa:	e8 a1 32 00 00       	call   80106da0 <deallocuvm>
+80103afa:	e8 f1 33 00 00       	call   80106ef0 <allocuvm>
 80103aff:	83 c4 10             	add    $0x10,%esp
 80103b02:	85 c0                	test   %eax,%eax
-80103b04:	75 b3                	jne    80103ab9 <growproc+0x29>
-80103b06:	eb de                	jmp    80103ae6 <growproc+0x56>
-80103b08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103b0f:	90                   	nop
-
-80103b10 <fork>:
-{
-80103b10:	f3 0f 1e fb          	endbr32 
-80103b14:	55                   	push   %ebp
-80103b15:	89 e5                	mov    %esp,%ebp
-80103b17:	57                   	push   %edi
-80103b18:	56                   	push   %esi
-80103b19:	53                   	push   %ebx
-80103b1a:	83 ec 1c             	sub    $0x1c,%esp
+80103b04:	75 d3                	jne    80103ad9 <growproc+0x29>
+      return -1;
+80103b06:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103b0b:	eb dc                	jmp    80103ae9 <growproc+0x39>
+80103b0d:	8d 76 00             	lea    0x0(%esi),%esi
+    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
+80103b10:	83 ec 04             	sub    $0x4,%esp
+80103b13:	01 c6                	add    %eax,%esi
+80103b15:	56                   	push   %esi
+80103b16:	50                   	push   %eax
+80103b17:	ff 73 04             	pushl  0x4(%ebx)
+80103b1a:	e8 01 35 00 00       	call   80107020 <deallocuvm>
+80103b1f:	83 c4 10             	add    $0x10,%esp
+80103b22:	85 c0                	test   %eax,%eax
+80103b24:	75 b3                	jne    80103ad9 <growproc+0x29>
+80103b26:	eb de                	jmp    80103b06 <growproc+0x56>
+80103b28:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103b2f:	90                   	nop
+
+80103b30 <fork>:
+{
+80103b30:	f3 0f 1e fb          	endbr32 
+80103b34:	55                   	push   %ebp
+80103b35:	89 e5                	mov    %esp,%ebp
+80103b37:	57                   	push   %edi
+80103b38:	56                   	push   %esi
+80103b39:	53                   	push   %ebx
+80103b3a:	83 ec 1c             	sub    $0x1c,%esp
   pushcli();
-80103b1d:	e8 3e 09 00 00       	call   80104460 <pushcli>
+80103b3d:	e8 1e 0b 00 00       	call   80104660 <pushcli>
   c = mycpu();
-80103b22:	e8 a9 fd ff ff       	call   801038d0 <mycpu>
+80103b42:	e8 a9 fd ff ff       	call   801038f0 <mycpu>
   p = c->proc;
-80103b27:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103b47:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103b2d:	e8 7e 09 00 00       	call   801044b0 <popcli>
+80103b4d:	e8 5e 0b 00 00       	call   801046b0 <popcli>
   if((np = allocproc()) == 0){
-80103b32:	e8 59 fc ff ff       	call   80103790 <allocproc>
-80103b37:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80103b3a:	85 c0                	test   %eax,%eax
-80103b3c:	0f 84 bb 00 00 00    	je     80103bfd <fork+0xed>
+80103b52:	e8 39 fc ff ff       	call   80103790 <allocproc>
+80103b57:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80103b5a:	85 c0                	test   %eax,%eax
+80103b5c:	0f 84 bb 00 00 00    	je     80103c1d <fork+0xed>
   if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
-80103b42:	83 ec 08             	sub    $0x8,%esp
-80103b45:	ff 33                	pushl  (%ebx)
-80103b47:	89 c7                	mov    %eax,%edi
-80103b49:	ff 73 04             	pushl  0x4(%ebx)
-80103b4c:	e8 cf 33 00 00       	call   80106f20 <copyuvm>
-80103b51:	83 c4 10             	add    $0x10,%esp
-80103b54:	89 47 04             	mov    %eax,0x4(%edi)
-80103b57:	85 c0                	test   %eax,%eax
-80103b59:	0f 84 a5 00 00 00    	je     80103c04 <fork+0xf4>
+80103b62:	83 ec 08             	sub    $0x8,%esp
+80103b65:	ff 33                	pushl  (%ebx)
+80103b67:	89 c7                	mov    %eax,%edi
+80103b69:	ff 73 04             	pushl  0x4(%ebx)
+80103b6c:	e8 2f 36 00 00       	call   801071a0 <copyuvm>
+80103b71:	83 c4 10             	add    $0x10,%esp
+80103b74:	89 47 04             	mov    %eax,0x4(%edi)
+80103b77:	85 c0                	test   %eax,%eax
+80103b79:	0f 84 a5 00 00 00    	je     80103c24 <fork+0xf4>
   np->sz = curproc->sz;
-80103b5f:	8b 03                	mov    (%ebx),%eax
-80103b61:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80103b64:	89 01                	mov    %eax,(%ecx)
+80103b7f:	8b 03                	mov    (%ebx),%eax
+80103b81:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80103b84:	89 01                	mov    %eax,(%ecx)
   *np->tf = *curproc->tf;
-80103b66:	8b 79 18             	mov    0x18(%ecx),%edi
+80103b86:	8b 79 18             	mov    0x18(%ecx),%edi
   np->parent = curproc;
-80103b69:	89 c8                	mov    %ecx,%eax
-80103b6b:	89 59 14             	mov    %ebx,0x14(%ecx)
+80103b89:	89 c8                	mov    %ecx,%eax
+80103b8b:	89 59 14             	mov    %ebx,0x14(%ecx)
   *np->tf = *curproc->tf;
-80103b6e:	b9 13 00 00 00       	mov    $0x13,%ecx
-80103b73:	8b 73 18             	mov    0x18(%ebx),%esi
-80103b76:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+80103b8e:	b9 13 00 00 00       	mov    $0x13,%ecx
+80103b93:	8b 73 18             	mov    0x18(%ebx),%esi
+80103b96:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   for(i = 0; i < NOFILE; i++)
-80103b78:	31 f6                	xor    %esi,%esi
+80103b98:	31 f6                	xor    %esi,%esi
   np->tf->eax = 0;
-80103b7a:	8b 40 18             	mov    0x18(%eax),%eax
-80103b7d:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+80103b9a:	8b 40 18             	mov    0x18(%eax),%eax
+80103b9d:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   for(i = 0; i < NOFILE; i++)
-80103b84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103ba4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[i])
-80103b88:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
-80103b8c:	85 c0                	test   %eax,%eax
-80103b8e:	74 13                	je     80103ba3 <fork+0x93>
+80103ba8:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
+80103bac:	85 c0                	test   %eax,%eax
+80103bae:	74 13                	je     80103bc3 <fork+0x93>
       np->ofile[i] = filedup(curproc->ofile[i]);
-80103b90:	83 ec 0c             	sub    $0xc,%esp
-80103b93:	50                   	push   %eax
-80103b94:	e8 d7 d2 ff ff       	call   80100e70 <filedup>
-80103b99:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80103b9c:	83 c4 10             	add    $0x10,%esp
-80103b9f:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
+80103bb0:	83 ec 0c             	sub    $0xc,%esp
+80103bb3:	50                   	push   %eax
+80103bb4:	e8 b7 d2 ff ff       	call   80100e70 <filedup>
+80103bb9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80103bbc:	83 c4 10             	add    $0x10,%esp
+80103bbf:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
   for(i = 0; i < NOFILE; i++)
-80103ba3:	83 c6 01             	add    $0x1,%esi
-80103ba6:	83 fe 10             	cmp    $0x10,%esi
-80103ba9:	75 dd                	jne    80103b88 <fork+0x78>
+80103bc3:	83 c6 01             	add    $0x1,%esi
+80103bc6:	83 fe 10             	cmp    $0x10,%esi
+80103bc9:	75 dd                	jne    80103ba8 <fork+0x78>
   np->cwd = idup(curproc->cwd);
-80103bab:	83 ec 0c             	sub    $0xc,%esp
-80103bae:	ff 73 68             	pushl  0x68(%ebx)
+80103bcb:	83 ec 0c             	sub    $0xc,%esp
+80103bce:	ff 73 68             	pushl  0x68(%ebx)
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bb1:	83 c3 6c             	add    $0x6c,%ebx
+80103bd1:	83 c3 6c             	add    $0x6c,%ebx
   np->cwd = idup(curproc->cwd);
-80103bb4:	e8 77 db ff ff       	call   80101730 <idup>
-80103bb9:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80103bd4:	e8 57 db ff ff       	call   80101730 <idup>
+80103bd9:	8b 7d e4             	mov    -0x1c(%ebp),%edi
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bbc:	83 c4 0c             	add    $0xc,%esp
+80103bdc:	83 c4 0c             	add    $0xc,%esp
   np->cwd = idup(curproc->cwd);
-80103bbf:	89 47 68             	mov    %eax,0x68(%edi)
+80103bdf:	89 47 68             	mov    %eax,0x68(%edi)
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bc2:	8d 47 6c             	lea    0x6c(%edi),%eax
-80103bc5:	6a 10                	push   $0x10
-80103bc7:	53                   	push   %ebx
-80103bc8:	50                   	push   %eax
-80103bc9:	e8 62 0c 00 00       	call   80104830 <safestrcpy>
+80103be2:	8d 47 6c             	lea    0x6c(%edi),%eax
+80103be5:	6a 10                	push   $0x10
+80103be7:	53                   	push   %ebx
+80103be8:	50                   	push   %eax
+80103be9:	e8 42 0e 00 00       	call   80104a30 <safestrcpy>
   pid = np->pid;
-80103bce:	8b 5f 10             	mov    0x10(%edi),%ebx
+80103bee:	8b 5f 10             	mov    0x10(%edi),%ebx
   acquire(&ptable.lock);
-80103bd1:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103bd8:	e8 83 09 00 00       	call   80104560 <acquire>
+80103bf1:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103bf8:	e8 63 0b 00 00       	call   80104760 <acquire>
   np->state = RUNNABLE;
-80103bdd:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
+80103bfd:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
   release(&ptable.lock);
-80103be4:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103beb:	e8 30 0a 00 00       	call   80104620 <release>
+80103c04:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103c0b:	e8 10 0c 00 00       	call   80104820 <release>
   return pid;
-80103bf0:	83 c4 10             	add    $0x10,%esp
+80103c10:	83 c4 10             	add    $0x10,%esp
 }
-80103bf3:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103bf6:	89 d8                	mov    %ebx,%eax
-80103bf8:	5b                   	pop    %ebx
-80103bf9:	5e                   	pop    %esi
-80103bfa:	5f                   	pop    %edi
-80103bfb:	5d                   	pop    %ebp
-80103bfc:	c3                   	ret    
+80103c13:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103c16:	89 d8                	mov    %ebx,%eax
+80103c18:	5b                   	pop    %ebx
+80103c19:	5e                   	pop    %esi
+80103c1a:	5f                   	pop    %edi
+80103c1b:	5d                   	pop    %ebp
+80103c1c:	c3                   	ret    
     return -1;
-80103bfd:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80103c02:	eb ef                	jmp    80103bf3 <fork+0xe3>
+80103c1d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80103c22:	eb ef                	jmp    80103c13 <fork+0xe3>
     kfree(np->kstack);
-80103c04:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-80103c07:	83 ec 0c             	sub    $0xc,%esp
-80103c0a:	ff 73 08             	pushl  0x8(%ebx)
-80103c0d:	e8 5e e8 ff ff       	call   80102470 <kfree>
+80103c24:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80103c27:	83 ec 0c             	sub    $0xc,%esp
+80103c2a:	ff 73 08             	pushl  0x8(%ebx)
+80103c2d:	e8 3e e8 ff ff       	call   80102470 <kfree>
     np->kstack = 0;
-80103c12:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+80103c32:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
     return -1;
-80103c19:	83 c4 10             	add    $0x10,%esp
+80103c39:	83 c4 10             	add    $0x10,%esp
     np->state = UNUSED;
-80103c1c:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80103c3c:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
     return -1;
-80103c23:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80103c28:	eb c9                	jmp    80103bf3 <fork+0xe3>
-80103c2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80103c30 <scheduler>:
-{
-80103c30:	f3 0f 1e fb          	endbr32 
-80103c34:	55                   	push   %ebp
-80103c35:	89 e5                	mov    %esp,%ebp
-80103c37:	57                   	push   %edi
-80103c38:	56                   	push   %esi
-80103c39:	53                   	push   %ebx
-80103c3a:	83 ec 0c             	sub    $0xc,%esp
+80103c43:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80103c48:	eb c9                	jmp    80103c13 <fork+0xe3>
+80103c4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80103c50 <scheduler>:
+{
+80103c50:	f3 0f 1e fb          	endbr32 
+80103c54:	55                   	push   %ebp
+80103c55:	89 e5                	mov    %esp,%ebp
+80103c57:	57                   	push   %edi
+80103c58:	56                   	push   %esi
+80103c59:	53                   	push   %ebx
+80103c5a:	83 ec 0c             	sub    $0xc,%esp
   struct cpu *c = mycpu();
-80103c3d:	e8 8e fc ff ff       	call   801038d0 <mycpu>
-  c->proc = 0;
-80103c42:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
-80103c49:	00 00 00 
+80103c5d:	e8 8e fc ff ff       	call   801038f0 <mycpu>
+  c -> proc = 0;
+80103c62:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
+80103c69:	00 00 00 
   struct cpu *c = mycpu();
-80103c4c:	89 c6                	mov    %eax,%esi
-  c->proc = 0;
-80103c4e:	8d 78 04             	lea    0x4(%eax),%edi
-80103c51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103c6c:	89 c3                	mov    %eax,%ebx
+  c -> proc = 0;
+80103c6e:	8d 70 04             	lea    0x4(%eax),%esi
+80103c71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   asm volatile("sti");
-80103c58:	fb                   	sti    
+80103c78:	fb                   	sti    
     acquire(&ptable.lock);
-80103c59:	83 ec 0c             	sub    $0xc,%esp
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103c5c:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+80103c79:	83 ec 0c             	sub    $0xc,%esp
+    proc_to_be_executed = 0;
+80103c7c:	31 ff                	xor    %edi,%edi
     acquire(&ptable.lock);
-80103c61:	68 20 2d 11 80       	push   $0x80112d20
-80103c66:	e8 f5 08 00 00       	call   80104560 <acquire>
-80103c6b:	83 c4 10             	add    $0x10,%esp
-80103c6e:	66 90                	xchg   %ax,%ax
-      if(p->state != RUNNABLE)
-80103c70:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
-80103c74:	75 33                	jne    80103ca9 <scheduler+0x79>
-      switchuvm(p);
-80103c76:	83 ec 0c             	sub    $0xc,%esp
-      c->proc = p;
-80103c79:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
-      switchuvm(p);
-80103c7f:	53                   	push   %ebx
-80103c80:	e8 8b 2d 00 00       	call   80106a10 <switchuvm>
-      swtch(&(c->scheduler), p->context);
-80103c85:	58                   	pop    %eax
-80103c86:	5a                   	pop    %edx
-80103c87:	ff 73 1c             	pushl  0x1c(%ebx)
-80103c8a:	57                   	push   %edi
-      p->state = RUNNING;
-80103c8b:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
-      swtch(&(c->scheduler), p->context);
-80103c92:	e8 fc 0b 00 00       	call   80104893 <swtch>
+80103c7e:	68 20 2d 11 80       	push   $0x80112d20
+80103c83:	e8 d8 0a 00 00       	call   80104760 <acquire>
+80103c88:	83 c4 10             	add    $0x10,%esp
+    int min_time_so_far = 1e9; // It's the minimum time obtained so far.
+80103c8b:	b9 00 ca 9a 3b       	mov    $0x3b9aca00,%ecx
+    for(iterator = ptable.proc; iterator < &ptable.proc[NPROC]; iterator++){
+80103c90:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80103c95:	eb 15                	jmp    80103cac <scheduler+0x5c>
+80103c97:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103c9e:	66 90                	xchg   %ax,%ax
+80103ca0:	05 84 00 00 00       	add    $0x84,%eax
+80103ca5:	3d 54 4e 11 80       	cmp    $0x80114e54,%eax
+80103caa:	74 24                	je     80103cd0 <scheduler+0x80>
+      if((iterator -> state == RUNNABLE) && (iterator -> burst_time) < min_time_so_far){
+80103cac:	83 78 0c 03          	cmpl   $0x3,0xc(%eax)
+80103cb0:	75 ee                	jne    80103ca0 <scheduler+0x50>
+80103cb2:	8b 90 80 00 00 00    	mov    0x80(%eax),%edx
+80103cb8:	39 ca                	cmp    %ecx,%edx
+80103cba:	7d e4                	jge    80103ca0 <scheduler+0x50>
+80103cbc:	89 c7                	mov    %eax,%edi
+    for(iterator = ptable.proc; iterator < &ptable.proc[NPROC]; iterator++){
+80103cbe:	05 84 00 00 00       	add    $0x84,%eax
+      if((iterator -> state == RUNNABLE) && (iterator -> burst_time) < min_time_so_far){
+80103cc3:	89 d1                	mov    %edx,%ecx
+    for(iterator = ptable.proc; iterator < &ptable.proc[NPROC]; iterator++){
+80103cc5:	3d 54 4e 11 80       	cmp    $0x80114e54,%eax
+80103cca:	75 e0                	jne    80103cac <scheduler+0x5c>
+80103ccc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(proc_to_be_executed != 0){
+80103cd0:	85 ff                	test   %edi,%edi
+80103cd2:	74 37                	je     80103d0b <scheduler+0xbb>
+      switchuvm(proc_to_be_executed);
+80103cd4:	83 ec 0c             	sub    $0xc,%esp
+      c->proc = proc_to_be_executed;
+80103cd7:	89 bb ac 00 00 00    	mov    %edi,0xac(%ebx)
+      switchuvm(proc_to_be_executed);
+80103cdd:	57                   	push   %edi
+80103cde:	e8 ad 2f 00 00       	call   80106c90 <switchuvm>
+      proc_to_be_executed->state = RUNNING;
+80103ce3:	c7 47 0c 04 00 00 00 	movl   $0x4,0xc(%edi)
+      swtch(&(c->scheduler), proc_to_be_executed->context);
+80103cea:	58                   	pop    %eax
+80103ceb:	5a                   	pop    %edx
+80103cec:	ff 77 1c             	pushl  0x1c(%edi)
+80103cef:	56                   	push   %esi
+80103cf0:	e8 9e 0d 00 00       	call   80104a93 <swtch>
+      (proc_to_be_executed -> number_of_context_switches)++;
+80103cf5:	83 47 7c 01          	addl   $0x1,0x7c(%edi)
       switchkvm();
-80103c97:	e8 54 2d 00 00       	call   801069f0 <switchkvm>
+80103cf9:	e8 72 2f 00 00       	call   80106c70 <switchkvm>
       c->proc = 0;
-80103c9c:	83 c4 10             	add    $0x10,%esp
-80103c9f:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
-80103ca6:	00 00 00 
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103ca9:	83 c3 7c             	add    $0x7c,%ebx
-80103cac:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
-80103cb2:	75 bc                	jne    80103c70 <scheduler+0x40>
+80103cfe:	83 c4 10             	add    $0x10,%esp
+80103d01:	c7 83 ac 00 00 00 00 	movl   $0x0,0xac(%ebx)
+80103d08:	00 00 00 
     release(&ptable.lock);
-80103cb4:	83 ec 0c             	sub    $0xc,%esp
-80103cb7:	68 20 2d 11 80       	push   $0x80112d20
-80103cbc:	e8 5f 09 00 00       	call   80104620 <release>
-    sti();
-80103cc1:	83 c4 10             	add    $0x10,%esp
-80103cc4:	eb 92                	jmp    80103c58 <scheduler+0x28>
-80103cc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103ccd:	8d 76 00             	lea    0x0(%esi),%esi
-
-80103cd0 <sched>:
-{
-80103cd0:	f3 0f 1e fb          	endbr32 
-80103cd4:	55                   	push   %ebp
-80103cd5:	89 e5                	mov    %esp,%ebp
-80103cd7:	56                   	push   %esi
-80103cd8:	53                   	push   %ebx
+80103d0b:	83 ec 0c             	sub    $0xc,%esp
+80103d0e:	68 20 2d 11 80       	push   $0x80112d20
+80103d13:	e8 08 0b 00 00       	call   80104820 <release>
+  for(;;){
+80103d18:	83 c4 10             	add    $0x10,%esp
+80103d1b:	e9 58 ff ff ff       	jmp    80103c78 <scheduler+0x28>
+
+80103d20 <sched>:
+{
+80103d20:	f3 0f 1e fb          	endbr32 
+80103d24:	55                   	push   %ebp
+80103d25:	89 e5                	mov    %esp,%ebp
+80103d27:	56                   	push   %esi
+80103d28:	53                   	push   %ebx
   pushcli();
-80103cd9:	e8 82 07 00 00       	call   80104460 <pushcli>
+80103d29:	e8 32 09 00 00       	call   80104660 <pushcli>
   c = mycpu();
-80103cde:	e8 ed fb ff ff       	call   801038d0 <mycpu>
+80103d2e:	e8 bd fb ff ff       	call   801038f0 <mycpu>
   p = c->proc;
-80103ce3:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103d33:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103ce9:	e8 c2 07 00 00       	call   801044b0 <popcli>
+80103d39:	e8 72 09 00 00       	call   801046b0 <popcli>
   if(!holding(&ptable.lock))
-80103cee:	83 ec 0c             	sub    $0xc,%esp
-80103cf1:	68 20 2d 11 80       	push   $0x80112d20
-80103cf6:	e8 15 08 00 00       	call   80104510 <holding>
-80103cfb:	83 c4 10             	add    $0x10,%esp
-80103cfe:	85 c0                	test   %eax,%eax
-80103d00:	74 4f                	je     80103d51 <sched+0x81>
+80103d3e:	83 ec 0c             	sub    $0xc,%esp
+80103d41:	68 20 2d 11 80       	push   $0x80112d20
+80103d46:	e8 c5 09 00 00       	call   80104710 <holding>
+80103d4b:	83 c4 10             	add    $0x10,%esp
+80103d4e:	85 c0                	test   %eax,%eax
+80103d50:	74 4f                	je     80103da1 <sched+0x81>
   if(mycpu()->ncli != 1)
-80103d02:	e8 c9 fb ff ff       	call   801038d0 <mycpu>
-80103d07:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
-80103d0e:	75 68                	jne    80103d78 <sched+0xa8>
+80103d52:	e8 99 fb ff ff       	call   801038f0 <mycpu>
+80103d57:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
+80103d5e:	75 68                	jne    80103dc8 <sched+0xa8>
   if(p->state == RUNNING)
-80103d10:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
-80103d14:	74 55                	je     80103d6b <sched+0x9b>
+80103d60:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
+80103d64:	74 55                	je     80103dbb <sched+0x9b>
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-80103d16:	9c                   	pushf  
-80103d17:	58                   	pop    %eax
+80103d66:	9c                   	pushf  
+80103d67:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-80103d18:	f6 c4 02             	test   $0x2,%ah
-80103d1b:	75 41                	jne    80103d5e <sched+0x8e>
+80103d68:	f6 c4 02             	test   $0x2,%ah
+80103d6b:	75 41                	jne    80103dae <sched+0x8e>
   intena = mycpu()->intena;
-80103d1d:	e8 ae fb ff ff       	call   801038d0 <mycpu>
+80103d6d:	e8 7e fb ff ff       	call   801038f0 <mycpu>
   swtch(&p->context, mycpu()->scheduler);
-80103d22:	83 c3 1c             	add    $0x1c,%ebx
+80103d72:	83 c3 1c             	add    $0x1c,%ebx
   intena = mycpu()->intena;
-80103d25:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
+80103d75:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
   swtch(&p->context, mycpu()->scheduler);
-80103d2b:	e8 a0 fb ff ff       	call   801038d0 <mycpu>
-80103d30:	83 ec 08             	sub    $0x8,%esp
-80103d33:	ff 70 04             	pushl  0x4(%eax)
-80103d36:	53                   	push   %ebx
-80103d37:	e8 57 0b 00 00       	call   80104893 <swtch>
+80103d7b:	e8 70 fb ff ff       	call   801038f0 <mycpu>
+80103d80:	83 ec 08             	sub    $0x8,%esp
+80103d83:	ff 70 04             	pushl  0x4(%eax)
+80103d86:	53                   	push   %ebx
+80103d87:	e8 07 0d 00 00       	call   80104a93 <swtch>
   mycpu()->intena = intena;
-80103d3c:	e8 8f fb ff ff       	call   801038d0 <mycpu>
+80103d8c:	e8 5f fb ff ff       	call   801038f0 <mycpu>
 }
-80103d41:	83 c4 10             	add    $0x10,%esp
+80103d91:	83 c4 10             	add    $0x10,%esp
   mycpu()->intena = intena;
-80103d44:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
+80103d94:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
 }
-80103d4a:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103d4d:	5b                   	pop    %ebx
-80103d4e:	5e                   	pop    %esi
-80103d4f:	5d                   	pop    %ebp
-80103d50:	c3                   	ret    
+80103d9a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103d9d:	5b                   	pop    %ebx
+80103d9e:	5e                   	pop    %esi
+80103d9f:	5d                   	pop    %ebp
+80103da0:	c3                   	ret    
     panic("sched ptable.lock");
-80103d51:	83 ec 0c             	sub    $0xc,%esp
-80103d54:	68 5b 76 10 80       	push   $0x8010765b
-80103d59:	e8 32 c6 ff ff       	call   80100390 <panic>
+80103da1:	83 ec 0c             	sub    $0xc,%esp
+80103da4:	68 db 78 10 80       	push   $0x801078db
+80103da9:	e8 e2 c5 ff ff       	call   80100390 <panic>
     panic("sched interruptible");
-80103d5e:	83 ec 0c             	sub    $0xc,%esp
-80103d61:	68 87 76 10 80       	push   $0x80107687
-80103d66:	e8 25 c6 ff ff       	call   80100390 <panic>
+80103dae:	83 ec 0c             	sub    $0xc,%esp
+80103db1:	68 07 79 10 80       	push   $0x80107907
+80103db6:	e8 d5 c5 ff ff       	call   80100390 <panic>
     panic("sched running");
-80103d6b:	83 ec 0c             	sub    $0xc,%esp
-80103d6e:	68 79 76 10 80       	push   $0x80107679
-80103d73:	e8 18 c6 ff ff       	call   80100390 <panic>
+80103dbb:	83 ec 0c             	sub    $0xc,%esp
+80103dbe:	68 f9 78 10 80       	push   $0x801078f9
+80103dc3:	e8 c8 c5 ff ff       	call   80100390 <panic>
     panic("sched locks");
-80103d78:	83 ec 0c             	sub    $0xc,%esp
-80103d7b:	68 6d 76 10 80       	push   $0x8010766d
-80103d80:	e8 0b c6 ff ff       	call   80100390 <panic>
-80103d85:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103d8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80103d90 <exit>:
-{
-80103d90:	f3 0f 1e fb          	endbr32 
-80103d94:	55                   	push   %ebp
-80103d95:	89 e5                	mov    %esp,%ebp
-80103d97:	57                   	push   %edi
-80103d98:	56                   	push   %esi
-80103d99:	53                   	push   %ebx
-80103d9a:	83 ec 0c             	sub    $0xc,%esp
+80103dc8:	83 ec 0c             	sub    $0xc,%esp
+80103dcb:	68 ed 78 10 80       	push   $0x801078ed
+80103dd0:	e8 bb c5 ff ff       	call   80100390 <panic>
+80103dd5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103ddc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80103de0 <exit>:
+{
+80103de0:	f3 0f 1e fb          	endbr32 
+80103de4:	55                   	push   %ebp
+80103de5:	89 e5                	mov    %esp,%ebp
+80103de7:	57                   	push   %edi
+80103de8:	56                   	push   %esi
+80103de9:	53                   	push   %ebx
+80103dea:	83 ec 0c             	sub    $0xc,%esp
   pushcli();
-80103d9d:	e8 be 06 00 00       	call   80104460 <pushcli>
+80103ded:	e8 6e 08 00 00       	call   80104660 <pushcli>
   c = mycpu();
-80103da2:	e8 29 fb ff ff       	call   801038d0 <mycpu>
+80103df2:	e8 f9 fa ff ff       	call   801038f0 <mycpu>
   p = c->proc;
-80103da7:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+80103df7:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
   popcli();
-80103dad:	e8 fe 06 00 00       	call   801044b0 <popcli>
+80103dfd:	e8 ae 08 00 00       	call   801046b0 <popcli>
   if(curproc == initproc)
-80103db2:	8d 5e 28             	lea    0x28(%esi),%ebx
-80103db5:	8d 7e 68             	lea    0x68(%esi),%edi
-80103db8:	39 35 b8 a5 10 80    	cmp    %esi,0x8010a5b8
-80103dbe:	0f 84 f3 00 00 00    	je     80103eb7 <exit+0x127>
-80103dc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103e02:	8d 5e 28             	lea    0x28(%esi),%ebx
+80103e05:	8d 7e 68             	lea    0x68(%esi),%edi
+80103e08:	39 35 b8 a5 10 80    	cmp    %esi,0x8010a5b8
+80103e0e:	0f 84 fd 00 00 00    	je     80103f11 <exit+0x131>
+80103e14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[fd]){
-80103dc8:	8b 03                	mov    (%ebx),%eax
-80103dca:	85 c0                	test   %eax,%eax
-80103dcc:	74 12                	je     80103de0 <exit+0x50>
+80103e18:	8b 03                	mov    (%ebx),%eax
+80103e1a:	85 c0                	test   %eax,%eax
+80103e1c:	74 12                	je     80103e30 <exit+0x50>
       fileclose(curproc->ofile[fd]);
-80103dce:	83 ec 0c             	sub    $0xc,%esp
-80103dd1:	50                   	push   %eax
-80103dd2:	e8 e9 d0 ff ff       	call   80100ec0 <fileclose>
+80103e1e:	83 ec 0c             	sub    $0xc,%esp
+80103e21:	50                   	push   %eax
+80103e22:	e8 99 d0 ff ff       	call   80100ec0 <fileclose>
       curproc->ofile[fd] = 0;
-80103dd7:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-80103ddd:	83 c4 10             	add    $0x10,%esp
+80103e27:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80103e2d:	83 c4 10             	add    $0x10,%esp
   for(fd = 0; fd < NOFILE; fd++){
-80103de0:	83 c3 04             	add    $0x4,%ebx
-80103de3:	39 df                	cmp    %ebx,%edi
-80103de5:	75 e1                	jne    80103dc8 <exit+0x38>
+80103e30:	83 c3 04             	add    $0x4,%ebx
+80103e33:	39 df                	cmp    %ebx,%edi
+80103e35:	75 e1                	jne    80103e18 <exit+0x38>
   begin_op();
-80103de7:	e8 44 ef ff ff       	call   80102d30 <begin_op>
+80103e37:	e8 f4 ee ff ff       	call   80102d30 <begin_op>
   iput(curproc->cwd);
-80103dec:	83 ec 0c             	sub    $0xc,%esp
-80103def:	ff 76 68             	pushl  0x68(%esi)
-80103df2:	e8 99 da ff ff       	call   80101890 <iput>
+80103e3c:	83 ec 0c             	sub    $0xc,%esp
+80103e3f:	ff 76 68             	pushl  0x68(%esi)
+80103e42:	e8 49 da ff ff       	call   80101890 <iput>
   end_op();
-80103df7:	e8 a4 ef ff ff       	call   80102da0 <end_op>
+80103e47:	e8 54 ef ff ff       	call   80102da0 <end_op>
   curproc->cwd = 0;
-80103dfc:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
+80103e4c:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
   acquire(&ptable.lock);
-80103e03:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103e0a:	e8 51 07 00 00       	call   80104560 <acquire>
+80103e53:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103e5a:	e8 01 09 00 00       	call   80104760 <acquire>
   wakeup1(curproc->parent);
-80103e0f:	8b 56 14             	mov    0x14(%esi),%edx
-80103e12:	83 c4 10             	add    $0x10,%esp
+80103e5f:	8b 56 14             	mov    0x14(%esi),%edx
+80103e62:	83 c4 10             	add    $0x10,%esp
 static void
 wakeup1(void *chan)
 {
   struct proc *p;
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e15:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80103e1a:	eb 0e                	jmp    80103e2a <exit+0x9a>
-80103e1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103e20:	83 c0 7c             	add    $0x7c,%eax
-80103e23:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-80103e28:	74 1c                	je     80103e46 <exit+0xb6>
+80103e65:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80103e6a:	eb 10                	jmp    80103e7c <exit+0x9c>
+80103e6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103e70:	05 84 00 00 00       	add    $0x84,%eax
+80103e75:	3d 54 4e 11 80       	cmp    $0x80114e54,%eax
+80103e7a:	74 1e                	je     80103e9a <exit+0xba>
     if(p->state == SLEEPING && p->chan == chan)
-80103e2a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80103e2e:	75 f0                	jne    80103e20 <exit+0x90>
-80103e30:	3b 50 20             	cmp    0x20(%eax),%edx
-80103e33:	75 eb                	jne    80103e20 <exit+0x90>
+80103e7c:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80103e80:	75 ee                	jne    80103e70 <exit+0x90>
+80103e82:	3b 50 20             	cmp    0x20(%eax),%edx
+80103e85:	75 e9                	jne    80103e70 <exit+0x90>
       p->state = RUNNABLE;
-80103e35:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80103e87:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e3c:	83 c0 7c             	add    $0x7c,%eax
-80103e3f:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-80103e44:	75 e4                	jne    80103e2a <exit+0x9a>
+80103e8e:	05 84 00 00 00       	add    $0x84,%eax
+80103e93:	3d 54 4e 11 80       	cmp    $0x80114e54,%eax
+80103e98:	75 e2                	jne    80103e7c <exit+0x9c>
       p->parent = initproc;
-80103e46:	8b 0d b8 a5 10 80    	mov    0x8010a5b8,%ecx
+80103e9a:	8b 0d b8 a5 10 80    	mov    0x8010a5b8,%ecx
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103e4c:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
-80103e51:	eb 10                	jmp    80103e63 <exit+0xd3>
-80103e53:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103e57:	90                   	nop
-80103e58:	83 c2 7c             	add    $0x7c,%edx
-80103e5b:	81 fa 54 4c 11 80    	cmp    $0x80114c54,%edx
-80103e61:	74 3b                	je     80103e9e <exit+0x10e>
+80103ea0:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
+80103ea5:	eb 17                	jmp    80103ebe <exit+0xde>
+80103ea7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103eae:	66 90                	xchg   %ax,%ax
+80103eb0:	81 c2 84 00 00 00    	add    $0x84,%edx
+80103eb6:	81 fa 54 4e 11 80    	cmp    $0x80114e54,%edx
+80103ebc:	74 3a                	je     80103ef8 <exit+0x118>
     if(p->parent == curproc){
-80103e63:	39 72 14             	cmp    %esi,0x14(%edx)
-80103e66:	75 f0                	jne    80103e58 <exit+0xc8>
+80103ebe:	39 72 14             	cmp    %esi,0x14(%edx)
+80103ec1:	75 ed                	jne    80103eb0 <exit+0xd0>
       if(p->state == ZOMBIE)
-80103e68:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
+80103ec3:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
       p->parent = initproc;
-80103e6c:	89 4a 14             	mov    %ecx,0x14(%edx)
+80103ec7:	89 4a 14             	mov    %ecx,0x14(%edx)
       if(p->state == ZOMBIE)
-80103e6f:	75 e7                	jne    80103e58 <exit+0xc8>
+80103eca:	75 e4                	jne    80103eb0 <exit+0xd0>
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e71:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80103e76:	eb 12                	jmp    80103e8a <exit+0xfa>
-80103e78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103e7f:	90                   	nop
-80103e80:	83 c0 7c             	add    $0x7c,%eax
-80103e83:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-80103e88:	74 ce                	je     80103e58 <exit+0xc8>
+80103ecc:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80103ed1:	eb 11                	jmp    80103ee4 <exit+0x104>
+80103ed3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103ed7:	90                   	nop
+80103ed8:	05 84 00 00 00       	add    $0x84,%eax
+80103edd:	3d 54 4e 11 80       	cmp    $0x80114e54,%eax
+80103ee2:	74 cc                	je     80103eb0 <exit+0xd0>
     if(p->state == SLEEPING && p->chan == chan)
-80103e8a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80103e8e:	75 f0                	jne    80103e80 <exit+0xf0>
-80103e90:	3b 48 20             	cmp    0x20(%eax),%ecx
-80103e93:	75 eb                	jne    80103e80 <exit+0xf0>
+80103ee4:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80103ee8:	75 ee                	jne    80103ed8 <exit+0xf8>
+80103eea:	3b 48 20             	cmp    0x20(%eax),%ecx
+80103eed:	75 e9                	jne    80103ed8 <exit+0xf8>
       p->state = RUNNABLE;
-80103e95:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-80103e9c:	eb e2                	jmp    80103e80 <exit+0xf0>
+80103eef:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80103ef6:	eb e0                	jmp    80103ed8 <exit+0xf8>
   curproc->state = ZOMBIE;
-80103e9e:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
+80103ef8:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
   sched();
-80103ea5:	e8 26 fe ff ff       	call   80103cd0 <sched>
+80103eff:	e8 1c fe ff ff       	call   80103d20 <sched>
   panic("zombie exit");
-80103eaa:	83 ec 0c             	sub    $0xc,%esp
-80103ead:	68 a8 76 10 80       	push   $0x801076a8
-80103eb2:	e8 d9 c4 ff ff       	call   80100390 <panic>
+80103f04:	83 ec 0c             	sub    $0xc,%esp
+80103f07:	68 28 79 10 80       	push   $0x80107928
+80103f0c:	e8 7f c4 ff ff       	call   80100390 <panic>
     panic("init exiting");
-80103eb7:	83 ec 0c             	sub    $0xc,%esp
-80103eba:	68 9b 76 10 80       	push   $0x8010769b
-80103ebf:	e8 cc c4 ff ff       	call   80100390 <panic>
-80103ec4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103ecb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103ecf:	90                   	nop
-
-80103ed0 <yield>:
-{
-80103ed0:	f3 0f 1e fb          	endbr32 
-80103ed4:	55                   	push   %ebp
-80103ed5:	89 e5                	mov    %esp,%ebp
-80103ed7:	53                   	push   %ebx
-80103ed8:	83 ec 10             	sub    $0x10,%esp
+80103f11:	83 ec 0c             	sub    $0xc,%esp
+80103f14:	68 1b 79 10 80       	push   $0x8010791b
+80103f19:	e8 72 c4 ff ff       	call   80100390 <panic>
+80103f1e:	66 90                	xchg   %ax,%ax
+
+80103f20 <yield>:
+{
+80103f20:	f3 0f 1e fb          	endbr32 
+80103f24:	55                   	push   %ebp
+80103f25:	89 e5                	mov    %esp,%ebp
+80103f27:	53                   	push   %ebx
+80103f28:	83 ec 10             	sub    $0x10,%esp
   acquire(&ptable.lock);  //DOC: yieldlock
-80103edb:	68 20 2d 11 80       	push   $0x80112d20
-80103ee0:	e8 7b 06 00 00       	call   80104560 <acquire>
+80103f2b:	68 20 2d 11 80       	push   $0x80112d20
+80103f30:	e8 2b 08 00 00       	call   80104760 <acquire>
   pushcli();
-80103ee5:	e8 76 05 00 00       	call   80104460 <pushcli>
+80103f35:	e8 26 07 00 00       	call   80104660 <pushcli>
   c = mycpu();
-80103eea:	e8 e1 f9 ff ff       	call   801038d0 <mycpu>
+80103f3a:	e8 b1 f9 ff ff       	call   801038f0 <mycpu>
   p = c->proc;
-80103eef:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103f3f:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103ef5:	e8 b6 05 00 00       	call   801044b0 <popcli>
+80103f45:	e8 66 07 00 00       	call   801046b0 <popcli>
   myproc()->state = RUNNABLE;
-80103efa:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+80103f4a:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
   sched();
-80103f01:	e8 ca fd ff ff       	call   80103cd0 <sched>
+80103f51:	e8 ca fd ff ff       	call   80103d20 <sched>
   release(&ptable.lock);
-80103f06:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103f0d:	e8 0e 07 00 00       	call   80104620 <release>
+80103f56:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103f5d:	e8 be 08 00 00       	call   80104820 <release>
 }
-80103f12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103f15:	83 c4 10             	add    $0x10,%esp
-80103f18:	c9                   	leave  
-80103f19:	c3                   	ret    
-80103f1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80103f20 <sleep>:
-{
-80103f20:	f3 0f 1e fb          	endbr32 
-80103f24:	55                   	push   %ebp
-80103f25:	89 e5                	mov    %esp,%ebp
-80103f27:	57                   	push   %edi
-80103f28:	56                   	push   %esi
-80103f29:	53                   	push   %ebx
-80103f2a:	83 ec 0c             	sub    $0xc,%esp
-80103f2d:	8b 7d 08             	mov    0x8(%ebp),%edi
-80103f30:	8b 75 0c             	mov    0xc(%ebp),%esi
+80103f62:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103f65:	83 c4 10             	add    $0x10,%esp
+80103f68:	c9                   	leave  
+80103f69:	c3                   	ret    
+80103f6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80103f70 <sleep>:
+{
+80103f70:	f3 0f 1e fb          	endbr32 
+80103f74:	55                   	push   %ebp
+80103f75:	89 e5                	mov    %esp,%ebp
+80103f77:	57                   	push   %edi
+80103f78:	56                   	push   %esi
+80103f79:	53                   	push   %ebx
+80103f7a:	83 ec 0c             	sub    $0xc,%esp
+80103f7d:	8b 7d 08             	mov    0x8(%ebp),%edi
+80103f80:	8b 75 0c             	mov    0xc(%ebp),%esi
   pushcli();
-80103f33:	e8 28 05 00 00       	call   80104460 <pushcli>
+80103f83:	e8 d8 06 00 00       	call   80104660 <pushcli>
   c = mycpu();
-80103f38:	e8 93 f9 ff ff       	call   801038d0 <mycpu>
+80103f88:	e8 63 f9 ff ff       	call   801038f0 <mycpu>
   p = c->proc;
-80103f3d:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103f8d:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103f43:	e8 68 05 00 00       	call   801044b0 <popcli>
+80103f93:	e8 18 07 00 00       	call   801046b0 <popcli>
   if(p == 0)
-80103f48:	85 db                	test   %ebx,%ebx
-80103f4a:	0f 84 83 00 00 00    	je     80103fd3 <sleep+0xb3>
+80103f98:	85 db                	test   %ebx,%ebx
+80103f9a:	0f 84 83 00 00 00    	je     80104023 <sleep+0xb3>
   if(lk == 0)
-80103f50:	85 f6                	test   %esi,%esi
-80103f52:	74 72                	je     80103fc6 <sleep+0xa6>
+80103fa0:	85 f6                	test   %esi,%esi
+80103fa2:	74 72                	je     80104016 <sleep+0xa6>
   if(lk != &ptable.lock){  //DOC: sleeplock0
-80103f54:	81 fe 20 2d 11 80    	cmp    $0x80112d20,%esi
-80103f5a:	74 4c                	je     80103fa8 <sleep+0x88>
+80103fa4:	81 fe 20 2d 11 80    	cmp    $0x80112d20,%esi
+80103faa:	74 4c                	je     80103ff8 <sleep+0x88>
     acquire(&ptable.lock);  //DOC: sleeplock1
-80103f5c:	83 ec 0c             	sub    $0xc,%esp
-80103f5f:	68 20 2d 11 80       	push   $0x80112d20
-80103f64:	e8 f7 05 00 00       	call   80104560 <acquire>
+80103fac:	83 ec 0c             	sub    $0xc,%esp
+80103faf:	68 20 2d 11 80       	push   $0x80112d20
+80103fb4:	e8 a7 07 00 00       	call   80104760 <acquire>
     release(lk);
-80103f69:	89 34 24             	mov    %esi,(%esp)
-80103f6c:	e8 af 06 00 00       	call   80104620 <release>
+80103fb9:	89 34 24             	mov    %esi,(%esp)
+80103fbc:	e8 5f 08 00 00       	call   80104820 <release>
   p->chan = chan;
-80103f71:	89 7b 20             	mov    %edi,0x20(%ebx)
+80103fc1:	89 7b 20             	mov    %edi,0x20(%ebx)
   p->state = SLEEPING;
-80103f74:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+80103fc4:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
   sched();
-80103f7b:	e8 50 fd ff ff       	call   80103cd0 <sched>
+80103fcb:	e8 50 fd ff ff       	call   80103d20 <sched>
   p->chan = 0;
-80103f80:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+80103fd0:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
     release(&ptable.lock);
-80103f87:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103f8e:	e8 8d 06 00 00       	call   80104620 <release>
+80103fd7:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103fde:	e8 3d 08 00 00       	call   80104820 <release>
     acquire(lk);
-80103f93:	89 75 08             	mov    %esi,0x8(%ebp)
-80103f96:	83 c4 10             	add    $0x10,%esp
+80103fe3:	89 75 08             	mov    %esi,0x8(%ebp)
+80103fe6:	83 c4 10             	add    $0x10,%esp
 }
-80103f99:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103f9c:	5b                   	pop    %ebx
-80103f9d:	5e                   	pop    %esi
-80103f9e:	5f                   	pop    %edi
-80103f9f:	5d                   	pop    %ebp
+80103fe9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103fec:	5b                   	pop    %ebx
+80103fed:	5e                   	pop    %esi
+80103fee:	5f                   	pop    %edi
+80103fef:	5d                   	pop    %ebp
     acquire(lk);
-80103fa0:	e9 bb 05 00 00       	jmp    80104560 <acquire>
-80103fa5:	8d 76 00             	lea    0x0(%esi),%esi
+80103ff0:	e9 6b 07 00 00       	jmp    80104760 <acquire>
+80103ff5:	8d 76 00             	lea    0x0(%esi),%esi
   p->chan = chan;
-80103fa8:	89 7b 20             	mov    %edi,0x20(%ebx)
+80103ff8:	89 7b 20             	mov    %edi,0x20(%ebx)
   p->state = SLEEPING;
-80103fab:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+80103ffb:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
   sched();
-80103fb2:	e8 19 fd ff ff       	call   80103cd0 <sched>
+80104002:	e8 19 fd ff ff       	call   80103d20 <sched>
   p->chan = 0;
-80103fb7:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+80104007:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
 }
-80103fbe:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103fc1:	5b                   	pop    %ebx
-80103fc2:	5e                   	pop    %esi
-80103fc3:	5f                   	pop    %edi
-80103fc4:	5d                   	pop    %ebp
-80103fc5:	c3                   	ret    
+8010400e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104011:	5b                   	pop    %ebx
+80104012:	5e                   	pop    %esi
+80104013:	5f                   	pop    %edi
+80104014:	5d                   	pop    %ebp
+80104015:	c3                   	ret    
     panic("sleep without lk");
-80103fc6:	83 ec 0c             	sub    $0xc,%esp
-80103fc9:	68 ba 76 10 80       	push   $0x801076ba
-80103fce:	e8 bd c3 ff ff       	call   80100390 <panic>
+80104016:	83 ec 0c             	sub    $0xc,%esp
+80104019:	68 3a 79 10 80       	push   $0x8010793a
+8010401e:	e8 6d c3 ff ff       	call   80100390 <panic>
     panic("sleep");
-80103fd3:	83 ec 0c             	sub    $0xc,%esp
-80103fd6:	68 b4 76 10 80       	push   $0x801076b4
-80103fdb:	e8 b0 c3 ff ff       	call   80100390 <panic>
-
-80103fe0 <wait>:
-{
-80103fe0:	f3 0f 1e fb          	endbr32 
-80103fe4:	55                   	push   %ebp
-80103fe5:	89 e5                	mov    %esp,%ebp
-80103fe7:	56                   	push   %esi
-80103fe8:	53                   	push   %ebx
+80104023:	83 ec 0c             	sub    $0xc,%esp
+80104026:	68 34 79 10 80       	push   $0x80107934
+8010402b:	e8 60 c3 ff ff       	call   80100390 <panic>
+
+80104030 <wait>:
+{
+80104030:	f3 0f 1e fb          	endbr32 
+80104034:	55                   	push   %ebp
+80104035:	89 e5                	mov    %esp,%ebp
+80104037:	56                   	push   %esi
+80104038:	53                   	push   %ebx
   pushcli();
-80103fe9:	e8 72 04 00 00       	call   80104460 <pushcli>
+80104039:	e8 22 06 00 00       	call   80104660 <pushcli>
   c = mycpu();
-80103fee:	e8 dd f8 ff ff       	call   801038d0 <mycpu>
+8010403e:	e8 ad f8 ff ff       	call   801038f0 <mycpu>
   p = c->proc;
-80103ff3:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+80104043:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
   popcli();
-80103ff9:	e8 b2 04 00 00       	call   801044b0 <popcli>
+80104049:	e8 62 06 00 00       	call   801046b0 <popcli>
   acquire(&ptable.lock);
-80103ffe:	83 ec 0c             	sub    $0xc,%esp
-80104001:	68 20 2d 11 80       	push   $0x80112d20
-80104006:	e8 55 05 00 00       	call   80104560 <acquire>
-8010400b:	83 c4 10             	add    $0x10,%esp
+8010404e:	83 ec 0c             	sub    $0xc,%esp
+80104051:	68 20 2d 11 80       	push   $0x80112d20
+80104056:	e8 05 07 00 00       	call   80104760 <acquire>
+8010405b:	83 c4 10             	add    $0x10,%esp
     havekids = 0;
-8010400e:	31 c0                	xor    %eax,%eax
+8010405e:	31 c0                	xor    %eax,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104010:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
-80104015:	eb 14                	jmp    8010402b <wait+0x4b>
-80104017:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010401e:	66 90                	xchg   %ax,%ax
-80104020:	83 c3 7c             	add    $0x7c,%ebx
-80104023:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
-80104029:	74 1b                	je     80104046 <wait+0x66>
+80104060:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+80104065:	eb 17                	jmp    8010407e <wait+0x4e>
+80104067:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010406e:	66 90                	xchg   %ax,%ax
+80104070:	81 c3 84 00 00 00    	add    $0x84,%ebx
+80104076:	81 fb 54 4e 11 80    	cmp    $0x80114e54,%ebx
+8010407c:	74 1e                	je     8010409c <wait+0x6c>
       if(p->parent != curproc)
-8010402b:	39 73 14             	cmp    %esi,0x14(%ebx)
-8010402e:	75 f0                	jne    80104020 <wait+0x40>
+8010407e:	39 73 14             	cmp    %esi,0x14(%ebx)
+80104081:	75 ed                	jne    80104070 <wait+0x40>
       if(p->state == ZOMBIE){
-80104030:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
-80104034:	74 32                	je     80104068 <wait+0x88>
+80104083:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
+80104087:	74 37                	je     801040c0 <wait+0x90>
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104036:	83 c3 7c             	add    $0x7c,%ebx
+80104089:	81 c3 84 00 00 00    	add    $0x84,%ebx
       havekids = 1;
-80104039:	b8 01 00 00 00       	mov    $0x1,%eax
+8010408f:	b8 01 00 00 00       	mov    $0x1,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-8010403e:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
-80104044:	75 e5                	jne    8010402b <wait+0x4b>
+80104094:	81 fb 54 4e 11 80    	cmp    $0x80114e54,%ebx
+8010409a:	75 e2                	jne    8010407e <wait+0x4e>
     if(!havekids || curproc->killed){
-80104046:	85 c0                	test   %eax,%eax
-80104048:	74 74                	je     801040be <wait+0xde>
-8010404a:	8b 46 24             	mov    0x24(%esi),%eax
-8010404d:	85 c0                	test   %eax,%eax
-8010404f:	75 6d                	jne    801040be <wait+0xde>
+8010409c:	85 c0                	test   %eax,%eax
+8010409e:	74 76                	je     80104116 <wait+0xe6>
+801040a0:	8b 46 24             	mov    0x24(%esi),%eax
+801040a3:	85 c0                	test   %eax,%eax
+801040a5:	75 6f                	jne    80104116 <wait+0xe6>
     sleep(curproc, &ptable.lock);  //DOC: wait-sleep
-80104051:	83 ec 08             	sub    $0x8,%esp
-80104054:	68 20 2d 11 80       	push   $0x80112d20
-80104059:	56                   	push   %esi
-8010405a:	e8 c1 fe ff ff       	call   80103f20 <sleep>
+801040a7:	83 ec 08             	sub    $0x8,%esp
+801040aa:	68 20 2d 11 80       	push   $0x80112d20
+801040af:	56                   	push   %esi
+801040b0:	e8 bb fe ff ff       	call   80103f70 <sleep>
     havekids = 0;
-8010405f:	83 c4 10             	add    $0x10,%esp
-80104062:	eb aa                	jmp    8010400e <wait+0x2e>
-80104064:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801040b5:	83 c4 10             	add    $0x10,%esp
+801040b8:	eb a4                	jmp    8010405e <wait+0x2e>
+801040ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         kfree(p->kstack);
-80104068:	83 ec 0c             	sub    $0xc,%esp
-8010406b:	ff 73 08             	pushl  0x8(%ebx)
+801040c0:	83 ec 0c             	sub    $0xc,%esp
+801040c3:	ff 73 08             	pushl  0x8(%ebx)
         pid = p->pid;
-8010406e:	8b 73 10             	mov    0x10(%ebx),%esi
+801040c6:	8b 73 10             	mov    0x10(%ebx),%esi
         kfree(p->kstack);
-80104071:	e8 fa e3 ff ff       	call   80102470 <kfree>
+801040c9:	e8 a2 e3 ff ff       	call   80102470 <kfree>
         freevm(p->pgdir);
-80104076:	5a                   	pop    %edx
-80104077:	ff 73 04             	pushl  0x4(%ebx)
+801040ce:	5a                   	pop    %edx
+801040cf:	ff 73 04             	pushl  0x4(%ebx)
         p->kstack = 0;
-8010407a:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+801040d2:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
         freevm(p->pgdir);
-80104081:	e8 4a 2d 00 00       	call   80106dd0 <freevm>
+801040d9:	e8 72 2f 00 00       	call   80107050 <freevm>
         release(&ptable.lock);
-80104086:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+801040de:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
         p->pid = 0;
-8010408d:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
+801040e5:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
         p->parent = 0;
-80104094:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+801040ec:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
         p->name[0] = 0;
-8010409b:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
+801040f3:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
         p->killed = 0;
-8010409f:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+801040f7:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
         p->state = UNUSED;
-801040a6:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+801040fe:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
         release(&ptable.lock);
-801040ad:	e8 6e 05 00 00       	call   80104620 <release>
+80104105:	e8 16 07 00 00       	call   80104820 <release>
         return pid;
-801040b2:	83 c4 10             	add    $0x10,%esp
+8010410a:	83 c4 10             	add    $0x10,%esp
 }
-801040b5:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801040b8:	89 f0                	mov    %esi,%eax
-801040ba:	5b                   	pop    %ebx
-801040bb:	5e                   	pop    %esi
-801040bc:	5d                   	pop    %ebp
-801040bd:	c3                   	ret    
+8010410d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104110:	89 f0                	mov    %esi,%eax
+80104112:	5b                   	pop    %ebx
+80104113:	5e                   	pop    %esi
+80104114:	5d                   	pop    %ebp
+80104115:	c3                   	ret    
       release(&ptable.lock);
-801040be:	83 ec 0c             	sub    $0xc,%esp
+80104116:	83 ec 0c             	sub    $0xc,%esp
       return -1;
-801040c1:	be ff ff ff ff       	mov    $0xffffffff,%esi
+80104119:	be ff ff ff ff       	mov    $0xffffffff,%esi
       release(&ptable.lock);
-801040c6:	68 20 2d 11 80       	push   $0x80112d20
-801040cb:	e8 50 05 00 00       	call   80104620 <release>
+8010411e:	68 20 2d 11 80       	push   $0x80112d20
+80104123:	e8 f8 06 00 00       	call   80104820 <release>
       return -1;
-801040d0:	83 c4 10             	add    $0x10,%esp
-801040d3:	eb e0                	jmp    801040b5 <wait+0xd5>
-801040d5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801040dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104128:	83 c4 10             	add    $0x10,%esp
+8010412b:	eb e0                	jmp    8010410d <wait+0xdd>
+8010412d:	8d 76 00             	lea    0x0(%esi),%esi
 
-801040e0 <wakeup>:
+80104130 <wakeup>:
 }
 
 // Wake up all processes sleeping on chan.
 void
 wakeup(void *chan)
 {
-801040e0:	f3 0f 1e fb          	endbr32 
-801040e4:	55                   	push   %ebp
-801040e5:	89 e5                	mov    %esp,%ebp
-801040e7:	53                   	push   %ebx
-801040e8:	83 ec 10             	sub    $0x10,%esp
-801040eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104130:	f3 0f 1e fb          	endbr32 
+80104134:	55                   	push   %ebp
+80104135:	89 e5                	mov    %esp,%ebp
+80104137:	53                   	push   %ebx
+80104138:	83 ec 10             	sub    $0x10,%esp
+8010413b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ptable.lock);
-801040ee:	68 20 2d 11 80       	push   $0x80112d20
-801040f3:	e8 68 04 00 00       	call   80104560 <acquire>
-801040f8:	83 c4 10             	add    $0x10,%esp
+8010413e:	68 20 2d 11 80       	push   $0x80112d20
+80104143:	e8 18 06 00 00       	call   80104760 <acquire>
+80104148:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801040fb:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80104100:	eb 10                	jmp    80104112 <wakeup+0x32>
-80104102:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104108:	83 c0 7c             	add    $0x7c,%eax
-8010410b:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-80104110:	74 1c                	je     8010412e <wakeup+0x4e>
+8010414b:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80104150:	eb 12                	jmp    80104164 <wakeup+0x34>
+80104152:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104158:	05 84 00 00 00       	add    $0x84,%eax
+8010415d:	3d 54 4e 11 80       	cmp    $0x80114e54,%eax
+80104162:	74 1e                	je     80104182 <wakeup+0x52>
     if(p->state == SLEEPING && p->chan == chan)
-80104112:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80104116:	75 f0                	jne    80104108 <wakeup+0x28>
-80104118:	3b 58 20             	cmp    0x20(%eax),%ebx
-8010411b:	75 eb                	jne    80104108 <wakeup+0x28>
+80104164:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80104168:	75 ee                	jne    80104158 <wakeup+0x28>
+8010416a:	3b 58 20             	cmp    0x20(%eax),%ebx
+8010416d:	75 e9                	jne    80104158 <wakeup+0x28>
       p->state = RUNNABLE;
-8010411d:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+8010416f:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80104124:	83 c0 7c             	add    $0x7c,%eax
-80104127:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-8010412c:	75 e4                	jne    80104112 <wakeup+0x32>
+80104176:	05 84 00 00 00       	add    $0x84,%eax
+8010417b:	3d 54 4e 11 80       	cmp    $0x80114e54,%eax
+80104180:	75 e2                	jne    80104164 <wakeup+0x34>
   wakeup1(chan);
   release(&ptable.lock);
-8010412e:	c7 45 08 20 2d 11 80 	movl   $0x80112d20,0x8(%ebp)
+80104182:	c7 45 08 20 2d 11 80 	movl   $0x80112d20,0x8(%ebp)
 }
-80104135:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104138:	c9                   	leave  
+80104189:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010418c:	c9                   	leave  
   release(&ptable.lock);
-80104139:	e9 e2 04 00 00       	jmp    80104620 <release>
-8010413e:	66 90                	xchg   %ax,%ax
+8010418d:	e9 8e 06 00 00       	jmp    80104820 <release>
+80104192:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104199:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80104140 <kill>:
+801041a0 <kill>:
 // Kill the process with the given pid.
 // Process won't exit until it returns
 // to user space (see trap in trap.c).
 int
 kill(int pid)
 {
-80104140:	f3 0f 1e fb          	endbr32 
-80104144:	55                   	push   %ebp
-80104145:	89 e5                	mov    %esp,%ebp
-80104147:	53                   	push   %ebx
-80104148:	83 ec 10             	sub    $0x10,%esp
-8010414b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801041a0:	f3 0f 1e fb          	endbr32 
+801041a4:	55                   	push   %ebp
+801041a5:	89 e5                	mov    %esp,%ebp
+801041a7:	53                   	push   %ebx
+801041a8:	83 ec 10             	sub    $0x10,%esp
+801041ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct proc *p;
 
   acquire(&ptable.lock);
-8010414e:	68 20 2d 11 80       	push   $0x80112d20
-80104153:	e8 08 04 00 00       	call   80104560 <acquire>
-80104158:	83 c4 10             	add    $0x10,%esp
+801041ae:	68 20 2d 11 80       	push   $0x80112d20
+801041b3:	e8 a8 05 00 00       	call   80104760 <acquire>
+801041b8:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-8010415b:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80104160:	eb 10                	jmp    80104172 <kill+0x32>
-80104162:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104168:	83 c0 7c             	add    $0x7c,%eax
-8010416b:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-80104170:	74 36                	je     801041a8 <kill+0x68>
+801041bb:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+801041c0:	eb 12                	jmp    801041d4 <kill+0x34>
+801041c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801041c8:	05 84 00 00 00       	add    $0x84,%eax
+801041cd:	3d 54 4e 11 80       	cmp    $0x80114e54,%eax
+801041d2:	74 34                	je     80104208 <kill+0x68>
     if(p->pid == pid){
-80104172:	39 58 10             	cmp    %ebx,0x10(%eax)
-80104175:	75 f1                	jne    80104168 <kill+0x28>
+801041d4:	39 58 10             	cmp    %ebx,0x10(%eax)
+801041d7:	75 ef                	jne    801041c8 <kill+0x28>
       p->killed = 1;
       // Wake process from sleep if necessary.
       if(p->state == SLEEPING)
-80104177:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+801041d9:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
       p->killed = 1;
-8010417b:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+801041dd:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
       if(p->state == SLEEPING)
-80104182:	75 07                	jne    8010418b <kill+0x4b>
+801041e4:	75 07                	jne    801041ed <kill+0x4d>
         p->state = RUNNABLE;
-80104184:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+801041e6:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
       release(&ptable.lock);
-8010418b:	83 ec 0c             	sub    $0xc,%esp
-8010418e:	68 20 2d 11 80       	push   $0x80112d20
-80104193:	e8 88 04 00 00       	call   80104620 <release>
+801041ed:	83 ec 0c             	sub    $0xc,%esp
+801041f0:	68 20 2d 11 80       	push   $0x80112d20
+801041f5:	e8 26 06 00 00       	call   80104820 <release>
       return 0;
     }
   }
   release(&ptable.lock);
   return -1;
 }
-80104198:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801041fa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
       return 0;
-8010419b:	83 c4 10             	add    $0x10,%esp
-8010419e:	31 c0                	xor    %eax,%eax
+801041fd:	83 c4 10             	add    $0x10,%esp
+80104200:	31 c0                	xor    %eax,%eax
 }
-801041a0:	c9                   	leave  
-801041a1:	c3                   	ret    
-801041a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104202:	c9                   	leave  
+80104203:	c3                   	ret    
+80104204:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   release(&ptable.lock);
-801041a8:	83 ec 0c             	sub    $0xc,%esp
-801041ab:	68 20 2d 11 80       	push   $0x80112d20
-801041b0:	e8 6b 04 00 00       	call   80104620 <release>
+80104208:	83 ec 0c             	sub    $0xc,%esp
+8010420b:	68 20 2d 11 80       	push   $0x80112d20
+80104210:	e8 0b 06 00 00       	call   80104820 <release>
 }
-801041b5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104215:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   return -1;
-801041b8:	83 c4 10             	add    $0x10,%esp
-801041bb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104218:	83 c4 10             	add    $0x10,%esp
+8010421b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801041c0:	c9                   	leave  
-801041c1:	c3                   	ret    
-801041c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801041c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104220:	c9                   	leave  
+80104221:	c3                   	ret    
+80104222:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104229:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801041d0 <procdump>:
+80104230 <procdump>:
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
 void
 procdump(void)
 {
-801041d0:	f3 0f 1e fb          	endbr32 
-801041d4:	55                   	push   %ebp
-801041d5:	89 e5                	mov    %esp,%ebp
-801041d7:	57                   	push   %edi
-801041d8:	56                   	push   %esi
-801041d9:	8d 75 e8             	lea    -0x18(%ebp),%esi
-801041dc:	53                   	push   %ebx
-801041dd:	bb c0 2d 11 80       	mov    $0x80112dc0,%ebx
-801041e2:	83 ec 3c             	sub    $0x3c,%esp
-801041e5:	eb 28                	jmp    8010420f <procdump+0x3f>
-801041e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801041ee:	66 90                	xchg   %ax,%ax
+80104230:	f3 0f 1e fb          	endbr32 
+80104234:	55                   	push   %ebp
+80104235:	89 e5                	mov    %esp,%ebp
+80104237:	57                   	push   %edi
+80104238:	56                   	push   %esi
+80104239:	8d 75 e8             	lea    -0x18(%ebp),%esi
+8010423c:	53                   	push   %ebx
+8010423d:	bb c0 2d 11 80       	mov    $0x80112dc0,%ebx
+80104242:	83 ec 3c             	sub    $0x3c,%esp
+80104245:	eb 2b                	jmp    80104272 <procdump+0x42>
+80104247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010424e:	66 90                	xchg   %ax,%ax
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
         cprintf(" %p", pc[i]);
     }
     cprintf("\n");
-801041f0:	83 ec 0c             	sub    $0xc,%esp
-801041f3:	68 37 7a 10 80       	push   $0x80107a37
-801041f8:	e8 b3 c4 ff ff       	call   801006b0 <cprintf>
-801041fd:	83 c4 10             	add    $0x10,%esp
+80104250:	83 ec 0c             	sub    $0xc,%esp
+80104253:	68 cb 7c 10 80       	push   $0x80107ccb
+80104258:	e8 53 c4 ff ff       	call   801006b0 <cprintf>
+8010425d:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104200:	83 c3 7c             	add    $0x7c,%ebx
-80104203:	81 fb c0 4c 11 80    	cmp    $0x80114cc0,%ebx
-80104209:	0f 84 81 00 00 00    	je     80104290 <procdump+0xc0>
+80104260:	81 c3 84 00 00 00    	add    $0x84,%ebx
+80104266:	81 fb c0 4e 11 80    	cmp    $0x80114ec0,%ebx
+8010426c:	0f 84 8e 00 00 00    	je     80104300 <procdump+0xd0>
     if(p->state == UNUSED)
-8010420f:	8b 43 a0             	mov    -0x60(%ebx),%eax
-80104212:	85 c0                	test   %eax,%eax
-80104214:	74 ea                	je     80104200 <procdump+0x30>
+80104272:	8b 43 a0             	mov    -0x60(%ebx),%eax
+80104275:	85 c0                	test   %eax,%eax
+80104277:	74 e7                	je     80104260 <procdump+0x30>
       state = "???";
-80104216:	ba cb 76 10 80       	mov    $0x801076cb,%edx
+80104279:	ba 4b 79 10 80       	mov    $0x8010794b,%edx
     if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-8010421b:	83 f8 05             	cmp    $0x5,%eax
-8010421e:	77 11                	ja     80104231 <procdump+0x61>
-80104220:	8b 14 85 2c 77 10 80 	mov    -0x7fef88d4(,%eax,4),%edx
+8010427e:	83 f8 05             	cmp    $0x5,%eax
+80104281:	77 11                	ja     80104294 <procdump+0x64>
+80104283:	8b 14 85 ac 79 10 80 	mov    -0x7fef8654(,%eax,4),%edx
       state = "???";
-80104227:	b8 cb 76 10 80       	mov    $0x801076cb,%eax
-8010422c:	85 d2                	test   %edx,%edx
-8010422e:	0f 44 d0             	cmove  %eax,%edx
+8010428a:	b8 4b 79 10 80       	mov    $0x8010794b,%eax
+8010428f:	85 d2                	test   %edx,%edx
+80104291:	0f 44 d0             	cmove  %eax,%edx
     cprintf("%d %s %s", p->pid, state, p->name);
-80104231:	53                   	push   %ebx
-80104232:	52                   	push   %edx
-80104233:	ff 73 a4             	pushl  -0x5c(%ebx)
-80104236:	68 cf 76 10 80       	push   $0x801076cf
-8010423b:	e8 70 c4 ff ff       	call   801006b0 <cprintf>
+80104294:	53                   	push   %ebx
+80104295:	52                   	push   %edx
+80104296:	ff 73 a4             	pushl  -0x5c(%ebx)
+80104299:	68 4f 79 10 80       	push   $0x8010794f
+8010429e:	e8 0d c4 ff ff       	call   801006b0 <cprintf>
     if(p->state == SLEEPING){
-80104240:	83 c4 10             	add    $0x10,%esp
-80104243:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
-80104247:	75 a7                	jne    801041f0 <procdump+0x20>
+801042a3:	83 c4 10             	add    $0x10,%esp
+801042a6:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
+801042aa:	75 a4                	jne    80104250 <procdump+0x20>
       getcallerpcs((uint*)p->context->ebp+2, pc);
-80104249:	83 ec 08             	sub    $0x8,%esp
-8010424c:	8d 45 c0             	lea    -0x40(%ebp),%eax
-8010424f:	8d 7d c0             	lea    -0x40(%ebp),%edi
-80104252:	50                   	push   %eax
-80104253:	8b 43 b0             	mov    -0x50(%ebx),%eax
-80104256:	8b 40 0c             	mov    0xc(%eax),%eax
-80104259:	83 c0 08             	add    $0x8,%eax
-8010425c:	50                   	push   %eax
-8010425d:	e8 9e 01 00 00       	call   80104400 <getcallerpcs>
+801042ac:	83 ec 08             	sub    $0x8,%esp
+801042af:	8d 45 c0             	lea    -0x40(%ebp),%eax
+801042b2:	8d 7d c0             	lea    -0x40(%ebp),%edi
+801042b5:	50                   	push   %eax
+801042b6:	8b 43 b0             	mov    -0x50(%ebx),%eax
+801042b9:	8b 40 0c             	mov    0xc(%eax),%eax
+801042bc:	83 c0 08             	add    $0x8,%eax
+801042bf:	50                   	push   %eax
+801042c0:	e8 3b 03 00 00       	call   80104600 <getcallerpcs>
       for(i=0; i<10 && pc[i] != 0; i++)
-80104262:	83 c4 10             	add    $0x10,%esp
-80104265:	8d 76 00             	lea    0x0(%esi),%esi
-80104268:	8b 17                	mov    (%edi),%edx
-8010426a:	85 d2                	test   %edx,%edx
-8010426c:	74 82                	je     801041f0 <procdump+0x20>
+801042c5:	83 c4 10             	add    $0x10,%esp
+801042c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801042cf:	90                   	nop
+801042d0:	8b 17                	mov    (%edi),%edx
+801042d2:	85 d2                	test   %edx,%edx
+801042d4:	0f 84 76 ff ff ff    	je     80104250 <procdump+0x20>
         cprintf(" %p", pc[i]);
-8010426e:	83 ec 08             	sub    $0x8,%esp
-80104271:	83 c7 04             	add    $0x4,%edi
-80104274:	52                   	push   %edx
-80104275:	68 21 71 10 80       	push   $0x80107121
-8010427a:	e8 31 c4 ff ff       	call   801006b0 <cprintf>
+801042da:	83 ec 08             	sub    $0x8,%esp
+801042dd:	83 c7 04             	add    $0x4,%edi
+801042e0:	52                   	push   %edx
+801042e1:	68 a1 73 10 80       	push   $0x801073a1
+801042e6:	e8 c5 c3 ff ff       	call   801006b0 <cprintf>
       for(i=0; i<10 && pc[i] != 0; i++)
-8010427f:	83 c4 10             	add    $0x10,%esp
-80104282:	39 fe                	cmp    %edi,%esi
-80104284:	75 e2                	jne    80104268 <procdump+0x98>
-80104286:	e9 65 ff ff ff       	jmp    801041f0 <procdump+0x20>
-8010428b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010428f:	90                   	nop
-  }
-}
-80104290:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104293:	5b                   	pop    %ebx
-80104294:	5e                   	pop    %esi
-80104295:	5f                   	pop    %edi
-80104296:	5d                   	pop    %ebp
-80104297:	c3                   	ret    
-80104298:	66 90                	xchg   %ax,%ax
-8010429a:	66 90                	xchg   %ax,%ax
-8010429c:	66 90                	xchg   %ax,%ax
-8010429e:	66 90                	xchg   %ax,%ax
+801042eb:	83 c4 10             	add    $0x10,%esp
+801042ee:	39 fe                	cmp    %edi,%esi
+801042f0:	75 de                	jne    801042d0 <procdump+0xa0>
+801042f2:	e9 59 ff ff ff       	jmp    80104250 <procdump+0x20>
+801042f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801042fe:	66 90                	xchg   %ax,%ax
+  }
+}
+80104300:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104303:	5b                   	pop    %ebx
+80104304:	5e                   	pop    %esi
+80104305:	5f                   	pop    %edi
+80104306:	5d                   	pop    %ebp
+80104307:	c3                   	ret    
+80104308:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010430f:	90                   	nop
+
+80104310 <getNumProc>:
+
+int 
+getNumProc(void){
+80104310:	f3 0f 1e fb          	endbr32 
+80104314:	55                   	push   %ebp
+80104315:	89 e5                	mov    %esp,%ebp
+80104317:	53                   	push   %ebx
+  struct proc *p;
+
+  acquire(&ptable.lock);
+
+  int activeProcesses = 0;
+80104318:	31 db                	xor    %ebx,%ebx
+getNumProc(void){
+8010431a:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock);
+8010431d:	68 20 2d 11 80       	push   $0x80112d20
+80104322:	e8 39 04 00 00       	call   80104760 <acquire>
+80104327:	83 c4 10             	add    $0x10,%esp
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+8010432a:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+8010432f:	90                   	nop
+    if(p->state != UNUSED){
+      activeProcesses++;
+80104330:	83 78 0c 01          	cmpl   $0x1,0xc(%eax)
+80104334:	83 db ff             	sbb    $0xffffffff,%ebx
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104337:	05 84 00 00 00       	add    $0x84,%eax
+8010433c:	3d 54 4e 11 80       	cmp    $0x80114e54,%eax
+80104341:	75 ed                	jne    80104330 <getNumProc+0x20>
+    }
+  }
+  release(&ptable.lock);
+80104343:	83 ec 0c             	sub    $0xc,%esp
+80104346:	68 20 2d 11 80       	push   $0x80112d20
+8010434b:	e8 d0 04 00 00       	call   80104820 <release>
+  return activeProcesses;
+}
+80104350:	89 d8                	mov    %ebx,%eax
+80104352:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104355:	c9                   	leave  
+80104356:	c3                   	ret    
+80104357:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010435e:	66 90                	xchg   %ax,%ax
+
+80104360 <getMaxPid>:
+
+int 
+getMaxPid(void){
+80104360:	f3 0f 1e fb          	endbr32 
+80104364:	55                   	push   %ebp
+80104365:	89 e5                	mov    %esp,%ebp
+80104367:	53                   	push   %ebx
+  struct proc *p;
+
+  acquire(&ptable.lock);
+  int maxPID = -1e9;
+80104368:	bb 00 36 65 c4       	mov    $0xc4653600,%ebx
+getMaxPid(void){
+8010436d:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock);
+80104370:	68 20 2d 11 80       	push   $0x80112d20
+80104375:	e8 e6 03 00 00       	call   80104760 <acquire>
+8010437a:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+8010437d:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80104382:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(maxPID < (p -> pid)){
+80104388:	8b 50 10             	mov    0x10(%eax),%edx
+8010438b:	39 d3                	cmp    %edx,%ebx
+8010438d:	0f 4c da             	cmovl  %edx,%ebx
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104390:	05 84 00 00 00       	add    $0x84,%eax
+80104395:	3d 54 4e 11 80       	cmp    $0x80114e54,%eax
+8010439a:	75 ec                	jne    80104388 <getMaxPid+0x28>
+      maxPID = (p -> pid);
+    }
+  }
+  release(&ptable.lock);
+8010439c:	83 ec 0c             	sub    $0xc,%esp
+8010439f:	68 20 2d 11 80       	push   $0x80112d20
+801043a4:	e8 77 04 00 00       	call   80104820 <release>
+  return maxPID;
+}
+801043a9:	89 d8                	mov    %ebx,%eax
+801043ab:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801043ae:	c9                   	leave  
+801043af:	c3                   	ret    
+
+801043b0 <getProcInfo>:
+
+int 
+getProcInfo(int pid,struct processInfo* procInfo){
+801043b0:	f3 0f 1e fb          	endbr32 
+801043b4:	55                   	push   %ebp
+801043b5:	89 e5                	mov    %esp,%ebp
+801043b7:	57                   	push   %edi
+  struct proc *p;
+
+  acquire(&ptable.lock);
+  int isProcessPresent = -1;
+801043b8:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+getProcInfo(int pid,struct processInfo* procInfo){
+801043bd:	56                   	push   %esi
+801043be:	53                   	push   %ebx
+801043bf:	83 ec 18             	sub    $0x18,%esp
+801043c2:	8b 75 08             	mov    0x8(%ebp),%esi
+801043c5:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  acquire(&ptable.lock);
+801043c8:	68 20 2d 11 80       	push   $0x80112d20
+801043cd:	e8 8e 03 00 00       	call   80104760 <acquire>
+801043d2:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+801043d5:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+801043da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(p -> pid == pid){
+801043e0:	39 70 10             	cmp    %esi,0x10(%eax)
+801043e3:	75 15                	jne    801043fa <getProcInfo+0x4a>
+      isProcessPresent = 0;
+      procInfo -> psize = p -> sz;
+801043e5:	8b 10                	mov    (%eax),%edx
+      isProcessPresent = 0;
+801043e7:	31 ff                	xor    %edi,%edi
+      procInfo -> psize = p -> sz;
+801043e9:	89 53 04             	mov    %edx,0x4(%ebx)
+      procInfo -> numberContextSwitches = p -> number_of_context_switches;
+801043ec:	8b 50 7c             	mov    0x7c(%eax),%edx
+801043ef:	89 53 08             	mov    %edx,0x8(%ebx)
+      procInfo -> ppid = p -> parent -> pid;
+801043f2:	8b 50 14             	mov    0x14(%eax),%edx
+801043f5:	8b 52 10             	mov    0x10(%edx),%edx
+801043f8:	89 13                	mov    %edx,(%ebx)
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+801043fa:	05 84 00 00 00       	add    $0x84,%eax
+801043ff:	3d 54 4e 11 80       	cmp    $0x80114e54,%eax
+80104404:	75 da                	jne    801043e0 <getProcInfo+0x30>
+    }
+  }
+  release(&ptable.lock);
+80104406:	83 ec 0c             	sub    $0xc,%esp
+80104409:	68 20 2d 11 80       	push   $0x80112d20
+8010440e:	e8 0d 04 00 00       	call   80104820 <release>
+  return isProcessPresent;
+}
+80104413:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104416:	89 f8                	mov    %edi,%eax
+80104418:	5b                   	pop    %ebx
+80104419:	5e                   	pop    %esi
+8010441a:	5f                   	pop    %edi
+8010441b:	5d                   	pop    %ebp
+8010441c:	c3                   	ret    
+8010441d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80104420 <set_burst_time>:
+
+int 
+set_burst_time(int n){
+80104420:	f3 0f 1e fb          	endbr32 
+80104424:	55                   	push   %ebp
+80104425:	89 e5                	mov    %esp,%ebp
+80104427:	83 ec 14             	sub    $0x14,%esp
+
+  acquire(&ptable.lock);
+8010442a:	68 20 2d 11 80       	push   $0x80112d20
+8010442f:	e8 2c 03 00 00       	call   80104760 <acquire>
+  int BurstTimeSet = -1;
+  mycpu()->proc->burst_time = n;
+80104434:	e8 b7 f4 ff ff       	call   801038f0 <mycpu>
+80104439:	8b 55 08             	mov    0x8(%ebp),%edx
+8010443c:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+80104442:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
+  BurstTimeSet = 0;
+  release(&ptable.lock);
+80104448:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+8010444f:	e8 cc 03 00 00       	call   80104820 <release>
+  yield();
+80104454:	e8 c7 fa ff ff       	call   80103f20 <yield>
+  return BurstTimeSet;
+}
+80104459:	31 c0                	xor    %eax,%eax
+8010445b:	c9                   	leave  
+8010445c:	c3                   	ret    
+8010445d:	8d 76 00             	lea    0x0(%esi),%esi
 
-801042a0 <initsleeplock>:
+80104460 <get_burst_time>:
+
+int 
+get_burst_time(){
+80104460:	f3 0f 1e fb          	endbr32 
+80104464:	55                   	push   %ebp
+80104465:	89 e5                	mov    %esp,%ebp
+80104467:	53                   	push   %ebx
+80104468:	83 ec 10             	sub    $0x10,%esp
+  
+  acquire(&ptable.lock);
+8010446b:	68 20 2d 11 80       	push   $0x80112d20
+80104470:	e8 eb 02 00 00       	call   80104760 <acquire>
+  int burstTime = -1;
+  burstTime = mycpu()->proc->burst_time;
+80104475:	e8 76 f4 ff ff       	call   801038f0 <mycpu>
+8010447a:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+80104480:	8b 98 80 00 00 00    	mov    0x80(%eax),%ebx
+  release(&ptable.lock);
+80104486:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+8010448d:	e8 8e 03 00 00       	call   80104820 <release>
+  return burstTime;
+80104492:	89 d8                	mov    %ebx,%eax
+80104494:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104497:	c9                   	leave  
+80104498:	c3                   	ret    
+80104499:	66 90                	xchg   %ax,%ax
+8010449b:	66 90                	xchg   %ax,%ax
+8010449d:	66 90                	xchg   %ax,%ax
+8010449f:	90                   	nop
+
+801044a0 <initsleeplock>:
 #include "spinlock.h"
 #include "sleeplock.h"
 
 void
 initsleeplock(struct sleeplock *lk, char *name)
 {
-801042a0:	f3 0f 1e fb          	endbr32 
-801042a4:	55                   	push   %ebp
-801042a5:	89 e5                	mov    %esp,%ebp
-801042a7:	53                   	push   %ebx
-801042a8:	83 ec 0c             	sub    $0xc,%esp
-801042ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801044a0:	f3 0f 1e fb          	endbr32 
+801044a4:	55                   	push   %ebp
+801044a5:	89 e5                	mov    %esp,%ebp
+801044a7:	53                   	push   %ebx
+801044a8:	83 ec 0c             	sub    $0xc,%esp
+801044ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&lk->lk, "sleep lock");
-801042ae:	68 44 77 10 80       	push   $0x80107744
-801042b3:	8d 43 04             	lea    0x4(%ebx),%eax
-801042b6:	50                   	push   %eax
-801042b7:	e8 24 01 00 00       	call   801043e0 <initlock>
+801044ae:	68 c4 79 10 80       	push   $0x801079c4
+801044b3:	8d 43 04             	lea    0x4(%ebx),%eax
+801044b6:	50                   	push   %eax
+801044b7:	e8 24 01 00 00       	call   801045e0 <initlock>
   lk->name = name;
-801042bc:	8b 45 0c             	mov    0xc(%ebp),%eax
+801044bc:	8b 45 0c             	mov    0xc(%ebp),%eax
   lk->locked = 0;
-801042bf:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+801044bf:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   lk->pid = 0;
 }
-801042c5:	83 c4 10             	add    $0x10,%esp
+801044c5:	83 c4 10             	add    $0x10,%esp
   lk->pid = 0;
-801042c8:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+801044c8:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
   lk->name = name;
-801042cf:	89 43 38             	mov    %eax,0x38(%ebx)
+801044cf:	89 43 38             	mov    %eax,0x38(%ebx)
 }
-801042d2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801042d5:	c9                   	leave  
-801042d6:	c3                   	ret    
-801042d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801042de:	66 90                	xchg   %ax,%ax
+801044d2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801044d5:	c9                   	leave  
+801044d6:	c3                   	ret    
+801044d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801044de:	66 90                	xchg   %ax,%ax
 
-801042e0 <acquiresleep>:
+801044e0 <acquiresleep>:
 
 void
 acquiresleep(struct sleeplock *lk)
 {
-801042e0:	f3 0f 1e fb          	endbr32 
-801042e4:	55                   	push   %ebp
-801042e5:	89 e5                	mov    %esp,%ebp
-801042e7:	56                   	push   %esi
-801042e8:	53                   	push   %ebx
-801042e9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801044e0:	f3 0f 1e fb          	endbr32 
+801044e4:	55                   	push   %ebp
+801044e5:	89 e5                	mov    %esp,%ebp
+801044e7:	56                   	push   %esi
+801044e8:	53                   	push   %ebx
+801044e9:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&lk->lk);
-801042ec:	8d 73 04             	lea    0x4(%ebx),%esi
-801042ef:	83 ec 0c             	sub    $0xc,%esp
-801042f2:	56                   	push   %esi
-801042f3:	e8 68 02 00 00       	call   80104560 <acquire>
+801044ec:	8d 73 04             	lea    0x4(%ebx),%esi
+801044ef:	83 ec 0c             	sub    $0xc,%esp
+801044f2:	56                   	push   %esi
+801044f3:	e8 68 02 00 00       	call   80104760 <acquire>
   while (lk->locked) {
-801042f8:	8b 13                	mov    (%ebx),%edx
-801042fa:	83 c4 10             	add    $0x10,%esp
-801042fd:	85 d2                	test   %edx,%edx
-801042ff:	74 1a                	je     8010431b <acquiresleep+0x3b>
-80104301:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801044f8:	8b 13                	mov    (%ebx),%edx
+801044fa:	83 c4 10             	add    $0x10,%esp
+801044fd:	85 d2                	test   %edx,%edx
+801044ff:	74 1a                	je     8010451b <acquiresleep+0x3b>
+80104501:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     sleep(lk, &lk->lk);
-80104308:	83 ec 08             	sub    $0x8,%esp
-8010430b:	56                   	push   %esi
-8010430c:	53                   	push   %ebx
-8010430d:	e8 0e fc ff ff       	call   80103f20 <sleep>
+80104508:	83 ec 08             	sub    $0x8,%esp
+8010450b:	56                   	push   %esi
+8010450c:	53                   	push   %ebx
+8010450d:	e8 5e fa ff ff       	call   80103f70 <sleep>
   while (lk->locked) {
-80104312:	8b 03                	mov    (%ebx),%eax
-80104314:	83 c4 10             	add    $0x10,%esp
-80104317:	85 c0                	test   %eax,%eax
-80104319:	75 ed                	jne    80104308 <acquiresleep+0x28>
+80104512:	8b 03                	mov    (%ebx),%eax
+80104514:	83 c4 10             	add    $0x10,%esp
+80104517:	85 c0                	test   %eax,%eax
+80104519:	75 ed                	jne    80104508 <acquiresleep+0x28>
   }
   lk->locked = 1;
-8010431b:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+8010451b:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
   lk->pid = myproc()->pid;
-80104321:	e8 3a f6 ff ff       	call   80103960 <myproc>
-80104326:	8b 40 10             	mov    0x10(%eax),%eax
-80104329:	89 43 3c             	mov    %eax,0x3c(%ebx)
+80104521:	e8 5a f4 ff ff       	call   80103980 <myproc>
+80104526:	8b 40 10             	mov    0x10(%eax),%eax
+80104529:	89 43 3c             	mov    %eax,0x3c(%ebx)
   release(&lk->lk);
-8010432c:	89 75 08             	mov    %esi,0x8(%ebp)
+8010452c:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-8010432f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104332:	5b                   	pop    %ebx
-80104333:	5e                   	pop    %esi
-80104334:	5d                   	pop    %ebp
+8010452f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104532:	5b                   	pop    %ebx
+80104533:	5e                   	pop    %esi
+80104534:	5d                   	pop    %ebp
   release(&lk->lk);
-80104335:	e9 e6 02 00 00       	jmp    80104620 <release>
-8010433a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104535:	e9 e6 02 00 00       	jmp    80104820 <release>
+8010453a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104340 <releasesleep>:
+80104540 <releasesleep>:
 
 void
 releasesleep(struct sleeplock *lk)
 {
-80104340:	f3 0f 1e fb          	endbr32 
-80104344:	55                   	push   %ebp
-80104345:	89 e5                	mov    %esp,%ebp
-80104347:	56                   	push   %esi
-80104348:	53                   	push   %ebx
-80104349:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104540:	f3 0f 1e fb          	endbr32 
+80104544:	55                   	push   %ebp
+80104545:	89 e5                	mov    %esp,%ebp
+80104547:	56                   	push   %esi
+80104548:	53                   	push   %ebx
+80104549:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&lk->lk);
-8010434c:	8d 73 04             	lea    0x4(%ebx),%esi
-8010434f:	83 ec 0c             	sub    $0xc,%esp
-80104352:	56                   	push   %esi
-80104353:	e8 08 02 00 00       	call   80104560 <acquire>
+8010454c:	8d 73 04             	lea    0x4(%ebx),%esi
+8010454f:	83 ec 0c             	sub    $0xc,%esp
+80104552:	56                   	push   %esi
+80104553:	e8 08 02 00 00       	call   80104760 <acquire>
   lk->locked = 0;
-80104358:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80104558:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   lk->pid = 0;
-8010435e:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+8010455e:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
   wakeup(lk);
-80104365:	89 1c 24             	mov    %ebx,(%esp)
-80104368:	e8 73 fd ff ff       	call   801040e0 <wakeup>
+80104565:	89 1c 24             	mov    %ebx,(%esp)
+80104568:	e8 c3 fb ff ff       	call   80104130 <wakeup>
   release(&lk->lk);
-8010436d:	89 75 08             	mov    %esi,0x8(%ebp)
-80104370:	83 c4 10             	add    $0x10,%esp
+8010456d:	89 75 08             	mov    %esi,0x8(%ebp)
+80104570:	83 c4 10             	add    $0x10,%esp
 }
-80104373:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104376:	5b                   	pop    %ebx
-80104377:	5e                   	pop    %esi
-80104378:	5d                   	pop    %ebp
+80104573:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104576:	5b                   	pop    %ebx
+80104577:	5e                   	pop    %esi
+80104578:	5d                   	pop    %ebp
   release(&lk->lk);
-80104379:	e9 a2 02 00 00       	jmp    80104620 <release>
-8010437e:	66 90                	xchg   %ax,%ax
+80104579:	e9 a2 02 00 00       	jmp    80104820 <release>
+8010457e:	66 90                	xchg   %ax,%ax
 
-80104380 <holdingsleep>:
+80104580 <holdingsleep>:
 
 int
 holdingsleep(struct sleeplock *lk)
 {
-80104380:	f3 0f 1e fb          	endbr32 
-80104384:	55                   	push   %ebp
-80104385:	89 e5                	mov    %esp,%ebp
-80104387:	57                   	push   %edi
-80104388:	31 ff                	xor    %edi,%edi
-8010438a:	56                   	push   %esi
-8010438b:	53                   	push   %ebx
-8010438c:	83 ec 18             	sub    $0x18,%esp
-8010438f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104580:	f3 0f 1e fb          	endbr32 
+80104584:	55                   	push   %ebp
+80104585:	89 e5                	mov    %esp,%ebp
+80104587:	57                   	push   %edi
+80104588:	31 ff                	xor    %edi,%edi
+8010458a:	56                   	push   %esi
+8010458b:	53                   	push   %ebx
+8010458c:	83 ec 18             	sub    $0x18,%esp
+8010458f:	8b 5d 08             	mov    0x8(%ebp),%ebx
   int r;
   
   acquire(&lk->lk);
-80104392:	8d 73 04             	lea    0x4(%ebx),%esi
-80104395:	56                   	push   %esi
-80104396:	e8 c5 01 00 00       	call   80104560 <acquire>
+80104592:	8d 73 04             	lea    0x4(%ebx),%esi
+80104595:	56                   	push   %esi
+80104596:	e8 c5 01 00 00       	call   80104760 <acquire>
   r = lk->locked && (lk->pid == myproc()->pid);
-8010439b:	8b 03                	mov    (%ebx),%eax
-8010439d:	83 c4 10             	add    $0x10,%esp
-801043a0:	85 c0                	test   %eax,%eax
-801043a2:	75 1c                	jne    801043c0 <holdingsleep+0x40>
+8010459b:	8b 03                	mov    (%ebx),%eax
+8010459d:	83 c4 10             	add    $0x10,%esp
+801045a0:	85 c0                	test   %eax,%eax
+801045a2:	75 1c                	jne    801045c0 <holdingsleep+0x40>
   release(&lk->lk);
-801043a4:	83 ec 0c             	sub    $0xc,%esp
-801043a7:	56                   	push   %esi
-801043a8:	e8 73 02 00 00       	call   80104620 <release>
+801045a4:	83 ec 0c             	sub    $0xc,%esp
+801045a7:	56                   	push   %esi
+801045a8:	e8 73 02 00 00       	call   80104820 <release>
   return r;
 }
-801043ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801043b0:	89 f8                	mov    %edi,%eax
-801043b2:	5b                   	pop    %ebx
-801043b3:	5e                   	pop    %esi
-801043b4:	5f                   	pop    %edi
-801043b5:	5d                   	pop    %ebp
-801043b6:	c3                   	ret    
-801043b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801043be:	66 90                	xchg   %ax,%ax
+801045ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801045b0:	89 f8                	mov    %edi,%eax
+801045b2:	5b                   	pop    %ebx
+801045b3:	5e                   	pop    %esi
+801045b4:	5f                   	pop    %edi
+801045b5:	5d                   	pop    %ebp
+801045b6:	c3                   	ret    
+801045b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801045be:	66 90                	xchg   %ax,%ax
   r = lk->locked && (lk->pid == myproc()->pid);
-801043c0:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
-801043c3:	e8 98 f5 ff ff       	call   80103960 <myproc>
-801043c8:	39 58 10             	cmp    %ebx,0x10(%eax)
-801043cb:	0f 94 c0             	sete   %al
-801043ce:	0f b6 c0             	movzbl %al,%eax
-801043d1:	89 c7                	mov    %eax,%edi
-801043d3:	eb cf                	jmp    801043a4 <holdingsleep+0x24>
-801043d5:	66 90                	xchg   %ax,%ax
-801043d7:	66 90                	xchg   %ax,%ax
-801043d9:	66 90                	xchg   %ax,%ax
-801043db:	66 90                	xchg   %ax,%ax
-801043dd:	66 90                	xchg   %ax,%ax
-801043df:	90                   	nop
+801045c0:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
+801045c3:	e8 b8 f3 ff ff       	call   80103980 <myproc>
+801045c8:	39 58 10             	cmp    %ebx,0x10(%eax)
+801045cb:	0f 94 c0             	sete   %al
+801045ce:	0f b6 c0             	movzbl %al,%eax
+801045d1:	89 c7                	mov    %eax,%edi
+801045d3:	eb cf                	jmp    801045a4 <holdingsleep+0x24>
+801045d5:	66 90                	xchg   %ax,%ax
+801045d7:	66 90                	xchg   %ax,%ax
+801045d9:	66 90                	xchg   %ax,%ax
+801045db:	66 90                	xchg   %ax,%ax
+801045dd:	66 90                	xchg   %ax,%ax
+801045df:	90                   	nop
 
-801043e0 <initlock>:
+801045e0 <initlock>:
 #include "proc.h"
 #include "spinlock.h"
 
 void
 initlock(struct spinlock *lk, char *name)
 {
-801043e0:	f3 0f 1e fb          	endbr32 
-801043e4:	55                   	push   %ebp
-801043e5:	89 e5                	mov    %esp,%ebp
-801043e7:	8b 45 08             	mov    0x8(%ebp),%eax
+801045e0:	f3 0f 1e fb          	endbr32 
+801045e4:	55                   	push   %ebp
+801045e5:	89 e5                	mov    %esp,%ebp
+801045e7:	8b 45 08             	mov    0x8(%ebp),%eax
   lk->name = name;
-801043ea:	8b 55 0c             	mov    0xc(%ebp),%edx
+801045ea:	8b 55 0c             	mov    0xc(%ebp),%edx
   lk->locked = 0;
-801043ed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+801045ed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   lk->name = name;
-801043f3:	89 50 04             	mov    %edx,0x4(%eax)
+801045f3:	89 50 04             	mov    %edx,0x4(%eax)
   lk->cpu = 0;
-801043f6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+801045f6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
 }
-801043fd:	5d                   	pop    %ebp
-801043fe:	c3                   	ret    
-801043ff:	90                   	nop
+801045fd:	5d                   	pop    %ebp
+801045fe:	c3                   	ret    
+801045ff:	90                   	nop
 
-80104400 <getcallerpcs>:
+80104600 <getcallerpcs>:
 }
 
 // Record the current call stack in pcs[] by following the %ebp chain.
 void
 getcallerpcs(void *v, uint pcs[])
 {
-80104400:	f3 0f 1e fb          	endbr32 
-80104404:	55                   	push   %ebp
+80104600:	f3 0f 1e fb          	endbr32 
+80104604:	55                   	push   %ebp
   uint *ebp;
   int i;
 
   ebp = (uint*)v - 2;
   for(i = 0; i < 10; i++){
-80104405:	31 d2                	xor    %edx,%edx
+80104605:	31 d2                	xor    %edx,%edx
 {
-80104407:	89 e5                	mov    %esp,%ebp
-80104409:	53                   	push   %ebx
+80104607:	89 e5                	mov    %esp,%ebp
+80104609:	53                   	push   %ebx
   ebp = (uint*)v - 2;
-8010440a:	8b 45 08             	mov    0x8(%ebp),%eax
+8010460a:	8b 45 08             	mov    0x8(%ebp),%eax
 {
-8010440d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+8010460d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   ebp = (uint*)v - 2;
-80104410:	83 e8 08             	sub    $0x8,%eax
+80104610:	83 e8 08             	sub    $0x8,%eax
   for(i = 0; i < 10; i++){
-80104413:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104417:	90                   	nop
+80104613:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104617:	90                   	nop
     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-80104418:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
-8010441e:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
-80104424:	77 1a                	ja     80104440 <getcallerpcs+0x40>
+80104618:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
+8010461e:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+80104624:	77 1a                	ja     80104640 <getcallerpcs+0x40>
       break;
     pcs[i] = ebp[1];     // saved %eip
-80104426:	8b 58 04             	mov    0x4(%eax),%ebx
-80104429:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
+80104626:	8b 58 04             	mov    0x4(%eax),%ebx
+80104629:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
   for(i = 0; i < 10; i++){
-8010442c:	83 c2 01             	add    $0x1,%edx
+8010462c:	83 c2 01             	add    $0x1,%edx
     ebp = (uint*)ebp[0]; // saved %ebp
-8010442f:	8b 00                	mov    (%eax),%eax
+8010462f:	8b 00                	mov    (%eax),%eax
   for(i = 0; i < 10; i++){
-80104431:	83 fa 0a             	cmp    $0xa,%edx
-80104434:	75 e2                	jne    80104418 <getcallerpcs+0x18>
+80104631:	83 fa 0a             	cmp    $0xa,%edx
+80104634:	75 e2                	jne    80104618 <getcallerpcs+0x18>
   }
   for(; i < 10; i++)
     pcs[i] = 0;
 }
-80104436:	5b                   	pop    %ebx
-80104437:	5d                   	pop    %ebp
-80104438:	c3                   	ret    
-80104439:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104636:	5b                   	pop    %ebx
+80104637:	5d                   	pop    %ebp
+80104638:	c3                   	ret    
+80104639:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(; i < 10; i++)
-80104440:	8d 04 91             	lea    (%ecx,%edx,4),%eax
-80104443:	8d 51 28             	lea    0x28(%ecx),%edx
-80104446:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010444d:	8d 76 00             	lea    0x0(%esi),%esi
+80104640:	8d 04 91             	lea    (%ecx,%edx,4),%eax
+80104643:	8d 51 28             	lea    0x28(%ecx),%edx
+80104646:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010464d:	8d 76 00             	lea    0x0(%esi),%esi
     pcs[i] = 0;
-80104450:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80104650:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   for(; i < 10; i++)
-80104456:	83 c0 04             	add    $0x4,%eax
-80104459:	39 d0                	cmp    %edx,%eax
-8010445b:	75 f3                	jne    80104450 <getcallerpcs+0x50>
-}
-8010445d:	5b                   	pop    %ebx
-8010445e:	5d                   	pop    %ebp
-8010445f:	c3                   	ret    
+80104656:	83 c0 04             	add    $0x4,%eax
+80104659:	39 d0                	cmp    %edx,%eax
+8010465b:	75 f3                	jne    80104650 <getcallerpcs+0x50>
+}
+8010465d:	5b                   	pop    %ebx
+8010465e:	5d                   	pop    %ebp
+8010465f:	c3                   	ret    
 
-80104460 <pushcli>:
+80104660 <pushcli>:
 // it takes two popcli to undo two pushcli.  Also, if interrupts
 // are off, then pushcli, popcli leaves them off.
 
 void
 pushcli(void)
 {
-80104460:	f3 0f 1e fb          	endbr32 
-80104464:	55                   	push   %ebp
-80104465:	89 e5                	mov    %esp,%ebp
-80104467:	53                   	push   %ebx
-80104468:	83 ec 04             	sub    $0x4,%esp
-8010446b:	9c                   	pushf  
-8010446c:	5b                   	pop    %ebx
+80104660:	f3 0f 1e fb          	endbr32 
+80104664:	55                   	push   %ebp
+80104665:	89 e5                	mov    %esp,%ebp
+80104667:	53                   	push   %ebx
+80104668:	83 ec 04             	sub    $0x4,%esp
+8010466b:	9c                   	pushf  
+8010466c:	5b                   	pop    %ebx
   asm volatile("cli");
-8010446d:	fa                   	cli    
+8010466d:	fa                   	cli    
   int eflags;
 
   eflags = readeflags();
   cli();
   if(mycpu()->ncli == 0)
-8010446e:	e8 5d f4 ff ff       	call   801038d0 <mycpu>
-80104473:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
-80104479:	85 c0                	test   %eax,%eax
-8010447b:	74 13                	je     80104490 <pushcli+0x30>
+8010466e:	e8 7d f2 ff ff       	call   801038f0 <mycpu>
+80104673:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+80104679:	85 c0                	test   %eax,%eax
+8010467b:	74 13                	je     80104690 <pushcli+0x30>
     mycpu()->intena = eflags & FL_IF;
   mycpu()->ncli += 1;
-8010447d:	e8 4e f4 ff ff       	call   801038d0 <mycpu>
-80104482:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
+8010467d:	e8 6e f2 ff ff       	call   801038f0 <mycpu>
+80104682:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
 }
-80104489:	83 c4 04             	add    $0x4,%esp
-8010448c:	5b                   	pop    %ebx
-8010448d:	5d                   	pop    %ebp
-8010448e:	c3                   	ret    
-8010448f:	90                   	nop
+80104689:	83 c4 04             	add    $0x4,%esp
+8010468c:	5b                   	pop    %ebx
+8010468d:	5d                   	pop    %ebp
+8010468e:	c3                   	ret    
+8010468f:	90                   	nop
     mycpu()->intena = eflags & FL_IF;
-80104490:	e8 3b f4 ff ff       	call   801038d0 <mycpu>
-80104495:	81 e3 00 02 00 00    	and    $0x200,%ebx
-8010449b:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
-801044a1:	eb da                	jmp    8010447d <pushcli+0x1d>
-801044a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801044aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104690:	e8 5b f2 ff ff       	call   801038f0 <mycpu>
+80104695:	81 e3 00 02 00 00    	and    $0x200,%ebx
+8010469b:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
+801046a1:	eb da                	jmp    8010467d <pushcli+0x1d>
+801046a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801046aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801044b0 <popcli>:
+801046b0 <popcli>:
 
 void
 popcli(void)
 {
-801044b0:	f3 0f 1e fb          	endbr32 
-801044b4:	55                   	push   %ebp
-801044b5:	89 e5                	mov    %esp,%ebp
-801044b7:	83 ec 08             	sub    $0x8,%esp
+801046b0:	f3 0f 1e fb          	endbr32 
+801046b4:	55                   	push   %ebp
+801046b5:	89 e5                	mov    %esp,%ebp
+801046b7:	83 ec 08             	sub    $0x8,%esp
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-801044ba:	9c                   	pushf  
-801044bb:	58                   	pop    %eax
+801046ba:	9c                   	pushf  
+801046bb:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-801044bc:	f6 c4 02             	test   $0x2,%ah
-801044bf:	75 31                	jne    801044f2 <popcli+0x42>
+801046bc:	f6 c4 02             	test   $0x2,%ah
+801046bf:	75 31                	jne    801046f2 <popcli+0x42>
     panic("popcli - interruptible");
   if(--mycpu()->ncli < 0)
-801044c1:	e8 0a f4 ff ff       	call   801038d0 <mycpu>
-801044c6:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
-801044cd:	78 30                	js     801044ff <popcli+0x4f>
+801046c1:	e8 2a f2 ff ff       	call   801038f0 <mycpu>
+801046c6:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
+801046cd:	78 30                	js     801046ff <popcli+0x4f>
     panic("popcli");
   if(mycpu()->ncli == 0 && mycpu()->intena)
-801044cf:	e8 fc f3 ff ff       	call   801038d0 <mycpu>
-801044d4:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
-801044da:	85 d2                	test   %edx,%edx
-801044dc:	74 02                	je     801044e0 <popcli+0x30>
+801046cf:	e8 1c f2 ff ff       	call   801038f0 <mycpu>
+801046d4:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
+801046da:	85 d2                	test   %edx,%edx
+801046dc:	74 02                	je     801046e0 <popcli+0x30>
     sti();
 }
-801044de:	c9                   	leave  
-801044df:	c3                   	ret    
+801046de:	c9                   	leave  
+801046df:	c3                   	ret    
   if(mycpu()->ncli == 0 && mycpu()->intena)
-801044e0:	e8 eb f3 ff ff       	call   801038d0 <mycpu>
-801044e5:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
-801044eb:	85 c0                	test   %eax,%eax
-801044ed:	74 ef                	je     801044de <popcli+0x2e>
+801046e0:	e8 0b f2 ff ff       	call   801038f0 <mycpu>
+801046e5:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
+801046eb:	85 c0                	test   %eax,%eax
+801046ed:	74 ef                	je     801046de <popcli+0x2e>
   asm volatile("sti");
-801044ef:	fb                   	sti    
+801046ef:	fb                   	sti    
 }
-801044f0:	c9                   	leave  
-801044f1:	c3                   	ret    
+801046f0:	c9                   	leave  
+801046f1:	c3                   	ret    
     panic("popcli - interruptible");
-801044f2:	83 ec 0c             	sub    $0xc,%esp
-801044f5:	68 4f 77 10 80       	push   $0x8010774f
-801044fa:	e8 91 be ff ff       	call   80100390 <panic>
+801046f2:	83 ec 0c             	sub    $0xc,%esp
+801046f5:	68 cf 79 10 80       	push   $0x801079cf
+801046fa:	e8 91 bc ff ff       	call   80100390 <panic>
     panic("popcli");
-801044ff:	83 ec 0c             	sub    $0xc,%esp
-80104502:	68 66 77 10 80       	push   $0x80107766
-80104507:	e8 84 be ff ff       	call   80100390 <panic>
-8010450c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80104510 <holding>:
-{
-80104510:	f3 0f 1e fb          	endbr32 
-80104514:	55                   	push   %ebp
-80104515:	89 e5                	mov    %esp,%ebp
-80104517:	56                   	push   %esi
-80104518:	53                   	push   %ebx
-80104519:	8b 75 08             	mov    0x8(%ebp),%esi
-8010451c:	31 db                	xor    %ebx,%ebx
+801046ff:	83 ec 0c             	sub    $0xc,%esp
+80104702:	68 e6 79 10 80       	push   $0x801079e6
+80104707:	e8 84 bc ff ff       	call   80100390 <panic>
+8010470c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104710 <holding>:
+{
+80104710:	f3 0f 1e fb          	endbr32 
+80104714:	55                   	push   %ebp
+80104715:	89 e5                	mov    %esp,%ebp
+80104717:	56                   	push   %esi
+80104718:	53                   	push   %ebx
+80104719:	8b 75 08             	mov    0x8(%ebp),%esi
+8010471c:	31 db                	xor    %ebx,%ebx
   pushcli();
-8010451e:	e8 3d ff ff ff       	call   80104460 <pushcli>
+8010471e:	e8 3d ff ff ff       	call   80104660 <pushcli>
   r = lock->locked && lock->cpu == mycpu();
-80104523:	8b 06                	mov    (%esi),%eax
-80104525:	85 c0                	test   %eax,%eax
-80104527:	75 0f                	jne    80104538 <holding+0x28>
+80104723:	8b 06                	mov    (%esi),%eax
+80104725:	85 c0                	test   %eax,%eax
+80104727:	75 0f                	jne    80104738 <holding+0x28>
   popcli();
-80104529:	e8 82 ff ff ff       	call   801044b0 <popcli>
+80104729:	e8 82 ff ff ff       	call   801046b0 <popcli>
 }
-8010452e:	89 d8                	mov    %ebx,%eax
-80104530:	5b                   	pop    %ebx
-80104531:	5e                   	pop    %esi
-80104532:	5d                   	pop    %ebp
-80104533:	c3                   	ret    
-80104534:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010472e:	89 d8                	mov    %ebx,%eax
+80104730:	5b                   	pop    %ebx
+80104731:	5e                   	pop    %esi
+80104732:	5d                   	pop    %ebp
+80104733:	c3                   	ret    
+80104734:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   r = lock->locked && lock->cpu == mycpu();
-80104538:	8b 5e 08             	mov    0x8(%esi),%ebx
-8010453b:	e8 90 f3 ff ff       	call   801038d0 <mycpu>
-80104540:	39 c3                	cmp    %eax,%ebx
-80104542:	0f 94 c3             	sete   %bl
+80104738:	8b 5e 08             	mov    0x8(%esi),%ebx
+8010473b:	e8 b0 f1 ff ff       	call   801038f0 <mycpu>
+80104740:	39 c3                	cmp    %eax,%ebx
+80104742:	0f 94 c3             	sete   %bl
   popcli();
-80104545:	e8 66 ff ff ff       	call   801044b0 <popcli>
+80104745:	e8 66 ff ff ff       	call   801046b0 <popcli>
   r = lock->locked && lock->cpu == mycpu();
-8010454a:	0f b6 db             	movzbl %bl,%ebx
+8010474a:	0f b6 db             	movzbl %bl,%ebx
 }
-8010454d:	89 d8                	mov    %ebx,%eax
-8010454f:	5b                   	pop    %ebx
-80104550:	5e                   	pop    %esi
-80104551:	5d                   	pop    %ebp
-80104552:	c3                   	ret    
-80104553:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010455a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80104560 <acquire>:
-{
-80104560:	f3 0f 1e fb          	endbr32 
-80104564:	55                   	push   %ebp
-80104565:	89 e5                	mov    %esp,%ebp
-80104567:	56                   	push   %esi
-80104568:	53                   	push   %ebx
+8010474d:	89 d8                	mov    %ebx,%eax
+8010474f:	5b                   	pop    %ebx
+80104750:	5e                   	pop    %esi
+80104751:	5d                   	pop    %ebp
+80104752:	c3                   	ret    
+80104753:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010475a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104760 <acquire>:
+{
+80104760:	f3 0f 1e fb          	endbr32 
+80104764:	55                   	push   %ebp
+80104765:	89 e5                	mov    %esp,%ebp
+80104767:	56                   	push   %esi
+80104768:	53                   	push   %ebx
   pushcli(); // disable interrupts to avoid deadlock.
-80104569:	e8 f2 fe ff ff       	call   80104460 <pushcli>
+80104769:	e8 f2 fe ff ff       	call   80104660 <pushcli>
   if(holding(lk))
-8010456e:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80104571:	83 ec 0c             	sub    $0xc,%esp
-80104574:	53                   	push   %ebx
-80104575:	e8 96 ff ff ff       	call   80104510 <holding>
-8010457a:	83 c4 10             	add    $0x10,%esp
-8010457d:	85 c0                	test   %eax,%eax
-8010457f:	0f 85 7f 00 00 00    	jne    80104604 <acquire+0xa4>
-80104585:	89 c6                	mov    %eax,%esi
+8010476e:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104771:	83 ec 0c             	sub    $0xc,%esp
+80104774:	53                   	push   %ebx
+80104775:	e8 96 ff ff ff       	call   80104710 <holding>
+8010477a:	83 c4 10             	add    $0x10,%esp
+8010477d:	85 c0                	test   %eax,%eax
+8010477f:	0f 85 7f 00 00 00    	jne    80104804 <acquire+0xa4>
+80104785:	89 c6                	mov    %eax,%esi
   asm volatile("lock; xchgl %0, %1" :
-80104587:	ba 01 00 00 00       	mov    $0x1,%edx
-8010458c:	eb 05                	jmp    80104593 <acquire+0x33>
-8010458e:	66 90                	xchg   %ax,%ax
-80104590:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80104593:	89 d0                	mov    %edx,%eax
-80104595:	f0 87 03             	lock xchg %eax,(%ebx)
+80104787:	ba 01 00 00 00       	mov    $0x1,%edx
+8010478c:	eb 05                	jmp    80104793 <acquire+0x33>
+8010478e:	66 90                	xchg   %ax,%ax
+80104790:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104793:	89 d0                	mov    %edx,%eax
+80104795:	f0 87 03             	lock xchg %eax,(%ebx)
   while(xchg(&lk->locked, 1) != 0)
-80104598:	85 c0                	test   %eax,%eax
-8010459a:	75 f4                	jne    80104590 <acquire+0x30>
+80104798:	85 c0                	test   %eax,%eax
+8010479a:	75 f4                	jne    80104790 <acquire+0x30>
   __sync_synchronize();
-8010459c:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+8010479c:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
   lk->cpu = mycpu();
-801045a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
-801045a4:	e8 27 f3 ff ff       	call   801038d0 <mycpu>
-801045a9:	89 43 08             	mov    %eax,0x8(%ebx)
+801047a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801047a4:	e8 47 f1 ff ff       	call   801038f0 <mycpu>
+801047a9:	89 43 08             	mov    %eax,0x8(%ebx)
   ebp = (uint*)v - 2;
-801045ac:	89 e8                	mov    %ebp,%eax
-801045ae:	66 90                	xchg   %ax,%ax
+801047ac:	89 e8                	mov    %ebp,%eax
+801047ae:	66 90                	xchg   %ax,%ax
     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-801045b0:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
-801045b6:	81 fa fe ff ff 7f    	cmp    $0x7ffffffe,%edx
-801045bc:	77 22                	ja     801045e0 <acquire+0x80>
+801047b0:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
+801047b6:	81 fa fe ff ff 7f    	cmp    $0x7ffffffe,%edx
+801047bc:	77 22                	ja     801047e0 <acquire+0x80>
     pcs[i] = ebp[1];     // saved %eip
-801045be:	8b 50 04             	mov    0x4(%eax),%edx
-801045c1:	89 54 b3 0c          	mov    %edx,0xc(%ebx,%esi,4)
+801047be:	8b 50 04             	mov    0x4(%eax),%edx
+801047c1:	89 54 b3 0c          	mov    %edx,0xc(%ebx,%esi,4)
   for(i = 0; i < 10; i++){
-801045c5:	83 c6 01             	add    $0x1,%esi
+801047c5:	83 c6 01             	add    $0x1,%esi
     ebp = (uint*)ebp[0]; // saved %ebp
-801045c8:	8b 00                	mov    (%eax),%eax
+801047c8:	8b 00                	mov    (%eax),%eax
   for(i = 0; i < 10; i++){
-801045ca:	83 fe 0a             	cmp    $0xa,%esi
-801045cd:	75 e1                	jne    801045b0 <acquire+0x50>
+801047ca:	83 fe 0a             	cmp    $0xa,%esi
+801047cd:	75 e1                	jne    801047b0 <acquire+0x50>
 }
-801045cf:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801045d2:	5b                   	pop    %ebx
-801045d3:	5e                   	pop    %esi
-801045d4:	5d                   	pop    %ebp
-801045d5:	c3                   	ret    
-801045d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801045dd:	8d 76 00             	lea    0x0(%esi),%esi
+801047cf:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801047d2:	5b                   	pop    %ebx
+801047d3:	5e                   	pop    %esi
+801047d4:	5d                   	pop    %ebp
+801047d5:	c3                   	ret    
+801047d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801047dd:	8d 76 00             	lea    0x0(%esi),%esi
   for(; i < 10; i++)
-801045e0:	8d 44 b3 0c          	lea    0xc(%ebx,%esi,4),%eax
-801045e4:	83 c3 34             	add    $0x34,%ebx
-801045e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801045ee:	66 90                	xchg   %ax,%ax
+801047e0:	8d 44 b3 0c          	lea    0xc(%ebx,%esi,4),%eax
+801047e4:	83 c3 34             	add    $0x34,%ebx
+801047e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801047ee:	66 90                	xchg   %ax,%ax
     pcs[i] = 0;
-801045f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+801047f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   for(; i < 10; i++)
-801045f6:	83 c0 04             	add    $0x4,%eax
-801045f9:	39 d8                	cmp    %ebx,%eax
-801045fb:	75 f3                	jne    801045f0 <acquire+0x90>
-}
-801045fd:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104600:	5b                   	pop    %ebx
-80104601:	5e                   	pop    %esi
-80104602:	5d                   	pop    %ebp
-80104603:	c3                   	ret    
+801047f6:	83 c0 04             	add    $0x4,%eax
+801047f9:	39 d8                	cmp    %ebx,%eax
+801047fb:	75 f3                	jne    801047f0 <acquire+0x90>
+}
+801047fd:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104800:	5b                   	pop    %ebx
+80104801:	5e                   	pop    %esi
+80104802:	5d                   	pop    %ebp
+80104803:	c3                   	ret    
     panic("acquire");
-80104604:	83 ec 0c             	sub    $0xc,%esp
-80104607:	68 6d 77 10 80       	push   $0x8010776d
-8010460c:	e8 7f bd ff ff       	call   80100390 <panic>
-80104611:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104618:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010461f:	90                   	nop
-
-80104620 <release>:
-{
-80104620:	f3 0f 1e fb          	endbr32 
-80104624:	55                   	push   %ebp
-80104625:	89 e5                	mov    %esp,%ebp
-80104627:	53                   	push   %ebx
-80104628:	83 ec 10             	sub    $0x10,%esp
-8010462b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104804:	83 ec 0c             	sub    $0xc,%esp
+80104807:	68 ed 79 10 80       	push   $0x801079ed
+8010480c:	e8 7f bb ff ff       	call   80100390 <panic>
+80104811:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104818:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010481f:	90                   	nop
+
+80104820 <release>:
+{
+80104820:	f3 0f 1e fb          	endbr32 
+80104824:	55                   	push   %ebp
+80104825:	89 e5                	mov    %esp,%ebp
+80104827:	53                   	push   %ebx
+80104828:	83 ec 10             	sub    $0x10,%esp
+8010482b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(!holding(lk))
-8010462e:	53                   	push   %ebx
-8010462f:	e8 dc fe ff ff       	call   80104510 <holding>
-80104634:	83 c4 10             	add    $0x10,%esp
-80104637:	85 c0                	test   %eax,%eax
-80104639:	74 22                	je     8010465d <release+0x3d>
+8010482e:	53                   	push   %ebx
+8010482f:	e8 dc fe ff ff       	call   80104710 <holding>
+80104834:	83 c4 10             	add    $0x10,%esp
+80104837:	85 c0                	test   %eax,%eax
+80104839:	74 22                	je     8010485d <release+0x3d>
   lk->pcs[0] = 0;
-8010463b:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+8010483b:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
   lk->cpu = 0;
-80104642:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+80104842:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
   __sync_synchronize();
-80104649:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+80104849:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
   asm volatile("movl $0, %0" : "+m" (lk->locked) : );
-8010464e:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+8010484e:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
 }
-80104654:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104657:	c9                   	leave  
+80104854:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104857:	c9                   	leave  
   popcli();
-80104658:	e9 53 fe ff ff       	jmp    801044b0 <popcli>
+80104858:	e9 53 fe ff ff       	jmp    801046b0 <popcli>
     panic("release");
-8010465d:	83 ec 0c             	sub    $0xc,%esp
-80104660:	68 75 77 10 80       	push   $0x80107775
-80104665:	e8 26 bd ff ff       	call   80100390 <panic>
-8010466a:	66 90                	xchg   %ax,%ax
-8010466c:	66 90                	xchg   %ax,%ax
-8010466e:	66 90                	xchg   %ax,%ax
+8010485d:	83 ec 0c             	sub    $0xc,%esp
+80104860:	68 f5 79 10 80       	push   $0x801079f5
+80104865:	e8 26 bb ff ff       	call   80100390 <panic>
+8010486a:	66 90                	xchg   %ax,%ax
+8010486c:	66 90                	xchg   %ax,%ax
+8010486e:	66 90                	xchg   %ax,%ax
 
-80104670 <memset>:
+80104870 <memset>:
 #include "types.h"
 #include "x86.h"
 
 void*
 memset(void *dst, int c, uint n)
 {
-80104670:	f3 0f 1e fb          	endbr32 
-80104674:	55                   	push   %ebp
-80104675:	89 e5                	mov    %esp,%ebp
-80104677:	57                   	push   %edi
-80104678:	8b 55 08             	mov    0x8(%ebp),%edx
-8010467b:	8b 4d 10             	mov    0x10(%ebp),%ecx
-8010467e:	53                   	push   %ebx
-8010467f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104870:	f3 0f 1e fb          	endbr32 
+80104874:	55                   	push   %ebp
+80104875:	89 e5                	mov    %esp,%ebp
+80104877:	57                   	push   %edi
+80104878:	8b 55 08             	mov    0x8(%ebp),%edx
+8010487b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+8010487e:	53                   	push   %ebx
+8010487f:	8b 45 0c             	mov    0xc(%ebp),%eax
   if ((int)dst%4 == 0 && n%4 == 0){
-80104682:	89 d7                	mov    %edx,%edi
-80104684:	09 cf                	or     %ecx,%edi
-80104686:	83 e7 03             	and    $0x3,%edi
-80104689:	75 25                	jne    801046b0 <memset+0x40>
+80104882:	89 d7                	mov    %edx,%edi
+80104884:	09 cf                	or     %ecx,%edi
+80104886:	83 e7 03             	and    $0x3,%edi
+80104889:	75 25                	jne    801048b0 <memset+0x40>
     c &= 0xFF;
-8010468b:	0f b6 f8             	movzbl %al,%edi
+8010488b:	0f b6 f8             	movzbl %al,%edi
     stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
-8010468e:	c1 e0 18             	shl    $0x18,%eax
-80104691:	89 fb                	mov    %edi,%ebx
-80104693:	c1 e9 02             	shr    $0x2,%ecx
-80104696:	c1 e3 10             	shl    $0x10,%ebx
-80104699:	09 d8                	or     %ebx,%eax
-8010469b:	09 f8                	or     %edi,%eax
-8010469d:	c1 e7 08             	shl    $0x8,%edi
-801046a0:	09 f8                	or     %edi,%eax
+8010488e:	c1 e0 18             	shl    $0x18,%eax
+80104891:	89 fb                	mov    %edi,%ebx
+80104893:	c1 e9 02             	shr    $0x2,%ecx
+80104896:	c1 e3 10             	shl    $0x10,%ebx
+80104899:	09 d8                	or     %ebx,%eax
+8010489b:	09 f8                	or     %edi,%eax
+8010489d:	c1 e7 08             	shl    $0x8,%edi
+801048a0:	09 f8                	or     %edi,%eax
   asm volatile("cld; rep stosl" :
-801046a2:	89 d7                	mov    %edx,%edi
-801046a4:	fc                   	cld    
-801046a5:	f3 ab                	rep stos %eax,%es:(%edi)
+801048a2:	89 d7                	mov    %edx,%edi
+801048a4:	fc                   	cld    
+801048a5:	f3 ab                	rep stos %eax,%es:(%edi)
   } else
     stosb(dst, c, n);
   return dst;
 }
-801046a7:	5b                   	pop    %ebx
-801046a8:	89 d0                	mov    %edx,%eax
-801046aa:	5f                   	pop    %edi
-801046ab:	5d                   	pop    %ebp
-801046ac:	c3                   	ret    
-801046ad:	8d 76 00             	lea    0x0(%esi),%esi
+801048a7:	5b                   	pop    %ebx
+801048a8:	89 d0                	mov    %edx,%eax
+801048aa:	5f                   	pop    %edi
+801048ab:	5d                   	pop    %ebp
+801048ac:	c3                   	ret    
+801048ad:	8d 76 00             	lea    0x0(%esi),%esi
   asm volatile("cld; rep stosb" :
-801046b0:	89 d7                	mov    %edx,%edi
-801046b2:	fc                   	cld    
-801046b3:	f3 aa                	rep stos %al,%es:(%edi)
-801046b5:	5b                   	pop    %ebx
-801046b6:	89 d0                	mov    %edx,%eax
-801046b8:	5f                   	pop    %edi
-801046b9:	5d                   	pop    %ebp
-801046ba:	c3                   	ret    
-801046bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801046bf:	90                   	nop
+801048b0:	89 d7                	mov    %edx,%edi
+801048b2:	fc                   	cld    
+801048b3:	f3 aa                	rep stos %al,%es:(%edi)
+801048b5:	5b                   	pop    %ebx
+801048b6:	89 d0                	mov    %edx,%eax
+801048b8:	5f                   	pop    %edi
+801048b9:	5d                   	pop    %ebp
+801048ba:	c3                   	ret    
+801048bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801048bf:	90                   	nop
 
-801046c0 <memcmp>:
+801048c0 <memcmp>:
 
 int
 memcmp(const void *v1, const void *v2, uint n)
 {
-801046c0:	f3 0f 1e fb          	endbr32 
-801046c4:	55                   	push   %ebp
-801046c5:	89 e5                	mov    %esp,%ebp
-801046c7:	56                   	push   %esi
-801046c8:	8b 75 10             	mov    0x10(%ebp),%esi
-801046cb:	8b 55 08             	mov    0x8(%ebp),%edx
-801046ce:	53                   	push   %ebx
-801046cf:	8b 45 0c             	mov    0xc(%ebp),%eax
+801048c0:	f3 0f 1e fb          	endbr32 
+801048c4:	55                   	push   %ebp
+801048c5:	89 e5                	mov    %esp,%ebp
+801048c7:	56                   	push   %esi
+801048c8:	8b 75 10             	mov    0x10(%ebp),%esi
+801048cb:	8b 55 08             	mov    0x8(%ebp),%edx
+801048ce:	53                   	push   %ebx
+801048cf:	8b 45 0c             	mov    0xc(%ebp),%eax
   const uchar *s1, *s2;
 
   s1 = v1;
   s2 = v2;
   while(n-- > 0){
-801046d2:	85 f6                	test   %esi,%esi
-801046d4:	74 2a                	je     80104700 <memcmp+0x40>
-801046d6:	01 c6                	add    %eax,%esi
-801046d8:	eb 10                	jmp    801046ea <memcmp+0x2a>
-801046da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801048d2:	85 f6                	test   %esi,%esi
+801048d4:	74 2a                	je     80104900 <memcmp+0x40>
+801048d6:	01 c6                	add    %eax,%esi
+801048d8:	eb 10                	jmp    801048ea <memcmp+0x2a>
+801048da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(*s1 != *s2)
       return *s1 - *s2;
     s1++, s2++;
-801046e0:	83 c0 01             	add    $0x1,%eax
-801046e3:	83 c2 01             	add    $0x1,%edx
+801048e0:	83 c0 01             	add    $0x1,%eax
+801048e3:	83 c2 01             	add    $0x1,%edx
   while(n-- > 0){
-801046e6:	39 f0                	cmp    %esi,%eax
-801046e8:	74 16                	je     80104700 <memcmp+0x40>
+801048e6:	39 f0                	cmp    %esi,%eax
+801048e8:	74 16                	je     80104900 <memcmp+0x40>
     if(*s1 != *s2)
-801046ea:	0f b6 0a             	movzbl (%edx),%ecx
-801046ed:	0f b6 18             	movzbl (%eax),%ebx
-801046f0:	38 d9                	cmp    %bl,%cl
-801046f2:	74 ec                	je     801046e0 <memcmp+0x20>
+801048ea:	0f b6 0a             	movzbl (%edx),%ecx
+801048ed:	0f b6 18             	movzbl (%eax),%ebx
+801048f0:	38 d9                	cmp    %bl,%cl
+801048f2:	74 ec                	je     801048e0 <memcmp+0x20>
       return *s1 - *s2;
-801046f4:	0f b6 c1             	movzbl %cl,%eax
-801046f7:	29 d8                	sub    %ebx,%eax
+801048f4:	0f b6 c1             	movzbl %cl,%eax
+801048f7:	29 d8                	sub    %ebx,%eax
   }
 
   return 0;
 }
-801046f9:	5b                   	pop    %ebx
-801046fa:	5e                   	pop    %esi
-801046fb:	5d                   	pop    %ebp
-801046fc:	c3                   	ret    
-801046fd:	8d 76 00             	lea    0x0(%esi),%esi
-80104700:	5b                   	pop    %ebx
+801048f9:	5b                   	pop    %ebx
+801048fa:	5e                   	pop    %esi
+801048fb:	5d                   	pop    %ebp
+801048fc:	c3                   	ret    
+801048fd:	8d 76 00             	lea    0x0(%esi),%esi
+80104900:	5b                   	pop    %ebx
   return 0;
-80104701:	31 c0                	xor    %eax,%eax
+80104901:	31 c0                	xor    %eax,%eax
 }
-80104703:	5e                   	pop    %esi
-80104704:	5d                   	pop    %ebp
-80104705:	c3                   	ret    
-80104706:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010470d:	8d 76 00             	lea    0x0(%esi),%esi
+80104903:	5e                   	pop    %esi
+80104904:	5d                   	pop    %ebp
+80104905:	c3                   	ret    
+80104906:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010490d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104710 <memmove>:
+80104910 <memmove>:
 
 void*
 memmove(void *dst, const void *src, uint n)
 {
-80104710:	f3 0f 1e fb          	endbr32 
-80104714:	55                   	push   %ebp
-80104715:	89 e5                	mov    %esp,%ebp
-80104717:	57                   	push   %edi
-80104718:	8b 55 08             	mov    0x8(%ebp),%edx
-8010471b:	8b 4d 10             	mov    0x10(%ebp),%ecx
-8010471e:	56                   	push   %esi
-8010471f:	8b 75 0c             	mov    0xc(%ebp),%esi
+80104910:	f3 0f 1e fb          	endbr32 
+80104914:	55                   	push   %ebp
+80104915:	89 e5                	mov    %esp,%ebp
+80104917:	57                   	push   %edi
+80104918:	8b 55 08             	mov    0x8(%ebp),%edx
+8010491b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+8010491e:	56                   	push   %esi
+8010491f:	8b 75 0c             	mov    0xc(%ebp),%esi
   const char *s;
   char *d;
 
   s = src;
   d = dst;
   if(s < d && s + n > d){
-80104722:	39 d6                	cmp    %edx,%esi
-80104724:	73 2a                	jae    80104750 <memmove+0x40>
-80104726:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
-80104729:	39 fa                	cmp    %edi,%edx
-8010472b:	73 23                	jae    80104750 <memmove+0x40>
-8010472d:	8d 41 ff             	lea    -0x1(%ecx),%eax
+80104922:	39 d6                	cmp    %edx,%esi
+80104924:	73 2a                	jae    80104950 <memmove+0x40>
+80104926:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
+80104929:	39 fa                	cmp    %edi,%edx
+8010492b:	73 23                	jae    80104950 <memmove+0x40>
+8010492d:	8d 41 ff             	lea    -0x1(%ecx),%eax
     s += n;
     d += n;
     while(n-- > 0)
-80104730:	85 c9                	test   %ecx,%ecx
-80104732:	74 13                	je     80104747 <memmove+0x37>
-80104734:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104930:	85 c9                	test   %ecx,%ecx
+80104932:	74 13                	je     80104947 <memmove+0x37>
+80104934:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       *--d = *--s;
-80104738:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
-8010473c:	88 0c 02             	mov    %cl,(%edx,%eax,1)
+80104938:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+8010493c:	88 0c 02             	mov    %cl,(%edx,%eax,1)
     while(n-- > 0)
-8010473f:	83 e8 01             	sub    $0x1,%eax
-80104742:	83 f8 ff             	cmp    $0xffffffff,%eax
-80104745:	75 f1                	jne    80104738 <memmove+0x28>
+8010493f:	83 e8 01             	sub    $0x1,%eax
+80104942:	83 f8 ff             	cmp    $0xffffffff,%eax
+80104945:	75 f1                	jne    80104938 <memmove+0x28>
   } else
     while(n-- > 0)
       *d++ = *s++;
 
   return dst;
 }
-80104747:	5e                   	pop    %esi
-80104748:	89 d0                	mov    %edx,%eax
-8010474a:	5f                   	pop    %edi
-8010474b:	5d                   	pop    %ebp
-8010474c:	c3                   	ret    
-8010474d:	8d 76 00             	lea    0x0(%esi),%esi
+80104947:	5e                   	pop    %esi
+80104948:	89 d0                	mov    %edx,%eax
+8010494a:	5f                   	pop    %edi
+8010494b:	5d                   	pop    %ebp
+8010494c:	c3                   	ret    
+8010494d:	8d 76 00             	lea    0x0(%esi),%esi
     while(n-- > 0)
-80104750:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
-80104753:	89 d7                	mov    %edx,%edi
-80104755:	85 c9                	test   %ecx,%ecx
-80104757:	74 ee                	je     80104747 <memmove+0x37>
-80104759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104950:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
+80104953:	89 d7                	mov    %edx,%edi
+80104955:	85 c9                	test   %ecx,%ecx
+80104957:	74 ee                	je     80104947 <memmove+0x37>
+80104959:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       *d++ = *s++;
-80104760:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+80104960:	a4                   	movsb  %ds:(%esi),%es:(%edi)
     while(n-- > 0)
-80104761:	39 f0                	cmp    %esi,%eax
-80104763:	75 fb                	jne    80104760 <memmove+0x50>
+80104961:	39 f0                	cmp    %esi,%eax
+80104963:	75 fb                	jne    80104960 <memmove+0x50>
 }
-80104765:	5e                   	pop    %esi
-80104766:	89 d0                	mov    %edx,%eax
-80104768:	5f                   	pop    %edi
-80104769:	5d                   	pop    %ebp
-8010476a:	c3                   	ret    
-8010476b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010476f:	90                   	nop
+80104965:	5e                   	pop    %esi
+80104966:	89 d0                	mov    %edx,%eax
+80104968:	5f                   	pop    %edi
+80104969:	5d                   	pop    %ebp
+8010496a:	c3                   	ret    
+8010496b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010496f:	90                   	nop
 
-80104770 <memcpy>:
+80104970 <memcpy>:
 
 // memcpy exists to placate GCC.  Use memmove.
 void*
 memcpy(void *dst, const void *src, uint n)
 {
-80104770:	f3 0f 1e fb          	endbr32 
+80104970:	f3 0f 1e fb          	endbr32 
   return memmove(dst, src, n);
-80104774:	eb 9a                	jmp    80104710 <memmove>
-80104776:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010477d:	8d 76 00             	lea    0x0(%esi),%esi
+80104974:	eb 9a                	jmp    80104910 <memmove>
+80104976:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010497d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104780 <strncmp>:
+80104980 <strncmp>:
 }
 
 int
 strncmp(const char *p, const char *q, uint n)
 {
-80104780:	f3 0f 1e fb          	endbr32 
-80104784:	55                   	push   %ebp
-80104785:	89 e5                	mov    %esp,%ebp
-80104787:	56                   	push   %esi
-80104788:	8b 75 10             	mov    0x10(%ebp),%esi
-8010478b:	8b 4d 08             	mov    0x8(%ebp),%ecx
-8010478e:	53                   	push   %ebx
-8010478f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104980:	f3 0f 1e fb          	endbr32 
+80104984:	55                   	push   %ebp
+80104985:	89 e5                	mov    %esp,%ebp
+80104987:	56                   	push   %esi
+80104988:	8b 75 10             	mov    0x10(%ebp),%esi
+8010498b:	8b 4d 08             	mov    0x8(%ebp),%ecx
+8010498e:	53                   	push   %ebx
+8010498f:	8b 45 0c             	mov    0xc(%ebp),%eax
   while(n > 0 && *p && *p == *q)
-80104792:	85 f6                	test   %esi,%esi
-80104794:	74 32                	je     801047c8 <strncmp+0x48>
-80104796:	01 c6                	add    %eax,%esi
-80104798:	eb 14                	jmp    801047ae <strncmp+0x2e>
-8010479a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801047a0:	38 da                	cmp    %bl,%dl
-801047a2:	75 14                	jne    801047b8 <strncmp+0x38>
+80104992:	85 f6                	test   %esi,%esi
+80104994:	74 32                	je     801049c8 <strncmp+0x48>
+80104996:	01 c6                	add    %eax,%esi
+80104998:	eb 14                	jmp    801049ae <strncmp+0x2e>
+8010499a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801049a0:	38 da                	cmp    %bl,%dl
+801049a2:	75 14                	jne    801049b8 <strncmp+0x38>
     n--, p++, q++;
-801047a4:	83 c0 01             	add    $0x1,%eax
-801047a7:	83 c1 01             	add    $0x1,%ecx
+801049a4:	83 c0 01             	add    $0x1,%eax
+801049a7:	83 c1 01             	add    $0x1,%ecx
   while(n > 0 && *p && *p == *q)
-801047aa:	39 f0                	cmp    %esi,%eax
-801047ac:	74 1a                	je     801047c8 <strncmp+0x48>
-801047ae:	0f b6 11             	movzbl (%ecx),%edx
-801047b1:	0f b6 18             	movzbl (%eax),%ebx
-801047b4:	84 d2                	test   %dl,%dl
-801047b6:	75 e8                	jne    801047a0 <strncmp+0x20>
+801049aa:	39 f0                	cmp    %esi,%eax
+801049ac:	74 1a                	je     801049c8 <strncmp+0x48>
+801049ae:	0f b6 11             	movzbl (%ecx),%edx
+801049b1:	0f b6 18             	movzbl (%eax),%ebx
+801049b4:	84 d2                	test   %dl,%dl
+801049b6:	75 e8                	jne    801049a0 <strncmp+0x20>
   if(n == 0)
     return 0;
   return (uchar)*p - (uchar)*q;
-801047b8:	0f b6 c2             	movzbl %dl,%eax
-801047bb:	29 d8                	sub    %ebx,%eax
+801049b8:	0f b6 c2             	movzbl %dl,%eax
+801049bb:	29 d8                	sub    %ebx,%eax
 }
-801047bd:	5b                   	pop    %ebx
-801047be:	5e                   	pop    %esi
-801047bf:	5d                   	pop    %ebp
-801047c0:	c3                   	ret    
-801047c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801047c8:	5b                   	pop    %ebx
+801049bd:	5b                   	pop    %ebx
+801049be:	5e                   	pop    %esi
+801049bf:	5d                   	pop    %ebp
+801049c0:	c3                   	ret    
+801049c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801049c8:	5b                   	pop    %ebx
     return 0;
-801047c9:	31 c0                	xor    %eax,%eax
+801049c9:	31 c0                	xor    %eax,%eax
 }
-801047cb:	5e                   	pop    %esi
-801047cc:	5d                   	pop    %ebp
-801047cd:	c3                   	ret    
-801047ce:	66 90                	xchg   %ax,%ax
+801049cb:	5e                   	pop    %esi
+801049cc:	5d                   	pop    %ebp
+801049cd:	c3                   	ret    
+801049ce:	66 90                	xchg   %ax,%ax
 
-801047d0 <strncpy>:
+801049d0 <strncpy>:
 
 char*
 strncpy(char *s, const char *t, int n)
 {
-801047d0:	f3 0f 1e fb          	endbr32 
-801047d4:	55                   	push   %ebp
-801047d5:	89 e5                	mov    %esp,%ebp
-801047d7:	57                   	push   %edi
-801047d8:	56                   	push   %esi
-801047d9:	8b 75 08             	mov    0x8(%ebp),%esi
-801047dc:	53                   	push   %ebx
-801047dd:	8b 45 10             	mov    0x10(%ebp),%eax
+801049d0:	f3 0f 1e fb          	endbr32 
+801049d4:	55                   	push   %ebp
+801049d5:	89 e5                	mov    %esp,%ebp
+801049d7:	57                   	push   %edi
+801049d8:	56                   	push   %esi
+801049d9:	8b 75 08             	mov    0x8(%ebp),%esi
+801049dc:	53                   	push   %ebx
+801049dd:	8b 45 10             	mov    0x10(%ebp),%eax
   char *os;
 
   os = s;
   while(n-- > 0 && (*s++ = *t++) != 0)
-801047e0:	89 f2                	mov    %esi,%edx
-801047e2:	eb 1b                	jmp    801047ff <strncpy+0x2f>
-801047e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801047e8:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-801047ec:	8b 7d 0c             	mov    0xc(%ebp),%edi
-801047ef:	83 c2 01             	add    $0x1,%edx
-801047f2:	0f b6 7f ff          	movzbl -0x1(%edi),%edi
-801047f6:	89 f9                	mov    %edi,%ecx
-801047f8:	88 4a ff             	mov    %cl,-0x1(%edx)
-801047fb:	84 c9                	test   %cl,%cl
-801047fd:	74 09                	je     80104808 <strncpy+0x38>
-801047ff:	89 c3                	mov    %eax,%ebx
-80104801:	83 e8 01             	sub    $0x1,%eax
-80104804:	85 db                	test   %ebx,%ebx
-80104806:	7f e0                	jg     801047e8 <strncpy+0x18>
+801049e0:	89 f2                	mov    %esi,%edx
+801049e2:	eb 1b                	jmp    801049ff <strncpy+0x2f>
+801049e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801049e8:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+801049ec:	8b 7d 0c             	mov    0xc(%ebp),%edi
+801049ef:	83 c2 01             	add    $0x1,%edx
+801049f2:	0f b6 7f ff          	movzbl -0x1(%edi),%edi
+801049f6:	89 f9                	mov    %edi,%ecx
+801049f8:	88 4a ff             	mov    %cl,-0x1(%edx)
+801049fb:	84 c9                	test   %cl,%cl
+801049fd:	74 09                	je     80104a08 <strncpy+0x38>
+801049ff:	89 c3                	mov    %eax,%ebx
+80104a01:	83 e8 01             	sub    $0x1,%eax
+80104a04:	85 db                	test   %ebx,%ebx
+80104a06:	7f e0                	jg     801049e8 <strncpy+0x18>
     ;
   while(n-- > 0)
-80104808:	89 d1                	mov    %edx,%ecx
-8010480a:	85 c0                	test   %eax,%eax
-8010480c:	7e 15                	jle    80104823 <strncpy+0x53>
-8010480e:	66 90                	xchg   %ax,%ax
+80104a08:	89 d1                	mov    %edx,%ecx
+80104a0a:	85 c0                	test   %eax,%eax
+80104a0c:	7e 15                	jle    80104a23 <strncpy+0x53>
+80104a0e:	66 90                	xchg   %ax,%ax
     *s++ = 0;
-80104810:	83 c1 01             	add    $0x1,%ecx
-80104813:	c6 41 ff 00          	movb   $0x0,-0x1(%ecx)
+80104a10:	83 c1 01             	add    $0x1,%ecx
+80104a13:	c6 41 ff 00          	movb   $0x0,-0x1(%ecx)
   while(n-- > 0)
-80104817:	89 c8                	mov    %ecx,%eax
-80104819:	f7 d0                	not    %eax
-8010481b:	01 d0                	add    %edx,%eax
-8010481d:	01 d8                	add    %ebx,%eax
-8010481f:	85 c0                	test   %eax,%eax
-80104821:	7f ed                	jg     80104810 <strncpy+0x40>
+80104a17:	89 c8                	mov    %ecx,%eax
+80104a19:	f7 d0                	not    %eax
+80104a1b:	01 d0                	add    %edx,%eax
+80104a1d:	01 d8                	add    %ebx,%eax
+80104a1f:	85 c0                	test   %eax,%eax
+80104a21:	7f ed                	jg     80104a10 <strncpy+0x40>
   return os;
 }
-80104823:	5b                   	pop    %ebx
-80104824:	89 f0                	mov    %esi,%eax
-80104826:	5e                   	pop    %esi
-80104827:	5f                   	pop    %edi
-80104828:	5d                   	pop    %ebp
-80104829:	c3                   	ret    
-8010482a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104a23:	5b                   	pop    %ebx
+80104a24:	89 f0                	mov    %esi,%eax
+80104a26:	5e                   	pop    %esi
+80104a27:	5f                   	pop    %edi
+80104a28:	5d                   	pop    %ebp
+80104a29:	c3                   	ret    
+80104a2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104830 <safestrcpy>:
+80104a30 <safestrcpy>:
 
 // Like strncpy but guaranteed to NUL-terminate.
 char*
 safestrcpy(char *s, const char *t, int n)
 {
-80104830:	f3 0f 1e fb          	endbr32 
-80104834:	55                   	push   %ebp
-80104835:	89 e5                	mov    %esp,%ebp
-80104837:	56                   	push   %esi
-80104838:	8b 55 10             	mov    0x10(%ebp),%edx
-8010483b:	8b 75 08             	mov    0x8(%ebp),%esi
-8010483e:	53                   	push   %ebx
-8010483f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104a30:	f3 0f 1e fb          	endbr32 
+80104a34:	55                   	push   %ebp
+80104a35:	89 e5                	mov    %esp,%ebp
+80104a37:	56                   	push   %esi
+80104a38:	8b 55 10             	mov    0x10(%ebp),%edx
+80104a3b:	8b 75 08             	mov    0x8(%ebp),%esi
+80104a3e:	53                   	push   %ebx
+80104a3f:	8b 45 0c             	mov    0xc(%ebp),%eax
   char *os;
 
   os = s;
   if(n <= 0)
-80104842:	85 d2                	test   %edx,%edx
-80104844:	7e 21                	jle    80104867 <safestrcpy+0x37>
-80104846:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
-8010484a:	89 f2                	mov    %esi,%edx
-8010484c:	eb 12                	jmp    80104860 <safestrcpy+0x30>
-8010484e:	66 90                	xchg   %ax,%ax
+80104a42:	85 d2                	test   %edx,%edx
+80104a44:	7e 21                	jle    80104a67 <safestrcpy+0x37>
+80104a46:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
+80104a4a:	89 f2                	mov    %esi,%edx
+80104a4c:	eb 12                	jmp    80104a60 <safestrcpy+0x30>
+80104a4e:	66 90                	xchg   %ax,%ax
     return os;
   while(--n > 0 && (*s++ = *t++) != 0)
-80104850:	0f b6 08             	movzbl (%eax),%ecx
-80104853:	83 c0 01             	add    $0x1,%eax
-80104856:	83 c2 01             	add    $0x1,%edx
-80104859:	88 4a ff             	mov    %cl,-0x1(%edx)
-8010485c:	84 c9                	test   %cl,%cl
-8010485e:	74 04                	je     80104864 <safestrcpy+0x34>
-80104860:	39 d8                	cmp    %ebx,%eax
-80104862:	75 ec                	jne    80104850 <safestrcpy+0x20>
+80104a50:	0f b6 08             	movzbl (%eax),%ecx
+80104a53:	83 c0 01             	add    $0x1,%eax
+80104a56:	83 c2 01             	add    $0x1,%edx
+80104a59:	88 4a ff             	mov    %cl,-0x1(%edx)
+80104a5c:	84 c9                	test   %cl,%cl
+80104a5e:	74 04                	je     80104a64 <safestrcpy+0x34>
+80104a60:	39 d8                	cmp    %ebx,%eax
+80104a62:	75 ec                	jne    80104a50 <safestrcpy+0x20>
     ;
   *s = 0;
-80104864:	c6 02 00             	movb   $0x0,(%edx)
+80104a64:	c6 02 00             	movb   $0x0,(%edx)
   return os;
 }
-80104867:	89 f0                	mov    %esi,%eax
-80104869:	5b                   	pop    %ebx
-8010486a:	5e                   	pop    %esi
-8010486b:	5d                   	pop    %ebp
-8010486c:	c3                   	ret    
-8010486d:	8d 76 00             	lea    0x0(%esi),%esi
+80104a67:	89 f0                	mov    %esi,%eax
+80104a69:	5b                   	pop    %ebx
+80104a6a:	5e                   	pop    %esi
+80104a6b:	5d                   	pop    %ebp
+80104a6c:	c3                   	ret    
+80104a6d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104870 <strlen>:
+80104a70 <strlen>:
 
 int
 strlen(const char *s)
 {
-80104870:	f3 0f 1e fb          	endbr32 
-80104874:	55                   	push   %ebp
+80104a70:	f3 0f 1e fb          	endbr32 
+80104a74:	55                   	push   %ebp
   int n;
 
   for(n = 0; s[n]; n++)
-80104875:	31 c0                	xor    %eax,%eax
+80104a75:	31 c0                	xor    %eax,%eax
 {
-80104877:	89 e5                	mov    %esp,%ebp
-80104879:	8b 55 08             	mov    0x8(%ebp),%edx
+80104a77:	89 e5                	mov    %esp,%ebp
+80104a79:	8b 55 08             	mov    0x8(%ebp),%edx
   for(n = 0; s[n]; n++)
-8010487c:	80 3a 00             	cmpb   $0x0,(%edx)
-8010487f:	74 10                	je     80104891 <strlen+0x21>
-80104881:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104888:	83 c0 01             	add    $0x1,%eax
-8010488b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-8010488f:	75 f7                	jne    80104888 <strlen+0x18>
+80104a7c:	80 3a 00             	cmpb   $0x0,(%edx)
+80104a7f:	74 10                	je     80104a91 <strlen+0x21>
+80104a81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104a88:	83 c0 01             	add    $0x1,%eax
+80104a8b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+80104a8f:	75 f7                	jne    80104a88 <strlen+0x18>
     ;
   return n;
 }
-80104891:	5d                   	pop    %ebp
-80104892:	c3                   	ret    
+80104a91:	5d                   	pop    %ebp
+80104a92:	c3                   	ret    
 
-80104893 <swtch>:
+80104a93 <swtch>:
 # a struct context, and save its address in *old.
 # Switch stacks to new and pop previously-saved registers.
 
 .globl swtch
 swtch:
   movl 4(%esp), %eax
-80104893:	8b 44 24 04          	mov    0x4(%esp),%eax
+80104a93:	8b 44 24 04          	mov    0x4(%esp),%eax
   movl 8(%esp), %edx
-80104897:	8b 54 24 08          	mov    0x8(%esp),%edx
+80104a97:	8b 54 24 08          	mov    0x8(%esp),%edx
 
   # Save old callee-saved registers
   pushl %ebp
-8010489b:	55                   	push   %ebp
+80104a9b:	55                   	push   %ebp
   pushl %ebx
-8010489c:	53                   	push   %ebx
+80104a9c:	53                   	push   %ebx
   pushl %esi
-8010489d:	56                   	push   %esi
+80104a9d:	56                   	push   %esi
   pushl %edi
-8010489e:	57                   	push   %edi
+80104a9e:	57                   	push   %edi
 
   # Switch stacks
   movl %esp, (%eax)
-8010489f:	89 20                	mov    %esp,(%eax)
+80104a9f:	89 20                	mov    %esp,(%eax)
   movl %edx, %esp
-801048a1:	89 d4                	mov    %edx,%esp
+80104aa1:	89 d4                	mov    %edx,%esp
 
   # Load new callee-saved registers
   popl %edi
-801048a3:	5f                   	pop    %edi
+80104aa3:	5f                   	pop    %edi
   popl %esi
-801048a4:	5e                   	pop    %esi
+80104aa4:	5e                   	pop    %esi
   popl %ebx
-801048a5:	5b                   	pop    %ebx
+80104aa5:	5b                   	pop    %ebx
   popl %ebp
-801048a6:	5d                   	pop    %ebp
+80104aa6:	5d                   	pop    %ebp
   ret
-801048a7:	c3                   	ret    
-801048a8:	66 90                	xchg   %ax,%ax
-801048aa:	66 90                	xchg   %ax,%ax
-801048ac:	66 90                	xchg   %ax,%ax
-801048ae:	66 90                	xchg   %ax,%ax
+80104aa7:	c3                   	ret    
+80104aa8:	66 90                	xchg   %ax,%ax
+80104aaa:	66 90                	xchg   %ax,%ax
+80104aac:	66 90                	xchg   %ax,%ax
+80104aae:	66 90                	xchg   %ax,%ax
 
-801048b0 <fetchint>:
+80104ab0 <fetchint>:
 // to a saved program counter, and then the first argument.
 
 // Fetch the int at addr from the current process.
 int
 fetchint(uint addr, int *ip)
 {
-801048b0:	f3 0f 1e fb          	endbr32 
-801048b4:	55                   	push   %ebp
-801048b5:	89 e5                	mov    %esp,%ebp
-801048b7:	53                   	push   %ebx
-801048b8:	83 ec 04             	sub    $0x4,%esp
-801048bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104ab0:	f3 0f 1e fb          	endbr32 
+80104ab4:	55                   	push   %ebp
+80104ab5:	89 e5                	mov    %esp,%ebp
+80104ab7:	53                   	push   %ebx
+80104ab8:	83 ec 04             	sub    $0x4,%esp
+80104abb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct proc *curproc = myproc();
-801048be:	e8 9d f0 ff ff       	call   80103960 <myproc>
+80104abe:	e8 bd ee ff ff       	call   80103980 <myproc>
 
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-801048c3:	8b 00                	mov    (%eax),%eax
-801048c5:	39 d8                	cmp    %ebx,%eax
-801048c7:	76 17                	jbe    801048e0 <fetchint+0x30>
-801048c9:	8d 53 04             	lea    0x4(%ebx),%edx
-801048cc:	39 d0                	cmp    %edx,%eax
-801048ce:	72 10                	jb     801048e0 <fetchint+0x30>
+80104ac3:	8b 00                	mov    (%eax),%eax
+80104ac5:	39 d8                	cmp    %ebx,%eax
+80104ac7:	76 17                	jbe    80104ae0 <fetchint+0x30>
+80104ac9:	8d 53 04             	lea    0x4(%ebx),%edx
+80104acc:	39 d0                	cmp    %edx,%eax
+80104ace:	72 10                	jb     80104ae0 <fetchint+0x30>
     return -1;
   *ip = *(int*)(addr);
-801048d0:	8b 45 0c             	mov    0xc(%ebp),%eax
-801048d3:	8b 13                	mov    (%ebx),%edx
-801048d5:	89 10                	mov    %edx,(%eax)
+80104ad0:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104ad3:	8b 13                	mov    (%ebx),%edx
+80104ad5:	89 10                	mov    %edx,(%eax)
   return 0;
-801048d7:	31 c0                	xor    %eax,%eax
+80104ad7:	31 c0                	xor    %eax,%eax
 }
-801048d9:	83 c4 04             	add    $0x4,%esp
-801048dc:	5b                   	pop    %ebx
-801048dd:	5d                   	pop    %ebp
-801048de:	c3                   	ret    
-801048df:	90                   	nop
-    return -1;
-801048e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801048e5:	eb f2                	jmp    801048d9 <fetchint+0x29>
-801048e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801048ee:	66 90                	xchg   %ax,%ax
+80104ad9:	83 c4 04             	add    $0x4,%esp
+80104adc:	5b                   	pop    %ebx
+80104add:	5d                   	pop    %ebp
+80104ade:	c3                   	ret    
+80104adf:	90                   	nop
+    return -1;
+80104ae0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104ae5:	eb f2                	jmp    80104ad9 <fetchint+0x29>
+80104ae7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104aee:	66 90                	xchg   %ax,%ax
 
-801048f0 <fetchstr>:
+80104af0 <fetchstr>:
 // Fetch the nul-terminated string at addr from the current process.
 // Doesn't actually copy the string - just sets *pp to point at it.
 // Returns length of string, not including nul.
 int
 fetchstr(uint addr, char **pp)
 {
-801048f0:	f3 0f 1e fb          	endbr32 
-801048f4:	55                   	push   %ebp
-801048f5:	89 e5                	mov    %esp,%ebp
-801048f7:	53                   	push   %ebx
-801048f8:	83 ec 04             	sub    $0x4,%esp
-801048fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104af0:	f3 0f 1e fb          	endbr32 
+80104af4:	55                   	push   %ebp
+80104af5:	89 e5                	mov    %esp,%ebp
+80104af7:	53                   	push   %ebx
+80104af8:	83 ec 04             	sub    $0x4,%esp
+80104afb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   char *s, *ep;
   struct proc *curproc = myproc();
-801048fe:	e8 5d f0 ff ff       	call   80103960 <myproc>
+80104afe:	e8 7d ee ff ff       	call   80103980 <myproc>
 
   if(addr >= curproc->sz)
-80104903:	39 18                	cmp    %ebx,(%eax)
-80104905:	76 31                	jbe    80104938 <fetchstr+0x48>
+80104b03:	39 18                	cmp    %ebx,(%eax)
+80104b05:	76 31                	jbe    80104b38 <fetchstr+0x48>
     return -1;
   *pp = (char*)addr;
-80104907:	8b 55 0c             	mov    0xc(%ebp),%edx
-8010490a:	89 1a                	mov    %ebx,(%edx)
+80104b07:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104b0a:	89 1a                	mov    %ebx,(%edx)
   ep = (char*)curproc->sz;
-8010490c:	8b 10                	mov    (%eax),%edx
+80104b0c:	8b 10                	mov    (%eax),%edx
   for(s = *pp; s < ep; s++){
-8010490e:	39 d3                	cmp    %edx,%ebx
-80104910:	73 26                	jae    80104938 <fetchstr+0x48>
-80104912:	89 d8                	mov    %ebx,%eax
-80104914:	eb 11                	jmp    80104927 <fetchstr+0x37>
-80104916:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010491d:	8d 76 00             	lea    0x0(%esi),%esi
-80104920:	83 c0 01             	add    $0x1,%eax
-80104923:	39 c2                	cmp    %eax,%edx
-80104925:	76 11                	jbe    80104938 <fetchstr+0x48>
+80104b0e:	39 d3                	cmp    %edx,%ebx
+80104b10:	73 26                	jae    80104b38 <fetchstr+0x48>
+80104b12:	89 d8                	mov    %ebx,%eax
+80104b14:	eb 11                	jmp    80104b27 <fetchstr+0x37>
+80104b16:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b1d:	8d 76 00             	lea    0x0(%esi),%esi
+80104b20:	83 c0 01             	add    $0x1,%eax
+80104b23:	39 c2                	cmp    %eax,%edx
+80104b25:	76 11                	jbe    80104b38 <fetchstr+0x48>
     if(*s == 0)
-80104927:	80 38 00             	cmpb   $0x0,(%eax)
-8010492a:	75 f4                	jne    80104920 <fetchstr+0x30>
+80104b27:	80 38 00             	cmpb   $0x0,(%eax)
+80104b2a:	75 f4                	jne    80104b20 <fetchstr+0x30>
       return s - *pp;
   }
   return -1;
 }
-8010492c:	83 c4 04             	add    $0x4,%esp
+80104b2c:	83 c4 04             	add    $0x4,%esp
       return s - *pp;
-8010492f:	29 d8                	sub    %ebx,%eax
+80104b2f:	29 d8                	sub    %ebx,%eax
 }
-80104931:	5b                   	pop    %ebx
-80104932:	5d                   	pop    %ebp
-80104933:	c3                   	ret    
-80104934:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104938:	83 c4 04             	add    $0x4,%esp
-    return -1;
-8010493b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104940:	5b                   	pop    %ebx
-80104941:	5d                   	pop    %ebp
-80104942:	c3                   	ret    
-80104943:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010494a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104b31:	5b                   	pop    %ebx
+80104b32:	5d                   	pop    %ebp
+80104b33:	c3                   	ret    
+80104b34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104b38:	83 c4 04             	add    $0x4,%esp
+    return -1;
+80104b3b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104b40:	5b                   	pop    %ebx
+80104b41:	5d                   	pop    %ebp
+80104b42:	c3                   	ret    
+80104b43:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104950 <argint>:
+80104b50 <argint>:
 
 // Fetch the nth 32-bit system call argument.
 int
 argint(int n, int *ip)
 {
-80104950:	f3 0f 1e fb          	endbr32 
-80104954:	55                   	push   %ebp
-80104955:	89 e5                	mov    %esp,%ebp
-80104957:	56                   	push   %esi
-80104958:	53                   	push   %ebx
+80104b50:	f3 0f 1e fb          	endbr32 
+80104b54:	55                   	push   %ebp
+80104b55:	89 e5                	mov    %esp,%ebp
+80104b57:	56                   	push   %esi
+80104b58:	53                   	push   %ebx
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104959:	e8 02 f0 ff ff       	call   80103960 <myproc>
-8010495e:	8b 55 08             	mov    0x8(%ebp),%edx
-80104961:	8b 40 18             	mov    0x18(%eax),%eax
-80104964:	8b 40 44             	mov    0x44(%eax),%eax
-80104967:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+80104b59:	e8 22 ee ff ff       	call   80103980 <myproc>
+80104b5e:	8b 55 08             	mov    0x8(%ebp),%edx
+80104b61:	8b 40 18             	mov    0x18(%eax),%eax
+80104b64:	8b 40 44             	mov    0x44(%eax),%eax
+80104b67:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
   struct proc *curproc = myproc();
-8010496a:	e8 f1 ef ff ff       	call   80103960 <myproc>
+80104b6a:	e8 11 ee ff ff       	call   80103980 <myproc>
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-8010496f:	8d 73 04             	lea    0x4(%ebx),%esi
+80104b6f:	8d 73 04             	lea    0x4(%ebx),%esi
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-80104972:	8b 00                	mov    (%eax),%eax
-80104974:	39 c6                	cmp    %eax,%esi
-80104976:	73 18                	jae    80104990 <argint+0x40>
-80104978:	8d 53 08             	lea    0x8(%ebx),%edx
-8010497b:	39 d0                	cmp    %edx,%eax
-8010497d:	72 11                	jb     80104990 <argint+0x40>
+80104b72:	8b 00                	mov    (%eax),%eax
+80104b74:	39 c6                	cmp    %eax,%esi
+80104b76:	73 18                	jae    80104b90 <argint+0x40>
+80104b78:	8d 53 08             	lea    0x8(%ebx),%edx
+80104b7b:	39 d0                	cmp    %edx,%eax
+80104b7d:	72 11                	jb     80104b90 <argint+0x40>
   *ip = *(int*)(addr);
-8010497f:	8b 45 0c             	mov    0xc(%ebp),%eax
-80104982:	8b 53 04             	mov    0x4(%ebx),%edx
-80104985:	89 10                	mov    %edx,(%eax)
+80104b7f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104b82:	8b 53 04             	mov    0x4(%ebx),%edx
+80104b85:	89 10                	mov    %edx,(%eax)
   return 0;
-80104987:	31 c0                	xor    %eax,%eax
+80104b87:	31 c0                	xor    %eax,%eax
 }
-80104989:	5b                   	pop    %ebx
-8010498a:	5e                   	pop    %esi
-8010498b:	5d                   	pop    %ebp
-8010498c:	c3                   	ret    
-8010498d:	8d 76 00             	lea    0x0(%esi),%esi
+80104b89:	5b                   	pop    %ebx
+80104b8a:	5e                   	pop    %esi
+80104b8b:	5d                   	pop    %ebp
+80104b8c:	c3                   	ret    
+80104b8d:	8d 76 00             	lea    0x0(%esi),%esi
     return -1;
-80104990:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104b90:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104995:	eb f2                	jmp    80104989 <argint+0x39>
-80104997:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010499e:	66 90                	xchg   %ax,%ax
+80104b95:	eb f2                	jmp    80104b89 <argint+0x39>
+80104b97:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b9e:	66 90                	xchg   %ax,%ax
 
-801049a0 <argptr>:
+80104ba0 <argptr>:
 // Fetch the nth word-sized system call argument as a pointer
 // to a block of memory of size bytes.  Check that the pointer
 // lies within the process address space.
 int
 argptr(int n, char **pp, int size)
 {
-801049a0:	f3 0f 1e fb          	endbr32 
-801049a4:	55                   	push   %ebp
-801049a5:	89 e5                	mov    %esp,%ebp
-801049a7:	56                   	push   %esi
-801049a8:	53                   	push   %ebx
-801049a9:	83 ec 10             	sub    $0x10,%esp
-801049ac:	8b 5d 10             	mov    0x10(%ebp),%ebx
+80104ba0:	f3 0f 1e fb          	endbr32 
+80104ba4:	55                   	push   %ebp
+80104ba5:	89 e5                	mov    %esp,%ebp
+80104ba7:	56                   	push   %esi
+80104ba8:	53                   	push   %ebx
+80104ba9:	83 ec 10             	sub    $0x10,%esp
+80104bac:	8b 5d 10             	mov    0x10(%ebp),%ebx
   int i;
   struct proc *curproc = myproc();
-801049af:	e8 ac ef ff ff       	call   80103960 <myproc>
+80104baf:	e8 cc ed ff ff       	call   80103980 <myproc>
  
   if(argint(n, &i) < 0)
-801049b4:	83 ec 08             	sub    $0x8,%esp
+80104bb4:	83 ec 08             	sub    $0x8,%esp
   struct proc *curproc = myproc();
-801049b7:	89 c6                	mov    %eax,%esi
+80104bb7:	89 c6                	mov    %eax,%esi
   if(argint(n, &i) < 0)
-801049b9:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801049bc:	50                   	push   %eax
-801049bd:	ff 75 08             	pushl  0x8(%ebp)
-801049c0:	e8 8b ff ff ff       	call   80104950 <argint>
+80104bb9:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104bbc:	50                   	push   %eax
+80104bbd:	ff 75 08             	pushl  0x8(%ebp)
+80104bc0:	e8 8b ff ff ff       	call   80104b50 <argint>
     return -1;
   if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
-801049c5:	83 c4 10             	add    $0x10,%esp
-801049c8:	85 c0                	test   %eax,%eax
-801049ca:	78 24                	js     801049f0 <argptr+0x50>
-801049cc:	85 db                	test   %ebx,%ebx
-801049ce:	78 20                	js     801049f0 <argptr+0x50>
-801049d0:	8b 16                	mov    (%esi),%edx
-801049d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801049d5:	39 c2                	cmp    %eax,%edx
-801049d7:	76 17                	jbe    801049f0 <argptr+0x50>
-801049d9:	01 c3                	add    %eax,%ebx
-801049db:	39 da                	cmp    %ebx,%edx
-801049dd:	72 11                	jb     801049f0 <argptr+0x50>
+80104bc5:	83 c4 10             	add    $0x10,%esp
+80104bc8:	85 c0                	test   %eax,%eax
+80104bca:	78 24                	js     80104bf0 <argptr+0x50>
+80104bcc:	85 db                	test   %ebx,%ebx
+80104bce:	78 20                	js     80104bf0 <argptr+0x50>
+80104bd0:	8b 16                	mov    (%esi),%edx
+80104bd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104bd5:	39 c2                	cmp    %eax,%edx
+80104bd7:	76 17                	jbe    80104bf0 <argptr+0x50>
+80104bd9:	01 c3                	add    %eax,%ebx
+80104bdb:	39 da                	cmp    %ebx,%edx
+80104bdd:	72 11                	jb     80104bf0 <argptr+0x50>
     return -1;
   *pp = (char*)i;
-801049df:	8b 55 0c             	mov    0xc(%ebp),%edx
-801049e2:	89 02                	mov    %eax,(%edx)
+80104bdf:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104be2:	89 02                	mov    %eax,(%edx)
   return 0;
-801049e4:	31 c0                	xor    %eax,%eax
+80104be4:	31 c0                	xor    %eax,%eax
 }
-801049e6:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801049e9:	5b                   	pop    %ebx
-801049ea:	5e                   	pop    %esi
-801049eb:	5d                   	pop    %ebp
-801049ec:	c3                   	ret    
-801049ed:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-801049f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801049f5:	eb ef                	jmp    801049e6 <argptr+0x46>
-801049f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801049fe:	66 90                	xchg   %ax,%ax
+80104be6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104be9:	5b                   	pop    %ebx
+80104bea:	5e                   	pop    %esi
+80104beb:	5d                   	pop    %ebp
+80104bec:	c3                   	ret    
+80104bed:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80104bf0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104bf5:	eb ef                	jmp    80104be6 <argptr+0x46>
+80104bf7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104bfe:	66 90                	xchg   %ax,%ax
 
-80104a00 <argstr>:
+80104c00 <argstr>:
 // Check that the pointer is valid and the string is nul-terminated.
 // (There is no shared writable memory, so the string can't change
 // between this check and being used by the kernel.)
 int
 argstr(int n, char **pp)
 {
-80104a00:	f3 0f 1e fb          	endbr32 
-80104a04:	55                   	push   %ebp
-80104a05:	89 e5                	mov    %esp,%ebp
-80104a07:	83 ec 20             	sub    $0x20,%esp
+80104c00:	f3 0f 1e fb          	endbr32 
+80104c04:	55                   	push   %ebp
+80104c05:	89 e5                	mov    %esp,%ebp
+80104c07:	83 ec 20             	sub    $0x20,%esp
   int addr;
   if(argint(n, &addr) < 0)
-80104a0a:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104a0d:	50                   	push   %eax
-80104a0e:	ff 75 08             	pushl  0x8(%ebp)
-80104a11:	e8 3a ff ff ff       	call   80104950 <argint>
-80104a16:	83 c4 10             	add    $0x10,%esp
-80104a19:	85 c0                	test   %eax,%eax
-80104a1b:	78 13                	js     80104a30 <argstr+0x30>
+80104c0a:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104c0d:	50                   	push   %eax
+80104c0e:	ff 75 08             	pushl  0x8(%ebp)
+80104c11:	e8 3a ff ff ff       	call   80104b50 <argint>
+80104c16:	83 c4 10             	add    $0x10,%esp
+80104c19:	85 c0                	test   %eax,%eax
+80104c1b:	78 13                	js     80104c30 <argstr+0x30>
     return -1;
   return fetchstr(addr, pp);
-80104a1d:	83 ec 08             	sub    $0x8,%esp
-80104a20:	ff 75 0c             	pushl  0xc(%ebp)
-80104a23:	ff 75 f4             	pushl  -0xc(%ebp)
-80104a26:	e8 c5 fe ff ff       	call   801048f0 <fetchstr>
-80104a2b:	83 c4 10             	add    $0x10,%esp
-}
-80104a2e:	c9                   	leave  
-80104a2f:	c3                   	ret    
-80104a30:	c9                   	leave  
-    return -1;
-80104a31:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104a36:	c3                   	ret    
-80104a37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104a3e:	66 90                	xchg   %ax,%ax
+80104c1d:	83 ec 08             	sub    $0x8,%esp
+80104c20:	ff 75 0c             	pushl  0xc(%ebp)
+80104c23:	ff 75 f4             	pushl  -0xc(%ebp)
+80104c26:	e8 c5 fe ff ff       	call   80104af0 <fetchstr>
+80104c2b:	83 c4 10             	add    $0x10,%esp
+}
+80104c2e:	c9                   	leave  
+80104c2f:	c3                   	ret    
+80104c30:	c9                   	leave  
+    return -1;
+80104c31:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104c36:	c3                   	ret    
+80104c37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104c3e:	66 90                	xchg   %ax,%ax
 
-80104a40 <syscall>:
-[SYS_close]   sys_close,
+80104c40 <syscall>:
+[SYS_get_burst_time] sys_get_burst_time,
 };
 
 void
 syscall(void)
 {
-80104a40:	f3 0f 1e fb          	endbr32 
-80104a44:	55                   	push   %ebp
-80104a45:	89 e5                	mov    %esp,%ebp
-80104a47:	53                   	push   %ebx
-80104a48:	83 ec 04             	sub    $0x4,%esp
+80104c40:	f3 0f 1e fb          	endbr32 
+80104c44:	55                   	push   %ebp
+80104c45:	89 e5                	mov    %esp,%ebp
+80104c47:	53                   	push   %ebx
+80104c48:	83 ec 04             	sub    $0x4,%esp
   int num;
   struct proc *curproc = myproc();
-80104a4b:	e8 10 ef ff ff       	call   80103960 <myproc>
-80104a50:	89 c3                	mov    %eax,%ebx
+80104c4b:	e8 30 ed ff ff       	call   80103980 <myproc>
+80104c50:	89 c3                	mov    %eax,%ebx
 
   num = curproc->tf->eax;
-80104a52:	8b 40 18             	mov    0x18(%eax),%eax
-80104a55:	8b 40 1c             	mov    0x1c(%eax),%eax
+80104c52:	8b 40 18             	mov    0x18(%eax),%eax
+80104c55:	8b 40 1c             	mov    0x1c(%eax),%eax
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-80104a58:	8d 50 ff             	lea    -0x1(%eax),%edx
-80104a5b:	83 fa 14             	cmp    $0x14,%edx
-80104a5e:	77 20                	ja     80104a80 <syscall+0x40>
-80104a60:	8b 14 85 a0 77 10 80 	mov    -0x7fef8860(,%eax,4),%edx
-80104a67:	85 d2                	test   %edx,%edx
-80104a69:	74 15                	je     80104a80 <syscall+0x40>
+80104c58:	8d 50 ff             	lea    -0x1(%eax),%edx
+80104c5b:	83 fa 19             	cmp    $0x19,%edx
+80104c5e:	77 20                	ja     80104c80 <syscall+0x40>
+80104c60:	8b 14 85 20 7a 10 80 	mov    -0x7fef85e0(,%eax,4),%edx
+80104c67:	85 d2                	test   %edx,%edx
+80104c69:	74 15                	je     80104c80 <syscall+0x40>
     curproc->tf->eax = syscalls[num]();
-80104a6b:	ff d2                	call   *%edx
-80104a6d:	89 c2                	mov    %eax,%edx
-80104a6f:	8b 43 18             	mov    0x18(%ebx),%eax
-80104a72:	89 50 1c             	mov    %edx,0x1c(%eax)
+80104c6b:	ff d2                	call   *%edx
+80104c6d:	89 c2                	mov    %eax,%edx
+80104c6f:	8b 43 18             	mov    0x18(%ebx),%eax
+80104c72:	89 50 1c             	mov    %edx,0x1c(%eax)
   } else {
     cprintf("%d %s: unknown sys call %d\n",
             curproc->pid, curproc->name, num);
     curproc->tf->eax = -1;
   }
 }
-80104a75:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104a78:	c9                   	leave  
-80104a79:	c3                   	ret    
-80104a7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104c75:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104c78:	c9                   	leave  
+80104c79:	c3                   	ret    
+80104c7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     cprintf("%d %s: unknown sys call %d\n",
-80104a80:	50                   	push   %eax
+80104c80:	50                   	push   %eax
             curproc->pid, curproc->name, num);
-80104a81:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80104c81:	8d 43 6c             	lea    0x6c(%ebx),%eax
     cprintf("%d %s: unknown sys call %d\n",
-80104a84:	50                   	push   %eax
-80104a85:	ff 73 10             	pushl  0x10(%ebx)
-80104a88:	68 7d 77 10 80       	push   $0x8010777d
-80104a8d:	e8 1e bc ff ff       	call   801006b0 <cprintf>
+80104c84:	50                   	push   %eax
+80104c85:	ff 73 10             	pushl  0x10(%ebx)
+80104c88:	68 fd 79 10 80       	push   $0x801079fd
+80104c8d:	e8 1e ba ff ff       	call   801006b0 <cprintf>
     curproc->tf->eax = -1;
-80104a92:	8b 43 18             	mov    0x18(%ebx),%eax
-80104a95:	83 c4 10             	add    $0x10,%esp
-80104a98:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
-}
-80104a9f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104aa2:	c9                   	leave  
-80104aa3:	c3                   	ret    
-80104aa4:	66 90                	xchg   %ax,%ax
-80104aa6:	66 90                	xchg   %ax,%ax
-80104aa8:	66 90                	xchg   %ax,%ax
-80104aaa:	66 90                	xchg   %ax,%ax
-80104aac:	66 90                	xchg   %ax,%ax
-80104aae:	66 90                	xchg   %ax,%ax
+80104c92:	8b 43 18             	mov    0x18(%ebx),%eax
+80104c95:	83 c4 10             	add    $0x10,%esp
+80104c98:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
+}
+80104c9f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104ca2:	c9                   	leave  
+80104ca3:	c3                   	ret    
+80104ca4:	66 90                	xchg   %ax,%ax
+80104ca6:	66 90                	xchg   %ax,%ax
+80104ca8:	66 90                	xchg   %ax,%ax
+80104caa:	66 90                	xchg   %ax,%ax
+80104cac:	66 90                	xchg   %ax,%ax
+80104cae:	66 90                	xchg   %ax,%ax
 
-80104ab0 <create>:
+80104cb0 <create>:
   return -1;
 }
 
 static struct inode*
 create(char *path, short type, short major, short minor)
 {
-80104ab0:	55                   	push   %ebp
-80104ab1:	89 e5                	mov    %esp,%ebp
-80104ab3:	57                   	push   %edi
-80104ab4:	56                   	push   %esi
+80104cb0:	55                   	push   %ebp
+80104cb1:	89 e5                	mov    %esp,%ebp
+80104cb3:	57                   	push   %edi
+80104cb4:	56                   	push   %esi
   struct inode *ip, *dp;
   char name[DIRSIZ];
 
   if((dp = nameiparent(path, name)) == 0)
-80104ab5:	8d 7d da             	lea    -0x26(%ebp),%edi
+80104cb5:	8d 7d da             	lea    -0x26(%ebp),%edi
 {
-80104ab8:	53                   	push   %ebx
-80104ab9:	83 ec 34             	sub    $0x34,%esp
-80104abc:	89 4d d0             	mov    %ecx,-0x30(%ebp)
-80104abf:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80104cb8:	53                   	push   %ebx
+80104cb9:	83 ec 34             	sub    $0x34,%esp
+80104cbc:	89 4d d0             	mov    %ecx,-0x30(%ebp)
+80104cbf:	8b 4d 08             	mov    0x8(%ebp),%ecx
   if((dp = nameiparent(path, name)) == 0)
-80104ac2:	57                   	push   %edi
-80104ac3:	50                   	push   %eax
+80104cc2:	57                   	push   %edi
+80104cc3:	50                   	push   %eax
 {
-80104ac4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-80104ac7:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+80104cc4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+80104cc7:	89 4d cc             	mov    %ecx,-0x34(%ebp)
   if((dp = nameiparent(path, name)) == 0)
-80104aca:	e8 81 d5 ff ff       	call   80102050 <nameiparent>
-80104acf:	83 c4 10             	add    $0x10,%esp
-80104ad2:	85 c0                	test   %eax,%eax
-80104ad4:	0f 84 46 01 00 00    	je     80104c20 <create+0x170>
+80104cca:	e8 81 d3 ff ff       	call   80102050 <nameiparent>
+80104ccf:	83 c4 10             	add    $0x10,%esp
+80104cd2:	85 c0                	test   %eax,%eax
+80104cd4:	0f 84 46 01 00 00    	je     80104e20 <create+0x170>
     return 0;
   ilock(dp);
-80104ada:	83 ec 0c             	sub    $0xc,%esp
-80104add:	89 c3                	mov    %eax,%ebx
-80104adf:	50                   	push   %eax
-80104ae0:	e8 7b cc ff ff       	call   80101760 <ilock>
+80104cda:	83 ec 0c             	sub    $0xc,%esp
+80104cdd:	89 c3                	mov    %eax,%ebx
+80104cdf:	50                   	push   %eax
+80104ce0:	e8 7b ca ff ff       	call   80101760 <ilock>
 
   if((ip = dirlookup(dp, name, 0)) != 0){
-80104ae5:	83 c4 0c             	add    $0xc,%esp
-80104ae8:	6a 00                	push   $0x0
-80104aea:	57                   	push   %edi
-80104aeb:	53                   	push   %ebx
-80104aec:	e8 bf d1 ff ff       	call   80101cb0 <dirlookup>
-80104af1:	83 c4 10             	add    $0x10,%esp
-80104af4:	89 c6                	mov    %eax,%esi
-80104af6:	85 c0                	test   %eax,%eax
-80104af8:	74 56                	je     80104b50 <create+0xa0>
+80104ce5:	83 c4 0c             	add    $0xc,%esp
+80104ce8:	6a 00                	push   $0x0
+80104cea:	57                   	push   %edi
+80104ceb:	53                   	push   %ebx
+80104cec:	e8 bf cf ff ff       	call   80101cb0 <dirlookup>
+80104cf1:	83 c4 10             	add    $0x10,%esp
+80104cf4:	89 c6                	mov    %eax,%esi
+80104cf6:	85 c0                	test   %eax,%eax
+80104cf8:	74 56                	je     80104d50 <create+0xa0>
     iunlockput(dp);
-80104afa:	83 ec 0c             	sub    $0xc,%esp
-80104afd:	53                   	push   %ebx
-80104afe:	e8 fd ce ff ff       	call   80101a00 <iunlockput>
+80104cfa:	83 ec 0c             	sub    $0xc,%esp
+80104cfd:	53                   	push   %ebx
+80104cfe:	e8 fd cc ff ff       	call   80101a00 <iunlockput>
     ilock(ip);
-80104b03:	89 34 24             	mov    %esi,(%esp)
-80104b06:	e8 55 cc ff ff       	call   80101760 <ilock>
+80104d03:	89 34 24             	mov    %esi,(%esp)
+80104d06:	e8 55 ca ff ff       	call   80101760 <ilock>
     if(type == T_FILE && ip->type == T_FILE)
-80104b0b:	83 c4 10             	add    $0x10,%esp
-80104b0e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
-80104b13:	75 1b                	jne    80104b30 <create+0x80>
-80104b15:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
-80104b1a:	75 14                	jne    80104b30 <create+0x80>
+80104d0b:	83 c4 10             	add    $0x10,%esp
+80104d0e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
+80104d13:	75 1b                	jne    80104d30 <create+0x80>
+80104d15:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
+80104d1a:	75 14                	jne    80104d30 <create+0x80>
     panic("create: dirlink");
 
   iunlockput(dp);
 
   return ip;
 }
-80104b1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104b1f:	89 f0                	mov    %esi,%eax
-80104b21:	5b                   	pop    %ebx
-80104b22:	5e                   	pop    %esi
-80104b23:	5f                   	pop    %edi
-80104b24:	5d                   	pop    %ebp
-80104b25:	c3                   	ret    
-80104b26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104b2d:	8d 76 00             	lea    0x0(%esi),%esi
+80104d1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104d1f:	89 f0                	mov    %esi,%eax
+80104d21:	5b                   	pop    %ebx
+80104d22:	5e                   	pop    %esi
+80104d23:	5f                   	pop    %edi
+80104d24:	5d                   	pop    %ebp
+80104d25:	c3                   	ret    
+80104d26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104d2d:	8d 76 00             	lea    0x0(%esi),%esi
     iunlockput(ip);
-80104b30:	83 ec 0c             	sub    $0xc,%esp
-80104b33:	56                   	push   %esi
+80104d30:	83 ec 0c             	sub    $0xc,%esp
+80104d33:	56                   	push   %esi
     return 0;
-80104b34:	31 f6                	xor    %esi,%esi
+80104d34:	31 f6                	xor    %esi,%esi
     iunlockput(ip);
-80104b36:	e8 c5 ce ff ff       	call   80101a00 <iunlockput>
+80104d36:	e8 c5 cc ff ff       	call   80101a00 <iunlockput>
     return 0;
-80104b3b:	83 c4 10             	add    $0x10,%esp
+80104d3b:	83 c4 10             	add    $0x10,%esp
 }
-80104b3e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104b41:	89 f0                	mov    %esi,%eax
-80104b43:	5b                   	pop    %ebx
-80104b44:	5e                   	pop    %esi
-80104b45:	5f                   	pop    %edi
-80104b46:	5d                   	pop    %ebp
-80104b47:	c3                   	ret    
-80104b48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104b4f:	90                   	nop
+80104d3e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104d41:	89 f0                	mov    %esi,%eax
+80104d43:	5b                   	pop    %ebx
+80104d44:	5e                   	pop    %esi
+80104d45:	5f                   	pop    %edi
+80104d46:	5d                   	pop    %ebp
+80104d47:	c3                   	ret    
+80104d48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104d4f:	90                   	nop
   if((ip = ialloc(dp->dev, type)) == 0)
-80104b50:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
-80104b54:	83 ec 08             	sub    $0x8,%esp
-80104b57:	50                   	push   %eax
-80104b58:	ff 33                	pushl  (%ebx)
-80104b5a:	e8 81 ca ff ff       	call   801015e0 <ialloc>
-80104b5f:	83 c4 10             	add    $0x10,%esp
-80104b62:	89 c6                	mov    %eax,%esi
-80104b64:	85 c0                	test   %eax,%eax
-80104b66:	0f 84 cd 00 00 00    	je     80104c39 <create+0x189>
+80104d50:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
+80104d54:	83 ec 08             	sub    $0x8,%esp
+80104d57:	50                   	push   %eax
+80104d58:	ff 33                	pushl  (%ebx)
+80104d5a:	e8 81 c8 ff ff       	call   801015e0 <ialloc>
+80104d5f:	83 c4 10             	add    $0x10,%esp
+80104d62:	89 c6                	mov    %eax,%esi
+80104d64:	85 c0                	test   %eax,%eax
+80104d66:	0f 84 cd 00 00 00    	je     80104e39 <create+0x189>
   ilock(ip);
-80104b6c:	83 ec 0c             	sub    $0xc,%esp
-80104b6f:	50                   	push   %eax
-80104b70:	e8 eb cb ff ff       	call   80101760 <ilock>
+80104d6c:	83 ec 0c             	sub    $0xc,%esp
+80104d6f:	50                   	push   %eax
+80104d70:	e8 eb c9 ff ff       	call   80101760 <ilock>
   ip->major = major;
-80104b75:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
-80104b79:	66 89 46 52          	mov    %ax,0x52(%esi)
+80104d75:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
+80104d79:	66 89 46 52          	mov    %ax,0x52(%esi)
   ip->minor = minor;
-80104b7d:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
-80104b81:	66 89 46 54          	mov    %ax,0x54(%esi)
+80104d7d:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
+80104d81:	66 89 46 54          	mov    %ax,0x54(%esi)
   ip->nlink = 1;
-80104b85:	b8 01 00 00 00       	mov    $0x1,%eax
-80104b8a:	66 89 46 56          	mov    %ax,0x56(%esi)
+80104d85:	b8 01 00 00 00       	mov    $0x1,%eax
+80104d8a:	66 89 46 56          	mov    %ax,0x56(%esi)
   iupdate(ip);
-80104b8e:	89 34 24             	mov    %esi,(%esp)
-80104b91:	e8 0a cb ff ff       	call   801016a0 <iupdate>
+80104d8e:	89 34 24             	mov    %esi,(%esp)
+80104d91:	e8 0a c9 ff ff       	call   801016a0 <iupdate>
   if(type == T_DIR){  // Create . and .. entries.
-80104b96:	83 c4 10             	add    $0x10,%esp
-80104b99:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
-80104b9e:	74 30                	je     80104bd0 <create+0x120>
+80104d96:	83 c4 10             	add    $0x10,%esp
+80104d99:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
+80104d9e:	74 30                	je     80104dd0 <create+0x120>
   if(dirlink(dp, name, ip->inum) < 0)
-80104ba0:	83 ec 04             	sub    $0x4,%esp
-80104ba3:	ff 76 04             	pushl  0x4(%esi)
-80104ba6:	57                   	push   %edi
-80104ba7:	53                   	push   %ebx
-80104ba8:	e8 c3 d3 ff ff       	call   80101f70 <dirlink>
-80104bad:	83 c4 10             	add    $0x10,%esp
-80104bb0:	85 c0                	test   %eax,%eax
-80104bb2:	78 78                	js     80104c2c <create+0x17c>
+80104da0:	83 ec 04             	sub    $0x4,%esp
+80104da3:	ff 76 04             	pushl  0x4(%esi)
+80104da6:	57                   	push   %edi
+80104da7:	53                   	push   %ebx
+80104da8:	e8 c3 d1 ff ff       	call   80101f70 <dirlink>
+80104dad:	83 c4 10             	add    $0x10,%esp
+80104db0:	85 c0                	test   %eax,%eax
+80104db2:	78 78                	js     80104e2c <create+0x17c>
   iunlockput(dp);
-80104bb4:	83 ec 0c             	sub    $0xc,%esp
-80104bb7:	53                   	push   %ebx
-80104bb8:	e8 43 ce ff ff       	call   80101a00 <iunlockput>
+80104db4:	83 ec 0c             	sub    $0xc,%esp
+80104db7:	53                   	push   %ebx
+80104db8:	e8 43 cc ff ff       	call   80101a00 <iunlockput>
   return ip;
-80104bbd:	83 c4 10             	add    $0x10,%esp
+80104dbd:	83 c4 10             	add    $0x10,%esp
 }
-80104bc0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104bc3:	89 f0                	mov    %esi,%eax
-80104bc5:	5b                   	pop    %ebx
-80104bc6:	5e                   	pop    %esi
-80104bc7:	5f                   	pop    %edi
-80104bc8:	5d                   	pop    %ebp
-80104bc9:	c3                   	ret    
-80104bca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104dc0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104dc3:	89 f0                	mov    %esi,%eax
+80104dc5:	5b                   	pop    %ebx
+80104dc6:	5e                   	pop    %esi
+80104dc7:	5f                   	pop    %edi
+80104dc8:	5d                   	pop    %ebp
+80104dc9:	c3                   	ret    
+80104dca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     iupdate(dp);
-80104bd0:	83 ec 0c             	sub    $0xc,%esp
+80104dd0:	83 ec 0c             	sub    $0xc,%esp
     dp->nlink++;  // for ".."
-80104bd3:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+80104dd3:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
     iupdate(dp);
-80104bd8:	53                   	push   %ebx
-80104bd9:	e8 c2 ca ff ff       	call   801016a0 <iupdate>
+80104dd8:	53                   	push   %ebx
+80104dd9:	e8 c2 c8 ff ff       	call   801016a0 <iupdate>
     if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
-80104bde:	83 c4 0c             	add    $0xc,%esp
-80104be1:	ff 76 04             	pushl  0x4(%esi)
-80104be4:	68 14 78 10 80       	push   $0x80107814
-80104be9:	56                   	push   %esi
-80104bea:	e8 81 d3 ff ff       	call   80101f70 <dirlink>
-80104bef:	83 c4 10             	add    $0x10,%esp
-80104bf2:	85 c0                	test   %eax,%eax
-80104bf4:	78 18                	js     80104c0e <create+0x15e>
-80104bf6:	83 ec 04             	sub    $0x4,%esp
-80104bf9:	ff 73 04             	pushl  0x4(%ebx)
-80104bfc:	68 13 78 10 80       	push   $0x80107813
-80104c01:	56                   	push   %esi
-80104c02:	e8 69 d3 ff ff       	call   80101f70 <dirlink>
-80104c07:	83 c4 10             	add    $0x10,%esp
-80104c0a:	85 c0                	test   %eax,%eax
-80104c0c:	79 92                	jns    80104ba0 <create+0xf0>
+80104dde:	83 c4 0c             	add    $0xc,%esp
+80104de1:	ff 76 04             	pushl  0x4(%esi)
+80104de4:	68 a8 7a 10 80       	push   $0x80107aa8
+80104de9:	56                   	push   %esi
+80104dea:	e8 81 d1 ff ff       	call   80101f70 <dirlink>
+80104def:	83 c4 10             	add    $0x10,%esp
+80104df2:	85 c0                	test   %eax,%eax
+80104df4:	78 18                	js     80104e0e <create+0x15e>
+80104df6:	83 ec 04             	sub    $0x4,%esp
+80104df9:	ff 73 04             	pushl  0x4(%ebx)
+80104dfc:	68 a7 7a 10 80       	push   $0x80107aa7
+80104e01:	56                   	push   %esi
+80104e02:	e8 69 d1 ff ff       	call   80101f70 <dirlink>
+80104e07:	83 c4 10             	add    $0x10,%esp
+80104e0a:	85 c0                	test   %eax,%eax
+80104e0c:	79 92                	jns    80104da0 <create+0xf0>
       panic("create dots");
-80104c0e:	83 ec 0c             	sub    $0xc,%esp
-80104c11:	68 07 78 10 80       	push   $0x80107807
-80104c16:	e8 75 b7 ff ff       	call   80100390 <panic>
-80104c1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104c1f:	90                   	nop
+80104e0e:	83 ec 0c             	sub    $0xc,%esp
+80104e11:	68 9b 7a 10 80       	push   $0x80107a9b
+80104e16:	e8 75 b5 ff ff       	call   80100390 <panic>
+80104e1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104e1f:	90                   	nop
 }
-80104c20:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104e20:	8d 65 f4             	lea    -0xc(%ebp),%esp
     return 0;
-80104c23:	31 f6                	xor    %esi,%esi
+80104e23:	31 f6                	xor    %esi,%esi
 }
-80104c25:	5b                   	pop    %ebx
-80104c26:	89 f0                	mov    %esi,%eax
-80104c28:	5e                   	pop    %esi
-80104c29:	5f                   	pop    %edi
-80104c2a:	5d                   	pop    %ebp
-80104c2b:	c3                   	ret    
+80104e25:	5b                   	pop    %ebx
+80104e26:	89 f0                	mov    %esi,%eax
+80104e28:	5e                   	pop    %esi
+80104e29:	5f                   	pop    %edi
+80104e2a:	5d                   	pop    %ebp
+80104e2b:	c3                   	ret    
     panic("create: dirlink");
-80104c2c:	83 ec 0c             	sub    $0xc,%esp
-80104c2f:	68 16 78 10 80       	push   $0x80107816
-80104c34:	e8 57 b7 ff ff       	call   80100390 <panic>
+80104e2c:	83 ec 0c             	sub    $0xc,%esp
+80104e2f:	68 aa 7a 10 80       	push   $0x80107aaa
+80104e34:	e8 57 b5 ff ff       	call   80100390 <panic>
     panic("create: ialloc");
-80104c39:	83 ec 0c             	sub    $0xc,%esp
-80104c3c:	68 f8 77 10 80       	push   $0x801077f8
-80104c41:	e8 4a b7 ff ff       	call   80100390 <panic>
-80104c46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104c4d:	8d 76 00             	lea    0x0(%esi),%esi
+80104e39:	83 ec 0c             	sub    $0xc,%esp
+80104e3c:	68 8c 7a 10 80       	push   $0x80107a8c
+80104e41:	e8 4a b5 ff ff       	call   80100390 <panic>
+80104e46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104e4d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104c50 <argfd.constprop.0>:
+80104e50 <argfd.constprop.0>:
 argfd(int n, int *pfd, struct file **pf)
-80104c50:	55                   	push   %ebp
-80104c51:	89 e5                	mov    %esp,%ebp
-80104c53:	56                   	push   %esi
-80104c54:	89 d6                	mov    %edx,%esi
-80104c56:	53                   	push   %ebx
-80104c57:	89 c3                	mov    %eax,%ebx
+80104e50:	55                   	push   %ebp
+80104e51:	89 e5                	mov    %esp,%ebp
+80104e53:	56                   	push   %esi
+80104e54:	89 d6                	mov    %edx,%esi
+80104e56:	53                   	push   %ebx
+80104e57:	89 c3                	mov    %eax,%ebx
   if(argint(n, &fd) < 0)
-80104c59:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104e59:	8d 45 f4             	lea    -0xc(%ebp),%eax
 argfd(int n, int *pfd, struct file **pf)
-80104c5c:	83 ec 18             	sub    $0x18,%esp
+80104e5c:	83 ec 18             	sub    $0x18,%esp
   if(argint(n, &fd) < 0)
-80104c5f:	50                   	push   %eax
-80104c60:	6a 00                	push   $0x0
-80104c62:	e8 e9 fc ff ff       	call   80104950 <argint>
-80104c67:	83 c4 10             	add    $0x10,%esp
-80104c6a:	85 c0                	test   %eax,%eax
-80104c6c:	78 2a                	js     80104c98 <argfd.constprop.0+0x48>
+80104e5f:	50                   	push   %eax
+80104e60:	6a 00                	push   $0x0
+80104e62:	e8 e9 fc ff ff       	call   80104b50 <argint>
+80104e67:	83 c4 10             	add    $0x10,%esp
+80104e6a:	85 c0                	test   %eax,%eax
+80104e6c:	78 2a                	js     80104e98 <argfd.constprop.0+0x48>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104c6e:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104c72:	77 24                	ja     80104c98 <argfd.constprop.0+0x48>
-80104c74:	e8 e7 ec ff ff       	call   80103960 <myproc>
-80104c79:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104c7c:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
-80104c80:	85 c0                	test   %eax,%eax
-80104c82:	74 14                	je     80104c98 <argfd.constprop.0+0x48>
+80104e6e:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80104e72:	77 24                	ja     80104e98 <argfd.constprop.0+0x48>
+80104e74:	e8 07 eb ff ff       	call   80103980 <myproc>
+80104e79:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80104e7c:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
+80104e80:	85 c0                	test   %eax,%eax
+80104e82:	74 14                	je     80104e98 <argfd.constprop.0+0x48>
   if(pfd)
-80104c84:	85 db                	test   %ebx,%ebx
-80104c86:	74 02                	je     80104c8a <argfd.constprop.0+0x3a>
+80104e84:	85 db                	test   %ebx,%ebx
+80104e86:	74 02                	je     80104e8a <argfd.constprop.0+0x3a>
     *pfd = fd;
-80104c88:	89 13                	mov    %edx,(%ebx)
+80104e88:	89 13                	mov    %edx,(%ebx)
     *pf = f;
-80104c8a:	89 06                	mov    %eax,(%esi)
+80104e8a:	89 06                	mov    %eax,(%esi)
   return 0;
-80104c8c:	31 c0                	xor    %eax,%eax
+80104e8c:	31 c0                	xor    %eax,%eax
 }
-80104c8e:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104c91:	5b                   	pop    %ebx
-80104c92:	5e                   	pop    %esi
-80104c93:	5d                   	pop    %ebp
-80104c94:	c3                   	ret    
-80104c95:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-80104c98:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104c9d:	eb ef                	jmp    80104c8e <argfd.constprop.0+0x3e>
-80104c9f:	90                   	nop
+80104e8e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104e91:	5b                   	pop    %ebx
+80104e92:	5e                   	pop    %esi
+80104e93:	5d                   	pop    %ebp
+80104e94:	c3                   	ret    
+80104e95:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80104e98:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104e9d:	eb ef                	jmp    80104e8e <argfd.constprop.0+0x3e>
+80104e9f:	90                   	nop
 
-80104ca0 <sys_dup>:
+80104ea0 <sys_dup>:
 {
-80104ca0:	f3 0f 1e fb          	endbr32 
-80104ca4:	55                   	push   %ebp
+80104ea0:	f3 0f 1e fb          	endbr32 
+80104ea4:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0)
-80104ca5:	31 c0                	xor    %eax,%eax
+80104ea5:	31 c0                	xor    %eax,%eax
 {
-80104ca7:	89 e5                	mov    %esp,%ebp
-80104ca9:	56                   	push   %esi
-80104caa:	53                   	push   %ebx
+80104ea7:	89 e5                	mov    %esp,%ebp
+80104ea9:	56                   	push   %esi
+80104eaa:	53                   	push   %ebx
   if(argfd(0, 0, &f) < 0)
-80104cab:	8d 55 f4             	lea    -0xc(%ebp),%edx
+80104eab:	8d 55 f4             	lea    -0xc(%ebp),%edx
 {
-80104cae:	83 ec 10             	sub    $0x10,%esp
+80104eae:	83 ec 10             	sub    $0x10,%esp
   if(argfd(0, 0, &f) < 0)
-80104cb1:	e8 9a ff ff ff       	call   80104c50 <argfd.constprop.0>
-80104cb6:	85 c0                	test   %eax,%eax
-80104cb8:	78 1e                	js     80104cd8 <sys_dup+0x38>
+80104eb1:	e8 9a ff ff ff       	call   80104e50 <argfd.constprop.0>
+80104eb6:	85 c0                	test   %eax,%eax
+80104eb8:	78 1e                	js     80104ed8 <sys_dup+0x38>
   if((fd=fdalloc(f)) < 0)
-80104cba:	8b 75 f4             	mov    -0xc(%ebp),%esi
+80104eba:	8b 75 f4             	mov    -0xc(%ebp),%esi
   for(fd = 0; fd < NOFILE; fd++){
-80104cbd:	31 db                	xor    %ebx,%ebx
+80104ebd:	31 db                	xor    %ebx,%ebx
   struct proc *curproc = myproc();
-80104cbf:	e8 9c ec ff ff       	call   80103960 <myproc>
+80104ebf:	e8 bc ea ff ff       	call   80103980 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-80104cc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104ec4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[fd] == 0){
-80104cc8:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-80104ccc:	85 d2                	test   %edx,%edx
-80104cce:	74 20                	je     80104cf0 <sys_dup+0x50>
+80104ec8:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+80104ecc:	85 d2                	test   %edx,%edx
+80104ece:	74 20                	je     80104ef0 <sys_dup+0x50>
   for(fd = 0; fd < NOFILE; fd++){
-80104cd0:	83 c3 01             	add    $0x1,%ebx
-80104cd3:	83 fb 10             	cmp    $0x10,%ebx
-80104cd6:	75 f0                	jne    80104cc8 <sys_dup+0x28>
-}
-80104cd8:	8d 65 f8             	lea    -0x8(%ebp),%esp
-    return -1;
-80104cdb:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-}
-80104ce0:	89 d8                	mov    %ebx,%eax
-80104ce2:	5b                   	pop    %ebx
-80104ce3:	5e                   	pop    %esi
-80104ce4:	5d                   	pop    %ebp
-80104ce5:	c3                   	ret    
-80104ce6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104ced:	8d 76 00             	lea    0x0(%esi),%esi
+80104ed0:	83 c3 01             	add    $0x1,%ebx
+80104ed3:	83 fb 10             	cmp    $0x10,%ebx
+80104ed6:	75 f0                	jne    80104ec8 <sys_dup+0x28>
+}
+80104ed8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    return -1;
+80104edb:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+}
+80104ee0:	89 d8                	mov    %ebx,%eax
+80104ee2:	5b                   	pop    %ebx
+80104ee3:	5e                   	pop    %esi
+80104ee4:	5d                   	pop    %ebp
+80104ee5:	c3                   	ret    
+80104ee6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104eed:	8d 76 00             	lea    0x0(%esi),%esi
       curproc->ofile[fd] = f;
-80104cf0:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
+80104ef0:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
   filedup(f);
-80104cf4:	83 ec 0c             	sub    $0xc,%esp
-80104cf7:	ff 75 f4             	pushl  -0xc(%ebp)
-80104cfa:	e8 71 c1 ff ff       	call   80100e70 <filedup>
+80104ef4:	83 ec 0c             	sub    $0xc,%esp
+80104ef7:	ff 75 f4             	pushl  -0xc(%ebp)
+80104efa:	e8 71 bf ff ff       	call   80100e70 <filedup>
   return fd;
-80104cff:	83 c4 10             	add    $0x10,%esp
+80104eff:	83 c4 10             	add    $0x10,%esp
 }
-80104d02:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104d05:	89 d8                	mov    %ebx,%eax
-80104d07:	5b                   	pop    %ebx
-80104d08:	5e                   	pop    %esi
-80104d09:	5d                   	pop    %ebp
-80104d0a:	c3                   	ret    
-80104d0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104d0f:	90                   	nop
+80104f02:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104f05:	89 d8                	mov    %ebx,%eax
+80104f07:	5b                   	pop    %ebx
+80104f08:	5e                   	pop    %esi
+80104f09:	5d                   	pop    %ebp
+80104f0a:	c3                   	ret    
+80104f0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104f0f:	90                   	nop
 
-80104d10 <sys_read>:
+80104f10 <sys_read>:
 {
-80104d10:	f3 0f 1e fb          	endbr32 
-80104d14:	55                   	push   %ebp
+80104f10:	f3 0f 1e fb          	endbr32 
+80104f14:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104d15:	31 c0                	xor    %eax,%eax
+80104f15:	31 c0                	xor    %eax,%eax
 {
-80104d17:	89 e5                	mov    %esp,%ebp
-80104d19:	83 ec 18             	sub    $0x18,%esp
+80104f17:	89 e5                	mov    %esp,%ebp
+80104f19:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104d1c:	8d 55 ec             	lea    -0x14(%ebp),%edx
-80104d1f:	e8 2c ff ff ff       	call   80104c50 <argfd.constprop.0>
-80104d24:	85 c0                	test   %eax,%eax
-80104d26:	78 48                	js     80104d70 <sys_read+0x60>
-80104d28:	83 ec 08             	sub    $0x8,%esp
-80104d2b:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104d2e:	50                   	push   %eax
-80104d2f:	6a 02                	push   $0x2
-80104d31:	e8 1a fc ff ff       	call   80104950 <argint>
-80104d36:	83 c4 10             	add    $0x10,%esp
-80104d39:	85 c0                	test   %eax,%eax
-80104d3b:	78 33                	js     80104d70 <sys_read+0x60>
-80104d3d:	83 ec 04             	sub    $0x4,%esp
-80104d40:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104d43:	ff 75 f0             	pushl  -0x10(%ebp)
-80104d46:	50                   	push   %eax
-80104d47:	6a 01                	push   $0x1
-80104d49:	e8 52 fc ff ff       	call   801049a0 <argptr>
-80104d4e:	83 c4 10             	add    $0x10,%esp
-80104d51:	85 c0                	test   %eax,%eax
-80104d53:	78 1b                	js     80104d70 <sys_read+0x60>
+80104f1c:	8d 55 ec             	lea    -0x14(%ebp),%edx
+80104f1f:	e8 2c ff ff ff       	call   80104e50 <argfd.constprop.0>
+80104f24:	85 c0                	test   %eax,%eax
+80104f26:	78 48                	js     80104f70 <sys_read+0x60>
+80104f28:	83 ec 08             	sub    $0x8,%esp
+80104f2b:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80104f2e:	50                   	push   %eax
+80104f2f:	6a 02                	push   $0x2
+80104f31:	e8 1a fc ff ff       	call   80104b50 <argint>
+80104f36:	83 c4 10             	add    $0x10,%esp
+80104f39:	85 c0                	test   %eax,%eax
+80104f3b:	78 33                	js     80104f70 <sys_read+0x60>
+80104f3d:	83 ec 04             	sub    $0x4,%esp
+80104f40:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104f43:	ff 75 f0             	pushl  -0x10(%ebp)
+80104f46:	50                   	push   %eax
+80104f47:	6a 01                	push   $0x1
+80104f49:	e8 52 fc ff ff       	call   80104ba0 <argptr>
+80104f4e:	83 c4 10             	add    $0x10,%esp
+80104f51:	85 c0                	test   %eax,%eax
+80104f53:	78 1b                	js     80104f70 <sys_read+0x60>
   return fileread(f, p, n);
-80104d55:	83 ec 04             	sub    $0x4,%esp
-80104d58:	ff 75 f0             	pushl  -0x10(%ebp)
-80104d5b:	ff 75 f4             	pushl  -0xc(%ebp)
-80104d5e:	ff 75 ec             	pushl  -0x14(%ebp)
-80104d61:	e8 8a c2 ff ff       	call   80100ff0 <fileread>
-80104d66:	83 c4 10             	add    $0x10,%esp
-}
-80104d69:	c9                   	leave  
-80104d6a:	c3                   	ret    
-80104d6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104d6f:	90                   	nop
-80104d70:	c9                   	leave  
-    return -1;
-80104d71:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104d76:	c3                   	ret    
-80104d77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104d7e:	66 90                	xchg   %ax,%ax
+80104f55:	83 ec 04             	sub    $0x4,%esp
+80104f58:	ff 75 f0             	pushl  -0x10(%ebp)
+80104f5b:	ff 75 f4             	pushl  -0xc(%ebp)
+80104f5e:	ff 75 ec             	pushl  -0x14(%ebp)
+80104f61:	e8 8a c0 ff ff       	call   80100ff0 <fileread>
+80104f66:	83 c4 10             	add    $0x10,%esp
+}
+80104f69:	c9                   	leave  
+80104f6a:	c3                   	ret    
+80104f6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104f6f:	90                   	nop
+80104f70:	c9                   	leave  
+    return -1;
+80104f71:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104f76:	c3                   	ret    
+80104f77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104f7e:	66 90                	xchg   %ax,%ax
 
-80104d80 <sys_write>:
+80104f80 <sys_write>:
 {
-80104d80:	f3 0f 1e fb          	endbr32 
-80104d84:	55                   	push   %ebp
+80104f80:	f3 0f 1e fb          	endbr32 
+80104f84:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104d85:	31 c0                	xor    %eax,%eax
+80104f85:	31 c0                	xor    %eax,%eax
 {
-80104d87:	89 e5                	mov    %esp,%ebp
-80104d89:	83 ec 18             	sub    $0x18,%esp
+80104f87:	89 e5                	mov    %esp,%ebp
+80104f89:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104d8c:	8d 55 ec             	lea    -0x14(%ebp),%edx
-80104d8f:	e8 bc fe ff ff       	call   80104c50 <argfd.constprop.0>
-80104d94:	85 c0                	test   %eax,%eax
-80104d96:	78 48                	js     80104de0 <sys_write+0x60>
-80104d98:	83 ec 08             	sub    $0x8,%esp
-80104d9b:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104d9e:	50                   	push   %eax
-80104d9f:	6a 02                	push   $0x2
-80104da1:	e8 aa fb ff ff       	call   80104950 <argint>
-80104da6:	83 c4 10             	add    $0x10,%esp
-80104da9:	85 c0                	test   %eax,%eax
-80104dab:	78 33                	js     80104de0 <sys_write+0x60>
-80104dad:	83 ec 04             	sub    $0x4,%esp
-80104db0:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104db3:	ff 75 f0             	pushl  -0x10(%ebp)
-80104db6:	50                   	push   %eax
-80104db7:	6a 01                	push   $0x1
-80104db9:	e8 e2 fb ff ff       	call   801049a0 <argptr>
-80104dbe:	83 c4 10             	add    $0x10,%esp
-80104dc1:	85 c0                	test   %eax,%eax
-80104dc3:	78 1b                	js     80104de0 <sys_write+0x60>
+80104f8c:	8d 55 ec             	lea    -0x14(%ebp),%edx
+80104f8f:	e8 bc fe ff ff       	call   80104e50 <argfd.constprop.0>
+80104f94:	85 c0                	test   %eax,%eax
+80104f96:	78 48                	js     80104fe0 <sys_write+0x60>
+80104f98:	83 ec 08             	sub    $0x8,%esp
+80104f9b:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80104f9e:	50                   	push   %eax
+80104f9f:	6a 02                	push   $0x2
+80104fa1:	e8 aa fb ff ff       	call   80104b50 <argint>
+80104fa6:	83 c4 10             	add    $0x10,%esp
+80104fa9:	85 c0                	test   %eax,%eax
+80104fab:	78 33                	js     80104fe0 <sys_write+0x60>
+80104fad:	83 ec 04             	sub    $0x4,%esp
+80104fb0:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104fb3:	ff 75 f0             	pushl  -0x10(%ebp)
+80104fb6:	50                   	push   %eax
+80104fb7:	6a 01                	push   $0x1
+80104fb9:	e8 e2 fb ff ff       	call   80104ba0 <argptr>
+80104fbe:	83 c4 10             	add    $0x10,%esp
+80104fc1:	85 c0                	test   %eax,%eax
+80104fc3:	78 1b                	js     80104fe0 <sys_write+0x60>
   return filewrite(f, p, n);
-80104dc5:	83 ec 04             	sub    $0x4,%esp
-80104dc8:	ff 75 f0             	pushl  -0x10(%ebp)
-80104dcb:	ff 75 f4             	pushl  -0xc(%ebp)
-80104dce:	ff 75 ec             	pushl  -0x14(%ebp)
-80104dd1:	e8 ba c2 ff ff       	call   80101090 <filewrite>
-80104dd6:	83 c4 10             	add    $0x10,%esp
-}
-80104dd9:	c9                   	leave  
-80104dda:	c3                   	ret    
-80104ddb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104ddf:	90                   	nop
-80104de0:	c9                   	leave  
-    return -1;
-80104de1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104de6:	c3                   	ret    
-80104de7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104dee:	66 90                	xchg   %ax,%ax
-
-80104df0 <sys_close>:
-{
-80104df0:	f3 0f 1e fb          	endbr32 
-80104df4:	55                   	push   %ebp
-80104df5:	89 e5                	mov    %esp,%ebp
-80104df7:	83 ec 18             	sub    $0x18,%esp
+80104fc5:	83 ec 04             	sub    $0x4,%esp
+80104fc8:	ff 75 f0             	pushl  -0x10(%ebp)
+80104fcb:	ff 75 f4             	pushl  -0xc(%ebp)
+80104fce:	ff 75 ec             	pushl  -0x14(%ebp)
+80104fd1:	e8 ba c0 ff ff       	call   80101090 <filewrite>
+80104fd6:	83 c4 10             	add    $0x10,%esp
+}
+80104fd9:	c9                   	leave  
+80104fda:	c3                   	ret    
+80104fdb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104fdf:	90                   	nop
+80104fe0:	c9                   	leave  
+    return -1;
+80104fe1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104fe6:	c3                   	ret    
+80104fe7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104fee:	66 90                	xchg   %ax,%ax
+
+80104ff0 <sys_close>:
+{
+80104ff0:	f3 0f 1e fb          	endbr32 
+80104ff4:	55                   	push   %ebp
+80104ff5:	89 e5                	mov    %esp,%ebp
+80104ff7:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, &fd, &f) < 0)
-80104dfa:	8d 55 f4             	lea    -0xc(%ebp),%edx
-80104dfd:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104e00:	e8 4b fe ff ff       	call   80104c50 <argfd.constprop.0>
-80104e05:	85 c0                	test   %eax,%eax
-80104e07:	78 27                	js     80104e30 <sys_close+0x40>
+80104ffa:	8d 55 f4             	lea    -0xc(%ebp),%edx
+80104ffd:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105000:	e8 4b fe ff ff       	call   80104e50 <argfd.constprop.0>
+80105005:	85 c0                	test   %eax,%eax
+80105007:	78 27                	js     80105030 <sys_close+0x40>
   myproc()->ofile[fd] = 0;
-80104e09:	e8 52 eb ff ff       	call   80103960 <myproc>
-80104e0e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+80105009:	e8 72 e9 ff ff       	call   80103980 <myproc>
+8010500e:	8b 55 f0             	mov    -0x10(%ebp),%edx
   fileclose(f);
-80104e11:	83 ec 0c             	sub    $0xc,%esp
+80105011:	83 ec 0c             	sub    $0xc,%esp
   myproc()->ofile[fd] = 0;
-80104e14:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
-80104e1b:	00 
+80105014:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
+8010501b:	00 
   fileclose(f);
-80104e1c:	ff 75 f4             	pushl  -0xc(%ebp)
-80104e1f:	e8 9c c0 ff ff       	call   80100ec0 <fileclose>
+8010501c:	ff 75 f4             	pushl  -0xc(%ebp)
+8010501f:	e8 9c be ff ff       	call   80100ec0 <fileclose>
   return 0;
-80104e24:	83 c4 10             	add    $0x10,%esp
-80104e27:	31 c0                	xor    %eax,%eax
+80105024:	83 c4 10             	add    $0x10,%esp
+80105027:	31 c0                	xor    %eax,%eax
 }
-80104e29:	c9                   	leave  
-80104e2a:	c3                   	ret    
-80104e2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104e2f:	90                   	nop
-80104e30:	c9                   	leave  
+80105029:	c9                   	leave  
+8010502a:	c3                   	ret    
+8010502b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010502f:	90                   	nop
+80105030:	c9                   	leave  
     return -1;
-80104e31:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105031:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80104e36:	c3                   	ret    
-80104e37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104e3e:	66 90                	xchg   %ax,%ax
+80105036:	c3                   	ret    
+80105037:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010503e:	66 90                	xchg   %ax,%ax
 
-80104e40 <sys_fstat>:
+80105040 <sys_fstat>:
 {
-80104e40:	f3 0f 1e fb          	endbr32 
-80104e44:	55                   	push   %ebp
+80105040:	f3 0f 1e fb          	endbr32 
+80105044:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-80104e45:	31 c0                	xor    %eax,%eax
+80105045:	31 c0                	xor    %eax,%eax
 {
-80104e47:	89 e5                	mov    %esp,%ebp
-80104e49:	83 ec 18             	sub    $0x18,%esp
+80105047:	89 e5                	mov    %esp,%ebp
+80105049:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-80104e4c:	8d 55 f0             	lea    -0x10(%ebp),%edx
-80104e4f:	e8 fc fd ff ff       	call   80104c50 <argfd.constprop.0>
-80104e54:	85 c0                	test   %eax,%eax
-80104e56:	78 30                	js     80104e88 <sys_fstat+0x48>
-80104e58:	83 ec 04             	sub    $0x4,%esp
-80104e5b:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104e5e:	6a 14                	push   $0x14
-80104e60:	50                   	push   %eax
-80104e61:	6a 01                	push   $0x1
-80104e63:	e8 38 fb ff ff       	call   801049a0 <argptr>
-80104e68:	83 c4 10             	add    $0x10,%esp
-80104e6b:	85 c0                	test   %eax,%eax
-80104e6d:	78 19                	js     80104e88 <sys_fstat+0x48>
+8010504c:	8d 55 f0             	lea    -0x10(%ebp),%edx
+8010504f:	e8 fc fd ff ff       	call   80104e50 <argfd.constprop.0>
+80105054:	85 c0                	test   %eax,%eax
+80105056:	78 30                	js     80105088 <sys_fstat+0x48>
+80105058:	83 ec 04             	sub    $0x4,%esp
+8010505b:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010505e:	6a 14                	push   $0x14
+80105060:	50                   	push   %eax
+80105061:	6a 01                	push   $0x1
+80105063:	e8 38 fb ff ff       	call   80104ba0 <argptr>
+80105068:	83 c4 10             	add    $0x10,%esp
+8010506b:	85 c0                	test   %eax,%eax
+8010506d:	78 19                	js     80105088 <sys_fstat+0x48>
   return filestat(f, st);
-80104e6f:	83 ec 08             	sub    $0x8,%esp
-80104e72:	ff 75 f4             	pushl  -0xc(%ebp)
-80104e75:	ff 75 f0             	pushl  -0x10(%ebp)
-80104e78:	e8 23 c1 ff ff       	call   80100fa0 <filestat>
-80104e7d:	83 c4 10             	add    $0x10,%esp
-}
-80104e80:	c9                   	leave  
-80104e81:	c3                   	ret    
-80104e82:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104e88:	c9                   	leave  
-    return -1;
-80104e89:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104e8e:	c3                   	ret    
-80104e8f:	90                   	nop
-
-80104e90 <sys_link>:
-{
-80104e90:	f3 0f 1e fb          	endbr32 
-80104e94:	55                   	push   %ebp
-80104e95:	89 e5                	mov    %esp,%ebp
-80104e97:	57                   	push   %edi
-80104e98:	56                   	push   %esi
+8010506f:	83 ec 08             	sub    $0x8,%esp
+80105072:	ff 75 f4             	pushl  -0xc(%ebp)
+80105075:	ff 75 f0             	pushl  -0x10(%ebp)
+80105078:	e8 23 bf ff ff       	call   80100fa0 <filestat>
+8010507d:	83 c4 10             	add    $0x10,%esp
+}
+80105080:	c9                   	leave  
+80105081:	c3                   	ret    
+80105082:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105088:	c9                   	leave  
+    return -1;
+80105089:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+8010508e:	c3                   	ret    
+8010508f:	90                   	nop
+
+80105090 <sys_link>:
+{
+80105090:	f3 0f 1e fb          	endbr32 
+80105094:	55                   	push   %ebp
+80105095:	89 e5                	mov    %esp,%ebp
+80105097:	57                   	push   %edi
+80105098:	56                   	push   %esi
   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-80104e99:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+80105099:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 {
-80104e9c:	53                   	push   %ebx
-80104e9d:	83 ec 34             	sub    $0x34,%esp
+8010509c:	53                   	push   %ebx
+8010509d:	83 ec 34             	sub    $0x34,%esp
   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-80104ea0:	50                   	push   %eax
-80104ea1:	6a 00                	push   $0x0
-80104ea3:	e8 58 fb ff ff       	call   80104a00 <argstr>
-80104ea8:	83 c4 10             	add    $0x10,%esp
-80104eab:	85 c0                	test   %eax,%eax
-80104ead:	0f 88 ff 00 00 00    	js     80104fb2 <sys_link+0x122>
-80104eb3:	83 ec 08             	sub    $0x8,%esp
-80104eb6:	8d 45 d0             	lea    -0x30(%ebp),%eax
-80104eb9:	50                   	push   %eax
-80104eba:	6a 01                	push   $0x1
-80104ebc:	e8 3f fb ff ff       	call   80104a00 <argstr>
-80104ec1:	83 c4 10             	add    $0x10,%esp
-80104ec4:	85 c0                	test   %eax,%eax
-80104ec6:	0f 88 e6 00 00 00    	js     80104fb2 <sys_link+0x122>
+801050a0:	50                   	push   %eax
+801050a1:	6a 00                	push   $0x0
+801050a3:	e8 58 fb ff ff       	call   80104c00 <argstr>
+801050a8:	83 c4 10             	add    $0x10,%esp
+801050ab:	85 c0                	test   %eax,%eax
+801050ad:	0f 88 ff 00 00 00    	js     801051b2 <sys_link+0x122>
+801050b3:	83 ec 08             	sub    $0x8,%esp
+801050b6:	8d 45 d0             	lea    -0x30(%ebp),%eax
+801050b9:	50                   	push   %eax
+801050ba:	6a 01                	push   $0x1
+801050bc:	e8 3f fb ff ff       	call   80104c00 <argstr>
+801050c1:	83 c4 10             	add    $0x10,%esp
+801050c4:	85 c0                	test   %eax,%eax
+801050c6:	0f 88 e6 00 00 00    	js     801051b2 <sys_link+0x122>
   begin_op();
-80104ecc:	e8 5f de ff ff       	call   80102d30 <begin_op>
+801050cc:	e8 5f dc ff ff       	call   80102d30 <begin_op>
   if((ip = namei(old)) == 0){
-80104ed1:	83 ec 0c             	sub    $0xc,%esp
-80104ed4:	ff 75 d4             	pushl  -0x2c(%ebp)
-80104ed7:	e8 54 d1 ff ff       	call   80102030 <namei>
-80104edc:	83 c4 10             	add    $0x10,%esp
-80104edf:	89 c3                	mov    %eax,%ebx
-80104ee1:	85 c0                	test   %eax,%eax
-80104ee3:	0f 84 e8 00 00 00    	je     80104fd1 <sys_link+0x141>
+801050d1:	83 ec 0c             	sub    $0xc,%esp
+801050d4:	ff 75 d4             	pushl  -0x2c(%ebp)
+801050d7:	e8 54 cf ff ff       	call   80102030 <namei>
+801050dc:	83 c4 10             	add    $0x10,%esp
+801050df:	89 c3                	mov    %eax,%ebx
+801050e1:	85 c0                	test   %eax,%eax
+801050e3:	0f 84 e8 00 00 00    	je     801051d1 <sys_link+0x141>
   ilock(ip);
-80104ee9:	83 ec 0c             	sub    $0xc,%esp
-80104eec:	50                   	push   %eax
-80104eed:	e8 6e c8 ff ff       	call   80101760 <ilock>
+801050e9:	83 ec 0c             	sub    $0xc,%esp
+801050ec:	50                   	push   %eax
+801050ed:	e8 6e c6 ff ff       	call   80101760 <ilock>
   if(ip->type == T_DIR){
-80104ef2:	83 c4 10             	add    $0x10,%esp
-80104ef5:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80104efa:	0f 84 b9 00 00 00    	je     80104fb9 <sys_link+0x129>
+801050f2:	83 c4 10             	add    $0x10,%esp
+801050f5:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+801050fa:	0f 84 b9 00 00 00    	je     801051b9 <sys_link+0x129>
   iupdate(ip);
-80104f00:	83 ec 0c             	sub    $0xc,%esp
+80105100:	83 ec 0c             	sub    $0xc,%esp
   ip->nlink++;
-80104f03:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+80105103:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
   if((dp = nameiparent(new, name)) == 0)
-80104f08:	8d 7d da             	lea    -0x26(%ebp),%edi
+80105108:	8d 7d da             	lea    -0x26(%ebp),%edi
   iupdate(ip);
-80104f0b:	53                   	push   %ebx
-80104f0c:	e8 8f c7 ff ff       	call   801016a0 <iupdate>
+8010510b:	53                   	push   %ebx
+8010510c:	e8 8f c5 ff ff       	call   801016a0 <iupdate>
   iunlock(ip);
-80104f11:	89 1c 24             	mov    %ebx,(%esp)
-80104f14:	e8 27 c9 ff ff       	call   80101840 <iunlock>
+80105111:	89 1c 24             	mov    %ebx,(%esp)
+80105114:	e8 27 c7 ff ff       	call   80101840 <iunlock>
   if((dp = nameiparent(new, name)) == 0)
-80104f19:	58                   	pop    %eax
-80104f1a:	5a                   	pop    %edx
-80104f1b:	57                   	push   %edi
-80104f1c:	ff 75 d0             	pushl  -0x30(%ebp)
-80104f1f:	e8 2c d1 ff ff       	call   80102050 <nameiparent>
-80104f24:	83 c4 10             	add    $0x10,%esp
-80104f27:	89 c6                	mov    %eax,%esi
-80104f29:	85 c0                	test   %eax,%eax
-80104f2b:	74 5f                	je     80104f8c <sys_link+0xfc>
+80105119:	58                   	pop    %eax
+8010511a:	5a                   	pop    %edx
+8010511b:	57                   	push   %edi
+8010511c:	ff 75 d0             	pushl  -0x30(%ebp)
+8010511f:	e8 2c cf ff ff       	call   80102050 <nameiparent>
+80105124:	83 c4 10             	add    $0x10,%esp
+80105127:	89 c6                	mov    %eax,%esi
+80105129:	85 c0                	test   %eax,%eax
+8010512b:	74 5f                	je     8010518c <sys_link+0xfc>
   ilock(dp);
-80104f2d:	83 ec 0c             	sub    $0xc,%esp
-80104f30:	50                   	push   %eax
-80104f31:	e8 2a c8 ff ff       	call   80101760 <ilock>
+8010512d:	83 ec 0c             	sub    $0xc,%esp
+80105130:	50                   	push   %eax
+80105131:	e8 2a c6 ff ff       	call   80101760 <ilock>
   if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
-80104f36:	8b 03                	mov    (%ebx),%eax
-80104f38:	83 c4 10             	add    $0x10,%esp
-80104f3b:	39 06                	cmp    %eax,(%esi)
-80104f3d:	75 41                	jne    80104f80 <sys_link+0xf0>
-80104f3f:	83 ec 04             	sub    $0x4,%esp
-80104f42:	ff 73 04             	pushl  0x4(%ebx)
-80104f45:	57                   	push   %edi
-80104f46:	56                   	push   %esi
-80104f47:	e8 24 d0 ff ff       	call   80101f70 <dirlink>
-80104f4c:	83 c4 10             	add    $0x10,%esp
-80104f4f:	85 c0                	test   %eax,%eax
-80104f51:	78 2d                	js     80104f80 <sys_link+0xf0>
+80105136:	8b 03                	mov    (%ebx),%eax
+80105138:	83 c4 10             	add    $0x10,%esp
+8010513b:	39 06                	cmp    %eax,(%esi)
+8010513d:	75 41                	jne    80105180 <sys_link+0xf0>
+8010513f:	83 ec 04             	sub    $0x4,%esp
+80105142:	ff 73 04             	pushl  0x4(%ebx)
+80105145:	57                   	push   %edi
+80105146:	56                   	push   %esi
+80105147:	e8 24 ce ff ff       	call   80101f70 <dirlink>
+8010514c:	83 c4 10             	add    $0x10,%esp
+8010514f:	85 c0                	test   %eax,%eax
+80105151:	78 2d                	js     80105180 <sys_link+0xf0>
   iunlockput(dp);
-80104f53:	83 ec 0c             	sub    $0xc,%esp
-80104f56:	56                   	push   %esi
-80104f57:	e8 a4 ca ff ff       	call   80101a00 <iunlockput>
+80105153:	83 ec 0c             	sub    $0xc,%esp
+80105156:	56                   	push   %esi
+80105157:	e8 a4 c8 ff ff       	call   80101a00 <iunlockput>
   iput(ip);
-80104f5c:	89 1c 24             	mov    %ebx,(%esp)
-80104f5f:	e8 2c c9 ff ff       	call   80101890 <iput>
+8010515c:	89 1c 24             	mov    %ebx,(%esp)
+8010515f:	e8 2c c7 ff ff       	call   80101890 <iput>
   end_op();
-80104f64:	e8 37 de ff ff       	call   80102da0 <end_op>
+80105164:	e8 37 dc ff ff       	call   80102da0 <end_op>
   return 0;
-80104f69:	83 c4 10             	add    $0x10,%esp
-80104f6c:	31 c0                	xor    %eax,%eax
+80105169:	83 c4 10             	add    $0x10,%esp
+8010516c:	31 c0                	xor    %eax,%eax
 }
-80104f6e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104f71:	5b                   	pop    %ebx
-80104f72:	5e                   	pop    %esi
-80104f73:	5f                   	pop    %edi
-80104f74:	5d                   	pop    %ebp
-80104f75:	c3                   	ret    
-80104f76:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104f7d:	8d 76 00             	lea    0x0(%esi),%esi
+8010516e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105171:	5b                   	pop    %ebx
+80105172:	5e                   	pop    %esi
+80105173:	5f                   	pop    %edi
+80105174:	5d                   	pop    %ebp
+80105175:	c3                   	ret    
+80105176:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010517d:	8d 76 00             	lea    0x0(%esi),%esi
     iunlockput(dp);
-80104f80:	83 ec 0c             	sub    $0xc,%esp
-80104f83:	56                   	push   %esi
-80104f84:	e8 77 ca ff ff       	call   80101a00 <iunlockput>
+80105180:	83 ec 0c             	sub    $0xc,%esp
+80105183:	56                   	push   %esi
+80105184:	e8 77 c8 ff ff       	call   80101a00 <iunlockput>
     goto bad;
-80104f89:	83 c4 10             	add    $0x10,%esp
+80105189:	83 c4 10             	add    $0x10,%esp
   ilock(ip);
-80104f8c:	83 ec 0c             	sub    $0xc,%esp
-80104f8f:	53                   	push   %ebx
-80104f90:	e8 cb c7 ff ff       	call   80101760 <ilock>
+8010518c:	83 ec 0c             	sub    $0xc,%esp
+8010518f:	53                   	push   %ebx
+80105190:	e8 cb c5 ff ff       	call   80101760 <ilock>
   ip->nlink--;
-80104f95:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+80105195:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
   iupdate(ip);
-80104f9a:	89 1c 24             	mov    %ebx,(%esp)
-80104f9d:	e8 fe c6 ff ff       	call   801016a0 <iupdate>
+8010519a:	89 1c 24             	mov    %ebx,(%esp)
+8010519d:	e8 fe c4 ff ff       	call   801016a0 <iupdate>
   iunlockput(ip);
-80104fa2:	89 1c 24             	mov    %ebx,(%esp)
-80104fa5:	e8 56 ca ff ff       	call   80101a00 <iunlockput>
+801051a2:	89 1c 24             	mov    %ebx,(%esp)
+801051a5:	e8 56 c8 ff ff       	call   80101a00 <iunlockput>
   end_op();
-80104faa:	e8 f1 dd ff ff       	call   80102da0 <end_op>
+801051aa:	e8 f1 db ff ff       	call   80102da0 <end_op>
   return -1;
-80104faf:	83 c4 10             	add    $0x10,%esp
-80104fb2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104fb7:	eb b5                	jmp    80104f6e <sys_link+0xde>
+801051af:	83 c4 10             	add    $0x10,%esp
+801051b2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801051b7:	eb b5                	jmp    8010516e <sys_link+0xde>
     iunlockput(ip);
-80104fb9:	83 ec 0c             	sub    $0xc,%esp
-80104fbc:	53                   	push   %ebx
-80104fbd:	e8 3e ca ff ff       	call   80101a00 <iunlockput>
+801051b9:	83 ec 0c             	sub    $0xc,%esp
+801051bc:	53                   	push   %ebx
+801051bd:	e8 3e c8 ff ff       	call   80101a00 <iunlockput>
     end_op();
-80104fc2:	e8 d9 dd ff ff       	call   80102da0 <end_op>
+801051c2:	e8 d9 db ff ff       	call   80102da0 <end_op>
     return -1;
-80104fc7:	83 c4 10             	add    $0x10,%esp
-80104fca:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104fcf:	eb 9d                	jmp    80104f6e <sys_link+0xde>
+801051c7:	83 c4 10             	add    $0x10,%esp
+801051ca:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801051cf:	eb 9d                	jmp    8010516e <sys_link+0xde>
     end_op();
-80104fd1:	e8 ca dd ff ff       	call   80102da0 <end_op>
+801051d1:	e8 ca db ff ff       	call   80102da0 <end_op>
     return -1;
-80104fd6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104fdb:	eb 91                	jmp    80104f6e <sys_link+0xde>
-80104fdd:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104fe0 <sys_unlink>:
-{
-80104fe0:	f3 0f 1e fb          	endbr32 
-80104fe4:	55                   	push   %ebp
-80104fe5:	89 e5                	mov    %esp,%ebp
-80104fe7:	57                   	push   %edi
-80104fe8:	56                   	push   %esi
+801051d6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801051db:	eb 91                	jmp    8010516e <sys_link+0xde>
+801051dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801051e0 <sys_unlink>:
+{
+801051e0:	f3 0f 1e fb          	endbr32 
+801051e4:	55                   	push   %ebp
+801051e5:	89 e5                	mov    %esp,%ebp
+801051e7:	57                   	push   %edi
+801051e8:	56                   	push   %esi
   if(argstr(0, &path) < 0)
-80104fe9:	8d 45 c0             	lea    -0x40(%ebp),%eax
+801051e9:	8d 45 c0             	lea    -0x40(%ebp),%eax
 {
-80104fec:	53                   	push   %ebx
-80104fed:	83 ec 54             	sub    $0x54,%esp
+801051ec:	53                   	push   %ebx
+801051ed:	83 ec 54             	sub    $0x54,%esp
   if(argstr(0, &path) < 0)
-80104ff0:	50                   	push   %eax
-80104ff1:	6a 00                	push   $0x0
-80104ff3:	e8 08 fa ff ff       	call   80104a00 <argstr>
-80104ff8:	83 c4 10             	add    $0x10,%esp
-80104ffb:	85 c0                	test   %eax,%eax
-80104ffd:	0f 88 7d 01 00 00    	js     80105180 <sys_unlink+0x1a0>
+801051f0:	50                   	push   %eax
+801051f1:	6a 00                	push   $0x0
+801051f3:	e8 08 fa ff ff       	call   80104c00 <argstr>
+801051f8:	83 c4 10             	add    $0x10,%esp
+801051fb:	85 c0                	test   %eax,%eax
+801051fd:	0f 88 7d 01 00 00    	js     80105380 <sys_unlink+0x1a0>
   begin_op();
-80105003:	e8 28 dd ff ff       	call   80102d30 <begin_op>
+80105203:	e8 28 db ff ff       	call   80102d30 <begin_op>
   if((dp = nameiparent(path, name)) == 0){
-80105008:	8d 5d ca             	lea    -0x36(%ebp),%ebx
-8010500b:	83 ec 08             	sub    $0x8,%esp
-8010500e:	53                   	push   %ebx
-8010500f:	ff 75 c0             	pushl  -0x40(%ebp)
-80105012:	e8 39 d0 ff ff       	call   80102050 <nameiparent>
-80105017:	83 c4 10             	add    $0x10,%esp
-8010501a:	89 c6                	mov    %eax,%esi
-8010501c:	85 c0                	test   %eax,%eax
-8010501e:	0f 84 66 01 00 00    	je     8010518a <sys_unlink+0x1aa>
+80105208:	8d 5d ca             	lea    -0x36(%ebp),%ebx
+8010520b:	83 ec 08             	sub    $0x8,%esp
+8010520e:	53                   	push   %ebx
+8010520f:	ff 75 c0             	pushl  -0x40(%ebp)
+80105212:	e8 39 ce ff ff       	call   80102050 <nameiparent>
+80105217:	83 c4 10             	add    $0x10,%esp
+8010521a:	89 c6                	mov    %eax,%esi
+8010521c:	85 c0                	test   %eax,%eax
+8010521e:	0f 84 66 01 00 00    	je     8010538a <sys_unlink+0x1aa>
   ilock(dp);
-80105024:	83 ec 0c             	sub    $0xc,%esp
-80105027:	50                   	push   %eax
-80105028:	e8 33 c7 ff ff       	call   80101760 <ilock>
+80105224:	83 ec 0c             	sub    $0xc,%esp
+80105227:	50                   	push   %eax
+80105228:	e8 33 c5 ff ff       	call   80101760 <ilock>
   if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
-8010502d:	58                   	pop    %eax
-8010502e:	5a                   	pop    %edx
-8010502f:	68 14 78 10 80       	push   $0x80107814
-80105034:	53                   	push   %ebx
-80105035:	e8 56 cc ff ff       	call   80101c90 <namecmp>
-8010503a:	83 c4 10             	add    $0x10,%esp
-8010503d:	85 c0                	test   %eax,%eax
-8010503f:	0f 84 03 01 00 00    	je     80105148 <sys_unlink+0x168>
-80105045:	83 ec 08             	sub    $0x8,%esp
-80105048:	68 13 78 10 80       	push   $0x80107813
-8010504d:	53                   	push   %ebx
-8010504e:	e8 3d cc ff ff       	call   80101c90 <namecmp>
-80105053:	83 c4 10             	add    $0x10,%esp
-80105056:	85 c0                	test   %eax,%eax
-80105058:	0f 84 ea 00 00 00    	je     80105148 <sys_unlink+0x168>
+8010522d:	58                   	pop    %eax
+8010522e:	5a                   	pop    %edx
+8010522f:	68 a8 7a 10 80       	push   $0x80107aa8
+80105234:	53                   	push   %ebx
+80105235:	e8 56 ca ff ff       	call   80101c90 <namecmp>
+8010523a:	83 c4 10             	add    $0x10,%esp
+8010523d:	85 c0                	test   %eax,%eax
+8010523f:	0f 84 03 01 00 00    	je     80105348 <sys_unlink+0x168>
+80105245:	83 ec 08             	sub    $0x8,%esp
+80105248:	68 a7 7a 10 80       	push   $0x80107aa7
+8010524d:	53                   	push   %ebx
+8010524e:	e8 3d ca ff ff       	call   80101c90 <namecmp>
+80105253:	83 c4 10             	add    $0x10,%esp
+80105256:	85 c0                	test   %eax,%eax
+80105258:	0f 84 ea 00 00 00    	je     80105348 <sys_unlink+0x168>
   if((ip = dirlookup(dp, name, &off)) == 0)
-8010505e:	83 ec 04             	sub    $0x4,%esp
-80105061:	8d 45 c4             	lea    -0x3c(%ebp),%eax
-80105064:	50                   	push   %eax
-80105065:	53                   	push   %ebx
-80105066:	56                   	push   %esi
-80105067:	e8 44 cc ff ff       	call   80101cb0 <dirlookup>
-8010506c:	83 c4 10             	add    $0x10,%esp
-8010506f:	89 c3                	mov    %eax,%ebx
-80105071:	85 c0                	test   %eax,%eax
-80105073:	0f 84 cf 00 00 00    	je     80105148 <sys_unlink+0x168>
+8010525e:	83 ec 04             	sub    $0x4,%esp
+80105261:	8d 45 c4             	lea    -0x3c(%ebp),%eax
+80105264:	50                   	push   %eax
+80105265:	53                   	push   %ebx
+80105266:	56                   	push   %esi
+80105267:	e8 44 ca ff ff       	call   80101cb0 <dirlookup>
+8010526c:	83 c4 10             	add    $0x10,%esp
+8010526f:	89 c3                	mov    %eax,%ebx
+80105271:	85 c0                	test   %eax,%eax
+80105273:	0f 84 cf 00 00 00    	je     80105348 <sys_unlink+0x168>
   ilock(ip);
-80105079:	83 ec 0c             	sub    $0xc,%esp
-8010507c:	50                   	push   %eax
-8010507d:	e8 de c6 ff ff       	call   80101760 <ilock>
+80105279:	83 ec 0c             	sub    $0xc,%esp
+8010527c:	50                   	push   %eax
+8010527d:	e8 de c4 ff ff       	call   80101760 <ilock>
   if(ip->nlink < 1)
-80105082:	83 c4 10             	add    $0x10,%esp
-80105085:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
-8010508a:	0f 8e 23 01 00 00    	jle    801051b3 <sys_unlink+0x1d3>
+80105282:	83 c4 10             	add    $0x10,%esp
+80105285:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+8010528a:	0f 8e 23 01 00 00    	jle    801053b3 <sys_unlink+0x1d3>
   if(ip->type == T_DIR && !isdirempty(ip)){
-80105090:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80105095:	8d 7d d8             	lea    -0x28(%ebp),%edi
-80105098:	74 66                	je     80105100 <sys_unlink+0x120>
+80105290:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105295:	8d 7d d8             	lea    -0x28(%ebp),%edi
+80105298:	74 66                	je     80105300 <sys_unlink+0x120>
   memset(&de, 0, sizeof(de));
-8010509a:	83 ec 04             	sub    $0x4,%esp
-8010509d:	6a 10                	push   $0x10
-8010509f:	6a 00                	push   $0x0
-801050a1:	57                   	push   %edi
-801050a2:	e8 c9 f5 ff ff       	call   80104670 <memset>
+8010529a:	83 ec 04             	sub    $0x4,%esp
+8010529d:	6a 10                	push   $0x10
+8010529f:	6a 00                	push   $0x0
+801052a1:	57                   	push   %edi
+801052a2:	e8 c9 f5 ff ff       	call   80104870 <memset>
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-801050a7:	6a 10                	push   $0x10
-801050a9:	ff 75 c4             	pushl  -0x3c(%ebp)
-801050ac:	57                   	push   %edi
-801050ad:	56                   	push   %esi
-801050ae:	e8 ad ca ff ff       	call   80101b60 <writei>
-801050b3:	83 c4 20             	add    $0x20,%esp
-801050b6:	83 f8 10             	cmp    $0x10,%eax
-801050b9:	0f 85 e7 00 00 00    	jne    801051a6 <sys_unlink+0x1c6>
+801052a7:	6a 10                	push   $0x10
+801052a9:	ff 75 c4             	pushl  -0x3c(%ebp)
+801052ac:	57                   	push   %edi
+801052ad:	56                   	push   %esi
+801052ae:	e8 ad c8 ff ff       	call   80101b60 <writei>
+801052b3:	83 c4 20             	add    $0x20,%esp
+801052b6:	83 f8 10             	cmp    $0x10,%eax
+801052b9:	0f 85 e7 00 00 00    	jne    801053a6 <sys_unlink+0x1c6>
   if(ip->type == T_DIR){
-801050bf:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-801050c4:	0f 84 96 00 00 00    	je     80105160 <sys_unlink+0x180>
+801052bf:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+801052c4:	0f 84 96 00 00 00    	je     80105360 <sys_unlink+0x180>
   iunlockput(dp);
-801050ca:	83 ec 0c             	sub    $0xc,%esp
-801050cd:	56                   	push   %esi
-801050ce:	e8 2d c9 ff ff       	call   80101a00 <iunlockput>
+801052ca:	83 ec 0c             	sub    $0xc,%esp
+801052cd:	56                   	push   %esi
+801052ce:	e8 2d c7 ff ff       	call   80101a00 <iunlockput>
   ip->nlink--;
-801050d3:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+801052d3:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
   iupdate(ip);
-801050d8:	89 1c 24             	mov    %ebx,(%esp)
-801050db:	e8 c0 c5 ff ff       	call   801016a0 <iupdate>
+801052d8:	89 1c 24             	mov    %ebx,(%esp)
+801052db:	e8 c0 c3 ff ff       	call   801016a0 <iupdate>
   iunlockput(ip);
-801050e0:	89 1c 24             	mov    %ebx,(%esp)
-801050e3:	e8 18 c9 ff ff       	call   80101a00 <iunlockput>
+801052e0:	89 1c 24             	mov    %ebx,(%esp)
+801052e3:	e8 18 c7 ff ff       	call   80101a00 <iunlockput>
   end_op();
-801050e8:	e8 b3 dc ff ff       	call   80102da0 <end_op>
+801052e8:	e8 b3 da ff ff       	call   80102da0 <end_op>
   return 0;
-801050ed:	83 c4 10             	add    $0x10,%esp
-801050f0:	31 c0                	xor    %eax,%eax
+801052ed:	83 c4 10             	add    $0x10,%esp
+801052f0:	31 c0                	xor    %eax,%eax
 }
-801050f2:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801050f5:	5b                   	pop    %ebx
-801050f6:	5e                   	pop    %esi
-801050f7:	5f                   	pop    %edi
-801050f8:	5d                   	pop    %ebp
-801050f9:	c3                   	ret    
-801050fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801052f2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801052f5:	5b                   	pop    %ebx
+801052f6:	5e                   	pop    %esi
+801052f7:	5f                   	pop    %edi
+801052f8:	5d                   	pop    %ebp
+801052f9:	c3                   	ret    
+801052fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
-80105100:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
-80105104:	76 94                	jbe    8010509a <sys_unlink+0xba>
-80105106:	ba 20 00 00 00       	mov    $0x20,%edx
-8010510b:	eb 0b                	jmp    80105118 <sys_unlink+0x138>
-8010510d:	8d 76 00             	lea    0x0(%esi),%esi
-80105110:	83 c2 10             	add    $0x10,%edx
-80105113:	39 53 58             	cmp    %edx,0x58(%ebx)
-80105116:	76 82                	jbe    8010509a <sys_unlink+0xba>
+80105300:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
+80105304:	76 94                	jbe    8010529a <sys_unlink+0xba>
+80105306:	ba 20 00 00 00       	mov    $0x20,%edx
+8010530b:	eb 0b                	jmp    80105318 <sys_unlink+0x138>
+8010530d:	8d 76 00             	lea    0x0(%esi),%esi
+80105310:	83 c2 10             	add    $0x10,%edx
+80105313:	39 53 58             	cmp    %edx,0x58(%ebx)
+80105316:	76 82                	jbe    8010529a <sys_unlink+0xba>
     if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80105118:	6a 10                	push   $0x10
-8010511a:	52                   	push   %edx
-8010511b:	57                   	push   %edi
-8010511c:	53                   	push   %ebx
-8010511d:	89 55 b4             	mov    %edx,-0x4c(%ebp)
-80105120:	e8 3b c9 ff ff       	call   80101a60 <readi>
-80105125:	83 c4 10             	add    $0x10,%esp
-80105128:	8b 55 b4             	mov    -0x4c(%ebp),%edx
-8010512b:	83 f8 10             	cmp    $0x10,%eax
-8010512e:	75 69                	jne    80105199 <sys_unlink+0x1b9>
+80105318:	6a 10                	push   $0x10
+8010531a:	52                   	push   %edx
+8010531b:	57                   	push   %edi
+8010531c:	53                   	push   %ebx
+8010531d:	89 55 b4             	mov    %edx,-0x4c(%ebp)
+80105320:	e8 3b c7 ff ff       	call   80101a60 <readi>
+80105325:	83 c4 10             	add    $0x10,%esp
+80105328:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+8010532b:	83 f8 10             	cmp    $0x10,%eax
+8010532e:	75 69                	jne    80105399 <sys_unlink+0x1b9>
     if(de.inum != 0)
-80105130:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
-80105135:	74 d9                	je     80105110 <sys_unlink+0x130>
+80105330:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80105335:	74 d9                	je     80105310 <sys_unlink+0x130>
     iunlockput(ip);
-80105137:	83 ec 0c             	sub    $0xc,%esp
-8010513a:	53                   	push   %ebx
-8010513b:	e8 c0 c8 ff ff       	call   80101a00 <iunlockput>
+80105337:	83 ec 0c             	sub    $0xc,%esp
+8010533a:	53                   	push   %ebx
+8010533b:	e8 c0 c6 ff ff       	call   80101a00 <iunlockput>
     goto bad;
-80105140:	83 c4 10             	add    $0x10,%esp
-80105143:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105147:	90                   	nop
+80105340:	83 c4 10             	add    $0x10,%esp
+80105343:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105347:	90                   	nop
   iunlockput(dp);
-80105148:	83 ec 0c             	sub    $0xc,%esp
-8010514b:	56                   	push   %esi
-8010514c:	e8 af c8 ff ff       	call   80101a00 <iunlockput>
+80105348:	83 ec 0c             	sub    $0xc,%esp
+8010534b:	56                   	push   %esi
+8010534c:	e8 af c6 ff ff       	call   80101a00 <iunlockput>
   end_op();
-80105151:	e8 4a dc ff ff       	call   80102da0 <end_op>
+80105351:	e8 4a da ff ff       	call   80102da0 <end_op>
   return -1;
-80105156:	83 c4 10             	add    $0x10,%esp
-80105159:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010515e:	eb 92                	jmp    801050f2 <sys_unlink+0x112>
+80105356:	83 c4 10             	add    $0x10,%esp
+80105359:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010535e:	eb 92                	jmp    801052f2 <sys_unlink+0x112>
     iupdate(dp);
-80105160:	83 ec 0c             	sub    $0xc,%esp
+80105360:	83 ec 0c             	sub    $0xc,%esp
     dp->nlink--;
-80105163:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
+80105363:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
     iupdate(dp);
-80105168:	56                   	push   %esi
-80105169:	e8 32 c5 ff ff       	call   801016a0 <iupdate>
-8010516e:	83 c4 10             	add    $0x10,%esp
-80105171:	e9 54 ff ff ff       	jmp    801050ca <sys_unlink+0xea>
-80105176:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010517d:	8d 76 00             	lea    0x0(%esi),%esi
+80105368:	56                   	push   %esi
+80105369:	e8 32 c3 ff ff       	call   801016a0 <iupdate>
+8010536e:	83 c4 10             	add    $0x10,%esp
+80105371:	e9 54 ff ff ff       	jmp    801052ca <sys_unlink+0xea>
+80105376:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010537d:	8d 76 00             	lea    0x0(%esi),%esi
     return -1;
-80105180:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105185:	e9 68 ff ff ff       	jmp    801050f2 <sys_unlink+0x112>
+80105380:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105385:	e9 68 ff ff ff       	jmp    801052f2 <sys_unlink+0x112>
     end_op();
-8010518a:	e8 11 dc ff ff       	call   80102da0 <end_op>
+8010538a:	e8 11 da ff ff       	call   80102da0 <end_op>
     return -1;
-8010518f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105194:	e9 59 ff ff ff       	jmp    801050f2 <sys_unlink+0x112>
+8010538f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105394:	e9 59 ff ff ff       	jmp    801052f2 <sys_unlink+0x112>
       panic("isdirempty: readi");
-80105199:	83 ec 0c             	sub    $0xc,%esp
-8010519c:	68 38 78 10 80       	push   $0x80107838
-801051a1:	e8 ea b1 ff ff       	call   80100390 <panic>
+80105399:	83 ec 0c             	sub    $0xc,%esp
+8010539c:	68 cc 7a 10 80       	push   $0x80107acc
+801053a1:	e8 ea af ff ff       	call   80100390 <panic>
     panic("unlink: writei");
-801051a6:	83 ec 0c             	sub    $0xc,%esp
-801051a9:	68 4a 78 10 80       	push   $0x8010784a
-801051ae:	e8 dd b1 ff ff       	call   80100390 <panic>
+801053a6:	83 ec 0c             	sub    $0xc,%esp
+801053a9:	68 de 7a 10 80       	push   $0x80107ade
+801053ae:	e8 dd af ff ff       	call   80100390 <panic>
     panic("unlink: nlink < 1");
-801051b3:	83 ec 0c             	sub    $0xc,%esp
-801051b6:	68 26 78 10 80       	push   $0x80107826
-801051bb:	e8 d0 b1 ff ff       	call   80100390 <panic>
+801053b3:	83 ec 0c             	sub    $0xc,%esp
+801053b6:	68 ba 7a 10 80       	push   $0x80107aba
+801053bb:	e8 d0 af ff ff       	call   80100390 <panic>
 
-801051c0 <sys_open>:
+801053c0 <sys_open>:
 
 int
 sys_open(void)
 {
-801051c0:	f3 0f 1e fb          	endbr32 
-801051c4:	55                   	push   %ebp
-801051c5:	89 e5                	mov    %esp,%ebp
-801051c7:	57                   	push   %edi
-801051c8:	56                   	push   %esi
+801053c0:	f3 0f 1e fb          	endbr32 
+801053c4:	55                   	push   %ebp
+801053c5:	89 e5                	mov    %esp,%ebp
+801053c7:	57                   	push   %edi
+801053c8:	56                   	push   %esi
   char *path;
   int fd, omode;
   struct file *f;
   struct inode *ip;
 
   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-801051c9:	8d 45 e0             	lea    -0x20(%ebp),%eax
+801053c9:	8d 45 e0             	lea    -0x20(%ebp),%eax
 {
-801051cc:	53                   	push   %ebx
-801051cd:	83 ec 24             	sub    $0x24,%esp
+801053cc:	53                   	push   %ebx
+801053cd:	83 ec 24             	sub    $0x24,%esp
   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-801051d0:	50                   	push   %eax
-801051d1:	6a 00                	push   $0x0
-801051d3:	e8 28 f8 ff ff       	call   80104a00 <argstr>
-801051d8:	83 c4 10             	add    $0x10,%esp
-801051db:	85 c0                	test   %eax,%eax
-801051dd:	0f 88 8a 00 00 00    	js     8010526d <sys_open+0xad>
-801051e3:	83 ec 08             	sub    $0x8,%esp
-801051e6:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-801051e9:	50                   	push   %eax
-801051ea:	6a 01                	push   $0x1
-801051ec:	e8 5f f7 ff ff       	call   80104950 <argint>
-801051f1:	83 c4 10             	add    $0x10,%esp
-801051f4:	85 c0                	test   %eax,%eax
-801051f6:	78 75                	js     8010526d <sys_open+0xad>
+801053d0:	50                   	push   %eax
+801053d1:	6a 00                	push   $0x0
+801053d3:	e8 28 f8 ff ff       	call   80104c00 <argstr>
+801053d8:	83 c4 10             	add    $0x10,%esp
+801053db:	85 c0                	test   %eax,%eax
+801053dd:	0f 88 8a 00 00 00    	js     8010546d <sys_open+0xad>
+801053e3:	83 ec 08             	sub    $0x8,%esp
+801053e6:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+801053e9:	50                   	push   %eax
+801053ea:	6a 01                	push   $0x1
+801053ec:	e8 5f f7 ff ff       	call   80104b50 <argint>
+801053f1:	83 c4 10             	add    $0x10,%esp
+801053f4:	85 c0                	test   %eax,%eax
+801053f6:	78 75                	js     8010546d <sys_open+0xad>
     return -1;
 
   begin_op();
-801051f8:	e8 33 db ff ff       	call   80102d30 <begin_op>
+801053f8:	e8 33 d9 ff ff       	call   80102d30 <begin_op>
 
   if(omode & O_CREATE){
-801051fd:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
-80105201:	75 75                	jne    80105278 <sys_open+0xb8>
+801053fd:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
+80105401:	75 75                	jne    80105478 <sys_open+0xb8>
     if(ip == 0){
       end_op();
       return -1;
     }
   } else {
     if((ip = namei(path)) == 0){
-80105203:	83 ec 0c             	sub    $0xc,%esp
-80105206:	ff 75 e0             	pushl  -0x20(%ebp)
-80105209:	e8 22 ce ff ff       	call   80102030 <namei>
-8010520e:	83 c4 10             	add    $0x10,%esp
-80105211:	89 c6                	mov    %eax,%esi
-80105213:	85 c0                	test   %eax,%eax
-80105215:	74 7e                	je     80105295 <sys_open+0xd5>
+80105403:	83 ec 0c             	sub    $0xc,%esp
+80105406:	ff 75 e0             	pushl  -0x20(%ebp)
+80105409:	e8 22 cc ff ff       	call   80102030 <namei>
+8010540e:	83 c4 10             	add    $0x10,%esp
+80105411:	89 c6                	mov    %eax,%esi
+80105413:	85 c0                	test   %eax,%eax
+80105415:	74 7e                	je     80105495 <sys_open+0xd5>
       end_op();
       return -1;
     }
     ilock(ip);
-80105217:	83 ec 0c             	sub    $0xc,%esp
-8010521a:	50                   	push   %eax
-8010521b:	e8 40 c5 ff ff       	call   80101760 <ilock>
+80105417:	83 ec 0c             	sub    $0xc,%esp
+8010541a:	50                   	push   %eax
+8010541b:	e8 40 c3 ff ff       	call   80101760 <ilock>
     if(ip->type == T_DIR && omode != O_RDONLY){
-80105220:	83 c4 10             	add    $0x10,%esp
-80105223:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
-80105228:	0f 84 c2 00 00 00    	je     801052f0 <sys_open+0x130>
+80105420:	83 c4 10             	add    $0x10,%esp
+80105423:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80105428:	0f 84 c2 00 00 00    	je     801054f0 <sys_open+0x130>
       end_op();
       return -1;
     }
   }
 
   if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
-8010522e:	e8 cd bb ff ff       	call   80100e00 <filealloc>
-80105233:	89 c7                	mov    %eax,%edi
-80105235:	85 c0                	test   %eax,%eax
-80105237:	74 23                	je     8010525c <sys_open+0x9c>
+8010542e:	e8 cd b9 ff ff       	call   80100e00 <filealloc>
+80105433:	89 c7                	mov    %eax,%edi
+80105435:	85 c0                	test   %eax,%eax
+80105437:	74 23                	je     8010545c <sys_open+0x9c>
   struct proc *curproc = myproc();
-80105239:	e8 22 e7 ff ff       	call   80103960 <myproc>
+80105439:	e8 42 e5 ff ff       	call   80103980 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-8010523e:	31 db                	xor    %ebx,%ebx
+8010543e:	31 db                	xor    %ebx,%ebx
     if(curproc->ofile[fd] == 0){
-80105240:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-80105244:	85 d2                	test   %edx,%edx
-80105246:	74 60                	je     801052a8 <sys_open+0xe8>
+80105440:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+80105444:	85 d2                	test   %edx,%edx
+80105446:	74 60                	je     801054a8 <sys_open+0xe8>
   for(fd = 0; fd < NOFILE; fd++){
-80105248:	83 c3 01             	add    $0x1,%ebx
-8010524b:	83 fb 10             	cmp    $0x10,%ebx
-8010524e:	75 f0                	jne    80105240 <sys_open+0x80>
+80105448:	83 c3 01             	add    $0x1,%ebx
+8010544b:	83 fb 10             	cmp    $0x10,%ebx
+8010544e:	75 f0                	jne    80105440 <sys_open+0x80>
     if(f)
       fileclose(f);
-80105250:	83 ec 0c             	sub    $0xc,%esp
-80105253:	57                   	push   %edi
-80105254:	e8 67 bc ff ff       	call   80100ec0 <fileclose>
-80105259:	83 c4 10             	add    $0x10,%esp
+80105450:	83 ec 0c             	sub    $0xc,%esp
+80105453:	57                   	push   %edi
+80105454:	e8 67 ba ff ff       	call   80100ec0 <fileclose>
+80105459:	83 c4 10             	add    $0x10,%esp
     iunlockput(ip);
-8010525c:	83 ec 0c             	sub    $0xc,%esp
-8010525f:	56                   	push   %esi
-80105260:	e8 9b c7 ff ff       	call   80101a00 <iunlockput>
+8010545c:	83 ec 0c             	sub    $0xc,%esp
+8010545f:	56                   	push   %esi
+80105460:	e8 9b c5 ff ff       	call   80101a00 <iunlockput>
     end_op();
-80105265:	e8 36 db ff ff       	call   80102da0 <end_op>
+80105465:	e8 36 d9 ff ff       	call   80102da0 <end_op>
     return -1;
-8010526a:	83 c4 10             	add    $0x10,%esp
-8010526d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80105272:	eb 6d                	jmp    801052e1 <sys_open+0x121>
-80105274:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010546a:	83 c4 10             	add    $0x10,%esp
+8010546d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105472:	eb 6d                	jmp    801054e1 <sys_open+0x121>
+80105474:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     ip = create(path, T_FILE, 0, 0);
-80105278:	83 ec 0c             	sub    $0xc,%esp
-8010527b:	8b 45 e0             	mov    -0x20(%ebp),%eax
-8010527e:	31 c9                	xor    %ecx,%ecx
-80105280:	ba 02 00 00 00       	mov    $0x2,%edx
-80105285:	6a 00                	push   $0x0
-80105287:	e8 24 f8 ff ff       	call   80104ab0 <create>
+80105478:	83 ec 0c             	sub    $0xc,%esp
+8010547b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010547e:	31 c9                	xor    %ecx,%ecx
+80105480:	ba 02 00 00 00       	mov    $0x2,%edx
+80105485:	6a 00                	push   $0x0
+80105487:	e8 24 f8 ff ff       	call   80104cb0 <create>
     if(ip == 0){
-8010528c:	83 c4 10             	add    $0x10,%esp
+8010548c:	83 c4 10             	add    $0x10,%esp
     ip = create(path, T_FILE, 0, 0);
-8010528f:	89 c6                	mov    %eax,%esi
+8010548f:	89 c6                	mov    %eax,%esi
     if(ip == 0){
-80105291:	85 c0                	test   %eax,%eax
-80105293:	75 99                	jne    8010522e <sys_open+0x6e>
+80105491:	85 c0                	test   %eax,%eax
+80105493:	75 99                	jne    8010542e <sys_open+0x6e>
       end_op();
-80105295:	e8 06 db ff ff       	call   80102da0 <end_op>
+80105495:	e8 06 d9 ff ff       	call   80102da0 <end_op>
       return -1;
-8010529a:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-8010529f:	eb 40                	jmp    801052e1 <sys_open+0x121>
-801052a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010549a:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+8010549f:	eb 40                	jmp    801054e1 <sys_open+0x121>
+801054a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   }
   iunlock(ip);
-801052a8:	83 ec 0c             	sub    $0xc,%esp
+801054a8:	83 ec 0c             	sub    $0xc,%esp
       curproc->ofile[fd] = f;
-801052ab:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
+801054ab:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
   iunlock(ip);
-801052af:	56                   	push   %esi
-801052b0:	e8 8b c5 ff ff       	call   80101840 <iunlock>
+801054af:	56                   	push   %esi
+801054b0:	e8 8b c3 ff ff       	call   80101840 <iunlock>
   end_op();
-801052b5:	e8 e6 da ff ff       	call   80102da0 <end_op>
+801054b5:	e8 e6 d8 ff ff       	call   80102da0 <end_op>
 
   f->type = FD_INODE;
-801052ba:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
+801054ba:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
   f->ip = ip;
   f->off = 0;
   f->readable = !(omode & O_WRONLY);
-801052c0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+801054c0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801052c3:	83 c4 10             	add    $0x10,%esp
+801054c3:	83 c4 10             	add    $0x10,%esp
   f->ip = ip;
-801052c6:	89 77 10             	mov    %esi,0x10(%edi)
+801054c6:	89 77 10             	mov    %esi,0x10(%edi)
   f->readable = !(omode & O_WRONLY);
-801052c9:	89 d0                	mov    %edx,%eax
+801054c9:	89 d0                	mov    %edx,%eax
   f->off = 0;
-801052cb:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
+801054cb:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
   f->readable = !(omode & O_WRONLY);
-801052d2:	f7 d0                	not    %eax
-801052d4:	83 e0 01             	and    $0x1,%eax
+801054d2:	f7 d0                	not    %eax
+801054d4:	83 e0 01             	and    $0x1,%eax
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801052d7:	83 e2 03             	and    $0x3,%edx
+801054d7:	83 e2 03             	and    $0x3,%edx
   f->readable = !(omode & O_WRONLY);
-801052da:	88 47 08             	mov    %al,0x8(%edi)
+801054da:	88 47 08             	mov    %al,0x8(%edi)
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801052dd:	0f 95 47 09          	setne  0x9(%edi)
+801054dd:	0f 95 47 09          	setne  0x9(%edi)
   return fd;
 }
-801052e1:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801052e4:	89 d8                	mov    %ebx,%eax
-801052e6:	5b                   	pop    %ebx
-801052e7:	5e                   	pop    %esi
-801052e8:	5f                   	pop    %edi
-801052e9:	5d                   	pop    %ebp
-801052ea:	c3                   	ret    
-801052eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801052ef:	90                   	nop
+801054e1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801054e4:	89 d8                	mov    %ebx,%eax
+801054e6:	5b                   	pop    %ebx
+801054e7:	5e                   	pop    %esi
+801054e8:	5f                   	pop    %edi
+801054e9:	5d                   	pop    %ebp
+801054ea:	c3                   	ret    
+801054eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801054ef:	90                   	nop
     if(ip->type == T_DIR && omode != O_RDONLY){
-801052f0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-801052f3:	85 c9                	test   %ecx,%ecx
-801052f5:	0f 84 33 ff ff ff    	je     8010522e <sys_open+0x6e>
-801052fb:	e9 5c ff ff ff       	jmp    8010525c <sys_open+0x9c>
+801054f0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+801054f3:	85 c9                	test   %ecx,%ecx
+801054f5:	0f 84 33 ff ff ff    	je     8010542e <sys_open+0x6e>
+801054fb:	e9 5c ff ff ff       	jmp    8010545c <sys_open+0x9c>
 
-80105300 <sys_mkdir>:
+80105500 <sys_mkdir>:
 
 int
 sys_mkdir(void)
 {
-80105300:	f3 0f 1e fb          	endbr32 
-80105304:	55                   	push   %ebp
-80105305:	89 e5                	mov    %esp,%ebp
-80105307:	83 ec 18             	sub    $0x18,%esp
+80105500:	f3 0f 1e fb          	endbr32 
+80105504:	55                   	push   %ebp
+80105505:	89 e5                	mov    %esp,%ebp
+80105507:	83 ec 18             	sub    $0x18,%esp
   char *path;
   struct inode *ip;
 
   begin_op();
-8010530a:	e8 21 da ff ff       	call   80102d30 <begin_op>
+8010550a:	e8 21 d8 ff ff       	call   80102d30 <begin_op>
   if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
-8010530f:	83 ec 08             	sub    $0x8,%esp
-80105312:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105315:	50                   	push   %eax
-80105316:	6a 00                	push   $0x0
-80105318:	e8 e3 f6 ff ff       	call   80104a00 <argstr>
-8010531d:	83 c4 10             	add    $0x10,%esp
-80105320:	85 c0                	test   %eax,%eax
-80105322:	78 34                	js     80105358 <sys_mkdir+0x58>
-80105324:	83 ec 0c             	sub    $0xc,%esp
-80105327:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010532a:	31 c9                	xor    %ecx,%ecx
-8010532c:	ba 01 00 00 00       	mov    $0x1,%edx
-80105331:	6a 00                	push   $0x0
-80105333:	e8 78 f7 ff ff       	call   80104ab0 <create>
-80105338:	83 c4 10             	add    $0x10,%esp
-8010533b:	85 c0                	test   %eax,%eax
-8010533d:	74 19                	je     80105358 <sys_mkdir+0x58>
+8010550f:	83 ec 08             	sub    $0x8,%esp
+80105512:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105515:	50                   	push   %eax
+80105516:	6a 00                	push   $0x0
+80105518:	e8 e3 f6 ff ff       	call   80104c00 <argstr>
+8010551d:	83 c4 10             	add    $0x10,%esp
+80105520:	85 c0                	test   %eax,%eax
+80105522:	78 34                	js     80105558 <sys_mkdir+0x58>
+80105524:	83 ec 0c             	sub    $0xc,%esp
+80105527:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010552a:	31 c9                	xor    %ecx,%ecx
+8010552c:	ba 01 00 00 00       	mov    $0x1,%edx
+80105531:	6a 00                	push   $0x0
+80105533:	e8 78 f7 ff ff       	call   80104cb0 <create>
+80105538:	83 c4 10             	add    $0x10,%esp
+8010553b:	85 c0                	test   %eax,%eax
+8010553d:	74 19                	je     80105558 <sys_mkdir+0x58>
     end_op();
     return -1;
   }
   iunlockput(ip);
-8010533f:	83 ec 0c             	sub    $0xc,%esp
-80105342:	50                   	push   %eax
-80105343:	e8 b8 c6 ff ff       	call   80101a00 <iunlockput>
+8010553f:	83 ec 0c             	sub    $0xc,%esp
+80105542:	50                   	push   %eax
+80105543:	e8 b8 c4 ff ff       	call   80101a00 <iunlockput>
   end_op();
-80105348:	e8 53 da ff ff       	call   80102da0 <end_op>
+80105548:	e8 53 d8 ff ff       	call   80102da0 <end_op>
   return 0;
-8010534d:	83 c4 10             	add    $0x10,%esp
-80105350:	31 c0                	xor    %eax,%eax
+8010554d:	83 c4 10             	add    $0x10,%esp
+80105550:	31 c0                	xor    %eax,%eax
 }
-80105352:	c9                   	leave  
-80105353:	c3                   	ret    
-80105354:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105552:	c9                   	leave  
+80105553:	c3                   	ret    
+80105554:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     end_op();
-80105358:	e8 43 da ff ff       	call   80102da0 <end_op>
+80105558:	e8 43 d8 ff ff       	call   80102da0 <end_op>
     return -1;
-8010535d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010555d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105362:	c9                   	leave  
-80105363:	c3                   	ret    
-80105364:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010536b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010536f:	90                   	nop
+80105562:	c9                   	leave  
+80105563:	c3                   	ret    
+80105564:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010556b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010556f:	90                   	nop
 
-80105370 <sys_mknod>:
+80105570 <sys_mknod>:
 
 int
 sys_mknod(void)
 {
-80105370:	f3 0f 1e fb          	endbr32 
-80105374:	55                   	push   %ebp
-80105375:	89 e5                	mov    %esp,%ebp
-80105377:	83 ec 18             	sub    $0x18,%esp
+80105570:	f3 0f 1e fb          	endbr32 
+80105574:	55                   	push   %ebp
+80105575:	89 e5                	mov    %esp,%ebp
+80105577:	83 ec 18             	sub    $0x18,%esp
   struct inode *ip;
   char *path;
   int major, minor;
 
   begin_op();
-8010537a:	e8 b1 d9 ff ff       	call   80102d30 <begin_op>
+8010557a:	e8 b1 d7 ff ff       	call   80102d30 <begin_op>
   if((argstr(0, &path)) < 0 ||
-8010537f:	83 ec 08             	sub    $0x8,%esp
-80105382:	8d 45 ec             	lea    -0x14(%ebp),%eax
-80105385:	50                   	push   %eax
-80105386:	6a 00                	push   $0x0
-80105388:	e8 73 f6 ff ff       	call   80104a00 <argstr>
-8010538d:	83 c4 10             	add    $0x10,%esp
-80105390:	85 c0                	test   %eax,%eax
-80105392:	78 64                	js     801053f8 <sys_mknod+0x88>
+8010557f:	83 ec 08             	sub    $0x8,%esp
+80105582:	8d 45 ec             	lea    -0x14(%ebp),%eax
+80105585:	50                   	push   %eax
+80105586:	6a 00                	push   $0x0
+80105588:	e8 73 f6 ff ff       	call   80104c00 <argstr>
+8010558d:	83 c4 10             	add    $0x10,%esp
+80105590:	85 c0                	test   %eax,%eax
+80105592:	78 64                	js     801055f8 <sys_mknod+0x88>
      argint(1, &major) < 0 ||
-80105394:	83 ec 08             	sub    $0x8,%esp
-80105397:	8d 45 f0             	lea    -0x10(%ebp),%eax
-8010539a:	50                   	push   %eax
-8010539b:	6a 01                	push   $0x1
-8010539d:	e8 ae f5 ff ff       	call   80104950 <argint>
+80105594:	83 ec 08             	sub    $0x8,%esp
+80105597:	8d 45 f0             	lea    -0x10(%ebp),%eax
+8010559a:	50                   	push   %eax
+8010559b:	6a 01                	push   $0x1
+8010559d:	e8 ae f5 ff ff       	call   80104b50 <argint>
   if((argstr(0, &path)) < 0 ||
-801053a2:	83 c4 10             	add    $0x10,%esp
-801053a5:	85 c0                	test   %eax,%eax
-801053a7:	78 4f                	js     801053f8 <sys_mknod+0x88>
+801055a2:	83 c4 10             	add    $0x10,%esp
+801055a5:	85 c0                	test   %eax,%eax
+801055a7:	78 4f                	js     801055f8 <sys_mknod+0x88>
      argint(2, &minor) < 0 ||
-801053a9:	83 ec 08             	sub    $0x8,%esp
-801053ac:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801053af:	50                   	push   %eax
-801053b0:	6a 02                	push   $0x2
-801053b2:	e8 99 f5 ff ff       	call   80104950 <argint>
+801055a9:	83 ec 08             	sub    $0x8,%esp
+801055ac:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801055af:	50                   	push   %eax
+801055b0:	6a 02                	push   $0x2
+801055b2:	e8 99 f5 ff ff       	call   80104b50 <argint>
      argint(1, &major) < 0 ||
-801053b7:	83 c4 10             	add    $0x10,%esp
-801053ba:	85 c0                	test   %eax,%eax
-801053bc:	78 3a                	js     801053f8 <sys_mknod+0x88>
+801055b7:	83 c4 10             	add    $0x10,%esp
+801055ba:	85 c0                	test   %eax,%eax
+801055bc:	78 3a                	js     801055f8 <sys_mknod+0x88>
      (ip = create(path, T_DEV, major, minor)) == 0){
-801053be:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
-801053c2:	83 ec 0c             	sub    $0xc,%esp
-801053c5:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
-801053c9:	ba 03 00 00 00       	mov    $0x3,%edx
-801053ce:	50                   	push   %eax
-801053cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
-801053d2:	e8 d9 f6 ff ff       	call   80104ab0 <create>
+801055be:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
+801055c2:	83 ec 0c             	sub    $0xc,%esp
+801055c5:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
+801055c9:	ba 03 00 00 00       	mov    $0x3,%edx
+801055ce:	50                   	push   %eax
+801055cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+801055d2:	e8 d9 f6 ff ff       	call   80104cb0 <create>
      argint(2, &minor) < 0 ||
-801053d7:	83 c4 10             	add    $0x10,%esp
-801053da:	85 c0                	test   %eax,%eax
-801053dc:	74 1a                	je     801053f8 <sys_mknod+0x88>
+801055d7:	83 c4 10             	add    $0x10,%esp
+801055da:	85 c0                	test   %eax,%eax
+801055dc:	74 1a                	je     801055f8 <sys_mknod+0x88>
     end_op();
     return -1;
   }
   iunlockput(ip);
-801053de:	83 ec 0c             	sub    $0xc,%esp
-801053e1:	50                   	push   %eax
-801053e2:	e8 19 c6 ff ff       	call   80101a00 <iunlockput>
+801055de:	83 ec 0c             	sub    $0xc,%esp
+801055e1:	50                   	push   %eax
+801055e2:	e8 19 c4 ff ff       	call   80101a00 <iunlockput>
   end_op();
-801053e7:	e8 b4 d9 ff ff       	call   80102da0 <end_op>
+801055e7:	e8 b4 d7 ff ff       	call   80102da0 <end_op>
   return 0;
-801053ec:	83 c4 10             	add    $0x10,%esp
-801053ef:	31 c0                	xor    %eax,%eax
+801055ec:	83 c4 10             	add    $0x10,%esp
+801055ef:	31 c0                	xor    %eax,%eax
 }
-801053f1:	c9                   	leave  
-801053f2:	c3                   	ret    
-801053f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801053f7:	90                   	nop
+801055f1:	c9                   	leave  
+801055f2:	c3                   	ret    
+801055f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801055f7:	90                   	nop
     end_op();
-801053f8:	e8 a3 d9 ff ff       	call   80102da0 <end_op>
+801055f8:	e8 a3 d7 ff ff       	call   80102da0 <end_op>
     return -1;
-801053fd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801055fd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105402:	c9                   	leave  
-80105403:	c3                   	ret    
-80105404:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010540b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010540f:	90                   	nop
+80105602:	c9                   	leave  
+80105603:	c3                   	ret    
+80105604:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010560b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010560f:	90                   	nop
 
-80105410 <sys_chdir>:
+80105610 <sys_chdir>:
 
 int
 sys_chdir(void)
 {
-80105410:	f3 0f 1e fb          	endbr32 
-80105414:	55                   	push   %ebp
-80105415:	89 e5                	mov    %esp,%ebp
-80105417:	56                   	push   %esi
-80105418:	53                   	push   %ebx
-80105419:	83 ec 10             	sub    $0x10,%esp
+80105610:	f3 0f 1e fb          	endbr32 
+80105614:	55                   	push   %ebp
+80105615:	89 e5                	mov    %esp,%ebp
+80105617:	56                   	push   %esi
+80105618:	53                   	push   %ebx
+80105619:	83 ec 10             	sub    $0x10,%esp
   char *path;
   struct inode *ip;
   struct proc *curproc = myproc();
-8010541c:	e8 3f e5 ff ff       	call   80103960 <myproc>
-80105421:	89 c6                	mov    %eax,%esi
+8010561c:	e8 5f e3 ff ff       	call   80103980 <myproc>
+80105621:	89 c6                	mov    %eax,%esi
   
   begin_op();
-80105423:	e8 08 d9 ff ff       	call   80102d30 <begin_op>
+80105623:	e8 08 d7 ff ff       	call   80102d30 <begin_op>
   if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
-80105428:	83 ec 08             	sub    $0x8,%esp
-8010542b:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010542e:	50                   	push   %eax
-8010542f:	6a 00                	push   $0x0
-80105431:	e8 ca f5 ff ff       	call   80104a00 <argstr>
-80105436:	83 c4 10             	add    $0x10,%esp
-80105439:	85 c0                	test   %eax,%eax
-8010543b:	78 73                	js     801054b0 <sys_chdir+0xa0>
-8010543d:	83 ec 0c             	sub    $0xc,%esp
-80105440:	ff 75 f4             	pushl  -0xc(%ebp)
-80105443:	e8 e8 cb ff ff       	call   80102030 <namei>
-80105448:	83 c4 10             	add    $0x10,%esp
-8010544b:	89 c3                	mov    %eax,%ebx
-8010544d:	85 c0                	test   %eax,%eax
-8010544f:	74 5f                	je     801054b0 <sys_chdir+0xa0>
+80105628:	83 ec 08             	sub    $0x8,%esp
+8010562b:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010562e:	50                   	push   %eax
+8010562f:	6a 00                	push   $0x0
+80105631:	e8 ca f5 ff ff       	call   80104c00 <argstr>
+80105636:	83 c4 10             	add    $0x10,%esp
+80105639:	85 c0                	test   %eax,%eax
+8010563b:	78 73                	js     801056b0 <sys_chdir+0xa0>
+8010563d:	83 ec 0c             	sub    $0xc,%esp
+80105640:	ff 75 f4             	pushl  -0xc(%ebp)
+80105643:	e8 e8 c9 ff ff       	call   80102030 <namei>
+80105648:	83 c4 10             	add    $0x10,%esp
+8010564b:	89 c3                	mov    %eax,%ebx
+8010564d:	85 c0                	test   %eax,%eax
+8010564f:	74 5f                	je     801056b0 <sys_chdir+0xa0>
     end_op();
     return -1;
   }
   ilock(ip);
-80105451:	83 ec 0c             	sub    $0xc,%esp
-80105454:	50                   	push   %eax
-80105455:	e8 06 c3 ff ff       	call   80101760 <ilock>
+80105651:	83 ec 0c             	sub    $0xc,%esp
+80105654:	50                   	push   %eax
+80105655:	e8 06 c1 ff ff       	call   80101760 <ilock>
   if(ip->type != T_DIR){
-8010545a:	83 c4 10             	add    $0x10,%esp
-8010545d:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80105462:	75 2c                	jne    80105490 <sys_chdir+0x80>
+8010565a:	83 c4 10             	add    $0x10,%esp
+8010565d:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105662:	75 2c                	jne    80105690 <sys_chdir+0x80>
     iunlockput(ip);
     end_op();
     return -1;
   }
   iunlock(ip);
-80105464:	83 ec 0c             	sub    $0xc,%esp
-80105467:	53                   	push   %ebx
-80105468:	e8 d3 c3 ff ff       	call   80101840 <iunlock>
+80105664:	83 ec 0c             	sub    $0xc,%esp
+80105667:	53                   	push   %ebx
+80105668:	e8 d3 c1 ff ff       	call   80101840 <iunlock>
   iput(curproc->cwd);
-8010546d:	58                   	pop    %eax
-8010546e:	ff 76 68             	pushl  0x68(%esi)
-80105471:	e8 1a c4 ff ff       	call   80101890 <iput>
+8010566d:	58                   	pop    %eax
+8010566e:	ff 76 68             	pushl  0x68(%esi)
+80105671:	e8 1a c2 ff ff       	call   80101890 <iput>
   end_op();
-80105476:	e8 25 d9 ff ff       	call   80102da0 <end_op>
+80105676:	e8 25 d7 ff ff       	call   80102da0 <end_op>
   curproc->cwd = ip;
-8010547b:	89 5e 68             	mov    %ebx,0x68(%esi)
+8010567b:	89 5e 68             	mov    %ebx,0x68(%esi)
   return 0;
-8010547e:	83 c4 10             	add    $0x10,%esp
-80105481:	31 c0                	xor    %eax,%eax
+8010567e:	83 c4 10             	add    $0x10,%esp
+80105681:	31 c0                	xor    %eax,%eax
 }
-80105483:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80105486:	5b                   	pop    %ebx
-80105487:	5e                   	pop    %esi
-80105488:	5d                   	pop    %ebp
-80105489:	c3                   	ret    
-8010548a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105683:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105686:	5b                   	pop    %ebx
+80105687:	5e                   	pop    %esi
+80105688:	5d                   	pop    %ebp
+80105689:	c3                   	ret    
+8010568a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     iunlockput(ip);
-80105490:	83 ec 0c             	sub    $0xc,%esp
-80105493:	53                   	push   %ebx
-80105494:	e8 67 c5 ff ff       	call   80101a00 <iunlockput>
+80105690:	83 ec 0c             	sub    $0xc,%esp
+80105693:	53                   	push   %ebx
+80105694:	e8 67 c3 ff ff       	call   80101a00 <iunlockput>
     end_op();
-80105499:	e8 02 d9 ff ff       	call   80102da0 <end_op>
+80105699:	e8 02 d7 ff ff       	call   80102da0 <end_op>
     return -1;
-8010549e:	83 c4 10             	add    $0x10,%esp
-801054a1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801054a6:	eb db                	jmp    80105483 <sys_chdir+0x73>
-801054a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801054af:	90                   	nop
+8010569e:	83 c4 10             	add    $0x10,%esp
+801056a1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801056a6:	eb db                	jmp    80105683 <sys_chdir+0x73>
+801056a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801056af:	90                   	nop
     end_op();
-801054b0:	e8 eb d8 ff ff       	call   80102da0 <end_op>
+801056b0:	e8 eb d6 ff ff       	call   80102da0 <end_op>
     return -1;
-801054b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801054ba:	eb c7                	jmp    80105483 <sys_chdir+0x73>
-801054bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801056b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801056ba:	eb c7                	jmp    80105683 <sys_chdir+0x73>
+801056bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801054c0 <sys_exec>:
+801056c0 <sys_exec>:
 
 int
 sys_exec(void)
 {
-801054c0:	f3 0f 1e fb          	endbr32 
-801054c4:	55                   	push   %ebp
-801054c5:	89 e5                	mov    %esp,%ebp
-801054c7:	57                   	push   %edi
-801054c8:	56                   	push   %esi
+801056c0:	f3 0f 1e fb          	endbr32 
+801056c4:	55                   	push   %ebp
+801056c5:	89 e5                	mov    %esp,%ebp
+801056c7:	57                   	push   %edi
+801056c8:	56                   	push   %esi
   char *path, *argv[MAXARG];
   int i;
   uint uargv, uarg;
 
   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-801054c9:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
+801056c9:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
 {
-801054cf:	53                   	push   %ebx
-801054d0:	81 ec a4 00 00 00    	sub    $0xa4,%esp
+801056cf:	53                   	push   %ebx
+801056d0:	81 ec a4 00 00 00    	sub    $0xa4,%esp
   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-801054d6:	50                   	push   %eax
-801054d7:	6a 00                	push   $0x0
-801054d9:	e8 22 f5 ff ff       	call   80104a00 <argstr>
-801054de:	83 c4 10             	add    $0x10,%esp
-801054e1:	85 c0                	test   %eax,%eax
-801054e3:	0f 88 8b 00 00 00    	js     80105574 <sys_exec+0xb4>
-801054e9:	83 ec 08             	sub    $0x8,%esp
-801054ec:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
-801054f2:	50                   	push   %eax
-801054f3:	6a 01                	push   $0x1
-801054f5:	e8 56 f4 ff ff       	call   80104950 <argint>
-801054fa:	83 c4 10             	add    $0x10,%esp
-801054fd:	85 c0                	test   %eax,%eax
-801054ff:	78 73                	js     80105574 <sys_exec+0xb4>
+801056d6:	50                   	push   %eax
+801056d7:	6a 00                	push   $0x0
+801056d9:	e8 22 f5 ff ff       	call   80104c00 <argstr>
+801056de:	83 c4 10             	add    $0x10,%esp
+801056e1:	85 c0                	test   %eax,%eax
+801056e3:	0f 88 8b 00 00 00    	js     80105774 <sys_exec+0xb4>
+801056e9:	83 ec 08             	sub    $0x8,%esp
+801056ec:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
+801056f2:	50                   	push   %eax
+801056f3:	6a 01                	push   $0x1
+801056f5:	e8 56 f4 ff ff       	call   80104b50 <argint>
+801056fa:	83 c4 10             	add    $0x10,%esp
+801056fd:	85 c0                	test   %eax,%eax
+801056ff:	78 73                	js     80105774 <sys_exec+0xb4>
     return -1;
   }
   memset(argv, 0, sizeof(argv));
-80105501:	83 ec 04             	sub    $0x4,%esp
-80105504:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+80105701:	83 ec 04             	sub    $0x4,%esp
+80105704:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
   for(i=0;; i++){
-8010550a:	31 db                	xor    %ebx,%ebx
+8010570a:	31 db                	xor    %ebx,%ebx
   memset(argv, 0, sizeof(argv));
-8010550c:	68 80 00 00 00       	push   $0x80
-80105511:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
-80105517:	6a 00                	push   $0x0
-80105519:	50                   	push   %eax
-8010551a:	e8 51 f1 ff ff       	call   80104670 <memset>
-8010551f:	83 c4 10             	add    $0x10,%esp
-80105522:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010570c:	68 80 00 00 00       	push   $0x80
+80105711:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
+80105717:	6a 00                	push   $0x0
+80105719:	50                   	push   %eax
+8010571a:	e8 51 f1 ff ff       	call   80104870 <memset>
+8010571f:	83 c4 10             	add    $0x10,%esp
+80105722:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(i >= NELEM(argv))
       return -1;
     if(fetchint(uargv+4*i, (int*)&uarg) < 0)
-80105528:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
-8010552e:	8d 34 9d 00 00 00 00 	lea    0x0(,%ebx,4),%esi
-80105535:	83 ec 08             	sub    $0x8,%esp
-80105538:	57                   	push   %edi
-80105539:	01 f0                	add    %esi,%eax
-8010553b:	50                   	push   %eax
-8010553c:	e8 6f f3 ff ff       	call   801048b0 <fetchint>
-80105541:	83 c4 10             	add    $0x10,%esp
-80105544:	85 c0                	test   %eax,%eax
-80105546:	78 2c                	js     80105574 <sys_exec+0xb4>
+80105728:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
+8010572e:	8d 34 9d 00 00 00 00 	lea    0x0(,%ebx,4),%esi
+80105735:	83 ec 08             	sub    $0x8,%esp
+80105738:	57                   	push   %edi
+80105739:	01 f0                	add    %esi,%eax
+8010573b:	50                   	push   %eax
+8010573c:	e8 6f f3 ff ff       	call   80104ab0 <fetchint>
+80105741:	83 c4 10             	add    $0x10,%esp
+80105744:	85 c0                	test   %eax,%eax
+80105746:	78 2c                	js     80105774 <sys_exec+0xb4>
       return -1;
     if(uarg == 0){
-80105548:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
-8010554e:	85 c0                	test   %eax,%eax
-80105550:	74 36                	je     80105588 <sys_exec+0xc8>
+80105748:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
+8010574e:	85 c0                	test   %eax,%eax
+80105750:	74 36                	je     80105788 <sys_exec+0xc8>
       argv[i] = 0;
       break;
     }
     if(fetchstr(uarg, &argv[i]) < 0)
-80105552:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
-80105558:	83 ec 08             	sub    $0x8,%esp
-8010555b:	8d 14 31             	lea    (%ecx,%esi,1),%edx
-8010555e:	52                   	push   %edx
-8010555f:	50                   	push   %eax
-80105560:	e8 8b f3 ff ff       	call   801048f0 <fetchstr>
-80105565:	83 c4 10             	add    $0x10,%esp
-80105568:	85 c0                	test   %eax,%eax
-8010556a:	78 08                	js     80105574 <sys_exec+0xb4>
+80105752:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
+80105758:	83 ec 08             	sub    $0x8,%esp
+8010575b:	8d 14 31             	lea    (%ecx,%esi,1),%edx
+8010575e:	52                   	push   %edx
+8010575f:	50                   	push   %eax
+80105760:	e8 8b f3 ff ff       	call   80104af0 <fetchstr>
+80105765:	83 c4 10             	add    $0x10,%esp
+80105768:	85 c0                	test   %eax,%eax
+8010576a:	78 08                	js     80105774 <sys_exec+0xb4>
   for(i=0;; i++){
-8010556c:	83 c3 01             	add    $0x1,%ebx
+8010576c:	83 c3 01             	add    $0x1,%ebx
     if(i >= NELEM(argv))
-8010556f:	83 fb 20             	cmp    $0x20,%ebx
-80105572:	75 b4                	jne    80105528 <sys_exec+0x68>
+8010576f:	83 fb 20             	cmp    $0x20,%ebx
+80105772:	75 b4                	jne    80105728 <sys_exec+0x68>
       return -1;
   }
   return exec(path, argv);
 }
-80105574:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105774:	8d 65 f4             	lea    -0xc(%ebp),%esp
     return -1;
-80105577:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105777:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-8010557c:	5b                   	pop    %ebx
-8010557d:	5e                   	pop    %esi
-8010557e:	5f                   	pop    %edi
-8010557f:	5d                   	pop    %ebp
-80105580:	c3                   	ret    
-80105581:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010577c:	5b                   	pop    %ebx
+8010577d:	5e                   	pop    %esi
+8010577e:	5f                   	pop    %edi
+8010577f:	5d                   	pop    %ebp
+80105780:	c3                   	ret    
+80105781:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   return exec(path, argv);
-80105588:	83 ec 08             	sub    $0x8,%esp
-8010558b:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+80105788:	83 ec 08             	sub    $0x8,%esp
+8010578b:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
       argv[i] = 0;
-80105591:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
-80105598:	00 00 00 00 
+80105791:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
+80105798:	00 00 00 00 
   return exec(path, argv);
-8010559c:	50                   	push   %eax
-8010559d:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
-801055a3:	e8 d8 b4 ff ff       	call   80100a80 <exec>
-801055a8:	83 c4 10             	add    $0x10,%esp
-}
-801055ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801055ae:	5b                   	pop    %ebx
-801055af:	5e                   	pop    %esi
-801055b0:	5f                   	pop    %edi
-801055b1:	5d                   	pop    %ebp
-801055b2:	c3                   	ret    
-801055b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801055ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010579c:	50                   	push   %eax
+8010579d:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
+801057a3:	e8 d8 b2 ff ff       	call   80100a80 <exec>
+801057a8:	83 c4 10             	add    $0x10,%esp
+}
+801057ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801057ae:	5b                   	pop    %ebx
+801057af:	5e                   	pop    %esi
+801057b0:	5f                   	pop    %edi
+801057b1:	5d                   	pop    %ebp
+801057b2:	c3                   	ret    
+801057b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801057ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801055c0 <sys_pipe>:
+801057c0 <sys_pipe>:
 
 int
 sys_pipe(void)
 {
-801055c0:	f3 0f 1e fb          	endbr32 
-801055c4:	55                   	push   %ebp
-801055c5:	89 e5                	mov    %esp,%ebp
-801055c7:	57                   	push   %edi
-801055c8:	56                   	push   %esi
+801057c0:	f3 0f 1e fb          	endbr32 
+801057c4:	55                   	push   %ebp
+801057c5:	89 e5                	mov    %esp,%ebp
+801057c7:	57                   	push   %edi
+801057c8:	56                   	push   %esi
   int *fd;
   struct file *rf, *wf;
   int fd0, fd1;
 
   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-801055c9:	8d 45 dc             	lea    -0x24(%ebp),%eax
+801057c9:	8d 45 dc             	lea    -0x24(%ebp),%eax
 {
-801055cc:	53                   	push   %ebx
-801055cd:	83 ec 20             	sub    $0x20,%esp
+801057cc:	53                   	push   %ebx
+801057cd:	83 ec 20             	sub    $0x20,%esp
   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-801055d0:	6a 08                	push   $0x8
-801055d2:	50                   	push   %eax
-801055d3:	6a 00                	push   $0x0
-801055d5:	e8 c6 f3 ff ff       	call   801049a0 <argptr>
-801055da:	83 c4 10             	add    $0x10,%esp
-801055dd:	85 c0                	test   %eax,%eax
-801055df:	78 4e                	js     8010562f <sys_pipe+0x6f>
+801057d0:	6a 08                	push   $0x8
+801057d2:	50                   	push   %eax
+801057d3:	6a 00                	push   $0x0
+801057d5:	e8 c6 f3 ff ff       	call   80104ba0 <argptr>
+801057da:	83 c4 10             	add    $0x10,%esp
+801057dd:	85 c0                	test   %eax,%eax
+801057df:	78 4e                	js     8010582f <sys_pipe+0x6f>
     return -1;
   if(pipealloc(&rf, &wf) < 0)
-801055e1:	83 ec 08             	sub    $0x8,%esp
-801055e4:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-801055e7:	50                   	push   %eax
-801055e8:	8d 45 e0             	lea    -0x20(%ebp),%eax
-801055eb:	50                   	push   %eax
-801055ec:	e8 ff dd ff ff       	call   801033f0 <pipealloc>
-801055f1:	83 c4 10             	add    $0x10,%esp
-801055f4:	85 c0                	test   %eax,%eax
-801055f6:	78 37                	js     8010562f <sys_pipe+0x6f>
+801057e1:	83 ec 08             	sub    $0x8,%esp
+801057e4:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+801057e7:	50                   	push   %eax
+801057e8:	8d 45 e0             	lea    -0x20(%ebp),%eax
+801057eb:	50                   	push   %eax
+801057ec:	e8 ff db ff ff       	call   801033f0 <pipealloc>
+801057f1:	83 c4 10             	add    $0x10,%esp
+801057f4:	85 c0                	test   %eax,%eax
+801057f6:	78 37                	js     8010582f <sys_pipe+0x6f>
     return -1;
   fd0 = -1;
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-801055f8:	8b 7d e0             	mov    -0x20(%ebp),%edi
+801057f8:	8b 7d e0             	mov    -0x20(%ebp),%edi
   for(fd = 0; fd < NOFILE; fd++){
-801055fb:	31 db                	xor    %ebx,%ebx
+801057fb:	31 db                	xor    %ebx,%ebx
   struct proc *curproc = myproc();
-801055fd:	e8 5e e3 ff ff       	call   80103960 <myproc>
+801057fd:	e8 7e e1 ff ff       	call   80103980 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-80105602:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105802:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(curproc->ofile[fd] == 0){
-80105608:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
-8010560c:	85 f6                	test   %esi,%esi
-8010560e:	74 30                	je     80105640 <sys_pipe+0x80>
+80105808:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
+8010580c:	85 f6                	test   %esi,%esi
+8010580e:	74 30                	je     80105840 <sys_pipe+0x80>
   for(fd = 0; fd < NOFILE; fd++){
-80105610:	83 c3 01             	add    $0x1,%ebx
-80105613:	83 fb 10             	cmp    $0x10,%ebx
-80105616:	75 f0                	jne    80105608 <sys_pipe+0x48>
+80105810:	83 c3 01             	add    $0x1,%ebx
+80105813:	83 fb 10             	cmp    $0x10,%ebx
+80105816:	75 f0                	jne    80105808 <sys_pipe+0x48>
     if(fd0 >= 0)
       myproc()->ofile[fd0] = 0;
     fileclose(rf);
-80105618:	83 ec 0c             	sub    $0xc,%esp
-8010561b:	ff 75 e0             	pushl  -0x20(%ebp)
-8010561e:	e8 9d b8 ff ff       	call   80100ec0 <fileclose>
+80105818:	83 ec 0c             	sub    $0xc,%esp
+8010581b:	ff 75 e0             	pushl  -0x20(%ebp)
+8010581e:	e8 9d b6 ff ff       	call   80100ec0 <fileclose>
     fileclose(wf);
-80105623:	58                   	pop    %eax
-80105624:	ff 75 e4             	pushl  -0x1c(%ebp)
-80105627:	e8 94 b8 ff ff       	call   80100ec0 <fileclose>
-    return -1;
-8010562c:	83 c4 10             	add    $0x10,%esp
-8010562f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105634:	eb 5b                	jmp    80105691 <sys_pipe+0xd1>
-80105636:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010563d:	8d 76 00             	lea    0x0(%esi),%esi
+80105823:	58                   	pop    %eax
+80105824:	ff 75 e4             	pushl  -0x1c(%ebp)
+80105827:	e8 94 b6 ff ff       	call   80100ec0 <fileclose>
+    return -1;
+8010582c:	83 c4 10             	add    $0x10,%esp
+8010582f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105834:	eb 5b                	jmp    80105891 <sys_pipe+0xd1>
+80105836:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010583d:	8d 76 00             	lea    0x0(%esi),%esi
       curproc->ofile[fd] = f;
-80105640:	8d 73 08             	lea    0x8(%ebx),%esi
-80105643:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
+80105840:	8d 73 08             	lea    0x8(%ebx),%esi
+80105843:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-80105647:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80105847:	8b 7d e4             	mov    -0x1c(%ebp),%edi
   struct proc *curproc = myproc();
-8010564a:	e8 11 e3 ff ff       	call   80103960 <myproc>
+8010584a:	e8 31 e1 ff ff       	call   80103980 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-8010564f:	31 d2                	xor    %edx,%edx
-80105651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010584f:	31 d2                	xor    %edx,%edx
+80105851:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[fd] == 0){
-80105658:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
-8010565c:	85 c9                	test   %ecx,%ecx
-8010565e:	74 20                	je     80105680 <sys_pipe+0xc0>
+80105858:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
+8010585c:	85 c9                	test   %ecx,%ecx
+8010585e:	74 20                	je     80105880 <sys_pipe+0xc0>
   for(fd = 0; fd < NOFILE; fd++){
-80105660:	83 c2 01             	add    $0x1,%edx
-80105663:	83 fa 10             	cmp    $0x10,%edx
-80105666:	75 f0                	jne    80105658 <sys_pipe+0x98>
+80105860:	83 c2 01             	add    $0x1,%edx
+80105863:	83 fa 10             	cmp    $0x10,%edx
+80105866:	75 f0                	jne    80105858 <sys_pipe+0x98>
       myproc()->ofile[fd0] = 0;
-80105668:	e8 f3 e2 ff ff       	call   80103960 <myproc>
-8010566d:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
-80105674:	00 
-80105675:	eb a1                	jmp    80105618 <sys_pipe+0x58>
-80105677:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010567e:	66 90                	xchg   %ax,%ax
+80105868:	e8 13 e1 ff ff       	call   80103980 <myproc>
+8010586d:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
+80105874:	00 
+80105875:	eb a1                	jmp    80105818 <sys_pipe+0x58>
+80105877:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010587e:	66 90                	xchg   %ax,%ax
       curproc->ofile[fd] = f;
-80105680:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
+80105880:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
   }
   fd[0] = fd0;
-80105684:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80105687:	89 18                	mov    %ebx,(%eax)
+80105884:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80105887:	89 18                	mov    %ebx,(%eax)
   fd[1] = fd1;
-80105689:	8b 45 dc             	mov    -0x24(%ebp),%eax
-8010568c:	89 50 04             	mov    %edx,0x4(%eax)
+80105889:	8b 45 dc             	mov    -0x24(%ebp),%eax
+8010588c:	89 50 04             	mov    %edx,0x4(%eax)
   return 0;
-8010568f:	31 c0                	xor    %eax,%eax
+8010588f:	31 c0                	xor    %eax,%eax
 }
-80105691:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105694:	5b                   	pop    %ebx
-80105695:	5e                   	pop    %esi
-80105696:	5f                   	pop    %edi
-80105697:	5d                   	pop    %ebp
-80105698:	c3                   	ret    
-80105699:	66 90                	xchg   %ax,%ax
-8010569b:	66 90                	xchg   %ax,%ax
-8010569d:	66 90                	xchg   %ax,%ax
-8010569f:	90                   	nop
+80105891:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105894:	5b                   	pop    %ebx
+80105895:	5e                   	pop    %esi
+80105896:	5f                   	pop    %edi
+80105897:	5d                   	pop    %ebp
+80105898:	c3                   	ret    
+80105899:	66 90                	xchg   %ax,%ax
+8010589b:	66 90                	xchg   %ax,%ax
+8010589d:	66 90                	xchg   %ax,%ax
+8010589f:	90                   	nop
 
-801056a0 <sys_fork>:
+801058a0 <sys_fork>:
 #include "mmu.h"
 #include "proc.h"
 
 int
 sys_fork(void)
 {
-801056a0:	f3 0f 1e fb          	endbr32 
+801058a0:	f3 0f 1e fb          	endbr32 
   return fork();
-801056a4:	e9 67 e4 ff ff       	jmp    80103b10 <fork>
-801056a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801058a4:	e9 87 e2 ff ff       	jmp    80103b30 <fork>
+801058a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801056b0 <sys_exit>:
+801058b0 <sys_exit>:
 }
 
 int
 sys_exit(void)
 {
-801056b0:	f3 0f 1e fb          	endbr32 
-801056b4:	55                   	push   %ebp
-801056b5:	89 e5                	mov    %esp,%ebp
-801056b7:	83 ec 08             	sub    $0x8,%esp
+801058b0:	f3 0f 1e fb          	endbr32 
+801058b4:	55                   	push   %ebp
+801058b5:	89 e5                	mov    %esp,%ebp
+801058b7:	83 ec 08             	sub    $0x8,%esp
   exit();
-801056ba:	e8 d1 e6 ff ff       	call   80103d90 <exit>
+801058ba:	e8 21 e5 ff ff       	call   80103de0 <exit>
   return 0;  // not reached
 }
-801056bf:	31 c0                	xor    %eax,%eax
-801056c1:	c9                   	leave  
-801056c2:	c3                   	ret    
-801056c3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801056ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801058bf:	31 c0                	xor    %eax,%eax
+801058c1:	c9                   	leave  
+801058c2:	c3                   	ret    
+801058c3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801058ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801056d0 <sys_wait>:
+801058d0 <sys_wait>:
 
 int
 sys_wait(void)
 {
-801056d0:	f3 0f 1e fb          	endbr32 
+801058d0:	f3 0f 1e fb          	endbr32 
   return wait();
-801056d4:	e9 07 e9 ff ff       	jmp    80103fe0 <wait>
-801056d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801058d4:	e9 57 e7 ff ff       	jmp    80104030 <wait>
+801058d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801056e0 <sys_kill>:
+801058e0 <sys_kill>:
 }
 
 int
 sys_kill(void)
 {
-801056e0:	f3 0f 1e fb          	endbr32 
-801056e4:	55                   	push   %ebp
-801056e5:	89 e5                	mov    %esp,%ebp
-801056e7:	83 ec 20             	sub    $0x20,%esp
+801058e0:	f3 0f 1e fb          	endbr32 
+801058e4:	55                   	push   %ebp
+801058e5:	89 e5                	mov    %esp,%ebp
+801058e7:	83 ec 20             	sub    $0x20,%esp
   int pid;
 
   if(argint(0, &pid) < 0)
-801056ea:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801056ed:	50                   	push   %eax
-801056ee:	6a 00                	push   $0x0
-801056f0:	e8 5b f2 ff ff       	call   80104950 <argint>
-801056f5:	83 c4 10             	add    $0x10,%esp
-801056f8:	85 c0                	test   %eax,%eax
-801056fa:	78 14                	js     80105710 <sys_kill+0x30>
+801058ea:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801058ed:	50                   	push   %eax
+801058ee:	6a 00                	push   $0x0
+801058f0:	e8 5b f2 ff ff       	call   80104b50 <argint>
+801058f5:	83 c4 10             	add    $0x10,%esp
+801058f8:	85 c0                	test   %eax,%eax
+801058fa:	78 14                	js     80105910 <sys_kill+0x30>
     return -1;
   return kill(pid);
-801056fc:	83 ec 0c             	sub    $0xc,%esp
-801056ff:	ff 75 f4             	pushl  -0xc(%ebp)
-80105702:	e8 39 ea ff ff       	call   80104140 <kill>
-80105707:	83 c4 10             	add    $0x10,%esp
-}
-8010570a:	c9                   	leave  
-8010570b:	c3                   	ret    
-8010570c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105710:	c9                   	leave  
-    return -1;
-80105711:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80105716:	c3                   	ret    
-80105717:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010571e:	66 90                	xchg   %ax,%ax
+801058fc:	83 ec 0c             	sub    $0xc,%esp
+801058ff:	ff 75 f4             	pushl  -0xc(%ebp)
+80105902:	e8 99 e8 ff ff       	call   801041a0 <kill>
+80105907:	83 c4 10             	add    $0x10,%esp
+}
+8010590a:	c9                   	leave  
+8010590b:	c3                   	ret    
+8010590c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105910:	c9                   	leave  
+    return -1;
+80105911:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105916:	c3                   	ret    
+80105917:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010591e:	66 90                	xchg   %ax,%ax
 
-80105720 <sys_getpid>:
+80105920 <sys_getpid>:
 
 int
 sys_getpid(void)
 {
-80105720:	f3 0f 1e fb          	endbr32 
-80105724:	55                   	push   %ebp
-80105725:	89 e5                	mov    %esp,%ebp
-80105727:	83 ec 08             	sub    $0x8,%esp
+80105920:	f3 0f 1e fb          	endbr32 
+80105924:	55                   	push   %ebp
+80105925:	89 e5                	mov    %esp,%ebp
+80105927:	83 ec 08             	sub    $0x8,%esp
   return myproc()->pid;
-8010572a:	e8 31 e2 ff ff       	call   80103960 <myproc>
-8010572f:	8b 40 10             	mov    0x10(%eax),%eax
+8010592a:	e8 51 e0 ff ff       	call   80103980 <myproc>
+8010592f:	8b 40 10             	mov    0x10(%eax),%eax
 }
-80105732:	c9                   	leave  
-80105733:	c3                   	ret    
-80105734:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010573b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010573f:	90                   	nop
+80105932:	c9                   	leave  
+80105933:	c3                   	ret    
+80105934:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010593b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010593f:	90                   	nop
 
-80105740 <sys_sbrk>:
+80105940 <sys_sbrk>:
 
 int
 sys_sbrk(void)
 {
-80105740:	f3 0f 1e fb          	endbr32 
-80105744:	55                   	push   %ebp
-80105745:	89 e5                	mov    %esp,%ebp
-80105747:	53                   	push   %ebx
+80105940:	f3 0f 1e fb          	endbr32 
+80105944:	55                   	push   %ebp
+80105945:	89 e5                	mov    %esp,%ebp
+80105947:	53                   	push   %ebx
   int addr;
   int n;
 
   if(argint(0, &n) < 0)
-80105748:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105948:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-8010574b:	83 ec 1c             	sub    $0x1c,%esp
+8010594b:	83 ec 1c             	sub    $0x1c,%esp
   if(argint(0, &n) < 0)
-8010574e:	50                   	push   %eax
-8010574f:	6a 00                	push   $0x0
-80105751:	e8 fa f1 ff ff       	call   80104950 <argint>
-80105756:	83 c4 10             	add    $0x10,%esp
-80105759:	85 c0                	test   %eax,%eax
-8010575b:	78 23                	js     80105780 <sys_sbrk+0x40>
+8010594e:	50                   	push   %eax
+8010594f:	6a 00                	push   $0x0
+80105951:	e8 fa f1 ff ff       	call   80104b50 <argint>
+80105956:	83 c4 10             	add    $0x10,%esp
+80105959:	85 c0                	test   %eax,%eax
+8010595b:	78 23                	js     80105980 <sys_sbrk+0x40>
     return -1;
   addr = myproc()->sz;
-8010575d:	e8 fe e1 ff ff       	call   80103960 <myproc>
+8010595d:	e8 1e e0 ff ff       	call   80103980 <myproc>
   if(growproc(n) < 0)
-80105762:	83 ec 0c             	sub    $0xc,%esp
+80105962:	83 ec 0c             	sub    $0xc,%esp
   addr = myproc()->sz;
-80105765:	8b 18                	mov    (%eax),%ebx
+80105965:	8b 18                	mov    (%eax),%ebx
   if(growproc(n) < 0)
-80105767:	ff 75 f4             	pushl  -0xc(%ebp)
-8010576a:	e8 21 e3 ff ff       	call   80103a90 <growproc>
-8010576f:	83 c4 10             	add    $0x10,%esp
-80105772:	85 c0                	test   %eax,%eax
-80105774:	78 0a                	js     80105780 <sys_sbrk+0x40>
+80105967:	ff 75 f4             	pushl  -0xc(%ebp)
+8010596a:	e8 41 e1 ff ff       	call   80103ab0 <growproc>
+8010596f:	83 c4 10             	add    $0x10,%esp
+80105972:	85 c0                	test   %eax,%eax
+80105974:	78 0a                	js     80105980 <sys_sbrk+0x40>
     return -1;
   return addr;
 }
-80105776:	89 d8                	mov    %ebx,%eax
-80105778:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010577b:	c9                   	leave  
-8010577c:	c3                   	ret    
-8010577d:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-80105780:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80105785:	eb ef                	jmp    80105776 <sys_sbrk+0x36>
-80105787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010578e:	66 90                	xchg   %ax,%ax
+80105976:	89 d8                	mov    %ebx,%eax
+80105978:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010597b:	c9                   	leave  
+8010597c:	c3                   	ret    
+8010597d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80105980:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105985:	eb ef                	jmp    80105976 <sys_sbrk+0x36>
+80105987:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010598e:	66 90                	xchg   %ax,%ax
 
-80105790 <sys_sleep>:
+80105990 <sys_sleep>:
 
 int
 sys_sleep(void)
 {
-80105790:	f3 0f 1e fb          	endbr32 
-80105794:	55                   	push   %ebp
-80105795:	89 e5                	mov    %esp,%ebp
-80105797:	53                   	push   %ebx
+80105990:	f3 0f 1e fb          	endbr32 
+80105994:	55                   	push   %ebp
+80105995:	89 e5                	mov    %esp,%ebp
+80105997:	53                   	push   %ebx
   int n;
   uint ticks0;
 
   if(argint(0, &n) < 0)
-80105798:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105998:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-8010579b:	83 ec 1c             	sub    $0x1c,%esp
+8010599b:	83 ec 1c             	sub    $0x1c,%esp
   if(argint(0, &n) < 0)
-8010579e:	50                   	push   %eax
-8010579f:	6a 00                	push   $0x0
-801057a1:	e8 aa f1 ff ff       	call   80104950 <argint>
-801057a6:	83 c4 10             	add    $0x10,%esp
-801057a9:	85 c0                	test   %eax,%eax
-801057ab:	0f 88 86 00 00 00    	js     80105837 <sys_sleep+0xa7>
+8010599e:	50                   	push   %eax
+8010599f:	6a 00                	push   $0x0
+801059a1:	e8 aa f1 ff ff       	call   80104b50 <argint>
+801059a6:	83 c4 10             	add    $0x10,%esp
+801059a9:	85 c0                	test   %eax,%eax
+801059ab:	0f 88 86 00 00 00    	js     80105a37 <sys_sleep+0xa7>
     return -1;
   acquire(&tickslock);
-801057b1:	83 ec 0c             	sub    $0xc,%esp
-801057b4:	68 60 4c 11 80       	push   $0x80114c60
-801057b9:	e8 a2 ed ff ff       	call   80104560 <acquire>
+801059b1:	83 ec 0c             	sub    $0xc,%esp
+801059b4:	68 60 4e 11 80       	push   $0x80114e60
+801059b9:	e8 a2 ed ff ff       	call   80104760 <acquire>
   ticks0 = ticks;
   while(ticks - ticks0 < n){
-801057be:	8b 55 f4             	mov    -0xc(%ebp),%edx
+801059be:	8b 55 f4             	mov    -0xc(%ebp),%edx
   ticks0 = ticks;
-801057c1:	8b 1d a0 54 11 80    	mov    0x801154a0,%ebx
+801059c1:	8b 1d a0 56 11 80    	mov    0x801156a0,%ebx
   while(ticks - ticks0 < n){
-801057c7:	83 c4 10             	add    $0x10,%esp
-801057ca:	85 d2                	test   %edx,%edx
-801057cc:	75 23                	jne    801057f1 <sys_sleep+0x61>
-801057ce:	eb 50                	jmp    80105820 <sys_sleep+0x90>
+801059c7:	83 c4 10             	add    $0x10,%esp
+801059ca:	85 d2                	test   %edx,%edx
+801059cc:	75 23                	jne    801059f1 <sys_sleep+0x61>
+801059ce:	eb 50                	jmp    80105a20 <sys_sleep+0x90>
     if(myproc()->killed){
       release(&tickslock);
       return -1;
     }
     sleep(&ticks, &tickslock);
-801057d0:	83 ec 08             	sub    $0x8,%esp
-801057d3:	68 60 4c 11 80       	push   $0x80114c60
-801057d8:	68 a0 54 11 80       	push   $0x801154a0
-801057dd:	e8 3e e7 ff ff       	call   80103f20 <sleep>
+801059d0:	83 ec 08             	sub    $0x8,%esp
+801059d3:	68 60 4e 11 80       	push   $0x80114e60
+801059d8:	68 a0 56 11 80       	push   $0x801156a0
+801059dd:	e8 8e e5 ff ff       	call   80103f70 <sleep>
   while(ticks - ticks0 < n){
-801057e2:	a1 a0 54 11 80       	mov    0x801154a0,%eax
-801057e7:	83 c4 10             	add    $0x10,%esp
-801057ea:	29 d8                	sub    %ebx,%eax
-801057ec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-801057ef:	73 2f                	jae    80105820 <sys_sleep+0x90>
+801059e2:	a1 a0 56 11 80       	mov    0x801156a0,%eax
+801059e7:	83 c4 10             	add    $0x10,%esp
+801059ea:	29 d8                	sub    %ebx,%eax
+801059ec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+801059ef:	73 2f                	jae    80105a20 <sys_sleep+0x90>
     if(myproc()->killed){
-801057f1:	e8 6a e1 ff ff       	call   80103960 <myproc>
-801057f6:	8b 40 24             	mov    0x24(%eax),%eax
-801057f9:	85 c0                	test   %eax,%eax
-801057fb:	74 d3                	je     801057d0 <sys_sleep+0x40>
+801059f1:	e8 8a df ff ff       	call   80103980 <myproc>
+801059f6:	8b 40 24             	mov    0x24(%eax),%eax
+801059f9:	85 c0                	test   %eax,%eax
+801059fb:	74 d3                	je     801059d0 <sys_sleep+0x40>
       release(&tickslock);
-801057fd:	83 ec 0c             	sub    $0xc,%esp
-80105800:	68 60 4c 11 80       	push   $0x80114c60
-80105805:	e8 16 ee ff ff       	call   80104620 <release>
+801059fd:	83 ec 0c             	sub    $0xc,%esp
+80105a00:	68 60 4e 11 80       	push   $0x80114e60
+80105a05:	e8 16 ee ff ff       	call   80104820 <release>
   }
   release(&tickslock);
   return 0;
 }
-8010580a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105a0a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
       return -1;
-8010580d:	83 c4 10             	add    $0x10,%esp
-80105810:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105a0d:	83 c4 10             	add    $0x10,%esp
+80105a10:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105815:	c9                   	leave  
-80105816:	c3                   	ret    
-80105817:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010581e:	66 90                	xchg   %ax,%ax
+80105a15:	c9                   	leave  
+80105a16:	c3                   	ret    
+80105a17:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a1e:	66 90                	xchg   %ax,%ax
   release(&tickslock);
-80105820:	83 ec 0c             	sub    $0xc,%esp
-80105823:	68 60 4c 11 80       	push   $0x80114c60
-80105828:	e8 f3 ed ff ff       	call   80104620 <release>
+80105a20:	83 ec 0c             	sub    $0xc,%esp
+80105a23:	68 60 4e 11 80       	push   $0x80114e60
+80105a28:	e8 f3 ed ff ff       	call   80104820 <release>
   return 0;
-8010582d:	83 c4 10             	add    $0x10,%esp
-80105830:	31 c0                	xor    %eax,%eax
+80105a2d:	83 c4 10             	add    $0x10,%esp
+80105a30:	31 c0                	xor    %eax,%eax
 }
-80105832:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105835:	c9                   	leave  
-80105836:	c3                   	ret    
-    return -1;
-80105837:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010583c:	eb f4                	jmp    80105832 <sys_sleep+0xa2>
-8010583e:	66 90                	xchg   %ax,%ax
+80105a32:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105a35:	c9                   	leave  
+80105a36:	c3                   	ret    
+    return -1;
+80105a37:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105a3c:	eb f4                	jmp    80105a32 <sys_sleep+0xa2>
+80105a3e:	66 90                	xchg   %ax,%ax
 
-80105840 <sys_uptime>:
+80105a40 <sys_uptime>:
 
 // return how many clock tick interrupts have occurred
 // since start.
 int
 sys_uptime(void)
 {
-80105840:	f3 0f 1e fb          	endbr32 
-80105844:	55                   	push   %ebp
-80105845:	89 e5                	mov    %esp,%ebp
-80105847:	53                   	push   %ebx
-80105848:	83 ec 10             	sub    $0x10,%esp
+80105a40:	f3 0f 1e fb          	endbr32 
+80105a44:	55                   	push   %ebp
+80105a45:	89 e5                	mov    %esp,%ebp
+80105a47:	53                   	push   %ebx
+80105a48:	83 ec 10             	sub    $0x10,%esp
   uint xticks;
 
   acquire(&tickslock);
-8010584b:	68 60 4c 11 80       	push   $0x80114c60
-80105850:	e8 0b ed ff ff       	call   80104560 <acquire>
+80105a4b:	68 60 4e 11 80       	push   $0x80114e60
+80105a50:	e8 0b ed ff ff       	call   80104760 <acquire>
   xticks = ticks;
-80105855:	8b 1d a0 54 11 80    	mov    0x801154a0,%ebx
+80105a55:	8b 1d a0 56 11 80    	mov    0x801156a0,%ebx
   release(&tickslock);
-8010585b:	c7 04 24 60 4c 11 80 	movl   $0x80114c60,(%esp)
-80105862:	e8 b9 ed ff ff       	call   80104620 <release>
+80105a5b:	c7 04 24 60 4e 11 80 	movl   $0x80114e60,(%esp)
+80105a62:	e8 b9 ed ff ff       	call   80104820 <release>
   return xticks;
 }
-80105867:	89 d8                	mov    %ebx,%eax
-80105869:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010586c:	c9                   	leave  
-8010586d:	c3                   	ret    
+80105a67:	89 d8                	mov    %ebx,%eax
+80105a69:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105a6c:	c9                   	leave  
+80105a6d:	c3                   	ret    
+80105a6e:	66 90                	xchg   %ax,%ax
+
+80105a70 <sys_getNumProc>:
+
+
+
+int sys_getNumProc(void){
+80105a70:	f3 0f 1e fb          	endbr32 
+  return getNumProc();
+80105a74:	e9 97 e8 ff ff       	jmp    80104310 <getNumProc>
+80105a79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105a80 <sys_getMaxPid>:
+}
 
-8010586e <alltraps>:
+int sys_getMaxPid(void){
+80105a80:	f3 0f 1e fb          	endbr32 
+  return getMaxPid();
+80105a84:	e9 d7 e8 ff ff       	jmp    80104360 <getMaxPid>
+80105a89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105a90 <sys_getProcInfo>:
+}
+
+int sys_getProcInfo(void){
+80105a90:	f3 0f 1e fb          	endbr32 
+80105a94:	55                   	push   %ebp
+80105a95:	89 e5                	mov    %esp,%ebp
+80105a97:	83 ec 20             	sub    $0x20,%esp
+  int pid;
+  struct processInfo *procInfo;
+
+  argint(0,&pid);
+80105a9a:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105a9d:	50                   	push   %eax
+80105a9e:	6a 00                	push   $0x0
+80105aa0:	e8 ab f0 ff ff       	call   80104b50 <argint>
+  argptr(1, (char**) &procInfo, sizeof(procInfo));
+80105aa5:	83 c4 0c             	add    $0xc,%esp
+80105aa8:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105aab:	6a 04                	push   $0x4
+80105aad:	50                   	push   %eax
+80105aae:	6a 01                	push   $0x1
+80105ab0:	e8 eb f0 ff ff       	call   80104ba0 <argptr>
+
+  return getProcInfo(pid, (struct processInfo *) procInfo);
+80105ab5:	58                   	pop    %eax
+80105ab6:	5a                   	pop    %edx
+80105ab7:	ff 75 f4             	pushl  -0xc(%ebp)
+80105aba:	ff 75 f0             	pushl  -0x10(%ebp)
+80105abd:	e8 ee e8 ff ff       	call   801043b0 <getProcInfo>
+}
+80105ac2:	c9                   	leave  
+80105ac3:	c3                   	ret    
+80105ac4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105acb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105acf:	90                   	nop
+
+80105ad0 <sys_set_burst_time>:
+
+int sys_set_burst_time(void){
+80105ad0:	f3 0f 1e fb          	endbr32 
+80105ad4:	55                   	push   %ebp
+80105ad5:	89 e5                	mov    %esp,%ebp
+80105ad7:	83 ec 20             	sub    $0x20,%esp
+  int n;
+
+  if(argint(0, &n) < 0){
+80105ada:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105add:	50                   	push   %eax
+80105ade:	6a 00                	push   $0x0
+80105ae0:	e8 6b f0 ff ff       	call   80104b50 <argint>
+80105ae5:	83 c4 10             	add    $0x10,%esp
+80105ae8:	85 c0                	test   %eax,%eax
+80105aea:	78 14                	js     80105b00 <sys_set_burst_time+0x30>
+    return -1;
+  }
+
+  return set_burst_time(n);
+80105aec:	83 ec 0c             	sub    $0xc,%esp
+80105aef:	ff 75 f4             	pushl  -0xc(%ebp)
+80105af2:	e8 29 e9 ff ff       	call   80104420 <set_burst_time>
+80105af7:	83 c4 10             	add    $0x10,%esp
+}
+80105afa:	c9                   	leave  
+80105afb:	c3                   	ret    
+80105afc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105b00:	c9                   	leave  
+    return -1;
+80105b01:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105b06:	c3                   	ret    
+80105b07:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105b0e:	66 90                	xchg   %ax,%ax
+
+80105b10 <sys_get_burst_time>:
+
+int sys_get_burst_time(void){
+80105b10:	f3 0f 1e fb          	endbr32 
+  return get_burst_time();
+80105b14:	e9 47 e9 ff ff       	jmp    80104460 <get_burst_time>
+
+80105b19 <alltraps>:
 
   # vectors.S sends all traps here.
 .globl alltraps
 alltraps:
   # Build trap frame.
   pushl %ds
-8010586e:	1e                   	push   %ds
+80105b19:	1e                   	push   %ds
   pushl %es
-8010586f:	06                   	push   %es
+80105b1a:	06                   	push   %es
   pushl %fs
-80105870:	0f a0                	push   %fs
+80105b1b:	0f a0                	push   %fs
   pushl %gs
-80105872:	0f a8                	push   %gs
+80105b1d:	0f a8                	push   %gs
   pushal
-80105874:	60                   	pusha  
+80105b1f:	60                   	pusha  
   
   # Set up data segments.
   movw $(SEG_KDATA<<3), %ax
-80105875:	66 b8 10 00          	mov    $0x10,%ax
+80105b20:	66 b8 10 00          	mov    $0x10,%ax
   movw %ax, %ds
-80105879:	8e d8                	mov    %eax,%ds
+80105b24:	8e d8                	mov    %eax,%ds
   movw %ax, %es
-8010587b:	8e c0                	mov    %eax,%es
+80105b26:	8e c0                	mov    %eax,%es
 
   # Call trap(tf), where tf=%esp
   pushl %esp
-8010587d:	54                   	push   %esp
+80105b28:	54                   	push   %esp
   call trap
-8010587e:	e8 cd 00 00 00       	call   80105950 <trap>
+80105b29:	e8 c2 00 00 00       	call   80105bf0 <trap>
   addl $4, %esp
-80105883:	83 c4 04             	add    $0x4,%esp
+80105b2e:	83 c4 04             	add    $0x4,%esp
 
-80105886 <trapret>:
+80105b31 <trapret>:
 
   # Return falls through to trapret...
 .globl trapret
 trapret:
   popal
-80105886:	61                   	popa   
+80105b31:	61                   	popa   
   popl %gs
-80105887:	0f a9                	pop    %gs
+80105b32:	0f a9                	pop    %gs
   popl %fs
-80105889:	0f a1                	pop    %fs
+80105b34:	0f a1                	pop    %fs
   popl %es
-8010588b:	07                   	pop    %es
+80105b36:	07                   	pop    %es
   popl %ds
-8010588c:	1f                   	pop    %ds
+80105b37:	1f                   	pop    %ds
   addl $0x8, %esp  # trapno and errcode
-8010588d:	83 c4 08             	add    $0x8,%esp
+80105b38:	83 c4 08             	add    $0x8,%esp
   iret
-80105890:	cf                   	iret   
-80105891:	66 90                	xchg   %ax,%ax
-80105893:	66 90                	xchg   %ax,%ax
-80105895:	66 90                	xchg   %ax,%ax
-80105897:	66 90                	xchg   %ax,%ax
-80105899:	66 90                	xchg   %ax,%ax
-8010589b:	66 90                	xchg   %ax,%ax
-8010589d:	66 90                	xchg   %ax,%ax
-8010589f:	90                   	nop
+80105b3b:	cf                   	iret   
+80105b3c:	66 90                	xchg   %ax,%ax
+80105b3e:	66 90                	xchg   %ax,%ax
 
-801058a0 <tvinit>:
+80105b40 <tvinit>:
 struct spinlock tickslock;
 uint ticks;
 
 void
 tvinit(void)
 {
-801058a0:	f3 0f 1e fb          	endbr32 
-801058a4:	55                   	push   %ebp
+80105b40:	f3 0f 1e fb          	endbr32 
+80105b44:	55                   	push   %ebp
   int i;
 
   for(i = 0; i < 256; i++)
-801058a5:	31 c0                	xor    %eax,%eax
+80105b45:	31 c0                	xor    %eax,%eax
 {
-801058a7:	89 e5                	mov    %esp,%ebp
-801058a9:	83 ec 08             	sub    $0x8,%esp
-801058ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105b47:	89 e5                	mov    %esp,%ebp
+80105b49:	83 ec 08             	sub    $0x8,%esp
+80105b4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
-801058b0:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
-801058b7:	c7 04 c5 a2 4c 11 80 	movl   $0x8e000008,-0x7feeb35e(,%eax,8)
-801058be:	08 00 00 8e 
-801058c2:	66 89 14 c5 a0 4c 11 	mov    %dx,-0x7feeb360(,%eax,8)
-801058c9:	80 
-801058ca:	c1 ea 10             	shr    $0x10,%edx
-801058cd:	66 89 14 c5 a6 4c 11 	mov    %dx,-0x7feeb35a(,%eax,8)
-801058d4:	80 
+80105b50:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
+80105b57:	c7 04 c5 a2 4e 11 80 	movl   $0x8e000008,-0x7feeb15e(,%eax,8)
+80105b5e:	08 00 00 8e 
+80105b62:	66 89 14 c5 a0 4e 11 	mov    %dx,-0x7feeb160(,%eax,8)
+80105b69:	80 
+80105b6a:	c1 ea 10             	shr    $0x10,%edx
+80105b6d:	66 89 14 c5 a6 4e 11 	mov    %dx,-0x7feeb15a(,%eax,8)
+80105b74:	80 
   for(i = 0; i < 256; i++)
-801058d5:	83 c0 01             	add    $0x1,%eax
-801058d8:	3d 00 01 00 00       	cmp    $0x100,%eax
-801058dd:	75 d1                	jne    801058b0 <tvinit+0x10>
+80105b75:	83 c0 01             	add    $0x1,%eax
+80105b78:	3d 00 01 00 00       	cmp    $0x100,%eax
+80105b7d:	75 d1                	jne    80105b50 <tvinit+0x10>
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
 
   initlock(&tickslock, "time");
-801058df:	83 ec 08             	sub    $0x8,%esp
+80105b7f:	83 ec 08             	sub    $0x8,%esp
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-801058e2:	a1 08 a1 10 80       	mov    0x8010a108,%eax
-801058e7:	c7 05 a2 4e 11 80 08 	movl   $0xef000008,0x80114ea2
-801058ee:	00 00 ef 
+80105b82:	a1 08 a1 10 80       	mov    0x8010a108,%eax
+80105b87:	c7 05 a2 50 11 80 08 	movl   $0xef000008,0x801150a2
+80105b8e:	00 00 ef 
   initlock(&tickslock, "time");
-801058f1:	68 59 78 10 80       	push   $0x80107859
-801058f6:	68 60 4c 11 80       	push   $0x80114c60
+80105b91:	68 ed 7a 10 80       	push   $0x80107aed
+80105b96:	68 60 4e 11 80       	push   $0x80114e60
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-801058fb:	66 a3 a0 4e 11 80    	mov    %ax,0x80114ea0
-80105901:	c1 e8 10             	shr    $0x10,%eax
-80105904:	66 a3 a6 4e 11 80    	mov    %ax,0x80114ea6
+80105b9b:	66 a3 a0 50 11 80    	mov    %ax,0x801150a0
+80105ba1:	c1 e8 10             	shr    $0x10,%eax
+80105ba4:	66 a3 a6 50 11 80    	mov    %ax,0x801150a6
   initlock(&tickslock, "time");
-8010590a:	e8 d1 ea ff ff       	call   801043e0 <initlock>
+80105baa:	e8 31 ea ff ff       	call   801045e0 <initlock>
 }
-8010590f:	83 c4 10             	add    $0x10,%esp
-80105912:	c9                   	leave  
-80105913:	c3                   	ret    
-80105914:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010591b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010591f:	90                   	nop
+80105baf:	83 c4 10             	add    $0x10,%esp
+80105bb2:	c9                   	leave  
+80105bb3:	c3                   	ret    
+80105bb4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105bbb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105bbf:	90                   	nop
 
-80105920 <idtinit>:
+80105bc0 <idtinit>:
 
 void
 idtinit(void)
 {
-80105920:	f3 0f 1e fb          	endbr32 
-80105924:	55                   	push   %ebp
+80105bc0:	f3 0f 1e fb          	endbr32 
+80105bc4:	55                   	push   %ebp
   pd[0] = size-1;
-80105925:	b8 ff 07 00 00       	mov    $0x7ff,%eax
-8010592a:	89 e5                	mov    %esp,%ebp
-8010592c:	83 ec 10             	sub    $0x10,%esp
-8010592f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+80105bc5:	b8 ff 07 00 00       	mov    $0x7ff,%eax
+80105bca:	89 e5                	mov    %esp,%ebp
+80105bcc:	83 ec 10             	sub    $0x10,%esp
+80105bcf:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
   pd[1] = (uint)p;
-80105933:	b8 a0 4c 11 80       	mov    $0x80114ca0,%eax
-80105938:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+80105bd3:	b8 a0 4e 11 80       	mov    $0x80114ea0,%eax
+80105bd8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   pd[2] = (uint)p >> 16;
-8010593c:	c1 e8 10             	shr    $0x10,%eax
-8010593f:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+80105bdc:	c1 e8 10             	shr    $0x10,%eax
+80105bdf:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
   asm volatile("lidt (%0)" : : "r" (pd));
-80105943:	8d 45 fa             	lea    -0x6(%ebp),%eax
-80105946:	0f 01 18             	lidtl  (%eax)
+80105be3:	8d 45 fa             	lea    -0x6(%ebp),%eax
+80105be6:	0f 01 18             	lidtl  (%eax)
   lidt(idt, sizeof(idt));
 }
-80105949:	c9                   	leave  
-8010594a:	c3                   	ret    
-8010594b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010594f:	90                   	nop
+80105be9:	c9                   	leave  
+80105bea:	c3                   	ret    
+80105beb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105bef:	90                   	nop
 
-80105950 <trap>:
+80105bf0 <trap>:
 
 //PAGEBREAK: 41
 void
 trap(struct trapframe *tf)
 {
-80105950:	f3 0f 1e fb          	endbr32 
-80105954:	55                   	push   %ebp
-80105955:	89 e5                	mov    %esp,%ebp
-80105957:	57                   	push   %edi
-80105958:	56                   	push   %esi
-80105959:	53                   	push   %ebx
-8010595a:	83 ec 1c             	sub    $0x1c,%esp
-8010595d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105bf0:	f3 0f 1e fb          	endbr32 
+80105bf4:	55                   	push   %ebp
+80105bf5:	89 e5                	mov    %esp,%ebp
+80105bf7:	57                   	push   %edi
+80105bf8:	56                   	push   %esi
+80105bf9:	53                   	push   %ebx
+80105bfa:	83 ec 1c             	sub    $0x1c,%esp
+80105bfd:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(tf->trapno == T_SYSCALL){
-80105960:	8b 43 30             	mov    0x30(%ebx),%eax
-80105963:	83 f8 40             	cmp    $0x40,%eax
-80105966:	0f 84 bc 01 00 00    	je     80105b28 <trap+0x1d8>
+80105c00:	8b 43 30             	mov    0x30(%ebx),%eax
+80105c03:	83 f8 40             	cmp    $0x40,%eax
+80105c06:	0f 84 94 01 00 00    	je     80105da0 <trap+0x1b0>
     if(myproc()->killed)
       exit();
     return;
   }
 
   switch(tf->trapno){
-8010596c:	83 e8 20             	sub    $0x20,%eax
-8010596f:	83 f8 1f             	cmp    $0x1f,%eax
-80105972:	77 08                	ja     8010597c <trap+0x2c>
-80105974:	3e ff 24 85 00 79 10 	notrack jmp *-0x7fef8700(,%eax,4)
-8010597b:	80 
+80105c0c:	83 e8 20             	sub    $0x20,%eax
+80105c0f:	83 f8 1f             	cmp    $0x1f,%eax
+80105c12:	77 08                	ja     80105c1c <trap+0x2c>
+80105c14:	3e ff 24 85 94 7b 10 	notrack jmp *-0x7fef846c(,%eax,4)
+80105c1b:	80 
     lapiceoi();
     break;
 
   //PAGEBREAK: 13
   default:
     if(myproc() == 0 || (tf->cs&3) == 0){
-8010597c:	e8 df df ff ff       	call   80103960 <myproc>
-80105981:	8b 7b 38             	mov    0x38(%ebx),%edi
-80105984:	85 c0                	test   %eax,%eax
-80105986:	0f 84 eb 01 00 00    	je     80105b77 <trap+0x227>
-8010598c:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
-80105990:	0f 84 e1 01 00 00    	je     80105b77 <trap+0x227>
+80105c1c:	e8 5f dd ff ff       	call   80103980 <myproc>
+80105c21:	8b 7b 38             	mov    0x38(%ebx),%edi
+80105c24:	85 c0                	test   %eax,%eax
+80105c26:	0f 84 c3 01 00 00    	je     80105def <trap+0x1ff>
+80105c2c:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
+80105c30:	0f 84 b9 01 00 00    	je     80105def <trap+0x1ff>
 
 static inline uint
 rcr2(void)
 {
   uint val;
   asm volatile("movl %%cr2,%0" : "=r" (val));
-80105996:	0f 20 d1             	mov    %cr2,%ecx
-80105999:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+80105c36:	0f 20 d1             	mov    %cr2,%ecx
+80105c39:	89 4d d8             	mov    %ecx,-0x28(%ebp)
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
               tf->trapno, cpuid(), tf->eip, rcr2());
       panic("trap");
     }
     // In user space, assume process misbehaved.
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-8010599c:	e8 9f df ff ff       	call   80103940 <cpuid>
-801059a1:	8b 73 30             	mov    0x30(%ebx),%esi
-801059a4:	89 45 dc             	mov    %eax,-0x24(%ebp)
-801059a7:	8b 43 34             	mov    0x34(%ebx),%eax
-801059aa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80105c3c:	e8 1f dd ff ff       	call   80103960 <cpuid>
+80105c41:	8b 73 30             	mov    0x30(%ebx),%esi
+80105c44:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80105c47:	8b 43 34             	mov    0x34(%ebx),%eax
+80105c4a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
             "eip 0x%x addr 0x%x--kill proc\n",
             myproc()->pid, myproc()->name, tf->trapno,
-801059ad:	e8 ae df ff ff       	call   80103960 <myproc>
-801059b2:	89 45 e0             	mov    %eax,-0x20(%ebp)
-801059b5:	e8 a6 df ff ff       	call   80103960 <myproc>
+80105c4d:	e8 2e dd ff ff       	call   80103980 <myproc>
+80105c52:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80105c55:	e8 26 dd ff ff       	call   80103980 <myproc>
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-801059ba:	8b 4d d8             	mov    -0x28(%ebp),%ecx
-801059bd:	8b 55 dc             	mov    -0x24(%ebp),%edx
-801059c0:	51                   	push   %ecx
-801059c1:	57                   	push   %edi
-801059c2:	52                   	push   %edx
-801059c3:	ff 75 e4             	pushl  -0x1c(%ebp)
-801059c6:	56                   	push   %esi
+80105c5a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+80105c5d:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80105c60:	51                   	push   %ecx
+80105c61:	57                   	push   %edi
+80105c62:	52                   	push   %edx
+80105c63:	ff 75 e4             	pushl  -0x1c(%ebp)
+80105c66:	56                   	push   %esi
             myproc()->pid, myproc()->name, tf->trapno,
-801059c7:	8b 75 e0             	mov    -0x20(%ebp),%esi
-801059ca:	83 c6 6c             	add    $0x6c,%esi
+80105c67:	8b 75 e0             	mov    -0x20(%ebp),%esi
+80105c6a:	83 c6 6c             	add    $0x6c,%esi
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-801059cd:	56                   	push   %esi
-801059ce:	ff 70 10             	pushl  0x10(%eax)
-801059d1:	68 bc 78 10 80       	push   $0x801078bc
-801059d6:	e8 d5 ac ff ff       	call   801006b0 <cprintf>
+80105c6d:	56                   	push   %esi
+80105c6e:	ff 70 10             	pushl  0x10(%eax)
+80105c71:	68 50 7b 10 80       	push   $0x80107b50
+80105c76:	e8 35 aa ff ff       	call   801006b0 <cprintf>
             tf->err, cpuid(), tf->eip, rcr2());
     myproc()->killed = 1;
-801059db:	83 c4 20             	add    $0x20,%esp
-801059de:	e8 7d df ff ff       	call   80103960 <myproc>
-801059e3:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+80105c7b:	83 c4 20             	add    $0x20,%esp
+80105c7e:	e8 fd dc ff ff       	call   80103980 <myproc>
+80105c83:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
   }
 
   // Force process exit if it has been killed and is in user space.
   // (If it is still executing in the kernel, let it keep running
   // until it gets to the regular system call return.)
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-801059ea:	e8 71 df ff ff       	call   80103960 <myproc>
-801059ef:	85 c0                	test   %eax,%eax
-801059f1:	74 1d                	je     80105a10 <trap+0xc0>
-801059f3:	e8 68 df ff ff       	call   80103960 <myproc>
-801059f8:	8b 50 24             	mov    0x24(%eax),%edx
-801059fb:	85 d2                	test   %edx,%edx
-801059fd:	74 11                	je     80105a10 <trap+0xc0>
-801059ff:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-80105a03:	83 e0 03             	and    $0x3,%eax
-80105a06:	66 83 f8 03          	cmp    $0x3,%ax
-80105a0a:	0f 84 50 01 00 00    	je     80105b60 <trap+0x210>
-    exit();
-
-  // Force process to give up CPU on clock tick.
-  // If interrupts were on while locks held, would need to check nlock.
-  if(myproc() && myproc()->state == RUNNING &&
-80105a10:	e8 4b df ff ff       	call   80103960 <myproc>
-80105a15:	85 c0                	test   %eax,%eax
-80105a17:	74 0f                	je     80105a28 <trap+0xd8>
-80105a19:	e8 42 df ff ff       	call   80103960 <myproc>
-80105a1e:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
-80105a22:	0f 84 e8 00 00 00    	je     80105b10 <trap+0x1c0>
-     tf->trapno == T_IRQ0+IRQ_TIMER)
-    yield();
+80105c8a:	e8 f1 dc ff ff       	call   80103980 <myproc>
+80105c8f:	85 c0                	test   %eax,%eax
+80105c91:	74 1d                	je     80105cb0 <trap+0xc0>
+80105c93:	e8 e8 dc ff ff       	call   80103980 <myproc>
+80105c98:	8b 50 24             	mov    0x24(%eax),%edx
+80105c9b:	85 d2                	test   %edx,%edx
+80105c9d:	74 11                	je     80105cb0 <trap+0xc0>
+80105c9f:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80105ca3:	83 e0 03             	and    $0x3,%eax
+80105ca6:	66 83 f8 03          	cmp    $0x3,%ax
+80105caa:	0f 84 28 01 00 00    	je     80105dd8 <trap+0x1e8>
+  // if(myproc() && myproc()->state == RUNNING &&
+  //    tf->trapno == T_IRQ0+IRQ_TIMER)
+  //   yield();
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105a28:	e8 33 df ff ff       	call   80103960 <myproc>
-80105a2d:	85 c0                	test   %eax,%eax
-80105a2f:	74 1d                	je     80105a4e <trap+0xfe>
-80105a31:	e8 2a df ff ff       	call   80103960 <myproc>
-80105a36:	8b 40 24             	mov    0x24(%eax),%eax
-80105a39:	85 c0                	test   %eax,%eax
-80105a3b:	74 11                	je     80105a4e <trap+0xfe>
-80105a3d:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-80105a41:	83 e0 03             	and    $0x3,%eax
-80105a44:	66 83 f8 03          	cmp    $0x3,%ax
-80105a48:	0f 84 03 01 00 00    	je     80105b51 <trap+0x201>
+80105cb0:	e8 cb dc ff ff       	call   80103980 <myproc>
+80105cb5:	85 c0                	test   %eax,%eax
+80105cb7:	74 1d                	je     80105cd6 <trap+0xe6>
+80105cb9:	e8 c2 dc ff ff       	call   80103980 <myproc>
+80105cbe:	8b 40 24             	mov    0x24(%eax),%eax
+80105cc1:	85 c0                	test   %eax,%eax
+80105cc3:	74 11                	je     80105cd6 <trap+0xe6>
+80105cc5:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80105cc9:	83 e0 03             	and    $0x3,%eax
+80105ccc:	66 83 f8 03          	cmp    $0x3,%ax
+80105cd0:	0f 84 f3 00 00 00    	je     80105dc9 <trap+0x1d9>
     exit();
 }
-80105a4e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105a51:	5b                   	pop    %ebx
-80105a52:	5e                   	pop    %esi
-80105a53:	5f                   	pop    %edi
-80105a54:	5d                   	pop    %ebp
-80105a55:	c3                   	ret    
+80105cd6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105cd9:	5b                   	pop    %ebx
+80105cda:	5e                   	pop    %esi
+80105cdb:	5f                   	pop    %edi
+80105cdc:	5d                   	pop    %ebp
+80105cdd:	c3                   	ret    
     ideintr();
-80105a56:	e8 85 c7 ff ff       	call   801021e0 <ideintr>
+80105cde:	e8 fd c4 ff ff       	call   801021e0 <ideintr>
     lapiceoi();
-80105a5b:	e8 60 ce ff ff       	call   801028c0 <lapiceoi>
+80105ce3:	e8 d8 cb ff ff       	call   801028c0 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105a60:	e8 fb de ff ff       	call   80103960 <myproc>
-80105a65:	85 c0                	test   %eax,%eax
-80105a67:	75 8a                	jne    801059f3 <trap+0xa3>
-80105a69:	eb a5                	jmp    80105a10 <trap+0xc0>
+80105ce8:	e8 93 dc ff ff       	call   80103980 <myproc>
+80105ced:	85 c0                	test   %eax,%eax
+80105cef:	75 a2                	jne    80105c93 <trap+0xa3>
+80105cf1:	eb bd                	jmp    80105cb0 <trap+0xc0>
     if(cpuid() == 0){
-80105a6b:	e8 d0 de ff ff       	call   80103940 <cpuid>
-80105a70:	85 c0                	test   %eax,%eax
-80105a72:	75 e7                	jne    80105a5b <trap+0x10b>
+80105cf3:	e8 68 dc ff ff       	call   80103960 <cpuid>
+80105cf8:	85 c0                	test   %eax,%eax
+80105cfa:	75 e7                	jne    80105ce3 <trap+0xf3>
       acquire(&tickslock);
-80105a74:	83 ec 0c             	sub    $0xc,%esp
-80105a77:	68 60 4c 11 80       	push   $0x80114c60
-80105a7c:	e8 df ea ff ff       	call   80104560 <acquire>
+80105cfc:	83 ec 0c             	sub    $0xc,%esp
+80105cff:	68 60 4e 11 80       	push   $0x80114e60
+80105d04:	e8 57 ea ff ff       	call   80104760 <acquire>
       wakeup(&ticks);
-80105a81:	c7 04 24 a0 54 11 80 	movl   $0x801154a0,(%esp)
+80105d09:	c7 04 24 a0 56 11 80 	movl   $0x801156a0,(%esp)
       ticks++;
-80105a88:	83 05 a0 54 11 80 01 	addl   $0x1,0x801154a0
+80105d10:	83 05 a0 56 11 80 01 	addl   $0x1,0x801156a0
       wakeup(&ticks);
-80105a8f:	e8 4c e6 ff ff       	call   801040e0 <wakeup>
+80105d17:	e8 14 e4 ff ff       	call   80104130 <wakeup>
       release(&tickslock);
-80105a94:	c7 04 24 60 4c 11 80 	movl   $0x80114c60,(%esp)
-80105a9b:	e8 80 eb ff ff       	call   80104620 <release>
-80105aa0:	83 c4 10             	add    $0x10,%esp
+80105d1c:	c7 04 24 60 4e 11 80 	movl   $0x80114e60,(%esp)
+80105d23:	e8 f8 ea ff ff       	call   80104820 <release>
+80105d28:	83 c4 10             	add    $0x10,%esp
     lapiceoi();
-80105aa3:	eb b6                	jmp    80105a5b <trap+0x10b>
+80105d2b:	eb b6                	jmp    80105ce3 <trap+0xf3>
     kbdintr();
-80105aa5:	e8 d6 cc ff ff       	call   80102780 <kbdintr>
+80105d2d:	e8 4e ca ff ff       	call   80102780 <kbdintr>
     lapiceoi();
-80105aaa:	e8 11 ce ff ff       	call   801028c0 <lapiceoi>
+80105d32:	e8 89 cb ff ff       	call   801028c0 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105aaf:	e8 ac de ff ff       	call   80103960 <myproc>
-80105ab4:	85 c0                	test   %eax,%eax
-80105ab6:	0f 85 37 ff ff ff    	jne    801059f3 <trap+0xa3>
-80105abc:	e9 4f ff ff ff       	jmp    80105a10 <trap+0xc0>
+80105d37:	e8 44 dc ff ff       	call   80103980 <myproc>
+80105d3c:	85 c0                	test   %eax,%eax
+80105d3e:	0f 85 4f ff ff ff    	jne    80105c93 <trap+0xa3>
+80105d44:	e9 67 ff ff ff       	jmp    80105cb0 <trap+0xc0>
     uartintr();
-80105ac1:	e8 4a 02 00 00       	call   80105d10 <uartintr>
+80105d49:	e8 42 02 00 00       	call   80105f90 <uartintr>
     lapiceoi();
-80105ac6:	e8 f5 cd ff ff       	call   801028c0 <lapiceoi>
+80105d4e:	e8 6d cb ff ff       	call   801028c0 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105acb:	e8 90 de ff ff       	call   80103960 <myproc>
-80105ad0:	85 c0                	test   %eax,%eax
-80105ad2:	0f 85 1b ff ff ff    	jne    801059f3 <trap+0xa3>
-80105ad8:	e9 33 ff ff ff       	jmp    80105a10 <trap+0xc0>
+80105d53:	e8 28 dc ff ff       	call   80103980 <myproc>
+80105d58:	85 c0                	test   %eax,%eax
+80105d5a:	0f 85 33 ff ff ff    	jne    80105c93 <trap+0xa3>
+80105d60:	e9 4b ff ff ff       	jmp    80105cb0 <trap+0xc0>
     cprintf("cpu%d: spurious interrupt at %x:%x\n",
-80105add:	8b 7b 38             	mov    0x38(%ebx),%edi
-80105ae0:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
-80105ae4:	e8 57 de ff ff       	call   80103940 <cpuid>
-80105ae9:	57                   	push   %edi
-80105aea:	56                   	push   %esi
-80105aeb:	50                   	push   %eax
-80105aec:	68 64 78 10 80       	push   $0x80107864
-80105af1:	e8 ba ab ff ff       	call   801006b0 <cprintf>
+80105d65:	8b 7b 38             	mov    0x38(%ebx),%edi
+80105d68:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
+80105d6c:	e8 ef db ff ff       	call   80103960 <cpuid>
+80105d71:	57                   	push   %edi
+80105d72:	56                   	push   %esi
+80105d73:	50                   	push   %eax
+80105d74:	68 f8 7a 10 80       	push   $0x80107af8
+80105d79:	e8 32 a9 ff ff       	call   801006b0 <cprintf>
     lapiceoi();
-80105af6:	e8 c5 cd ff ff       	call   801028c0 <lapiceoi>
+80105d7e:	e8 3d cb ff ff       	call   801028c0 <lapiceoi>
     break;
-80105afb:	83 c4 10             	add    $0x10,%esp
+80105d83:	83 c4 10             	add    $0x10,%esp
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105afe:	e8 5d de ff ff       	call   80103960 <myproc>
-80105b03:	85 c0                	test   %eax,%eax
-80105b05:	0f 85 e8 fe ff ff    	jne    801059f3 <trap+0xa3>
-80105b0b:	e9 00 ff ff ff       	jmp    80105a10 <trap+0xc0>
-  if(myproc() && myproc()->state == RUNNING &&
-80105b10:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
-80105b14:	0f 85 0e ff ff ff    	jne    80105a28 <trap+0xd8>
-    yield();
-80105b1a:	e8 b1 e3 ff ff       	call   80103ed0 <yield>
-80105b1f:	e9 04 ff ff ff       	jmp    80105a28 <trap+0xd8>
-80105b24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105d86:	e8 f5 db ff ff       	call   80103980 <myproc>
+80105d8b:	85 c0                	test   %eax,%eax
+80105d8d:	0f 85 00 ff ff ff    	jne    80105c93 <trap+0xa3>
+80105d93:	e9 18 ff ff ff       	jmp    80105cb0 <trap+0xc0>
+80105d98:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105d9f:	90                   	nop
     if(myproc()->killed)
-80105b28:	e8 33 de ff ff       	call   80103960 <myproc>
-80105b2d:	8b 70 24             	mov    0x24(%eax),%esi
-80105b30:	85 f6                	test   %esi,%esi
-80105b32:	75 3c                	jne    80105b70 <trap+0x220>
+80105da0:	e8 db db ff ff       	call   80103980 <myproc>
+80105da5:	8b 70 24             	mov    0x24(%eax),%esi
+80105da8:	85 f6                	test   %esi,%esi
+80105daa:	75 3c                	jne    80105de8 <trap+0x1f8>
     myproc()->tf = tf;
-80105b34:	e8 27 de ff ff       	call   80103960 <myproc>
-80105b39:	89 58 18             	mov    %ebx,0x18(%eax)
+80105dac:	e8 cf db ff ff       	call   80103980 <myproc>
+80105db1:	89 58 18             	mov    %ebx,0x18(%eax)
     syscall();
-80105b3c:	e8 ff ee ff ff       	call   80104a40 <syscall>
+80105db4:	e8 87 ee ff ff       	call   80104c40 <syscall>
     if(myproc()->killed)
-80105b41:	e8 1a de ff ff       	call   80103960 <myproc>
-80105b46:	8b 48 24             	mov    0x24(%eax),%ecx
-80105b49:	85 c9                	test   %ecx,%ecx
-80105b4b:	0f 84 fd fe ff ff    	je     80105a4e <trap+0xfe>
-}
-80105b51:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105b54:	5b                   	pop    %ebx
-80105b55:	5e                   	pop    %esi
-80105b56:	5f                   	pop    %edi
-80105b57:	5d                   	pop    %ebp
+80105db9:	e8 c2 db ff ff       	call   80103980 <myproc>
+80105dbe:	8b 48 24             	mov    0x24(%eax),%ecx
+80105dc1:	85 c9                	test   %ecx,%ecx
+80105dc3:	0f 84 0d ff ff ff    	je     80105cd6 <trap+0xe6>
+}
+80105dc9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105dcc:	5b                   	pop    %ebx
+80105dcd:	5e                   	pop    %esi
+80105dce:	5f                   	pop    %edi
+80105dcf:	5d                   	pop    %ebp
       exit();
-80105b58:	e9 33 e2 ff ff       	jmp    80103d90 <exit>
-80105b5d:	8d 76 00             	lea    0x0(%esi),%esi
+80105dd0:	e9 0b e0 ff ff       	jmp    80103de0 <exit>
+80105dd5:	8d 76 00             	lea    0x0(%esi),%esi
     exit();
-80105b60:	e8 2b e2 ff ff       	call   80103d90 <exit>
-80105b65:	e9 a6 fe ff ff       	jmp    80105a10 <trap+0xc0>
-80105b6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105dd8:	e8 03 e0 ff ff       	call   80103de0 <exit>
+80105ddd:	e9 ce fe ff ff       	jmp    80105cb0 <trap+0xc0>
+80105de2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       exit();
-80105b70:	e8 1b e2 ff ff       	call   80103d90 <exit>
-80105b75:	eb bd                	jmp    80105b34 <trap+0x1e4>
-80105b77:	0f 20 d6             	mov    %cr2,%esi
+80105de8:	e8 f3 df ff ff       	call   80103de0 <exit>
+80105ded:	eb bd                	jmp    80105dac <trap+0x1bc>
+80105def:	0f 20 d6             	mov    %cr2,%esi
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-80105b7a:	e8 c1 dd ff ff       	call   80103940 <cpuid>
-80105b7f:	83 ec 0c             	sub    $0xc,%esp
-80105b82:	56                   	push   %esi
-80105b83:	57                   	push   %edi
-80105b84:	50                   	push   %eax
-80105b85:	ff 73 30             	pushl  0x30(%ebx)
-80105b88:	68 88 78 10 80       	push   $0x80107888
-80105b8d:	e8 1e ab ff ff       	call   801006b0 <cprintf>
+80105df2:	e8 69 db ff ff       	call   80103960 <cpuid>
+80105df7:	83 ec 0c             	sub    $0xc,%esp
+80105dfa:	56                   	push   %esi
+80105dfb:	57                   	push   %edi
+80105dfc:	50                   	push   %eax
+80105dfd:	ff 73 30             	pushl  0x30(%ebx)
+80105e00:	68 1c 7b 10 80       	push   $0x80107b1c
+80105e05:	e8 a6 a8 ff ff       	call   801006b0 <cprintf>
       panic("trap");
-80105b92:	83 c4 14             	add    $0x14,%esp
-80105b95:	68 5e 78 10 80       	push   $0x8010785e
-80105b9a:	e8 f1 a7 ff ff       	call   80100390 <panic>
-80105b9f:	90                   	nop
+80105e0a:	83 c4 14             	add    $0x14,%esp
+80105e0d:	68 f2 7a 10 80       	push   $0x80107af2
+80105e12:	e8 79 a5 ff ff       	call   80100390 <panic>
+80105e17:	66 90                	xchg   %ax,%ax
+80105e19:	66 90                	xchg   %ax,%ax
+80105e1b:	66 90                	xchg   %ax,%ax
+80105e1d:	66 90                	xchg   %ax,%ax
+80105e1f:	90                   	nop
 
-80105ba0 <uartgetc>:
+80105e20 <uartgetc>:
   outb(COM1+0, c);
 }
 
 static int
 uartgetc(void)
 {
-80105ba0:	f3 0f 1e fb          	endbr32 
+80105e20:	f3 0f 1e fb          	endbr32 
   if(!uart)
-80105ba4:	a1 bc a5 10 80       	mov    0x8010a5bc,%eax
-80105ba9:	85 c0                	test   %eax,%eax
-80105bab:	74 1b                	je     80105bc8 <uartgetc+0x28>
+80105e24:	a1 bc a5 10 80       	mov    0x8010a5bc,%eax
+80105e29:	85 c0                	test   %eax,%eax
+80105e2b:	74 1b                	je     80105e48 <uartgetc+0x28>
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105bad:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105bb2:	ec                   	in     (%dx),%al
+80105e2d:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80105e32:	ec                   	in     (%dx),%al
     return -1;
   if(!(inb(COM1+5) & 0x01))
-80105bb3:	a8 01                	test   $0x1,%al
-80105bb5:	74 11                	je     80105bc8 <uartgetc+0x28>
-80105bb7:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105bbc:	ec                   	in     (%dx),%al
+80105e33:	a8 01                	test   $0x1,%al
+80105e35:	74 11                	je     80105e48 <uartgetc+0x28>
+80105e37:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105e3c:	ec                   	in     (%dx),%al
     return -1;
   return inb(COM1+0);
-80105bbd:	0f b6 c0             	movzbl %al,%eax
-80105bc0:	c3                   	ret    
-80105bc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105e3d:	0f b6 c0             	movzbl %al,%eax
+80105e40:	c3                   	ret    
+80105e41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     return -1;
-80105bc8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105e48:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105bcd:	c3                   	ret    
-80105bce:	66 90                	xchg   %ax,%ax
+80105e4d:	c3                   	ret    
+80105e4e:	66 90                	xchg   %ax,%ax
 
-80105bd0 <uartputc.part.0>:
+80105e50 <uartputc.part.0>:
 uartputc(int c)
-80105bd0:	55                   	push   %ebp
-80105bd1:	89 e5                	mov    %esp,%ebp
-80105bd3:	57                   	push   %edi
-80105bd4:	89 c7                	mov    %eax,%edi
-80105bd6:	56                   	push   %esi
-80105bd7:	be fd 03 00 00       	mov    $0x3fd,%esi
-80105bdc:	53                   	push   %ebx
-80105bdd:	bb 80 00 00 00       	mov    $0x80,%ebx
-80105be2:	83 ec 0c             	sub    $0xc,%esp
-80105be5:	eb 1b                	jmp    80105c02 <uartputc.part.0+0x32>
-80105be7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105bee:	66 90                	xchg   %ax,%ax
+80105e50:	55                   	push   %ebp
+80105e51:	89 e5                	mov    %esp,%ebp
+80105e53:	57                   	push   %edi
+80105e54:	89 c7                	mov    %eax,%edi
+80105e56:	56                   	push   %esi
+80105e57:	be fd 03 00 00       	mov    $0x3fd,%esi
+80105e5c:	53                   	push   %ebx
+80105e5d:	bb 80 00 00 00       	mov    $0x80,%ebx
+80105e62:	83 ec 0c             	sub    $0xc,%esp
+80105e65:	eb 1b                	jmp    80105e82 <uartputc.part.0+0x32>
+80105e67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105e6e:	66 90                	xchg   %ax,%ax
     microdelay(10);
-80105bf0:	83 ec 0c             	sub    $0xc,%esp
-80105bf3:	6a 0a                	push   $0xa
-80105bf5:	e8 e6 cc ff ff       	call   801028e0 <microdelay>
+80105e70:	83 ec 0c             	sub    $0xc,%esp
+80105e73:	6a 0a                	push   $0xa
+80105e75:	e8 66 ca ff ff       	call   801028e0 <microdelay>
   for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-80105bfa:	83 c4 10             	add    $0x10,%esp
-80105bfd:	83 eb 01             	sub    $0x1,%ebx
-80105c00:	74 07                	je     80105c09 <uartputc.part.0+0x39>
-80105c02:	89 f2                	mov    %esi,%edx
-80105c04:	ec                   	in     (%dx),%al
-80105c05:	a8 20                	test   $0x20,%al
-80105c07:	74 e7                	je     80105bf0 <uartputc.part.0+0x20>
+80105e7a:	83 c4 10             	add    $0x10,%esp
+80105e7d:	83 eb 01             	sub    $0x1,%ebx
+80105e80:	74 07                	je     80105e89 <uartputc.part.0+0x39>
+80105e82:	89 f2                	mov    %esi,%edx
+80105e84:	ec                   	in     (%dx),%al
+80105e85:	a8 20                	test   $0x20,%al
+80105e87:	74 e7                	je     80105e70 <uartputc.part.0+0x20>
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80105c09:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105c0e:	89 f8                	mov    %edi,%eax
-80105c10:	ee                   	out    %al,(%dx)
-}
-80105c11:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105c14:	5b                   	pop    %ebx
-80105c15:	5e                   	pop    %esi
-80105c16:	5f                   	pop    %edi
-80105c17:	5d                   	pop    %ebp
-80105c18:	c3                   	ret    
-80105c19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80105c20 <uartinit>:
-{
-80105c20:	f3 0f 1e fb          	endbr32 
-80105c24:	55                   	push   %ebp
-80105c25:	31 c9                	xor    %ecx,%ecx
-80105c27:	89 c8                	mov    %ecx,%eax
-80105c29:	89 e5                	mov    %esp,%ebp
-80105c2b:	57                   	push   %edi
-80105c2c:	56                   	push   %esi
-80105c2d:	53                   	push   %ebx
-80105c2e:	bb fa 03 00 00       	mov    $0x3fa,%ebx
-80105c33:	89 da                	mov    %ebx,%edx
-80105c35:	83 ec 0c             	sub    $0xc,%esp
-80105c38:	ee                   	out    %al,(%dx)
-80105c39:	bf fb 03 00 00       	mov    $0x3fb,%edi
-80105c3e:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
-80105c43:	89 fa                	mov    %edi,%edx
-80105c45:	ee                   	out    %al,(%dx)
-80105c46:	b8 0c 00 00 00       	mov    $0xc,%eax
-80105c4b:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105c50:	ee                   	out    %al,(%dx)
-80105c51:	be f9 03 00 00       	mov    $0x3f9,%esi
-80105c56:	89 c8                	mov    %ecx,%eax
-80105c58:	89 f2                	mov    %esi,%edx
-80105c5a:	ee                   	out    %al,(%dx)
-80105c5b:	b8 03 00 00 00       	mov    $0x3,%eax
-80105c60:	89 fa                	mov    %edi,%edx
-80105c62:	ee                   	out    %al,(%dx)
-80105c63:	ba fc 03 00 00       	mov    $0x3fc,%edx
-80105c68:	89 c8                	mov    %ecx,%eax
-80105c6a:	ee                   	out    %al,(%dx)
-80105c6b:	b8 01 00 00 00       	mov    $0x1,%eax
-80105c70:	89 f2                	mov    %esi,%edx
-80105c72:	ee                   	out    %al,(%dx)
+80105e89:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105e8e:	89 f8                	mov    %edi,%eax
+80105e90:	ee                   	out    %al,(%dx)
+}
+80105e91:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105e94:	5b                   	pop    %ebx
+80105e95:	5e                   	pop    %esi
+80105e96:	5f                   	pop    %edi
+80105e97:	5d                   	pop    %ebp
+80105e98:	c3                   	ret    
+80105e99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105ea0 <uartinit>:
+{
+80105ea0:	f3 0f 1e fb          	endbr32 
+80105ea4:	55                   	push   %ebp
+80105ea5:	31 c9                	xor    %ecx,%ecx
+80105ea7:	89 c8                	mov    %ecx,%eax
+80105ea9:	89 e5                	mov    %esp,%ebp
+80105eab:	57                   	push   %edi
+80105eac:	56                   	push   %esi
+80105ead:	53                   	push   %ebx
+80105eae:	bb fa 03 00 00       	mov    $0x3fa,%ebx
+80105eb3:	89 da                	mov    %ebx,%edx
+80105eb5:	83 ec 0c             	sub    $0xc,%esp
+80105eb8:	ee                   	out    %al,(%dx)
+80105eb9:	bf fb 03 00 00       	mov    $0x3fb,%edi
+80105ebe:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
+80105ec3:	89 fa                	mov    %edi,%edx
+80105ec5:	ee                   	out    %al,(%dx)
+80105ec6:	b8 0c 00 00 00       	mov    $0xc,%eax
+80105ecb:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105ed0:	ee                   	out    %al,(%dx)
+80105ed1:	be f9 03 00 00       	mov    $0x3f9,%esi
+80105ed6:	89 c8                	mov    %ecx,%eax
+80105ed8:	89 f2                	mov    %esi,%edx
+80105eda:	ee                   	out    %al,(%dx)
+80105edb:	b8 03 00 00 00       	mov    $0x3,%eax
+80105ee0:	89 fa                	mov    %edi,%edx
+80105ee2:	ee                   	out    %al,(%dx)
+80105ee3:	ba fc 03 00 00       	mov    $0x3fc,%edx
+80105ee8:	89 c8                	mov    %ecx,%eax
+80105eea:	ee                   	out    %al,(%dx)
+80105eeb:	b8 01 00 00 00       	mov    $0x1,%eax
+80105ef0:	89 f2                	mov    %esi,%edx
+80105ef2:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105c73:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105c78:	ec                   	in     (%dx),%al
+80105ef3:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80105ef8:	ec                   	in     (%dx),%al
   if(inb(COM1+5) == 0xFF)
-80105c79:	3c ff                	cmp    $0xff,%al
-80105c7b:	74 52                	je     80105ccf <uartinit+0xaf>
+80105ef9:	3c ff                	cmp    $0xff,%al
+80105efb:	74 52                	je     80105f4f <uartinit+0xaf>
   uart = 1;
-80105c7d:	c7 05 bc a5 10 80 01 	movl   $0x1,0x8010a5bc
-80105c84:	00 00 00 
-80105c87:	89 da                	mov    %ebx,%edx
-80105c89:	ec                   	in     (%dx),%al
-80105c8a:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105c8f:	ec                   	in     (%dx),%al
+80105efd:	c7 05 bc a5 10 80 01 	movl   $0x1,0x8010a5bc
+80105f04:	00 00 00 
+80105f07:	89 da                	mov    %ebx,%edx
+80105f09:	ec                   	in     (%dx),%al
+80105f0a:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105f0f:	ec                   	in     (%dx),%al
   ioapicenable(IRQ_COM1, 0);
-80105c90:	83 ec 08             	sub    $0x8,%esp
-80105c93:	be 76 00 00 00       	mov    $0x76,%esi
+80105f10:	83 ec 08             	sub    $0x8,%esp
+80105f13:	be 76 00 00 00       	mov    $0x76,%esi
   for(p="xv6...\n"; *p; p++)
-80105c98:	bb 80 79 10 80       	mov    $0x80107980,%ebx
+80105f18:	bb 14 7c 10 80       	mov    $0x80107c14,%ebx
   ioapicenable(IRQ_COM1, 0);
-80105c9d:	6a 00                	push   $0x0
-80105c9f:	6a 04                	push   $0x4
-80105ca1:	e8 8a c7 ff ff       	call   80102430 <ioapicenable>
-80105ca6:	83 c4 10             	add    $0x10,%esp
+80105f1d:	6a 00                	push   $0x0
+80105f1f:	6a 04                	push   $0x4
+80105f21:	e8 0a c5 ff ff       	call   80102430 <ioapicenable>
+80105f26:	83 c4 10             	add    $0x10,%esp
   for(p="xv6...\n"; *p; p++)
-80105ca9:	b8 78 00 00 00       	mov    $0x78,%eax
-80105cae:	eb 04                	jmp    80105cb4 <uartinit+0x94>
-80105cb0:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
+80105f29:	b8 78 00 00 00       	mov    $0x78,%eax
+80105f2e:	eb 04                	jmp    80105f34 <uartinit+0x94>
+80105f30:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
   if(!uart)
-80105cb4:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
-80105cba:	85 d2                	test   %edx,%edx
-80105cbc:	74 08                	je     80105cc6 <uartinit+0xa6>
+80105f34:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
+80105f3a:	85 d2                	test   %edx,%edx
+80105f3c:	74 08                	je     80105f46 <uartinit+0xa6>
     uartputc(*p);
-80105cbe:	0f be c0             	movsbl %al,%eax
-80105cc1:	e8 0a ff ff ff       	call   80105bd0 <uartputc.part.0>
+80105f3e:	0f be c0             	movsbl %al,%eax
+80105f41:	e8 0a ff ff ff       	call   80105e50 <uartputc.part.0>
   for(p="xv6...\n"; *p; p++)
-80105cc6:	89 f0                	mov    %esi,%eax
-80105cc8:	83 c3 01             	add    $0x1,%ebx
-80105ccb:	84 c0                	test   %al,%al
-80105ccd:	75 e1                	jne    80105cb0 <uartinit+0x90>
-}
-80105ccf:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105cd2:	5b                   	pop    %ebx
-80105cd3:	5e                   	pop    %esi
-80105cd4:	5f                   	pop    %edi
-80105cd5:	5d                   	pop    %ebp
-80105cd6:	c3                   	ret    
-80105cd7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105cde:	66 90                	xchg   %ax,%ax
+80105f46:	89 f0                	mov    %esi,%eax
+80105f48:	83 c3 01             	add    $0x1,%ebx
+80105f4b:	84 c0                	test   %al,%al
+80105f4d:	75 e1                	jne    80105f30 <uartinit+0x90>
+}
+80105f4f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105f52:	5b                   	pop    %ebx
+80105f53:	5e                   	pop    %esi
+80105f54:	5f                   	pop    %edi
+80105f55:	5d                   	pop    %ebp
+80105f56:	c3                   	ret    
+80105f57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105f5e:	66 90                	xchg   %ax,%ax
 
-80105ce0 <uartputc>:
+80105f60 <uartputc>:
 {
-80105ce0:	f3 0f 1e fb          	endbr32 
-80105ce4:	55                   	push   %ebp
+80105f60:	f3 0f 1e fb          	endbr32 
+80105f64:	55                   	push   %ebp
   if(!uart)
-80105ce5:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
+80105f65:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
 {
-80105ceb:	89 e5                	mov    %esp,%ebp
-80105ced:	8b 45 08             	mov    0x8(%ebp),%eax
+80105f6b:	89 e5                	mov    %esp,%ebp
+80105f6d:	8b 45 08             	mov    0x8(%ebp),%eax
   if(!uart)
-80105cf0:	85 d2                	test   %edx,%edx
-80105cf2:	74 0c                	je     80105d00 <uartputc+0x20>
+80105f70:	85 d2                	test   %edx,%edx
+80105f72:	74 0c                	je     80105f80 <uartputc+0x20>
 }
-80105cf4:	5d                   	pop    %ebp
-80105cf5:	e9 d6 fe ff ff       	jmp    80105bd0 <uartputc.part.0>
-80105cfa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80105d00:	5d                   	pop    %ebp
-80105d01:	c3                   	ret    
-80105d02:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105d09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105f74:	5d                   	pop    %ebp
+80105f75:	e9 d6 fe ff ff       	jmp    80105e50 <uartputc.part.0>
+80105f7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105f80:	5d                   	pop    %ebp
+80105f81:	c3                   	ret    
+80105f82:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105f89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80105d10 <uartintr>:
+80105f90 <uartintr>:
 
 void
 uartintr(void)
 {
-80105d10:	f3 0f 1e fb          	endbr32 
-80105d14:	55                   	push   %ebp
-80105d15:	89 e5                	mov    %esp,%ebp
-80105d17:	83 ec 14             	sub    $0x14,%esp
+80105f90:	f3 0f 1e fb          	endbr32 
+80105f94:	55                   	push   %ebp
+80105f95:	89 e5                	mov    %esp,%ebp
+80105f97:	83 ec 14             	sub    $0x14,%esp
   consoleintr(uartgetc);
-80105d1a:	68 a0 5b 10 80       	push   $0x80105ba0
-80105d1f:	e8 3c ab ff ff       	call   80100860 <consoleintr>
+80105f9a:	68 20 5e 10 80       	push   $0x80105e20
+80105f9f:	e8 bc a8 ff ff       	call   80100860 <consoleintr>
 }
-80105d24:	83 c4 10             	add    $0x10,%esp
-80105d27:	c9                   	leave  
-80105d28:	c3                   	ret    
+80105fa4:	83 c4 10             	add    $0x10,%esp
+80105fa7:	c9                   	leave  
+80105fa8:	c3                   	ret    
 
-80105d29 <vector0>:
+80105fa9 <vector0>:
 # generated by vectors.pl - do not edit
 # handlers
 .globl alltraps
 .globl vector0
 vector0:
   pushl $0
-80105d29:	6a 00                	push   $0x0
+80105fa9:	6a 00                	push   $0x0
   pushl $0
-80105d2b:	6a 00                	push   $0x0
+80105fab:	6a 00                	push   $0x0
   jmp alltraps
-80105d2d:	e9 3c fb ff ff       	jmp    8010586e <alltraps>
+80105fad:	e9 67 fb ff ff       	jmp    80105b19 <alltraps>
 
-80105d32 <vector1>:
+80105fb2 <vector1>:
 .globl vector1
 vector1:
   pushl $0
-80105d32:	6a 00                	push   $0x0
+80105fb2:	6a 00                	push   $0x0
   pushl $1
-80105d34:	6a 01                	push   $0x1
+80105fb4:	6a 01                	push   $0x1
   jmp alltraps
-80105d36:	e9 33 fb ff ff       	jmp    8010586e <alltraps>
+80105fb6:	e9 5e fb ff ff       	jmp    80105b19 <alltraps>
 
-80105d3b <vector2>:
+80105fbb <vector2>:
 .globl vector2
 vector2:
   pushl $0
-80105d3b:	6a 00                	push   $0x0
+80105fbb:	6a 00                	push   $0x0
   pushl $2
-80105d3d:	6a 02                	push   $0x2
+80105fbd:	6a 02                	push   $0x2
   jmp alltraps
-80105d3f:	e9 2a fb ff ff       	jmp    8010586e <alltraps>
+80105fbf:	e9 55 fb ff ff       	jmp    80105b19 <alltraps>
 
-80105d44 <vector3>:
+80105fc4 <vector3>:
 .globl vector3
 vector3:
   pushl $0
-80105d44:	6a 00                	push   $0x0
+80105fc4:	6a 00                	push   $0x0
   pushl $3
-80105d46:	6a 03                	push   $0x3
+80105fc6:	6a 03                	push   $0x3
   jmp alltraps
-80105d48:	e9 21 fb ff ff       	jmp    8010586e <alltraps>
+80105fc8:	e9 4c fb ff ff       	jmp    80105b19 <alltraps>
 
-80105d4d <vector4>:
+80105fcd <vector4>:
 .globl vector4
 vector4:
   pushl $0
-80105d4d:	6a 00                	push   $0x0
+80105fcd:	6a 00                	push   $0x0
   pushl $4
-80105d4f:	6a 04                	push   $0x4
+80105fcf:	6a 04                	push   $0x4
   jmp alltraps
-80105d51:	e9 18 fb ff ff       	jmp    8010586e <alltraps>
+80105fd1:	e9 43 fb ff ff       	jmp    80105b19 <alltraps>
 
-80105d56 <vector5>:
+80105fd6 <vector5>:
 .globl vector5
 vector5:
   pushl $0
-80105d56:	6a 00                	push   $0x0
+80105fd6:	6a 00                	push   $0x0
   pushl $5
-80105d58:	6a 05                	push   $0x5
+80105fd8:	6a 05                	push   $0x5
   jmp alltraps
-80105d5a:	e9 0f fb ff ff       	jmp    8010586e <alltraps>
+80105fda:	e9 3a fb ff ff       	jmp    80105b19 <alltraps>
 
-80105d5f <vector6>:
+80105fdf <vector6>:
 .globl vector6
 vector6:
   pushl $0
-80105d5f:	6a 00                	push   $0x0
+80105fdf:	6a 00                	push   $0x0
   pushl $6
-80105d61:	6a 06                	push   $0x6
+80105fe1:	6a 06                	push   $0x6
   jmp alltraps
-80105d63:	e9 06 fb ff ff       	jmp    8010586e <alltraps>
+80105fe3:	e9 31 fb ff ff       	jmp    80105b19 <alltraps>
 
-80105d68 <vector7>:
+80105fe8 <vector7>:
 .globl vector7
 vector7:
   pushl $0
-80105d68:	6a 00                	push   $0x0
+80105fe8:	6a 00                	push   $0x0
   pushl $7
-80105d6a:	6a 07                	push   $0x7
+80105fea:	6a 07                	push   $0x7
   jmp alltraps
-80105d6c:	e9 fd fa ff ff       	jmp    8010586e <alltraps>
+80105fec:	e9 28 fb ff ff       	jmp    80105b19 <alltraps>
 
-80105d71 <vector8>:
+80105ff1 <vector8>:
 .globl vector8
 vector8:
   pushl $8
-80105d71:	6a 08                	push   $0x8
+80105ff1:	6a 08                	push   $0x8
   jmp alltraps
-80105d73:	e9 f6 fa ff ff       	jmp    8010586e <alltraps>
+80105ff3:	e9 21 fb ff ff       	jmp    80105b19 <alltraps>
 
-80105d78 <vector9>:
+80105ff8 <vector9>:
 .globl vector9
 vector9:
   pushl $0
-80105d78:	6a 00                	push   $0x0
+80105ff8:	6a 00                	push   $0x0
   pushl $9
-80105d7a:	6a 09                	push   $0x9
+80105ffa:	6a 09                	push   $0x9
   jmp alltraps
-80105d7c:	e9 ed fa ff ff       	jmp    8010586e <alltraps>
+80105ffc:	e9 18 fb ff ff       	jmp    80105b19 <alltraps>
 
-80105d81 <vector10>:
+80106001 <vector10>:
 .globl vector10
 vector10:
   pushl $10
-80105d81:	6a 0a                	push   $0xa
+80106001:	6a 0a                	push   $0xa
   jmp alltraps
-80105d83:	e9 e6 fa ff ff       	jmp    8010586e <alltraps>
+80106003:	e9 11 fb ff ff       	jmp    80105b19 <alltraps>
 
-80105d88 <vector11>:
+80106008 <vector11>:
 .globl vector11
 vector11:
   pushl $11
-80105d88:	6a 0b                	push   $0xb
+80106008:	6a 0b                	push   $0xb
   jmp alltraps
-80105d8a:	e9 df fa ff ff       	jmp    8010586e <alltraps>
+8010600a:	e9 0a fb ff ff       	jmp    80105b19 <alltraps>
 
-80105d8f <vector12>:
+8010600f <vector12>:
 .globl vector12
 vector12:
   pushl $12
-80105d8f:	6a 0c                	push   $0xc
+8010600f:	6a 0c                	push   $0xc
   jmp alltraps
-80105d91:	e9 d8 fa ff ff       	jmp    8010586e <alltraps>
+80106011:	e9 03 fb ff ff       	jmp    80105b19 <alltraps>
 
-80105d96 <vector13>:
+80106016 <vector13>:
 .globl vector13
 vector13:
   pushl $13
-80105d96:	6a 0d                	push   $0xd
+80106016:	6a 0d                	push   $0xd
   jmp alltraps
-80105d98:	e9 d1 fa ff ff       	jmp    8010586e <alltraps>
+80106018:	e9 fc fa ff ff       	jmp    80105b19 <alltraps>
 
-80105d9d <vector14>:
+8010601d <vector14>:
 .globl vector14
 vector14:
   pushl $14
-80105d9d:	6a 0e                	push   $0xe
+8010601d:	6a 0e                	push   $0xe
   jmp alltraps
-80105d9f:	e9 ca fa ff ff       	jmp    8010586e <alltraps>
+8010601f:	e9 f5 fa ff ff       	jmp    80105b19 <alltraps>
 
-80105da4 <vector15>:
+80106024 <vector15>:
 .globl vector15
 vector15:
   pushl $0
-80105da4:	6a 00                	push   $0x0
+80106024:	6a 00                	push   $0x0
   pushl $15
-80105da6:	6a 0f                	push   $0xf
+80106026:	6a 0f                	push   $0xf
   jmp alltraps
-80105da8:	e9 c1 fa ff ff       	jmp    8010586e <alltraps>
+80106028:	e9 ec fa ff ff       	jmp    80105b19 <alltraps>
 
-80105dad <vector16>:
+8010602d <vector16>:
 .globl vector16
 vector16:
   pushl $0
-80105dad:	6a 00                	push   $0x0
+8010602d:	6a 00                	push   $0x0
   pushl $16
-80105daf:	6a 10                	push   $0x10
+8010602f:	6a 10                	push   $0x10
   jmp alltraps
-80105db1:	e9 b8 fa ff ff       	jmp    8010586e <alltraps>
+80106031:	e9 e3 fa ff ff       	jmp    80105b19 <alltraps>
 
-80105db6 <vector17>:
+80106036 <vector17>:
 .globl vector17
 vector17:
   pushl $17
-80105db6:	6a 11                	push   $0x11
+80106036:	6a 11                	push   $0x11
   jmp alltraps
-80105db8:	e9 b1 fa ff ff       	jmp    8010586e <alltraps>
+80106038:	e9 dc fa ff ff       	jmp    80105b19 <alltraps>
 
-80105dbd <vector18>:
+8010603d <vector18>:
 .globl vector18
 vector18:
   pushl $0
-80105dbd:	6a 00                	push   $0x0
+8010603d:	6a 00                	push   $0x0
   pushl $18
-80105dbf:	6a 12                	push   $0x12
+8010603f:	6a 12                	push   $0x12
   jmp alltraps
-80105dc1:	e9 a8 fa ff ff       	jmp    8010586e <alltraps>
+80106041:	e9 d3 fa ff ff       	jmp    80105b19 <alltraps>
 
-80105dc6 <vector19>:
+80106046 <vector19>:
 .globl vector19
 vector19:
   pushl $0
-80105dc6:	6a 00                	push   $0x0
+80106046:	6a 00                	push   $0x0
   pushl $19
-80105dc8:	6a 13                	push   $0x13
+80106048:	6a 13                	push   $0x13
   jmp alltraps
-80105dca:	e9 9f fa ff ff       	jmp    8010586e <alltraps>
+8010604a:	e9 ca fa ff ff       	jmp    80105b19 <alltraps>
 
-80105dcf <vector20>:
+8010604f <vector20>:
 .globl vector20
 vector20:
   pushl $0
-80105dcf:	6a 00                	push   $0x0
+8010604f:	6a 00                	push   $0x0
   pushl $20
-80105dd1:	6a 14                	push   $0x14
+80106051:	6a 14                	push   $0x14
   jmp alltraps
-80105dd3:	e9 96 fa ff ff       	jmp    8010586e <alltraps>
+80106053:	e9 c1 fa ff ff       	jmp    80105b19 <alltraps>
 
-80105dd8 <vector21>:
+80106058 <vector21>:
 .globl vector21
 vector21:
   pushl $0
-80105dd8:	6a 00                	push   $0x0
+80106058:	6a 00                	push   $0x0
   pushl $21
-80105dda:	6a 15                	push   $0x15
+8010605a:	6a 15                	push   $0x15
   jmp alltraps
-80105ddc:	e9 8d fa ff ff       	jmp    8010586e <alltraps>
+8010605c:	e9 b8 fa ff ff       	jmp    80105b19 <alltraps>
 
-80105de1 <vector22>:
+80106061 <vector22>:
 .globl vector22
 vector22:
   pushl $0
-80105de1:	6a 00                	push   $0x0
+80106061:	6a 00                	push   $0x0
   pushl $22
-80105de3:	6a 16                	push   $0x16
+80106063:	6a 16                	push   $0x16
   jmp alltraps
-80105de5:	e9 84 fa ff ff       	jmp    8010586e <alltraps>
+80106065:	e9 af fa ff ff       	jmp    80105b19 <alltraps>
 
-80105dea <vector23>:
+8010606a <vector23>:
 .globl vector23
 vector23:
   pushl $0
-80105dea:	6a 00                	push   $0x0
+8010606a:	6a 00                	push   $0x0
   pushl $23
-80105dec:	6a 17                	push   $0x17
+8010606c:	6a 17                	push   $0x17
   jmp alltraps
-80105dee:	e9 7b fa ff ff       	jmp    8010586e <alltraps>
+8010606e:	e9 a6 fa ff ff       	jmp    80105b19 <alltraps>
 
-80105df3 <vector24>:
+80106073 <vector24>:
 .globl vector24
 vector24:
   pushl $0
-80105df3:	6a 00                	push   $0x0
+80106073:	6a 00                	push   $0x0
   pushl $24
-80105df5:	6a 18                	push   $0x18
+80106075:	6a 18                	push   $0x18
   jmp alltraps
-80105df7:	e9 72 fa ff ff       	jmp    8010586e <alltraps>
+80106077:	e9 9d fa ff ff       	jmp    80105b19 <alltraps>
 
-80105dfc <vector25>:
+8010607c <vector25>:
 .globl vector25
 vector25:
   pushl $0
-80105dfc:	6a 00                	push   $0x0
+8010607c:	6a 00                	push   $0x0
   pushl $25
-80105dfe:	6a 19                	push   $0x19
+8010607e:	6a 19                	push   $0x19
   jmp alltraps
-80105e00:	e9 69 fa ff ff       	jmp    8010586e <alltraps>
+80106080:	e9 94 fa ff ff       	jmp    80105b19 <alltraps>
 
-80105e05 <vector26>:
+80106085 <vector26>:
 .globl vector26
 vector26:
   pushl $0
-80105e05:	6a 00                	push   $0x0
+80106085:	6a 00                	push   $0x0
   pushl $26
-80105e07:	6a 1a                	push   $0x1a
+80106087:	6a 1a                	push   $0x1a
   jmp alltraps
-80105e09:	e9 60 fa ff ff       	jmp    8010586e <alltraps>
+80106089:	e9 8b fa ff ff       	jmp    80105b19 <alltraps>
 
-80105e0e <vector27>:
+8010608e <vector27>:
 .globl vector27
 vector27:
   pushl $0
-80105e0e:	6a 00                	push   $0x0
+8010608e:	6a 00                	push   $0x0
   pushl $27
-80105e10:	6a 1b                	push   $0x1b
+80106090:	6a 1b                	push   $0x1b
   jmp alltraps
-80105e12:	e9 57 fa ff ff       	jmp    8010586e <alltraps>
+80106092:	e9 82 fa ff ff       	jmp    80105b19 <alltraps>
 
-80105e17 <vector28>:
+80106097 <vector28>:
 .globl vector28
 vector28:
   pushl $0
-80105e17:	6a 00                	push   $0x0
+80106097:	6a 00                	push   $0x0
   pushl $28
-80105e19:	6a 1c                	push   $0x1c
+80106099:	6a 1c                	push   $0x1c
   jmp alltraps
-80105e1b:	e9 4e fa ff ff       	jmp    8010586e <alltraps>
+8010609b:	e9 79 fa ff ff       	jmp    80105b19 <alltraps>
 
-80105e20 <vector29>:
+801060a0 <vector29>:
 .globl vector29
 vector29:
   pushl $0
-80105e20:	6a 00                	push   $0x0
+801060a0:	6a 00                	push   $0x0
   pushl $29
-80105e22:	6a 1d                	push   $0x1d
+801060a2:	6a 1d                	push   $0x1d
   jmp alltraps
-80105e24:	e9 45 fa ff ff       	jmp    8010586e <alltraps>
+801060a4:	e9 70 fa ff ff       	jmp    80105b19 <alltraps>
 
-80105e29 <vector30>:
+801060a9 <vector30>:
 .globl vector30
 vector30:
   pushl $0
-80105e29:	6a 00                	push   $0x0
+801060a9:	6a 00                	push   $0x0
   pushl $30
-80105e2b:	6a 1e                	push   $0x1e
+801060ab:	6a 1e                	push   $0x1e
   jmp alltraps
-80105e2d:	e9 3c fa ff ff       	jmp    8010586e <alltraps>
+801060ad:	e9 67 fa ff ff       	jmp    80105b19 <alltraps>
 
-80105e32 <vector31>:
+801060b2 <vector31>:
 .globl vector31
 vector31:
   pushl $0
-80105e32:	6a 00                	push   $0x0
+801060b2:	6a 00                	push   $0x0
   pushl $31
-80105e34:	6a 1f                	push   $0x1f
+801060b4:	6a 1f                	push   $0x1f
   jmp alltraps
-80105e36:	e9 33 fa ff ff       	jmp    8010586e <alltraps>
+801060b6:	e9 5e fa ff ff       	jmp    80105b19 <alltraps>
 
-80105e3b <vector32>:
+801060bb <vector32>:
 .globl vector32
 vector32:
   pushl $0
-80105e3b:	6a 00                	push   $0x0
+801060bb:	6a 00                	push   $0x0
   pushl $32
-80105e3d:	6a 20                	push   $0x20
+801060bd:	6a 20                	push   $0x20
   jmp alltraps
-80105e3f:	e9 2a fa ff ff       	jmp    8010586e <alltraps>
+801060bf:	e9 55 fa ff ff       	jmp    80105b19 <alltraps>
 
-80105e44 <vector33>:
+801060c4 <vector33>:
 .globl vector33
 vector33:
   pushl $0
-80105e44:	6a 00                	push   $0x0
+801060c4:	6a 00                	push   $0x0
   pushl $33
-80105e46:	6a 21                	push   $0x21
+801060c6:	6a 21                	push   $0x21
   jmp alltraps
-80105e48:	e9 21 fa ff ff       	jmp    8010586e <alltraps>
+801060c8:	e9 4c fa ff ff       	jmp    80105b19 <alltraps>
 
-80105e4d <vector34>:
+801060cd <vector34>:
 .globl vector34
 vector34:
   pushl $0
-80105e4d:	6a 00                	push   $0x0
+801060cd:	6a 00                	push   $0x0
   pushl $34
-80105e4f:	6a 22                	push   $0x22
+801060cf:	6a 22                	push   $0x22
   jmp alltraps
-80105e51:	e9 18 fa ff ff       	jmp    8010586e <alltraps>
+801060d1:	e9 43 fa ff ff       	jmp    80105b19 <alltraps>
 
-80105e56 <vector35>:
+801060d6 <vector35>:
 .globl vector35
 vector35:
   pushl $0
-80105e56:	6a 00                	push   $0x0
+801060d6:	6a 00                	push   $0x0
   pushl $35
-80105e58:	6a 23                	push   $0x23
+801060d8:	6a 23                	push   $0x23
   jmp alltraps
-80105e5a:	e9 0f fa ff ff       	jmp    8010586e <alltraps>
+801060da:	e9 3a fa ff ff       	jmp    80105b19 <alltraps>
 
-80105e5f <vector36>:
+801060df <vector36>:
 .globl vector36
 vector36:
   pushl $0
-80105e5f:	6a 00                	push   $0x0
+801060df:	6a 00                	push   $0x0
   pushl $36
-80105e61:	6a 24                	push   $0x24
+801060e1:	6a 24                	push   $0x24
   jmp alltraps
-80105e63:	e9 06 fa ff ff       	jmp    8010586e <alltraps>
+801060e3:	e9 31 fa ff ff       	jmp    80105b19 <alltraps>
 
-80105e68 <vector37>:
+801060e8 <vector37>:
 .globl vector37
 vector37:
   pushl $0
-80105e68:	6a 00                	push   $0x0
+801060e8:	6a 00                	push   $0x0
   pushl $37
-80105e6a:	6a 25                	push   $0x25
+801060ea:	6a 25                	push   $0x25
   jmp alltraps
-80105e6c:	e9 fd f9 ff ff       	jmp    8010586e <alltraps>
+801060ec:	e9 28 fa ff ff       	jmp    80105b19 <alltraps>
 
-80105e71 <vector38>:
+801060f1 <vector38>:
 .globl vector38
 vector38:
   pushl $0
-80105e71:	6a 00                	push   $0x0
+801060f1:	6a 00                	push   $0x0
   pushl $38
-80105e73:	6a 26                	push   $0x26
+801060f3:	6a 26                	push   $0x26
   jmp alltraps
-80105e75:	e9 f4 f9 ff ff       	jmp    8010586e <alltraps>
+801060f5:	e9 1f fa ff ff       	jmp    80105b19 <alltraps>
 
-80105e7a <vector39>:
+801060fa <vector39>:
 .globl vector39
 vector39:
   pushl $0
-80105e7a:	6a 00                	push   $0x0
+801060fa:	6a 00                	push   $0x0
   pushl $39
-80105e7c:	6a 27                	push   $0x27
+801060fc:	6a 27                	push   $0x27
   jmp alltraps
-80105e7e:	e9 eb f9 ff ff       	jmp    8010586e <alltraps>
+801060fe:	e9 16 fa ff ff       	jmp    80105b19 <alltraps>
 
-80105e83 <vector40>:
+80106103 <vector40>:
 .globl vector40
 vector40:
   pushl $0
-80105e83:	6a 00                	push   $0x0
+80106103:	6a 00                	push   $0x0
   pushl $40
-80105e85:	6a 28                	push   $0x28
+80106105:	6a 28                	push   $0x28
   jmp alltraps
-80105e87:	e9 e2 f9 ff ff       	jmp    8010586e <alltraps>
+80106107:	e9 0d fa ff ff       	jmp    80105b19 <alltraps>
 
-80105e8c <vector41>:
+8010610c <vector41>:
 .globl vector41
 vector41:
   pushl $0
-80105e8c:	6a 00                	push   $0x0
+8010610c:	6a 00                	push   $0x0
   pushl $41
-80105e8e:	6a 29                	push   $0x29
+8010610e:	6a 29                	push   $0x29
   jmp alltraps
-80105e90:	e9 d9 f9 ff ff       	jmp    8010586e <alltraps>
+80106110:	e9 04 fa ff ff       	jmp    80105b19 <alltraps>
 
-80105e95 <vector42>:
+80106115 <vector42>:
 .globl vector42
 vector42:
   pushl $0
-80105e95:	6a 00                	push   $0x0
+80106115:	6a 00                	push   $0x0
   pushl $42
-80105e97:	6a 2a                	push   $0x2a
+80106117:	6a 2a                	push   $0x2a
   jmp alltraps
-80105e99:	e9 d0 f9 ff ff       	jmp    8010586e <alltraps>
+80106119:	e9 fb f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105e9e <vector43>:
+8010611e <vector43>:
 .globl vector43
 vector43:
   pushl $0
-80105e9e:	6a 00                	push   $0x0
+8010611e:	6a 00                	push   $0x0
   pushl $43
-80105ea0:	6a 2b                	push   $0x2b
+80106120:	6a 2b                	push   $0x2b
   jmp alltraps
-80105ea2:	e9 c7 f9 ff ff       	jmp    8010586e <alltraps>
+80106122:	e9 f2 f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105ea7 <vector44>:
+80106127 <vector44>:
 .globl vector44
 vector44:
   pushl $0
-80105ea7:	6a 00                	push   $0x0
+80106127:	6a 00                	push   $0x0
   pushl $44
-80105ea9:	6a 2c                	push   $0x2c
+80106129:	6a 2c                	push   $0x2c
   jmp alltraps
-80105eab:	e9 be f9 ff ff       	jmp    8010586e <alltraps>
+8010612b:	e9 e9 f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105eb0 <vector45>:
+80106130 <vector45>:
 .globl vector45
 vector45:
   pushl $0
-80105eb0:	6a 00                	push   $0x0
+80106130:	6a 00                	push   $0x0
   pushl $45
-80105eb2:	6a 2d                	push   $0x2d
+80106132:	6a 2d                	push   $0x2d
   jmp alltraps
-80105eb4:	e9 b5 f9 ff ff       	jmp    8010586e <alltraps>
+80106134:	e9 e0 f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105eb9 <vector46>:
+80106139 <vector46>:
 .globl vector46
 vector46:
   pushl $0
-80105eb9:	6a 00                	push   $0x0
+80106139:	6a 00                	push   $0x0
   pushl $46
-80105ebb:	6a 2e                	push   $0x2e
+8010613b:	6a 2e                	push   $0x2e
   jmp alltraps
-80105ebd:	e9 ac f9 ff ff       	jmp    8010586e <alltraps>
+8010613d:	e9 d7 f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105ec2 <vector47>:
+80106142 <vector47>:
 .globl vector47
 vector47:
   pushl $0
-80105ec2:	6a 00                	push   $0x0
+80106142:	6a 00                	push   $0x0
   pushl $47
-80105ec4:	6a 2f                	push   $0x2f
+80106144:	6a 2f                	push   $0x2f
   jmp alltraps
-80105ec6:	e9 a3 f9 ff ff       	jmp    8010586e <alltraps>
+80106146:	e9 ce f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105ecb <vector48>:
+8010614b <vector48>:
 .globl vector48
 vector48:
   pushl $0
-80105ecb:	6a 00                	push   $0x0
+8010614b:	6a 00                	push   $0x0
   pushl $48
-80105ecd:	6a 30                	push   $0x30
+8010614d:	6a 30                	push   $0x30
   jmp alltraps
-80105ecf:	e9 9a f9 ff ff       	jmp    8010586e <alltraps>
+8010614f:	e9 c5 f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105ed4 <vector49>:
+80106154 <vector49>:
 .globl vector49
 vector49:
   pushl $0
-80105ed4:	6a 00                	push   $0x0
+80106154:	6a 00                	push   $0x0
   pushl $49
-80105ed6:	6a 31                	push   $0x31
+80106156:	6a 31                	push   $0x31
   jmp alltraps
-80105ed8:	e9 91 f9 ff ff       	jmp    8010586e <alltraps>
+80106158:	e9 bc f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105edd <vector50>:
+8010615d <vector50>:
 .globl vector50
 vector50:
   pushl $0
-80105edd:	6a 00                	push   $0x0
+8010615d:	6a 00                	push   $0x0
   pushl $50
-80105edf:	6a 32                	push   $0x32
+8010615f:	6a 32                	push   $0x32
   jmp alltraps
-80105ee1:	e9 88 f9 ff ff       	jmp    8010586e <alltraps>
+80106161:	e9 b3 f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105ee6 <vector51>:
+80106166 <vector51>:
 .globl vector51
 vector51:
   pushl $0
-80105ee6:	6a 00                	push   $0x0
+80106166:	6a 00                	push   $0x0
   pushl $51
-80105ee8:	6a 33                	push   $0x33
+80106168:	6a 33                	push   $0x33
   jmp alltraps
-80105eea:	e9 7f f9 ff ff       	jmp    8010586e <alltraps>
+8010616a:	e9 aa f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105eef <vector52>:
+8010616f <vector52>:
 .globl vector52
 vector52:
   pushl $0
-80105eef:	6a 00                	push   $0x0
+8010616f:	6a 00                	push   $0x0
   pushl $52
-80105ef1:	6a 34                	push   $0x34
+80106171:	6a 34                	push   $0x34
   jmp alltraps
-80105ef3:	e9 76 f9 ff ff       	jmp    8010586e <alltraps>
+80106173:	e9 a1 f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105ef8 <vector53>:
+80106178 <vector53>:
 .globl vector53
 vector53:
   pushl $0
-80105ef8:	6a 00                	push   $0x0
+80106178:	6a 00                	push   $0x0
   pushl $53
-80105efa:	6a 35                	push   $0x35
+8010617a:	6a 35                	push   $0x35
   jmp alltraps
-80105efc:	e9 6d f9 ff ff       	jmp    8010586e <alltraps>
+8010617c:	e9 98 f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105f01 <vector54>:
+80106181 <vector54>:
 .globl vector54
 vector54:
   pushl $0
-80105f01:	6a 00                	push   $0x0
+80106181:	6a 00                	push   $0x0
   pushl $54
-80105f03:	6a 36                	push   $0x36
+80106183:	6a 36                	push   $0x36
   jmp alltraps
-80105f05:	e9 64 f9 ff ff       	jmp    8010586e <alltraps>
+80106185:	e9 8f f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105f0a <vector55>:
+8010618a <vector55>:
 .globl vector55
 vector55:
   pushl $0
-80105f0a:	6a 00                	push   $0x0
+8010618a:	6a 00                	push   $0x0
   pushl $55
-80105f0c:	6a 37                	push   $0x37
+8010618c:	6a 37                	push   $0x37
   jmp alltraps
-80105f0e:	e9 5b f9 ff ff       	jmp    8010586e <alltraps>
+8010618e:	e9 86 f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105f13 <vector56>:
+80106193 <vector56>:
 .globl vector56
 vector56:
   pushl $0
-80105f13:	6a 00                	push   $0x0
+80106193:	6a 00                	push   $0x0
   pushl $56
-80105f15:	6a 38                	push   $0x38
+80106195:	6a 38                	push   $0x38
   jmp alltraps
-80105f17:	e9 52 f9 ff ff       	jmp    8010586e <alltraps>
+80106197:	e9 7d f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105f1c <vector57>:
+8010619c <vector57>:
 .globl vector57
 vector57:
   pushl $0
-80105f1c:	6a 00                	push   $0x0
+8010619c:	6a 00                	push   $0x0
   pushl $57
-80105f1e:	6a 39                	push   $0x39
+8010619e:	6a 39                	push   $0x39
   jmp alltraps
-80105f20:	e9 49 f9 ff ff       	jmp    8010586e <alltraps>
+801061a0:	e9 74 f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105f25 <vector58>:
+801061a5 <vector58>:
 .globl vector58
 vector58:
   pushl $0
-80105f25:	6a 00                	push   $0x0
+801061a5:	6a 00                	push   $0x0
   pushl $58
-80105f27:	6a 3a                	push   $0x3a
+801061a7:	6a 3a                	push   $0x3a
   jmp alltraps
-80105f29:	e9 40 f9 ff ff       	jmp    8010586e <alltraps>
+801061a9:	e9 6b f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105f2e <vector59>:
+801061ae <vector59>:
 .globl vector59
 vector59:
   pushl $0
-80105f2e:	6a 00                	push   $0x0
+801061ae:	6a 00                	push   $0x0
   pushl $59
-80105f30:	6a 3b                	push   $0x3b
+801061b0:	6a 3b                	push   $0x3b
   jmp alltraps
-80105f32:	e9 37 f9 ff ff       	jmp    8010586e <alltraps>
+801061b2:	e9 62 f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105f37 <vector60>:
+801061b7 <vector60>:
 .globl vector60
 vector60:
   pushl $0
-80105f37:	6a 00                	push   $0x0
+801061b7:	6a 00                	push   $0x0
   pushl $60
-80105f39:	6a 3c                	push   $0x3c
+801061b9:	6a 3c                	push   $0x3c
   jmp alltraps
-80105f3b:	e9 2e f9 ff ff       	jmp    8010586e <alltraps>
+801061bb:	e9 59 f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105f40 <vector61>:
+801061c0 <vector61>:
 .globl vector61
 vector61:
   pushl $0
-80105f40:	6a 00                	push   $0x0
+801061c0:	6a 00                	push   $0x0
   pushl $61
-80105f42:	6a 3d                	push   $0x3d
+801061c2:	6a 3d                	push   $0x3d
   jmp alltraps
-80105f44:	e9 25 f9 ff ff       	jmp    8010586e <alltraps>
+801061c4:	e9 50 f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105f49 <vector62>:
+801061c9 <vector62>:
 .globl vector62
 vector62:
   pushl $0
-80105f49:	6a 00                	push   $0x0
+801061c9:	6a 00                	push   $0x0
   pushl $62
-80105f4b:	6a 3e                	push   $0x3e
+801061cb:	6a 3e                	push   $0x3e
   jmp alltraps
-80105f4d:	e9 1c f9 ff ff       	jmp    8010586e <alltraps>
+801061cd:	e9 47 f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105f52 <vector63>:
+801061d2 <vector63>:
 .globl vector63
 vector63:
   pushl $0
-80105f52:	6a 00                	push   $0x0
+801061d2:	6a 00                	push   $0x0
   pushl $63
-80105f54:	6a 3f                	push   $0x3f
+801061d4:	6a 3f                	push   $0x3f
   jmp alltraps
-80105f56:	e9 13 f9 ff ff       	jmp    8010586e <alltraps>
+801061d6:	e9 3e f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105f5b <vector64>:
+801061db <vector64>:
 .globl vector64
 vector64:
   pushl $0
-80105f5b:	6a 00                	push   $0x0
+801061db:	6a 00                	push   $0x0
   pushl $64
-80105f5d:	6a 40                	push   $0x40
+801061dd:	6a 40                	push   $0x40
   jmp alltraps
-80105f5f:	e9 0a f9 ff ff       	jmp    8010586e <alltraps>
+801061df:	e9 35 f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105f64 <vector65>:
+801061e4 <vector65>:
 .globl vector65
 vector65:
   pushl $0
-80105f64:	6a 00                	push   $0x0
+801061e4:	6a 00                	push   $0x0
   pushl $65
-80105f66:	6a 41                	push   $0x41
+801061e6:	6a 41                	push   $0x41
   jmp alltraps
-80105f68:	e9 01 f9 ff ff       	jmp    8010586e <alltraps>
+801061e8:	e9 2c f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105f6d <vector66>:
+801061ed <vector66>:
 .globl vector66
 vector66:
   pushl $0
-80105f6d:	6a 00                	push   $0x0
+801061ed:	6a 00                	push   $0x0
   pushl $66
-80105f6f:	6a 42                	push   $0x42
+801061ef:	6a 42                	push   $0x42
   jmp alltraps
-80105f71:	e9 f8 f8 ff ff       	jmp    8010586e <alltraps>
+801061f1:	e9 23 f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105f76 <vector67>:
+801061f6 <vector67>:
 .globl vector67
 vector67:
   pushl $0
-80105f76:	6a 00                	push   $0x0
+801061f6:	6a 00                	push   $0x0
   pushl $67
-80105f78:	6a 43                	push   $0x43
+801061f8:	6a 43                	push   $0x43
   jmp alltraps
-80105f7a:	e9 ef f8 ff ff       	jmp    8010586e <alltraps>
+801061fa:	e9 1a f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105f7f <vector68>:
+801061ff <vector68>:
 .globl vector68
 vector68:
   pushl $0
-80105f7f:	6a 00                	push   $0x0
+801061ff:	6a 00                	push   $0x0
   pushl $68
-80105f81:	6a 44                	push   $0x44
+80106201:	6a 44                	push   $0x44
   jmp alltraps
-80105f83:	e9 e6 f8 ff ff       	jmp    8010586e <alltraps>
+80106203:	e9 11 f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105f88 <vector69>:
+80106208 <vector69>:
 .globl vector69
 vector69:
   pushl $0
-80105f88:	6a 00                	push   $0x0
+80106208:	6a 00                	push   $0x0
   pushl $69
-80105f8a:	6a 45                	push   $0x45
+8010620a:	6a 45                	push   $0x45
   jmp alltraps
-80105f8c:	e9 dd f8 ff ff       	jmp    8010586e <alltraps>
+8010620c:	e9 08 f9 ff ff       	jmp    80105b19 <alltraps>
 
-80105f91 <vector70>:
+80106211 <vector70>:
 .globl vector70
 vector70:
   pushl $0
-80105f91:	6a 00                	push   $0x0
+80106211:	6a 00                	push   $0x0
   pushl $70
-80105f93:	6a 46                	push   $0x46
+80106213:	6a 46                	push   $0x46
   jmp alltraps
-80105f95:	e9 d4 f8 ff ff       	jmp    8010586e <alltraps>
+80106215:	e9 ff f8 ff ff       	jmp    80105b19 <alltraps>
 
-80105f9a <vector71>:
+8010621a <vector71>:
 .globl vector71
 vector71:
   pushl $0
-80105f9a:	6a 00                	push   $0x0
+8010621a:	6a 00                	push   $0x0
   pushl $71
-80105f9c:	6a 47                	push   $0x47
+8010621c:	6a 47                	push   $0x47
   jmp alltraps
-80105f9e:	e9 cb f8 ff ff       	jmp    8010586e <alltraps>
+8010621e:	e9 f6 f8 ff ff       	jmp    80105b19 <alltraps>
 
-80105fa3 <vector72>:
+80106223 <vector72>:
 .globl vector72
 vector72:
   pushl $0
-80105fa3:	6a 00                	push   $0x0
+80106223:	6a 00                	push   $0x0
   pushl $72
-80105fa5:	6a 48                	push   $0x48
+80106225:	6a 48                	push   $0x48
   jmp alltraps
-80105fa7:	e9 c2 f8 ff ff       	jmp    8010586e <alltraps>
+80106227:	e9 ed f8 ff ff       	jmp    80105b19 <alltraps>
 
-80105fac <vector73>:
+8010622c <vector73>:
 .globl vector73
 vector73:
   pushl $0
-80105fac:	6a 00                	push   $0x0
+8010622c:	6a 00                	push   $0x0
   pushl $73
-80105fae:	6a 49                	push   $0x49
+8010622e:	6a 49                	push   $0x49
   jmp alltraps
-80105fb0:	e9 b9 f8 ff ff       	jmp    8010586e <alltraps>
+80106230:	e9 e4 f8 ff ff       	jmp    80105b19 <alltraps>
 
-80105fb5 <vector74>:
+80106235 <vector74>:
 .globl vector74
 vector74:
   pushl $0
-80105fb5:	6a 00                	push   $0x0
+80106235:	6a 00                	push   $0x0
   pushl $74
-80105fb7:	6a 4a                	push   $0x4a
+80106237:	6a 4a                	push   $0x4a
   jmp alltraps
-80105fb9:	e9 b0 f8 ff ff       	jmp    8010586e <alltraps>
+80106239:	e9 db f8 ff ff       	jmp    80105b19 <alltraps>
 
-80105fbe <vector75>:
+8010623e <vector75>:
 .globl vector75
 vector75:
   pushl $0
-80105fbe:	6a 00                	push   $0x0
+8010623e:	6a 00                	push   $0x0
   pushl $75
-80105fc0:	6a 4b                	push   $0x4b
+80106240:	6a 4b                	push   $0x4b
   jmp alltraps
-80105fc2:	e9 a7 f8 ff ff       	jmp    8010586e <alltraps>
+80106242:	e9 d2 f8 ff ff       	jmp    80105b19 <alltraps>
 
-80105fc7 <vector76>:
+80106247 <vector76>:
 .globl vector76
 vector76:
   pushl $0
-80105fc7:	6a 00                	push   $0x0
+80106247:	6a 00                	push   $0x0
   pushl $76
-80105fc9:	6a 4c                	push   $0x4c
+80106249:	6a 4c                	push   $0x4c
   jmp alltraps
-80105fcb:	e9 9e f8 ff ff       	jmp    8010586e <alltraps>
+8010624b:	e9 c9 f8 ff ff       	jmp    80105b19 <alltraps>
 
-80105fd0 <vector77>:
+80106250 <vector77>:
 .globl vector77
 vector77:
   pushl $0
-80105fd0:	6a 00                	push   $0x0
+80106250:	6a 00                	push   $0x0
   pushl $77
-80105fd2:	6a 4d                	push   $0x4d
+80106252:	6a 4d                	push   $0x4d
   jmp alltraps
-80105fd4:	e9 95 f8 ff ff       	jmp    8010586e <alltraps>
+80106254:	e9 c0 f8 ff ff       	jmp    80105b19 <alltraps>
 
-80105fd9 <vector78>:
+80106259 <vector78>:
 .globl vector78
 vector78:
   pushl $0
-80105fd9:	6a 00                	push   $0x0
+80106259:	6a 00                	push   $0x0
   pushl $78
-80105fdb:	6a 4e                	push   $0x4e
+8010625b:	6a 4e                	push   $0x4e
   jmp alltraps
-80105fdd:	e9 8c f8 ff ff       	jmp    8010586e <alltraps>
+8010625d:	e9 b7 f8 ff ff       	jmp    80105b19 <alltraps>
 
-80105fe2 <vector79>:
+80106262 <vector79>:
 .globl vector79
 vector79:
   pushl $0
-80105fe2:	6a 00                	push   $0x0
+80106262:	6a 00                	push   $0x0
   pushl $79
-80105fe4:	6a 4f                	push   $0x4f
+80106264:	6a 4f                	push   $0x4f
   jmp alltraps
-80105fe6:	e9 83 f8 ff ff       	jmp    8010586e <alltraps>
+80106266:	e9 ae f8 ff ff       	jmp    80105b19 <alltraps>
 
-80105feb <vector80>:
+8010626b <vector80>:
 .globl vector80
 vector80:
   pushl $0
-80105feb:	6a 00                	push   $0x0
+8010626b:	6a 00                	push   $0x0
   pushl $80
-80105fed:	6a 50                	push   $0x50
+8010626d:	6a 50                	push   $0x50
   jmp alltraps
-80105fef:	e9 7a f8 ff ff       	jmp    8010586e <alltraps>
+8010626f:	e9 a5 f8 ff ff       	jmp    80105b19 <alltraps>
 
-80105ff4 <vector81>:
+80106274 <vector81>:
 .globl vector81
 vector81:
   pushl $0
-80105ff4:	6a 00                	push   $0x0
+80106274:	6a 00                	push   $0x0
   pushl $81
-80105ff6:	6a 51                	push   $0x51
+80106276:	6a 51                	push   $0x51
   jmp alltraps
-80105ff8:	e9 71 f8 ff ff       	jmp    8010586e <alltraps>
+80106278:	e9 9c f8 ff ff       	jmp    80105b19 <alltraps>
 
-80105ffd <vector82>:
+8010627d <vector82>:
 .globl vector82
 vector82:
   pushl $0
-80105ffd:	6a 00                	push   $0x0
+8010627d:	6a 00                	push   $0x0
   pushl $82
-80105fff:	6a 52                	push   $0x52
+8010627f:	6a 52                	push   $0x52
   jmp alltraps
-80106001:	e9 68 f8 ff ff       	jmp    8010586e <alltraps>
+80106281:	e9 93 f8 ff ff       	jmp    80105b19 <alltraps>
 
-80106006 <vector83>:
+80106286 <vector83>:
 .globl vector83
 vector83:
   pushl $0
-80106006:	6a 00                	push   $0x0
+80106286:	6a 00                	push   $0x0
   pushl $83
-80106008:	6a 53                	push   $0x53
+80106288:	6a 53                	push   $0x53
   jmp alltraps
-8010600a:	e9 5f f8 ff ff       	jmp    8010586e <alltraps>
+8010628a:	e9 8a f8 ff ff       	jmp    80105b19 <alltraps>
 
-8010600f <vector84>:
+8010628f <vector84>:
 .globl vector84
 vector84:
   pushl $0
-8010600f:	6a 00                	push   $0x0
+8010628f:	6a 00                	push   $0x0
   pushl $84
-80106011:	6a 54                	push   $0x54
+80106291:	6a 54                	push   $0x54
   jmp alltraps
-80106013:	e9 56 f8 ff ff       	jmp    8010586e <alltraps>
+80106293:	e9 81 f8 ff ff       	jmp    80105b19 <alltraps>
 
-80106018 <vector85>:
+80106298 <vector85>:
 .globl vector85
 vector85:
   pushl $0
-80106018:	6a 00                	push   $0x0
+80106298:	6a 00                	push   $0x0
   pushl $85
-8010601a:	6a 55                	push   $0x55
+8010629a:	6a 55                	push   $0x55
   jmp alltraps
-8010601c:	e9 4d f8 ff ff       	jmp    8010586e <alltraps>
+8010629c:	e9 78 f8 ff ff       	jmp    80105b19 <alltraps>
 
-80106021 <vector86>:
+801062a1 <vector86>:
 .globl vector86
 vector86:
   pushl $0
-80106021:	6a 00                	push   $0x0
+801062a1:	6a 00                	push   $0x0
   pushl $86
-80106023:	6a 56                	push   $0x56
+801062a3:	6a 56                	push   $0x56
   jmp alltraps
-80106025:	e9 44 f8 ff ff       	jmp    8010586e <alltraps>
+801062a5:	e9 6f f8 ff ff       	jmp    80105b19 <alltraps>
 
-8010602a <vector87>:
+801062aa <vector87>:
 .globl vector87
 vector87:
   pushl $0
-8010602a:	6a 00                	push   $0x0
+801062aa:	6a 00                	push   $0x0
   pushl $87
-8010602c:	6a 57                	push   $0x57
+801062ac:	6a 57                	push   $0x57
   jmp alltraps
-8010602e:	e9 3b f8 ff ff       	jmp    8010586e <alltraps>
+801062ae:	e9 66 f8 ff ff       	jmp    80105b19 <alltraps>
 
-80106033 <vector88>:
+801062b3 <vector88>:
 .globl vector88
 vector88:
   pushl $0
-80106033:	6a 00                	push   $0x0
+801062b3:	6a 00                	push   $0x0
   pushl $88
-80106035:	6a 58                	push   $0x58
+801062b5:	6a 58                	push   $0x58
   jmp alltraps
-80106037:	e9 32 f8 ff ff       	jmp    8010586e <alltraps>
+801062b7:	e9 5d f8 ff ff       	jmp    80105b19 <alltraps>
 
-8010603c <vector89>:
+801062bc <vector89>:
 .globl vector89
 vector89:
   pushl $0
-8010603c:	6a 00                	push   $0x0
+801062bc:	6a 00                	push   $0x0
   pushl $89
-8010603e:	6a 59                	push   $0x59
+801062be:	6a 59                	push   $0x59
   jmp alltraps
-80106040:	e9 29 f8 ff ff       	jmp    8010586e <alltraps>
+801062c0:	e9 54 f8 ff ff       	jmp    80105b19 <alltraps>
 
-80106045 <vector90>:
+801062c5 <vector90>:
 .globl vector90
 vector90:
   pushl $0
-80106045:	6a 00                	push   $0x0
+801062c5:	6a 00                	push   $0x0
   pushl $90
-80106047:	6a 5a                	push   $0x5a
+801062c7:	6a 5a                	push   $0x5a
   jmp alltraps
-80106049:	e9 20 f8 ff ff       	jmp    8010586e <alltraps>
+801062c9:	e9 4b f8 ff ff       	jmp    80105b19 <alltraps>
 
-8010604e <vector91>:
+801062ce <vector91>:
 .globl vector91
 vector91:
   pushl $0
-8010604e:	6a 00                	push   $0x0
+801062ce:	6a 00                	push   $0x0
   pushl $91
-80106050:	6a 5b                	push   $0x5b
+801062d0:	6a 5b                	push   $0x5b
   jmp alltraps
-80106052:	e9 17 f8 ff ff       	jmp    8010586e <alltraps>
+801062d2:	e9 42 f8 ff ff       	jmp    80105b19 <alltraps>
 
-80106057 <vector92>:
+801062d7 <vector92>:
 .globl vector92
 vector92:
   pushl $0
-80106057:	6a 00                	push   $0x0
+801062d7:	6a 00                	push   $0x0
   pushl $92
-80106059:	6a 5c                	push   $0x5c
+801062d9:	6a 5c                	push   $0x5c
   jmp alltraps
-8010605b:	e9 0e f8 ff ff       	jmp    8010586e <alltraps>
+801062db:	e9 39 f8 ff ff       	jmp    80105b19 <alltraps>
 
-80106060 <vector93>:
+801062e0 <vector93>:
 .globl vector93
 vector93:
   pushl $0
-80106060:	6a 00                	push   $0x0
+801062e0:	6a 00                	push   $0x0
   pushl $93
-80106062:	6a 5d                	push   $0x5d
+801062e2:	6a 5d                	push   $0x5d
   jmp alltraps
-80106064:	e9 05 f8 ff ff       	jmp    8010586e <alltraps>
+801062e4:	e9 30 f8 ff ff       	jmp    80105b19 <alltraps>
 
-80106069 <vector94>:
+801062e9 <vector94>:
 .globl vector94
 vector94:
   pushl $0
-80106069:	6a 00                	push   $0x0
+801062e9:	6a 00                	push   $0x0
   pushl $94
-8010606b:	6a 5e                	push   $0x5e
+801062eb:	6a 5e                	push   $0x5e
   jmp alltraps
-8010606d:	e9 fc f7 ff ff       	jmp    8010586e <alltraps>
+801062ed:	e9 27 f8 ff ff       	jmp    80105b19 <alltraps>
 
-80106072 <vector95>:
+801062f2 <vector95>:
 .globl vector95
 vector95:
   pushl $0
-80106072:	6a 00                	push   $0x0
+801062f2:	6a 00                	push   $0x0
   pushl $95
-80106074:	6a 5f                	push   $0x5f
+801062f4:	6a 5f                	push   $0x5f
   jmp alltraps
-80106076:	e9 f3 f7 ff ff       	jmp    8010586e <alltraps>
+801062f6:	e9 1e f8 ff ff       	jmp    80105b19 <alltraps>
 
-8010607b <vector96>:
+801062fb <vector96>:
 .globl vector96
 vector96:
   pushl $0
-8010607b:	6a 00                	push   $0x0
+801062fb:	6a 00                	push   $0x0
   pushl $96
-8010607d:	6a 60                	push   $0x60
+801062fd:	6a 60                	push   $0x60
   jmp alltraps
-8010607f:	e9 ea f7 ff ff       	jmp    8010586e <alltraps>
+801062ff:	e9 15 f8 ff ff       	jmp    80105b19 <alltraps>
 
-80106084 <vector97>:
+80106304 <vector97>:
 .globl vector97
 vector97:
   pushl $0
-80106084:	6a 00                	push   $0x0
+80106304:	6a 00                	push   $0x0
   pushl $97
-80106086:	6a 61                	push   $0x61
+80106306:	6a 61                	push   $0x61
   jmp alltraps
-80106088:	e9 e1 f7 ff ff       	jmp    8010586e <alltraps>
+80106308:	e9 0c f8 ff ff       	jmp    80105b19 <alltraps>
 
-8010608d <vector98>:
+8010630d <vector98>:
 .globl vector98
 vector98:
   pushl $0
-8010608d:	6a 00                	push   $0x0
+8010630d:	6a 00                	push   $0x0
   pushl $98
-8010608f:	6a 62                	push   $0x62
+8010630f:	6a 62                	push   $0x62
   jmp alltraps
-80106091:	e9 d8 f7 ff ff       	jmp    8010586e <alltraps>
+80106311:	e9 03 f8 ff ff       	jmp    80105b19 <alltraps>
 
-80106096 <vector99>:
+80106316 <vector99>:
 .globl vector99
 vector99:
   pushl $0
-80106096:	6a 00                	push   $0x0
+80106316:	6a 00                	push   $0x0
   pushl $99
-80106098:	6a 63                	push   $0x63
+80106318:	6a 63                	push   $0x63
   jmp alltraps
-8010609a:	e9 cf f7 ff ff       	jmp    8010586e <alltraps>
+8010631a:	e9 fa f7 ff ff       	jmp    80105b19 <alltraps>
 
-8010609f <vector100>:
+8010631f <vector100>:
 .globl vector100
 vector100:
   pushl $0
-8010609f:	6a 00                	push   $0x0
+8010631f:	6a 00                	push   $0x0
   pushl $100
-801060a1:	6a 64                	push   $0x64
+80106321:	6a 64                	push   $0x64
   jmp alltraps
-801060a3:	e9 c6 f7 ff ff       	jmp    8010586e <alltraps>
+80106323:	e9 f1 f7 ff ff       	jmp    80105b19 <alltraps>
 
-801060a8 <vector101>:
+80106328 <vector101>:
 .globl vector101
 vector101:
   pushl $0
-801060a8:	6a 00                	push   $0x0
+80106328:	6a 00                	push   $0x0
   pushl $101
-801060aa:	6a 65                	push   $0x65
+8010632a:	6a 65                	push   $0x65
   jmp alltraps
-801060ac:	e9 bd f7 ff ff       	jmp    8010586e <alltraps>
+8010632c:	e9 e8 f7 ff ff       	jmp    80105b19 <alltraps>
 
-801060b1 <vector102>:
+80106331 <vector102>:
 .globl vector102
 vector102:
   pushl $0
-801060b1:	6a 00                	push   $0x0
+80106331:	6a 00                	push   $0x0
   pushl $102
-801060b3:	6a 66                	push   $0x66
+80106333:	6a 66                	push   $0x66
   jmp alltraps
-801060b5:	e9 b4 f7 ff ff       	jmp    8010586e <alltraps>
+80106335:	e9 df f7 ff ff       	jmp    80105b19 <alltraps>
 
-801060ba <vector103>:
+8010633a <vector103>:
 .globl vector103
 vector103:
   pushl $0
-801060ba:	6a 00                	push   $0x0
+8010633a:	6a 00                	push   $0x0
   pushl $103
-801060bc:	6a 67                	push   $0x67
+8010633c:	6a 67                	push   $0x67
   jmp alltraps
-801060be:	e9 ab f7 ff ff       	jmp    8010586e <alltraps>
+8010633e:	e9 d6 f7 ff ff       	jmp    80105b19 <alltraps>
 
-801060c3 <vector104>:
+80106343 <vector104>:
 .globl vector104
 vector104:
   pushl $0
-801060c3:	6a 00                	push   $0x0
+80106343:	6a 00                	push   $0x0
   pushl $104
-801060c5:	6a 68                	push   $0x68
+80106345:	6a 68                	push   $0x68
   jmp alltraps
-801060c7:	e9 a2 f7 ff ff       	jmp    8010586e <alltraps>
+80106347:	e9 cd f7 ff ff       	jmp    80105b19 <alltraps>
 
-801060cc <vector105>:
+8010634c <vector105>:
 .globl vector105
 vector105:
   pushl $0
-801060cc:	6a 00                	push   $0x0
+8010634c:	6a 00                	push   $0x0
   pushl $105
-801060ce:	6a 69                	push   $0x69
+8010634e:	6a 69                	push   $0x69
   jmp alltraps
-801060d0:	e9 99 f7 ff ff       	jmp    8010586e <alltraps>
+80106350:	e9 c4 f7 ff ff       	jmp    80105b19 <alltraps>
 
-801060d5 <vector106>:
+80106355 <vector106>:
 .globl vector106
 vector106:
   pushl $0
-801060d5:	6a 00                	push   $0x0
+80106355:	6a 00                	push   $0x0
   pushl $106
-801060d7:	6a 6a                	push   $0x6a
+80106357:	6a 6a                	push   $0x6a
   jmp alltraps
-801060d9:	e9 90 f7 ff ff       	jmp    8010586e <alltraps>
+80106359:	e9 bb f7 ff ff       	jmp    80105b19 <alltraps>
 
-801060de <vector107>:
+8010635e <vector107>:
 .globl vector107
 vector107:
   pushl $0
-801060de:	6a 00                	push   $0x0
+8010635e:	6a 00                	push   $0x0
   pushl $107
-801060e0:	6a 6b                	push   $0x6b
+80106360:	6a 6b                	push   $0x6b
   jmp alltraps
-801060e2:	e9 87 f7 ff ff       	jmp    8010586e <alltraps>
+80106362:	e9 b2 f7 ff ff       	jmp    80105b19 <alltraps>
 
-801060e7 <vector108>:
+80106367 <vector108>:
 .globl vector108
 vector108:
   pushl $0
-801060e7:	6a 00                	push   $0x0
+80106367:	6a 00                	push   $0x0
   pushl $108
-801060e9:	6a 6c                	push   $0x6c
+80106369:	6a 6c                	push   $0x6c
   jmp alltraps
-801060eb:	e9 7e f7 ff ff       	jmp    8010586e <alltraps>
+8010636b:	e9 a9 f7 ff ff       	jmp    80105b19 <alltraps>
 
-801060f0 <vector109>:
+80106370 <vector109>:
 .globl vector109
 vector109:
   pushl $0
-801060f0:	6a 00                	push   $0x0
+80106370:	6a 00                	push   $0x0
   pushl $109
-801060f2:	6a 6d                	push   $0x6d
+80106372:	6a 6d                	push   $0x6d
   jmp alltraps
-801060f4:	e9 75 f7 ff ff       	jmp    8010586e <alltraps>
+80106374:	e9 a0 f7 ff ff       	jmp    80105b19 <alltraps>
 
-801060f9 <vector110>:
+80106379 <vector110>:
 .globl vector110
 vector110:
   pushl $0
-801060f9:	6a 00                	push   $0x0
+80106379:	6a 00                	push   $0x0
   pushl $110
-801060fb:	6a 6e                	push   $0x6e
+8010637b:	6a 6e                	push   $0x6e
   jmp alltraps
-801060fd:	e9 6c f7 ff ff       	jmp    8010586e <alltraps>
+8010637d:	e9 97 f7 ff ff       	jmp    80105b19 <alltraps>
 
-80106102 <vector111>:
+80106382 <vector111>:
 .globl vector111
 vector111:
   pushl $0
-80106102:	6a 00                	push   $0x0
+80106382:	6a 00                	push   $0x0
   pushl $111
-80106104:	6a 6f                	push   $0x6f
+80106384:	6a 6f                	push   $0x6f
   jmp alltraps
-80106106:	e9 63 f7 ff ff       	jmp    8010586e <alltraps>
+80106386:	e9 8e f7 ff ff       	jmp    80105b19 <alltraps>
 
-8010610b <vector112>:
+8010638b <vector112>:
 .globl vector112
 vector112:
   pushl $0
-8010610b:	6a 00                	push   $0x0
+8010638b:	6a 00                	push   $0x0
   pushl $112
-8010610d:	6a 70                	push   $0x70
+8010638d:	6a 70                	push   $0x70
   jmp alltraps
-8010610f:	e9 5a f7 ff ff       	jmp    8010586e <alltraps>
+8010638f:	e9 85 f7 ff ff       	jmp    80105b19 <alltraps>
 
-80106114 <vector113>:
+80106394 <vector113>:
 .globl vector113
 vector113:
   pushl $0
-80106114:	6a 00                	push   $0x0
+80106394:	6a 00                	push   $0x0
   pushl $113
-80106116:	6a 71                	push   $0x71
+80106396:	6a 71                	push   $0x71
   jmp alltraps
-80106118:	e9 51 f7 ff ff       	jmp    8010586e <alltraps>
+80106398:	e9 7c f7 ff ff       	jmp    80105b19 <alltraps>
 
-8010611d <vector114>:
+8010639d <vector114>:
 .globl vector114
 vector114:
   pushl $0
-8010611d:	6a 00                	push   $0x0
+8010639d:	6a 00                	push   $0x0
   pushl $114
-8010611f:	6a 72                	push   $0x72
+8010639f:	6a 72                	push   $0x72
   jmp alltraps
-80106121:	e9 48 f7 ff ff       	jmp    8010586e <alltraps>
+801063a1:	e9 73 f7 ff ff       	jmp    80105b19 <alltraps>
 
-80106126 <vector115>:
+801063a6 <vector115>:
 .globl vector115
 vector115:
   pushl $0
-80106126:	6a 00                	push   $0x0
+801063a6:	6a 00                	push   $0x0
   pushl $115
-80106128:	6a 73                	push   $0x73
+801063a8:	6a 73                	push   $0x73
   jmp alltraps
-8010612a:	e9 3f f7 ff ff       	jmp    8010586e <alltraps>
+801063aa:	e9 6a f7 ff ff       	jmp    80105b19 <alltraps>
 
-8010612f <vector116>:
+801063af <vector116>:
 .globl vector116
 vector116:
   pushl $0
-8010612f:	6a 00                	push   $0x0
+801063af:	6a 00                	push   $0x0
   pushl $116
-80106131:	6a 74                	push   $0x74
+801063b1:	6a 74                	push   $0x74
   jmp alltraps
-80106133:	e9 36 f7 ff ff       	jmp    8010586e <alltraps>
+801063b3:	e9 61 f7 ff ff       	jmp    80105b19 <alltraps>
 
-80106138 <vector117>:
+801063b8 <vector117>:
 .globl vector117
 vector117:
   pushl $0
-80106138:	6a 00                	push   $0x0
+801063b8:	6a 00                	push   $0x0
   pushl $117
-8010613a:	6a 75                	push   $0x75
+801063ba:	6a 75                	push   $0x75
   jmp alltraps
-8010613c:	e9 2d f7 ff ff       	jmp    8010586e <alltraps>
+801063bc:	e9 58 f7 ff ff       	jmp    80105b19 <alltraps>
 
-80106141 <vector118>:
+801063c1 <vector118>:
 .globl vector118
 vector118:
   pushl $0
-80106141:	6a 00                	push   $0x0
+801063c1:	6a 00                	push   $0x0
   pushl $118
-80106143:	6a 76                	push   $0x76
+801063c3:	6a 76                	push   $0x76
   jmp alltraps
-80106145:	e9 24 f7 ff ff       	jmp    8010586e <alltraps>
+801063c5:	e9 4f f7 ff ff       	jmp    80105b19 <alltraps>
 
-8010614a <vector119>:
+801063ca <vector119>:
 .globl vector119
 vector119:
   pushl $0
-8010614a:	6a 00                	push   $0x0
+801063ca:	6a 00                	push   $0x0
   pushl $119
-8010614c:	6a 77                	push   $0x77
+801063cc:	6a 77                	push   $0x77
   jmp alltraps
-8010614e:	e9 1b f7 ff ff       	jmp    8010586e <alltraps>
+801063ce:	e9 46 f7 ff ff       	jmp    80105b19 <alltraps>
 
-80106153 <vector120>:
+801063d3 <vector120>:
 .globl vector120
 vector120:
   pushl $0
-80106153:	6a 00                	push   $0x0
+801063d3:	6a 00                	push   $0x0
   pushl $120
-80106155:	6a 78                	push   $0x78
+801063d5:	6a 78                	push   $0x78
   jmp alltraps
-80106157:	e9 12 f7 ff ff       	jmp    8010586e <alltraps>
+801063d7:	e9 3d f7 ff ff       	jmp    80105b19 <alltraps>
 
-8010615c <vector121>:
+801063dc <vector121>:
 .globl vector121
 vector121:
   pushl $0
-8010615c:	6a 00                	push   $0x0
+801063dc:	6a 00                	push   $0x0
   pushl $121
-8010615e:	6a 79                	push   $0x79
+801063de:	6a 79                	push   $0x79
   jmp alltraps
-80106160:	e9 09 f7 ff ff       	jmp    8010586e <alltraps>
+801063e0:	e9 34 f7 ff ff       	jmp    80105b19 <alltraps>
 
-80106165 <vector122>:
+801063e5 <vector122>:
 .globl vector122
 vector122:
   pushl $0
-80106165:	6a 00                	push   $0x0
+801063e5:	6a 00                	push   $0x0
   pushl $122
-80106167:	6a 7a                	push   $0x7a
+801063e7:	6a 7a                	push   $0x7a
   jmp alltraps
-80106169:	e9 00 f7 ff ff       	jmp    8010586e <alltraps>
+801063e9:	e9 2b f7 ff ff       	jmp    80105b19 <alltraps>
 
-8010616e <vector123>:
+801063ee <vector123>:
 .globl vector123
 vector123:
   pushl $0
-8010616e:	6a 00                	push   $0x0
+801063ee:	6a 00                	push   $0x0
   pushl $123
-80106170:	6a 7b                	push   $0x7b
+801063f0:	6a 7b                	push   $0x7b
   jmp alltraps
-80106172:	e9 f7 f6 ff ff       	jmp    8010586e <alltraps>
+801063f2:	e9 22 f7 ff ff       	jmp    80105b19 <alltraps>
 
-80106177 <vector124>:
+801063f7 <vector124>:
 .globl vector124
 vector124:
   pushl $0
-80106177:	6a 00                	push   $0x0
+801063f7:	6a 00                	push   $0x0
   pushl $124
-80106179:	6a 7c                	push   $0x7c
+801063f9:	6a 7c                	push   $0x7c
   jmp alltraps
-8010617b:	e9 ee f6 ff ff       	jmp    8010586e <alltraps>
+801063fb:	e9 19 f7 ff ff       	jmp    80105b19 <alltraps>
 
-80106180 <vector125>:
+80106400 <vector125>:
 .globl vector125
 vector125:
   pushl $0
-80106180:	6a 00                	push   $0x0
+80106400:	6a 00                	push   $0x0
   pushl $125
-80106182:	6a 7d                	push   $0x7d
+80106402:	6a 7d                	push   $0x7d
   jmp alltraps
-80106184:	e9 e5 f6 ff ff       	jmp    8010586e <alltraps>
+80106404:	e9 10 f7 ff ff       	jmp    80105b19 <alltraps>
 
-80106189 <vector126>:
+80106409 <vector126>:
 .globl vector126
 vector126:
   pushl $0
-80106189:	6a 00                	push   $0x0
+80106409:	6a 00                	push   $0x0
   pushl $126
-8010618b:	6a 7e                	push   $0x7e
+8010640b:	6a 7e                	push   $0x7e
   jmp alltraps
-8010618d:	e9 dc f6 ff ff       	jmp    8010586e <alltraps>
+8010640d:	e9 07 f7 ff ff       	jmp    80105b19 <alltraps>
 
-80106192 <vector127>:
+80106412 <vector127>:
 .globl vector127
 vector127:
   pushl $0
-80106192:	6a 00                	push   $0x0
+80106412:	6a 00                	push   $0x0
   pushl $127
-80106194:	6a 7f                	push   $0x7f
+80106414:	6a 7f                	push   $0x7f
   jmp alltraps
-80106196:	e9 d3 f6 ff ff       	jmp    8010586e <alltraps>
+80106416:	e9 fe f6 ff ff       	jmp    80105b19 <alltraps>
 
-8010619b <vector128>:
+8010641b <vector128>:
 .globl vector128
 vector128:
   pushl $0
-8010619b:	6a 00                	push   $0x0
+8010641b:	6a 00                	push   $0x0
   pushl $128
-8010619d:	68 80 00 00 00       	push   $0x80
+8010641d:	68 80 00 00 00       	push   $0x80
   jmp alltraps
-801061a2:	e9 c7 f6 ff ff       	jmp    8010586e <alltraps>
+80106422:	e9 f2 f6 ff ff       	jmp    80105b19 <alltraps>
 
-801061a7 <vector129>:
+80106427 <vector129>:
 .globl vector129
 vector129:
   pushl $0
-801061a7:	6a 00                	push   $0x0
+80106427:	6a 00                	push   $0x0
   pushl $129
-801061a9:	68 81 00 00 00       	push   $0x81
+80106429:	68 81 00 00 00       	push   $0x81
   jmp alltraps
-801061ae:	e9 bb f6 ff ff       	jmp    8010586e <alltraps>
+8010642e:	e9 e6 f6 ff ff       	jmp    80105b19 <alltraps>
 
-801061b3 <vector130>:
+80106433 <vector130>:
 .globl vector130
 vector130:
   pushl $0
-801061b3:	6a 00                	push   $0x0
+80106433:	6a 00                	push   $0x0
   pushl $130
-801061b5:	68 82 00 00 00       	push   $0x82
+80106435:	68 82 00 00 00       	push   $0x82
   jmp alltraps
-801061ba:	e9 af f6 ff ff       	jmp    8010586e <alltraps>
+8010643a:	e9 da f6 ff ff       	jmp    80105b19 <alltraps>
 
-801061bf <vector131>:
+8010643f <vector131>:
 .globl vector131
 vector131:
   pushl $0
-801061bf:	6a 00                	push   $0x0
+8010643f:	6a 00                	push   $0x0
   pushl $131
-801061c1:	68 83 00 00 00       	push   $0x83
+80106441:	68 83 00 00 00       	push   $0x83
   jmp alltraps
-801061c6:	e9 a3 f6 ff ff       	jmp    8010586e <alltraps>
+80106446:	e9 ce f6 ff ff       	jmp    80105b19 <alltraps>
 
-801061cb <vector132>:
+8010644b <vector132>:
 .globl vector132
 vector132:
   pushl $0
-801061cb:	6a 00                	push   $0x0
+8010644b:	6a 00                	push   $0x0
   pushl $132
-801061cd:	68 84 00 00 00       	push   $0x84
+8010644d:	68 84 00 00 00       	push   $0x84
   jmp alltraps
-801061d2:	e9 97 f6 ff ff       	jmp    8010586e <alltraps>
+80106452:	e9 c2 f6 ff ff       	jmp    80105b19 <alltraps>
 
-801061d7 <vector133>:
+80106457 <vector133>:
 .globl vector133
 vector133:
   pushl $0
-801061d7:	6a 00                	push   $0x0
+80106457:	6a 00                	push   $0x0
   pushl $133
-801061d9:	68 85 00 00 00       	push   $0x85
+80106459:	68 85 00 00 00       	push   $0x85
   jmp alltraps
-801061de:	e9 8b f6 ff ff       	jmp    8010586e <alltraps>
+8010645e:	e9 b6 f6 ff ff       	jmp    80105b19 <alltraps>
 
-801061e3 <vector134>:
+80106463 <vector134>:
 .globl vector134
 vector134:
   pushl $0
-801061e3:	6a 00                	push   $0x0
+80106463:	6a 00                	push   $0x0
   pushl $134
-801061e5:	68 86 00 00 00       	push   $0x86
+80106465:	68 86 00 00 00       	push   $0x86
   jmp alltraps
-801061ea:	e9 7f f6 ff ff       	jmp    8010586e <alltraps>
+8010646a:	e9 aa f6 ff ff       	jmp    80105b19 <alltraps>
 
-801061ef <vector135>:
+8010646f <vector135>:
 .globl vector135
 vector135:
   pushl $0
-801061ef:	6a 00                	push   $0x0
+8010646f:	6a 00                	push   $0x0
   pushl $135
-801061f1:	68 87 00 00 00       	push   $0x87
+80106471:	68 87 00 00 00       	push   $0x87
   jmp alltraps
-801061f6:	e9 73 f6 ff ff       	jmp    8010586e <alltraps>
+80106476:	e9 9e f6 ff ff       	jmp    80105b19 <alltraps>
 
-801061fb <vector136>:
+8010647b <vector136>:
 .globl vector136
 vector136:
   pushl $0
-801061fb:	6a 00                	push   $0x0
+8010647b:	6a 00                	push   $0x0
   pushl $136
-801061fd:	68 88 00 00 00       	push   $0x88
+8010647d:	68 88 00 00 00       	push   $0x88
   jmp alltraps
-80106202:	e9 67 f6 ff ff       	jmp    8010586e <alltraps>
+80106482:	e9 92 f6 ff ff       	jmp    80105b19 <alltraps>
 
-80106207 <vector137>:
+80106487 <vector137>:
 .globl vector137
 vector137:
   pushl $0
-80106207:	6a 00                	push   $0x0
+80106487:	6a 00                	push   $0x0
   pushl $137
-80106209:	68 89 00 00 00       	push   $0x89
+80106489:	68 89 00 00 00       	push   $0x89
   jmp alltraps
-8010620e:	e9 5b f6 ff ff       	jmp    8010586e <alltraps>
+8010648e:	e9 86 f6 ff ff       	jmp    80105b19 <alltraps>
 
-80106213 <vector138>:
+80106493 <vector138>:
 .globl vector138
 vector138:
   pushl $0
-80106213:	6a 00                	push   $0x0
+80106493:	6a 00                	push   $0x0
   pushl $138
-80106215:	68 8a 00 00 00       	push   $0x8a
+80106495:	68 8a 00 00 00       	push   $0x8a
   jmp alltraps
-8010621a:	e9 4f f6 ff ff       	jmp    8010586e <alltraps>
+8010649a:	e9 7a f6 ff ff       	jmp    80105b19 <alltraps>
 
-8010621f <vector139>:
+8010649f <vector139>:
 .globl vector139
 vector139:
   pushl $0
-8010621f:	6a 00                	push   $0x0
+8010649f:	6a 00                	push   $0x0
   pushl $139
-80106221:	68 8b 00 00 00       	push   $0x8b
+801064a1:	68 8b 00 00 00       	push   $0x8b
   jmp alltraps
-80106226:	e9 43 f6 ff ff       	jmp    8010586e <alltraps>
+801064a6:	e9 6e f6 ff ff       	jmp    80105b19 <alltraps>
 
-8010622b <vector140>:
+801064ab <vector140>:
 .globl vector140
 vector140:
   pushl $0
-8010622b:	6a 00                	push   $0x0
+801064ab:	6a 00                	push   $0x0
   pushl $140
-8010622d:	68 8c 00 00 00       	push   $0x8c
+801064ad:	68 8c 00 00 00       	push   $0x8c
   jmp alltraps
-80106232:	e9 37 f6 ff ff       	jmp    8010586e <alltraps>
+801064b2:	e9 62 f6 ff ff       	jmp    80105b19 <alltraps>
 
-80106237 <vector141>:
+801064b7 <vector141>:
 .globl vector141
 vector141:
   pushl $0
-80106237:	6a 00                	push   $0x0
+801064b7:	6a 00                	push   $0x0
   pushl $141
-80106239:	68 8d 00 00 00       	push   $0x8d
+801064b9:	68 8d 00 00 00       	push   $0x8d
   jmp alltraps
-8010623e:	e9 2b f6 ff ff       	jmp    8010586e <alltraps>
+801064be:	e9 56 f6 ff ff       	jmp    80105b19 <alltraps>
 
-80106243 <vector142>:
+801064c3 <vector142>:
 .globl vector142
 vector142:
   pushl $0
-80106243:	6a 00                	push   $0x0
+801064c3:	6a 00                	push   $0x0
   pushl $142
-80106245:	68 8e 00 00 00       	push   $0x8e
+801064c5:	68 8e 00 00 00       	push   $0x8e
   jmp alltraps
-8010624a:	e9 1f f6 ff ff       	jmp    8010586e <alltraps>
+801064ca:	e9 4a f6 ff ff       	jmp    80105b19 <alltraps>
 
-8010624f <vector143>:
+801064cf <vector143>:
 .globl vector143
 vector143:
   pushl $0
-8010624f:	6a 00                	push   $0x0
+801064cf:	6a 00                	push   $0x0
   pushl $143
-80106251:	68 8f 00 00 00       	push   $0x8f
+801064d1:	68 8f 00 00 00       	push   $0x8f
   jmp alltraps
-80106256:	e9 13 f6 ff ff       	jmp    8010586e <alltraps>
+801064d6:	e9 3e f6 ff ff       	jmp    80105b19 <alltraps>
 
-8010625b <vector144>:
+801064db <vector144>:
 .globl vector144
 vector144:
   pushl $0
-8010625b:	6a 00                	push   $0x0
+801064db:	6a 00                	push   $0x0
   pushl $144
-8010625d:	68 90 00 00 00       	push   $0x90
+801064dd:	68 90 00 00 00       	push   $0x90
   jmp alltraps
-80106262:	e9 07 f6 ff ff       	jmp    8010586e <alltraps>
+801064e2:	e9 32 f6 ff ff       	jmp    80105b19 <alltraps>
 
-80106267 <vector145>:
+801064e7 <vector145>:
 .globl vector145
 vector145:
   pushl $0
-80106267:	6a 00                	push   $0x0
+801064e7:	6a 00                	push   $0x0
   pushl $145
-80106269:	68 91 00 00 00       	push   $0x91
+801064e9:	68 91 00 00 00       	push   $0x91
   jmp alltraps
-8010626e:	e9 fb f5 ff ff       	jmp    8010586e <alltraps>
+801064ee:	e9 26 f6 ff ff       	jmp    80105b19 <alltraps>
 
-80106273 <vector146>:
+801064f3 <vector146>:
 .globl vector146
 vector146:
   pushl $0
-80106273:	6a 00                	push   $0x0
+801064f3:	6a 00                	push   $0x0
   pushl $146
-80106275:	68 92 00 00 00       	push   $0x92
+801064f5:	68 92 00 00 00       	push   $0x92
   jmp alltraps
-8010627a:	e9 ef f5 ff ff       	jmp    8010586e <alltraps>
+801064fa:	e9 1a f6 ff ff       	jmp    80105b19 <alltraps>
 
-8010627f <vector147>:
+801064ff <vector147>:
 .globl vector147
 vector147:
   pushl $0
-8010627f:	6a 00                	push   $0x0
+801064ff:	6a 00                	push   $0x0
   pushl $147
-80106281:	68 93 00 00 00       	push   $0x93
+80106501:	68 93 00 00 00       	push   $0x93
   jmp alltraps
-80106286:	e9 e3 f5 ff ff       	jmp    8010586e <alltraps>
+80106506:	e9 0e f6 ff ff       	jmp    80105b19 <alltraps>
 
-8010628b <vector148>:
+8010650b <vector148>:
 .globl vector148
 vector148:
   pushl $0
-8010628b:	6a 00                	push   $0x0
+8010650b:	6a 00                	push   $0x0
   pushl $148
-8010628d:	68 94 00 00 00       	push   $0x94
+8010650d:	68 94 00 00 00       	push   $0x94
   jmp alltraps
-80106292:	e9 d7 f5 ff ff       	jmp    8010586e <alltraps>
+80106512:	e9 02 f6 ff ff       	jmp    80105b19 <alltraps>
 
-80106297 <vector149>:
+80106517 <vector149>:
 .globl vector149
 vector149:
   pushl $0
-80106297:	6a 00                	push   $0x0
+80106517:	6a 00                	push   $0x0
   pushl $149
-80106299:	68 95 00 00 00       	push   $0x95
+80106519:	68 95 00 00 00       	push   $0x95
   jmp alltraps
-8010629e:	e9 cb f5 ff ff       	jmp    8010586e <alltraps>
+8010651e:	e9 f6 f5 ff ff       	jmp    80105b19 <alltraps>
 
-801062a3 <vector150>:
+80106523 <vector150>:
 .globl vector150
 vector150:
   pushl $0
-801062a3:	6a 00                	push   $0x0
+80106523:	6a 00                	push   $0x0
   pushl $150
-801062a5:	68 96 00 00 00       	push   $0x96
+80106525:	68 96 00 00 00       	push   $0x96
   jmp alltraps
-801062aa:	e9 bf f5 ff ff       	jmp    8010586e <alltraps>
+8010652a:	e9 ea f5 ff ff       	jmp    80105b19 <alltraps>
 
-801062af <vector151>:
+8010652f <vector151>:
 .globl vector151
 vector151:
   pushl $0
-801062af:	6a 00                	push   $0x0
+8010652f:	6a 00                	push   $0x0
   pushl $151
-801062b1:	68 97 00 00 00       	push   $0x97
+80106531:	68 97 00 00 00       	push   $0x97
   jmp alltraps
-801062b6:	e9 b3 f5 ff ff       	jmp    8010586e <alltraps>
+80106536:	e9 de f5 ff ff       	jmp    80105b19 <alltraps>
 
-801062bb <vector152>:
+8010653b <vector152>:
 .globl vector152
 vector152:
   pushl $0
-801062bb:	6a 00                	push   $0x0
+8010653b:	6a 00                	push   $0x0
   pushl $152
-801062bd:	68 98 00 00 00       	push   $0x98
+8010653d:	68 98 00 00 00       	push   $0x98
   jmp alltraps
-801062c2:	e9 a7 f5 ff ff       	jmp    8010586e <alltraps>
+80106542:	e9 d2 f5 ff ff       	jmp    80105b19 <alltraps>
 
-801062c7 <vector153>:
+80106547 <vector153>:
 .globl vector153
 vector153:
   pushl $0
-801062c7:	6a 00                	push   $0x0
+80106547:	6a 00                	push   $0x0
   pushl $153
-801062c9:	68 99 00 00 00       	push   $0x99
+80106549:	68 99 00 00 00       	push   $0x99
   jmp alltraps
-801062ce:	e9 9b f5 ff ff       	jmp    8010586e <alltraps>
+8010654e:	e9 c6 f5 ff ff       	jmp    80105b19 <alltraps>
 
-801062d3 <vector154>:
+80106553 <vector154>:
 .globl vector154
 vector154:
   pushl $0
-801062d3:	6a 00                	push   $0x0
+80106553:	6a 00                	push   $0x0
   pushl $154
-801062d5:	68 9a 00 00 00       	push   $0x9a
+80106555:	68 9a 00 00 00       	push   $0x9a
   jmp alltraps
-801062da:	e9 8f f5 ff ff       	jmp    8010586e <alltraps>
+8010655a:	e9 ba f5 ff ff       	jmp    80105b19 <alltraps>
 
-801062df <vector155>:
+8010655f <vector155>:
 .globl vector155
 vector155:
   pushl $0
-801062df:	6a 00                	push   $0x0
+8010655f:	6a 00                	push   $0x0
   pushl $155
-801062e1:	68 9b 00 00 00       	push   $0x9b
+80106561:	68 9b 00 00 00       	push   $0x9b
   jmp alltraps
-801062e6:	e9 83 f5 ff ff       	jmp    8010586e <alltraps>
+80106566:	e9 ae f5 ff ff       	jmp    80105b19 <alltraps>
 
-801062eb <vector156>:
+8010656b <vector156>:
 .globl vector156
 vector156:
   pushl $0
-801062eb:	6a 00                	push   $0x0
+8010656b:	6a 00                	push   $0x0
   pushl $156
-801062ed:	68 9c 00 00 00       	push   $0x9c
+8010656d:	68 9c 00 00 00       	push   $0x9c
   jmp alltraps
-801062f2:	e9 77 f5 ff ff       	jmp    8010586e <alltraps>
+80106572:	e9 a2 f5 ff ff       	jmp    80105b19 <alltraps>
 
-801062f7 <vector157>:
+80106577 <vector157>:
 .globl vector157
 vector157:
   pushl $0
-801062f7:	6a 00                	push   $0x0
+80106577:	6a 00                	push   $0x0
   pushl $157
-801062f9:	68 9d 00 00 00       	push   $0x9d
+80106579:	68 9d 00 00 00       	push   $0x9d
   jmp alltraps
-801062fe:	e9 6b f5 ff ff       	jmp    8010586e <alltraps>
+8010657e:	e9 96 f5 ff ff       	jmp    80105b19 <alltraps>
 
-80106303 <vector158>:
+80106583 <vector158>:
 .globl vector158
 vector158:
   pushl $0
-80106303:	6a 00                	push   $0x0
+80106583:	6a 00                	push   $0x0
   pushl $158
-80106305:	68 9e 00 00 00       	push   $0x9e
+80106585:	68 9e 00 00 00       	push   $0x9e
   jmp alltraps
-8010630a:	e9 5f f5 ff ff       	jmp    8010586e <alltraps>
+8010658a:	e9 8a f5 ff ff       	jmp    80105b19 <alltraps>
 
-8010630f <vector159>:
+8010658f <vector159>:
 .globl vector159
 vector159:
   pushl $0
-8010630f:	6a 00                	push   $0x0
+8010658f:	6a 00                	push   $0x0
   pushl $159
-80106311:	68 9f 00 00 00       	push   $0x9f
+80106591:	68 9f 00 00 00       	push   $0x9f
   jmp alltraps
-80106316:	e9 53 f5 ff ff       	jmp    8010586e <alltraps>
+80106596:	e9 7e f5 ff ff       	jmp    80105b19 <alltraps>
 
-8010631b <vector160>:
+8010659b <vector160>:
 .globl vector160
 vector160:
   pushl $0
-8010631b:	6a 00                	push   $0x0
+8010659b:	6a 00                	push   $0x0
   pushl $160
-8010631d:	68 a0 00 00 00       	push   $0xa0
+8010659d:	68 a0 00 00 00       	push   $0xa0
   jmp alltraps
-80106322:	e9 47 f5 ff ff       	jmp    8010586e <alltraps>
+801065a2:	e9 72 f5 ff ff       	jmp    80105b19 <alltraps>
 
-80106327 <vector161>:
+801065a7 <vector161>:
 .globl vector161
 vector161:
   pushl $0
-80106327:	6a 00                	push   $0x0
+801065a7:	6a 00                	push   $0x0
   pushl $161
-80106329:	68 a1 00 00 00       	push   $0xa1
+801065a9:	68 a1 00 00 00       	push   $0xa1
   jmp alltraps
-8010632e:	e9 3b f5 ff ff       	jmp    8010586e <alltraps>
+801065ae:	e9 66 f5 ff ff       	jmp    80105b19 <alltraps>
 
-80106333 <vector162>:
+801065b3 <vector162>:
 .globl vector162
 vector162:
   pushl $0
-80106333:	6a 00                	push   $0x0
+801065b3:	6a 00                	push   $0x0
   pushl $162
-80106335:	68 a2 00 00 00       	push   $0xa2
+801065b5:	68 a2 00 00 00       	push   $0xa2
   jmp alltraps
-8010633a:	e9 2f f5 ff ff       	jmp    8010586e <alltraps>
+801065ba:	e9 5a f5 ff ff       	jmp    80105b19 <alltraps>
 
-8010633f <vector163>:
+801065bf <vector163>:
 .globl vector163
 vector163:
   pushl $0
-8010633f:	6a 00                	push   $0x0
+801065bf:	6a 00                	push   $0x0
   pushl $163
-80106341:	68 a3 00 00 00       	push   $0xa3
+801065c1:	68 a3 00 00 00       	push   $0xa3
   jmp alltraps
-80106346:	e9 23 f5 ff ff       	jmp    8010586e <alltraps>
+801065c6:	e9 4e f5 ff ff       	jmp    80105b19 <alltraps>
 
-8010634b <vector164>:
+801065cb <vector164>:
 .globl vector164
 vector164:
   pushl $0
-8010634b:	6a 00                	push   $0x0
+801065cb:	6a 00                	push   $0x0
   pushl $164
-8010634d:	68 a4 00 00 00       	push   $0xa4
+801065cd:	68 a4 00 00 00       	push   $0xa4
   jmp alltraps
-80106352:	e9 17 f5 ff ff       	jmp    8010586e <alltraps>
+801065d2:	e9 42 f5 ff ff       	jmp    80105b19 <alltraps>
 
-80106357 <vector165>:
+801065d7 <vector165>:
 .globl vector165
 vector165:
   pushl $0
-80106357:	6a 00                	push   $0x0
+801065d7:	6a 00                	push   $0x0
   pushl $165
-80106359:	68 a5 00 00 00       	push   $0xa5
+801065d9:	68 a5 00 00 00       	push   $0xa5
   jmp alltraps
-8010635e:	e9 0b f5 ff ff       	jmp    8010586e <alltraps>
+801065de:	e9 36 f5 ff ff       	jmp    80105b19 <alltraps>
 
-80106363 <vector166>:
+801065e3 <vector166>:
 .globl vector166
 vector166:
   pushl $0
-80106363:	6a 00                	push   $0x0
+801065e3:	6a 00                	push   $0x0
   pushl $166
-80106365:	68 a6 00 00 00       	push   $0xa6
+801065e5:	68 a6 00 00 00       	push   $0xa6
   jmp alltraps
-8010636a:	e9 ff f4 ff ff       	jmp    8010586e <alltraps>
+801065ea:	e9 2a f5 ff ff       	jmp    80105b19 <alltraps>
 
-8010636f <vector167>:
+801065ef <vector167>:
 .globl vector167
 vector167:
   pushl $0
-8010636f:	6a 00                	push   $0x0
+801065ef:	6a 00                	push   $0x0
   pushl $167
-80106371:	68 a7 00 00 00       	push   $0xa7
+801065f1:	68 a7 00 00 00       	push   $0xa7
   jmp alltraps
-80106376:	e9 f3 f4 ff ff       	jmp    8010586e <alltraps>
+801065f6:	e9 1e f5 ff ff       	jmp    80105b19 <alltraps>
 
-8010637b <vector168>:
+801065fb <vector168>:
 .globl vector168
 vector168:
   pushl $0
-8010637b:	6a 00                	push   $0x0
+801065fb:	6a 00                	push   $0x0
   pushl $168
-8010637d:	68 a8 00 00 00       	push   $0xa8
+801065fd:	68 a8 00 00 00       	push   $0xa8
   jmp alltraps
-80106382:	e9 e7 f4 ff ff       	jmp    8010586e <alltraps>
+80106602:	e9 12 f5 ff ff       	jmp    80105b19 <alltraps>
 
-80106387 <vector169>:
+80106607 <vector169>:
 .globl vector169
 vector169:
   pushl $0
-80106387:	6a 00                	push   $0x0
+80106607:	6a 00                	push   $0x0
   pushl $169
-80106389:	68 a9 00 00 00       	push   $0xa9
+80106609:	68 a9 00 00 00       	push   $0xa9
   jmp alltraps
-8010638e:	e9 db f4 ff ff       	jmp    8010586e <alltraps>
+8010660e:	e9 06 f5 ff ff       	jmp    80105b19 <alltraps>
 
-80106393 <vector170>:
+80106613 <vector170>:
 .globl vector170
 vector170:
   pushl $0
-80106393:	6a 00                	push   $0x0
+80106613:	6a 00                	push   $0x0
   pushl $170
-80106395:	68 aa 00 00 00       	push   $0xaa
+80106615:	68 aa 00 00 00       	push   $0xaa
   jmp alltraps
-8010639a:	e9 cf f4 ff ff       	jmp    8010586e <alltraps>
+8010661a:	e9 fa f4 ff ff       	jmp    80105b19 <alltraps>
 
-8010639f <vector171>:
+8010661f <vector171>:
 .globl vector171
 vector171:
   pushl $0
-8010639f:	6a 00                	push   $0x0
+8010661f:	6a 00                	push   $0x0
   pushl $171
-801063a1:	68 ab 00 00 00       	push   $0xab
+80106621:	68 ab 00 00 00       	push   $0xab
   jmp alltraps
-801063a6:	e9 c3 f4 ff ff       	jmp    8010586e <alltraps>
+80106626:	e9 ee f4 ff ff       	jmp    80105b19 <alltraps>
 
-801063ab <vector172>:
+8010662b <vector172>:
 .globl vector172
 vector172:
   pushl $0
-801063ab:	6a 00                	push   $0x0
+8010662b:	6a 00                	push   $0x0
   pushl $172
-801063ad:	68 ac 00 00 00       	push   $0xac
+8010662d:	68 ac 00 00 00       	push   $0xac
   jmp alltraps
-801063b2:	e9 b7 f4 ff ff       	jmp    8010586e <alltraps>
+80106632:	e9 e2 f4 ff ff       	jmp    80105b19 <alltraps>
 
-801063b7 <vector173>:
+80106637 <vector173>:
 .globl vector173
 vector173:
   pushl $0
-801063b7:	6a 00                	push   $0x0
+80106637:	6a 00                	push   $0x0
   pushl $173
-801063b9:	68 ad 00 00 00       	push   $0xad
+80106639:	68 ad 00 00 00       	push   $0xad
   jmp alltraps
-801063be:	e9 ab f4 ff ff       	jmp    8010586e <alltraps>
+8010663e:	e9 d6 f4 ff ff       	jmp    80105b19 <alltraps>
 
-801063c3 <vector174>:
+80106643 <vector174>:
 .globl vector174
 vector174:
   pushl $0
-801063c3:	6a 00                	push   $0x0
+80106643:	6a 00                	push   $0x0
   pushl $174
-801063c5:	68 ae 00 00 00       	push   $0xae
+80106645:	68 ae 00 00 00       	push   $0xae
   jmp alltraps
-801063ca:	e9 9f f4 ff ff       	jmp    8010586e <alltraps>
+8010664a:	e9 ca f4 ff ff       	jmp    80105b19 <alltraps>
 
-801063cf <vector175>:
+8010664f <vector175>:
 .globl vector175
 vector175:
   pushl $0
-801063cf:	6a 00                	push   $0x0
+8010664f:	6a 00                	push   $0x0
   pushl $175
-801063d1:	68 af 00 00 00       	push   $0xaf
+80106651:	68 af 00 00 00       	push   $0xaf
   jmp alltraps
-801063d6:	e9 93 f4 ff ff       	jmp    8010586e <alltraps>
+80106656:	e9 be f4 ff ff       	jmp    80105b19 <alltraps>
 
-801063db <vector176>:
+8010665b <vector176>:
 .globl vector176
 vector176:
   pushl $0
-801063db:	6a 00                	push   $0x0
+8010665b:	6a 00                	push   $0x0
   pushl $176
-801063dd:	68 b0 00 00 00       	push   $0xb0
+8010665d:	68 b0 00 00 00       	push   $0xb0
   jmp alltraps
-801063e2:	e9 87 f4 ff ff       	jmp    8010586e <alltraps>
+80106662:	e9 b2 f4 ff ff       	jmp    80105b19 <alltraps>
 
-801063e7 <vector177>:
+80106667 <vector177>:
 .globl vector177
 vector177:
   pushl $0
-801063e7:	6a 00                	push   $0x0
+80106667:	6a 00                	push   $0x0
   pushl $177
-801063e9:	68 b1 00 00 00       	push   $0xb1
+80106669:	68 b1 00 00 00       	push   $0xb1
   jmp alltraps
-801063ee:	e9 7b f4 ff ff       	jmp    8010586e <alltraps>
+8010666e:	e9 a6 f4 ff ff       	jmp    80105b19 <alltraps>
 
-801063f3 <vector178>:
+80106673 <vector178>:
 .globl vector178
 vector178:
   pushl $0
-801063f3:	6a 00                	push   $0x0
+80106673:	6a 00                	push   $0x0
   pushl $178
-801063f5:	68 b2 00 00 00       	push   $0xb2
+80106675:	68 b2 00 00 00       	push   $0xb2
   jmp alltraps
-801063fa:	e9 6f f4 ff ff       	jmp    8010586e <alltraps>
+8010667a:	e9 9a f4 ff ff       	jmp    80105b19 <alltraps>
 
-801063ff <vector179>:
+8010667f <vector179>:
 .globl vector179
 vector179:
   pushl $0
-801063ff:	6a 00                	push   $0x0
+8010667f:	6a 00                	push   $0x0
   pushl $179
-80106401:	68 b3 00 00 00       	push   $0xb3
+80106681:	68 b3 00 00 00       	push   $0xb3
   jmp alltraps
-80106406:	e9 63 f4 ff ff       	jmp    8010586e <alltraps>
+80106686:	e9 8e f4 ff ff       	jmp    80105b19 <alltraps>
 
-8010640b <vector180>:
+8010668b <vector180>:
 .globl vector180
 vector180:
   pushl $0
-8010640b:	6a 00                	push   $0x0
+8010668b:	6a 00                	push   $0x0
   pushl $180
-8010640d:	68 b4 00 00 00       	push   $0xb4
+8010668d:	68 b4 00 00 00       	push   $0xb4
   jmp alltraps
-80106412:	e9 57 f4 ff ff       	jmp    8010586e <alltraps>
+80106692:	e9 82 f4 ff ff       	jmp    80105b19 <alltraps>
 
-80106417 <vector181>:
+80106697 <vector181>:
 .globl vector181
 vector181:
   pushl $0
-80106417:	6a 00                	push   $0x0
+80106697:	6a 00                	push   $0x0
   pushl $181
-80106419:	68 b5 00 00 00       	push   $0xb5
+80106699:	68 b5 00 00 00       	push   $0xb5
   jmp alltraps
-8010641e:	e9 4b f4 ff ff       	jmp    8010586e <alltraps>
+8010669e:	e9 76 f4 ff ff       	jmp    80105b19 <alltraps>
 
-80106423 <vector182>:
+801066a3 <vector182>:
 .globl vector182
 vector182:
   pushl $0
-80106423:	6a 00                	push   $0x0
+801066a3:	6a 00                	push   $0x0
   pushl $182
-80106425:	68 b6 00 00 00       	push   $0xb6
+801066a5:	68 b6 00 00 00       	push   $0xb6
   jmp alltraps
-8010642a:	e9 3f f4 ff ff       	jmp    8010586e <alltraps>
+801066aa:	e9 6a f4 ff ff       	jmp    80105b19 <alltraps>
 
-8010642f <vector183>:
+801066af <vector183>:
 .globl vector183
 vector183:
   pushl $0
-8010642f:	6a 00                	push   $0x0
+801066af:	6a 00                	push   $0x0
   pushl $183
-80106431:	68 b7 00 00 00       	push   $0xb7
+801066b1:	68 b7 00 00 00       	push   $0xb7
   jmp alltraps
-80106436:	e9 33 f4 ff ff       	jmp    8010586e <alltraps>
+801066b6:	e9 5e f4 ff ff       	jmp    80105b19 <alltraps>
 
-8010643b <vector184>:
+801066bb <vector184>:
 .globl vector184
 vector184:
   pushl $0
-8010643b:	6a 00                	push   $0x0
+801066bb:	6a 00                	push   $0x0
   pushl $184
-8010643d:	68 b8 00 00 00       	push   $0xb8
+801066bd:	68 b8 00 00 00       	push   $0xb8
   jmp alltraps
-80106442:	e9 27 f4 ff ff       	jmp    8010586e <alltraps>
+801066c2:	e9 52 f4 ff ff       	jmp    80105b19 <alltraps>
 
-80106447 <vector185>:
+801066c7 <vector185>:
 .globl vector185
 vector185:
   pushl $0
-80106447:	6a 00                	push   $0x0
+801066c7:	6a 00                	push   $0x0
   pushl $185
-80106449:	68 b9 00 00 00       	push   $0xb9
+801066c9:	68 b9 00 00 00       	push   $0xb9
   jmp alltraps
-8010644e:	e9 1b f4 ff ff       	jmp    8010586e <alltraps>
+801066ce:	e9 46 f4 ff ff       	jmp    80105b19 <alltraps>
 
-80106453 <vector186>:
+801066d3 <vector186>:
 .globl vector186
 vector186:
   pushl $0
-80106453:	6a 00                	push   $0x0
+801066d3:	6a 00                	push   $0x0
   pushl $186
-80106455:	68 ba 00 00 00       	push   $0xba
+801066d5:	68 ba 00 00 00       	push   $0xba
   jmp alltraps
-8010645a:	e9 0f f4 ff ff       	jmp    8010586e <alltraps>
+801066da:	e9 3a f4 ff ff       	jmp    80105b19 <alltraps>
 
-8010645f <vector187>:
+801066df <vector187>:
 .globl vector187
 vector187:
   pushl $0
-8010645f:	6a 00                	push   $0x0
+801066df:	6a 00                	push   $0x0
   pushl $187
-80106461:	68 bb 00 00 00       	push   $0xbb
+801066e1:	68 bb 00 00 00       	push   $0xbb
   jmp alltraps
-80106466:	e9 03 f4 ff ff       	jmp    8010586e <alltraps>
+801066e6:	e9 2e f4 ff ff       	jmp    80105b19 <alltraps>
 
-8010646b <vector188>:
+801066eb <vector188>:
 .globl vector188
 vector188:
   pushl $0
-8010646b:	6a 00                	push   $0x0
+801066eb:	6a 00                	push   $0x0
   pushl $188
-8010646d:	68 bc 00 00 00       	push   $0xbc
+801066ed:	68 bc 00 00 00       	push   $0xbc
   jmp alltraps
-80106472:	e9 f7 f3 ff ff       	jmp    8010586e <alltraps>
+801066f2:	e9 22 f4 ff ff       	jmp    80105b19 <alltraps>
 
-80106477 <vector189>:
+801066f7 <vector189>:
 .globl vector189
 vector189:
   pushl $0
-80106477:	6a 00                	push   $0x0
+801066f7:	6a 00                	push   $0x0
   pushl $189
-80106479:	68 bd 00 00 00       	push   $0xbd
+801066f9:	68 bd 00 00 00       	push   $0xbd
   jmp alltraps
-8010647e:	e9 eb f3 ff ff       	jmp    8010586e <alltraps>
+801066fe:	e9 16 f4 ff ff       	jmp    80105b19 <alltraps>
 
-80106483 <vector190>:
+80106703 <vector190>:
 .globl vector190
 vector190:
   pushl $0
-80106483:	6a 00                	push   $0x0
+80106703:	6a 00                	push   $0x0
   pushl $190
-80106485:	68 be 00 00 00       	push   $0xbe
+80106705:	68 be 00 00 00       	push   $0xbe
   jmp alltraps
-8010648a:	e9 df f3 ff ff       	jmp    8010586e <alltraps>
+8010670a:	e9 0a f4 ff ff       	jmp    80105b19 <alltraps>
 
-8010648f <vector191>:
+8010670f <vector191>:
 .globl vector191
 vector191:
   pushl $0
-8010648f:	6a 00                	push   $0x0
+8010670f:	6a 00                	push   $0x0
   pushl $191
-80106491:	68 bf 00 00 00       	push   $0xbf
+80106711:	68 bf 00 00 00       	push   $0xbf
   jmp alltraps
-80106496:	e9 d3 f3 ff ff       	jmp    8010586e <alltraps>
+80106716:	e9 fe f3 ff ff       	jmp    80105b19 <alltraps>
 
-8010649b <vector192>:
+8010671b <vector192>:
 .globl vector192
 vector192:
   pushl $0
-8010649b:	6a 00                	push   $0x0
+8010671b:	6a 00                	push   $0x0
   pushl $192
-8010649d:	68 c0 00 00 00       	push   $0xc0
+8010671d:	68 c0 00 00 00       	push   $0xc0
   jmp alltraps
-801064a2:	e9 c7 f3 ff ff       	jmp    8010586e <alltraps>
+80106722:	e9 f2 f3 ff ff       	jmp    80105b19 <alltraps>
 
-801064a7 <vector193>:
+80106727 <vector193>:
 .globl vector193
 vector193:
   pushl $0
-801064a7:	6a 00                	push   $0x0
+80106727:	6a 00                	push   $0x0
   pushl $193
-801064a9:	68 c1 00 00 00       	push   $0xc1
+80106729:	68 c1 00 00 00       	push   $0xc1
   jmp alltraps
-801064ae:	e9 bb f3 ff ff       	jmp    8010586e <alltraps>
+8010672e:	e9 e6 f3 ff ff       	jmp    80105b19 <alltraps>
 
-801064b3 <vector194>:
+80106733 <vector194>:
 .globl vector194
 vector194:
   pushl $0
-801064b3:	6a 00                	push   $0x0
+80106733:	6a 00                	push   $0x0
   pushl $194
-801064b5:	68 c2 00 00 00       	push   $0xc2
+80106735:	68 c2 00 00 00       	push   $0xc2
   jmp alltraps
-801064ba:	e9 af f3 ff ff       	jmp    8010586e <alltraps>
+8010673a:	e9 da f3 ff ff       	jmp    80105b19 <alltraps>
 
-801064bf <vector195>:
+8010673f <vector195>:
 .globl vector195
 vector195:
   pushl $0
-801064bf:	6a 00                	push   $0x0
+8010673f:	6a 00                	push   $0x0
   pushl $195
-801064c1:	68 c3 00 00 00       	push   $0xc3
+80106741:	68 c3 00 00 00       	push   $0xc3
   jmp alltraps
-801064c6:	e9 a3 f3 ff ff       	jmp    8010586e <alltraps>
+80106746:	e9 ce f3 ff ff       	jmp    80105b19 <alltraps>
 
-801064cb <vector196>:
+8010674b <vector196>:
 .globl vector196
 vector196:
   pushl $0
-801064cb:	6a 00                	push   $0x0
+8010674b:	6a 00                	push   $0x0
   pushl $196
-801064cd:	68 c4 00 00 00       	push   $0xc4
+8010674d:	68 c4 00 00 00       	push   $0xc4
   jmp alltraps
-801064d2:	e9 97 f3 ff ff       	jmp    8010586e <alltraps>
+80106752:	e9 c2 f3 ff ff       	jmp    80105b19 <alltraps>
 
-801064d7 <vector197>:
+80106757 <vector197>:
 .globl vector197
 vector197:
   pushl $0
-801064d7:	6a 00                	push   $0x0
+80106757:	6a 00                	push   $0x0
   pushl $197
-801064d9:	68 c5 00 00 00       	push   $0xc5
+80106759:	68 c5 00 00 00       	push   $0xc5
   jmp alltraps
-801064de:	e9 8b f3 ff ff       	jmp    8010586e <alltraps>
+8010675e:	e9 b6 f3 ff ff       	jmp    80105b19 <alltraps>
 
-801064e3 <vector198>:
+80106763 <vector198>:
 .globl vector198
 vector198:
   pushl $0
-801064e3:	6a 00                	push   $0x0
+80106763:	6a 00                	push   $0x0
   pushl $198
-801064e5:	68 c6 00 00 00       	push   $0xc6
+80106765:	68 c6 00 00 00       	push   $0xc6
   jmp alltraps
-801064ea:	e9 7f f3 ff ff       	jmp    8010586e <alltraps>
+8010676a:	e9 aa f3 ff ff       	jmp    80105b19 <alltraps>
 
-801064ef <vector199>:
+8010676f <vector199>:
 .globl vector199
 vector199:
   pushl $0
-801064ef:	6a 00                	push   $0x0
+8010676f:	6a 00                	push   $0x0
   pushl $199
-801064f1:	68 c7 00 00 00       	push   $0xc7
+80106771:	68 c7 00 00 00       	push   $0xc7
   jmp alltraps
-801064f6:	e9 73 f3 ff ff       	jmp    8010586e <alltraps>
+80106776:	e9 9e f3 ff ff       	jmp    80105b19 <alltraps>
 
-801064fb <vector200>:
+8010677b <vector200>:
 .globl vector200
 vector200:
   pushl $0
-801064fb:	6a 00                	push   $0x0
+8010677b:	6a 00                	push   $0x0
   pushl $200
-801064fd:	68 c8 00 00 00       	push   $0xc8
+8010677d:	68 c8 00 00 00       	push   $0xc8
   jmp alltraps
-80106502:	e9 67 f3 ff ff       	jmp    8010586e <alltraps>
+80106782:	e9 92 f3 ff ff       	jmp    80105b19 <alltraps>
 
-80106507 <vector201>:
+80106787 <vector201>:
 .globl vector201
 vector201:
   pushl $0
-80106507:	6a 00                	push   $0x0
+80106787:	6a 00                	push   $0x0
   pushl $201
-80106509:	68 c9 00 00 00       	push   $0xc9
+80106789:	68 c9 00 00 00       	push   $0xc9
   jmp alltraps
-8010650e:	e9 5b f3 ff ff       	jmp    8010586e <alltraps>
+8010678e:	e9 86 f3 ff ff       	jmp    80105b19 <alltraps>
 
-80106513 <vector202>:
+80106793 <vector202>:
 .globl vector202
 vector202:
   pushl $0
-80106513:	6a 00                	push   $0x0
+80106793:	6a 00                	push   $0x0
   pushl $202
-80106515:	68 ca 00 00 00       	push   $0xca
+80106795:	68 ca 00 00 00       	push   $0xca
   jmp alltraps
-8010651a:	e9 4f f3 ff ff       	jmp    8010586e <alltraps>
+8010679a:	e9 7a f3 ff ff       	jmp    80105b19 <alltraps>
 
-8010651f <vector203>:
+8010679f <vector203>:
 .globl vector203
 vector203:
   pushl $0
-8010651f:	6a 00                	push   $0x0
+8010679f:	6a 00                	push   $0x0
   pushl $203
-80106521:	68 cb 00 00 00       	push   $0xcb
+801067a1:	68 cb 00 00 00       	push   $0xcb
   jmp alltraps
-80106526:	e9 43 f3 ff ff       	jmp    8010586e <alltraps>
+801067a6:	e9 6e f3 ff ff       	jmp    80105b19 <alltraps>
 
-8010652b <vector204>:
+801067ab <vector204>:
 .globl vector204
 vector204:
   pushl $0
-8010652b:	6a 00                	push   $0x0
+801067ab:	6a 00                	push   $0x0
   pushl $204
-8010652d:	68 cc 00 00 00       	push   $0xcc
+801067ad:	68 cc 00 00 00       	push   $0xcc
   jmp alltraps
-80106532:	e9 37 f3 ff ff       	jmp    8010586e <alltraps>
+801067b2:	e9 62 f3 ff ff       	jmp    80105b19 <alltraps>
 
-80106537 <vector205>:
+801067b7 <vector205>:
 .globl vector205
 vector205:
   pushl $0
-80106537:	6a 00                	push   $0x0
+801067b7:	6a 00                	push   $0x0
   pushl $205
-80106539:	68 cd 00 00 00       	push   $0xcd
+801067b9:	68 cd 00 00 00       	push   $0xcd
   jmp alltraps
-8010653e:	e9 2b f3 ff ff       	jmp    8010586e <alltraps>
+801067be:	e9 56 f3 ff ff       	jmp    80105b19 <alltraps>
 
-80106543 <vector206>:
+801067c3 <vector206>:
 .globl vector206
 vector206:
   pushl $0
-80106543:	6a 00                	push   $0x0
+801067c3:	6a 00                	push   $0x0
   pushl $206
-80106545:	68 ce 00 00 00       	push   $0xce
+801067c5:	68 ce 00 00 00       	push   $0xce
   jmp alltraps
-8010654a:	e9 1f f3 ff ff       	jmp    8010586e <alltraps>
+801067ca:	e9 4a f3 ff ff       	jmp    80105b19 <alltraps>
 
-8010654f <vector207>:
+801067cf <vector207>:
 .globl vector207
 vector207:
   pushl $0
-8010654f:	6a 00                	push   $0x0
+801067cf:	6a 00                	push   $0x0
   pushl $207
-80106551:	68 cf 00 00 00       	push   $0xcf
+801067d1:	68 cf 00 00 00       	push   $0xcf
   jmp alltraps
-80106556:	e9 13 f3 ff ff       	jmp    8010586e <alltraps>
+801067d6:	e9 3e f3 ff ff       	jmp    80105b19 <alltraps>
 
-8010655b <vector208>:
+801067db <vector208>:
 .globl vector208
 vector208:
   pushl $0
-8010655b:	6a 00                	push   $0x0
+801067db:	6a 00                	push   $0x0
   pushl $208
-8010655d:	68 d0 00 00 00       	push   $0xd0
+801067dd:	68 d0 00 00 00       	push   $0xd0
   jmp alltraps
-80106562:	e9 07 f3 ff ff       	jmp    8010586e <alltraps>
+801067e2:	e9 32 f3 ff ff       	jmp    80105b19 <alltraps>
 
-80106567 <vector209>:
+801067e7 <vector209>:
 .globl vector209
 vector209:
   pushl $0
-80106567:	6a 00                	push   $0x0
+801067e7:	6a 00                	push   $0x0
   pushl $209
-80106569:	68 d1 00 00 00       	push   $0xd1
+801067e9:	68 d1 00 00 00       	push   $0xd1
   jmp alltraps
-8010656e:	e9 fb f2 ff ff       	jmp    8010586e <alltraps>
+801067ee:	e9 26 f3 ff ff       	jmp    80105b19 <alltraps>
 
-80106573 <vector210>:
+801067f3 <vector210>:
 .globl vector210
 vector210:
   pushl $0
-80106573:	6a 00                	push   $0x0
+801067f3:	6a 00                	push   $0x0
   pushl $210
-80106575:	68 d2 00 00 00       	push   $0xd2
+801067f5:	68 d2 00 00 00       	push   $0xd2
   jmp alltraps
-8010657a:	e9 ef f2 ff ff       	jmp    8010586e <alltraps>
+801067fa:	e9 1a f3 ff ff       	jmp    80105b19 <alltraps>
 
-8010657f <vector211>:
+801067ff <vector211>:
 .globl vector211
 vector211:
   pushl $0
-8010657f:	6a 00                	push   $0x0
+801067ff:	6a 00                	push   $0x0
   pushl $211
-80106581:	68 d3 00 00 00       	push   $0xd3
+80106801:	68 d3 00 00 00       	push   $0xd3
   jmp alltraps
-80106586:	e9 e3 f2 ff ff       	jmp    8010586e <alltraps>
+80106806:	e9 0e f3 ff ff       	jmp    80105b19 <alltraps>
 
-8010658b <vector212>:
+8010680b <vector212>:
 .globl vector212
 vector212:
   pushl $0
-8010658b:	6a 00                	push   $0x0
+8010680b:	6a 00                	push   $0x0
   pushl $212
-8010658d:	68 d4 00 00 00       	push   $0xd4
+8010680d:	68 d4 00 00 00       	push   $0xd4
   jmp alltraps
-80106592:	e9 d7 f2 ff ff       	jmp    8010586e <alltraps>
+80106812:	e9 02 f3 ff ff       	jmp    80105b19 <alltraps>
 
-80106597 <vector213>:
+80106817 <vector213>:
 .globl vector213
 vector213:
   pushl $0
-80106597:	6a 00                	push   $0x0
+80106817:	6a 00                	push   $0x0
   pushl $213
-80106599:	68 d5 00 00 00       	push   $0xd5
+80106819:	68 d5 00 00 00       	push   $0xd5
   jmp alltraps
-8010659e:	e9 cb f2 ff ff       	jmp    8010586e <alltraps>
+8010681e:	e9 f6 f2 ff ff       	jmp    80105b19 <alltraps>
 
-801065a3 <vector214>:
+80106823 <vector214>:
 .globl vector214
 vector214:
   pushl $0
-801065a3:	6a 00                	push   $0x0
+80106823:	6a 00                	push   $0x0
   pushl $214
-801065a5:	68 d6 00 00 00       	push   $0xd6
+80106825:	68 d6 00 00 00       	push   $0xd6
   jmp alltraps
-801065aa:	e9 bf f2 ff ff       	jmp    8010586e <alltraps>
+8010682a:	e9 ea f2 ff ff       	jmp    80105b19 <alltraps>
 
-801065af <vector215>:
+8010682f <vector215>:
 .globl vector215
 vector215:
   pushl $0
-801065af:	6a 00                	push   $0x0
+8010682f:	6a 00                	push   $0x0
   pushl $215
-801065b1:	68 d7 00 00 00       	push   $0xd7
+80106831:	68 d7 00 00 00       	push   $0xd7
   jmp alltraps
-801065b6:	e9 b3 f2 ff ff       	jmp    8010586e <alltraps>
+80106836:	e9 de f2 ff ff       	jmp    80105b19 <alltraps>
 
-801065bb <vector216>:
+8010683b <vector216>:
 .globl vector216
 vector216:
   pushl $0
-801065bb:	6a 00                	push   $0x0
+8010683b:	6a 00                	push   $0x0
   pushl $216
-801065bd:	68 d8 00 00 00       	push   $0xd8
+8010683d:	68 d8 00 00 00       	push   $0xd8
   jmp alltraps
-801065c2:	e9 a7 f2 ff ff       	jmp    8010586e <alltraps>
+80106842:	e9 d2 f2 ff ff       	jmp    80105b19 <alltraps>
 
-801065c7 <vector217>:
+80106847 <vector217>:
 .globl vector217
 vector217:
   pushl $0
-801065c7:	6a 00                	push   $0x0
+80106847:	6a 00                	push   $0x0
   pushl $217
-801065c9:	68 d9 00 00 00       	push   $0xd9
+80106849:	68 d9 00 00 00       	push   $0xd9
   jmp alltraps
-801065ce:	e9 9b f2 ff ff       	jmp    8010586e <alltraps>
+8010684e:	e9 c6 f2 ff ff       	jmp    80105b19 <alltraps>
 
-801065d3 <vector218>:
+80106853 <vector218>:
 .globl vector218
 vector218:
   pushl $0
-801065d3:	6a 00                	push   $0x0
+80106853:	6a 00                	push   $0x0
   pushl $218
-801065d5:	68 da 00 00 00       	push   $0xda
+80106855:	68 da 00 00 00       	push   $0xda
   jmp alltraps
-801065da:	e9 8f f2 ff ff       	jmp    8010586e <alltraps>
+8010685a:	e9 ba f2 ff ff       	jmp    80105b19 <alltraps>
 
-801065df <vector219>:
+8010685f <vector219>:
 .globl vector219
 vector219:
   pushl $0
-801065df:	6a 00                	push   $0x0
+8010685f:	6a 00                	push   $0x0
   pushl $219
-801065e1:	68 db 00 00 00       	push   $0xdb
+80106861:	68 db 00 00 00       	push   $0xdb
   jmp alltraps
-801065e6:	e9 83 f2 ff ff       	jmp    8010586e <alltraps>
+80106866:	e9 ae f2 ff ff       	jmp    80105b19 <alltraps>
 
-801065eb <vector220>:
+8010686b <vector220>:
 .globl vector220
 vector220:
   pushl $0
-801065eb:	6a 00                	push   $0x0
+8010686b:	6a 00                	push   $0x0
   pushl $220
-801065ed:	68 dc 00 00 00       	push   $0xdc
+8010686d:	68 dc 00 00 00       	push   $0xdc
   jmp alltraps
-801065f2:	e9 77 f2 ff ff       	jmp    8010586e <alltraps>
+80106872:	e9 a2 f2 ff ff       	jmp    80105b19 <alltraps>
 
-801065f7 <vector221>:
+80106877 <vector221>:
 .globl vector221
 vector221:
   pushl $0
-801065f7:	6a 00                	push   $0x0
+80106877:	6a 00                	push   $0x0
   pushl $221
-801065f9:	68 dd 00 00 00       	push   $0xdd
+80106879:	68 dd 00 00 00       	push   $0xdd
   jmp alltraps
-801065fe:	e9 6b f2 ff ff       	jmp    8010586e <alltraps>
+8010687e:	e9 96 f2 ff ff       	jmp    80105b19 <alltraps>
 
-80106603 <vector222>:
+80106883 <vector222>:
 .globl vector222
 vector222:
   pushl $0
-80106603:	6a 00                	push   $0x0
+80106883:	6a 00                	push   $0x0
   pushl $222
-80106605:	68 de 00 00 00       	push   $0xde
+80106885:	68 de 00 00 00       	push   $0xde
   jmp alltraps
-8010660a:	e9 5f f2 ff ff       	jmp    8010586e <alltraps>
+8010688a:	e9 8a f2 ff ff       	jmp    80105b19 <alltraps>
 
-8010660f <vector223>:
+8010688f <vector223>:
 .globl vector223
 vector223:
   pushl $0
-8010660f:	6a 00                	push   $0x0
+8010688f:	6a 00                	push   $0x0
   pushl $223
-80106611:	68 df 00 00 00       	push   $0xdf
+80106891:	68 df 00 00 00       	push   $0xdf
   jmp alltraps
-80106616:	e9 53 f2 ff ff       	jmp    8010586e <alltraps>
+80106896:	e9 7e f2 ff ff       	jmp    80105b19 <alltraps>
 
-8010661b <vector224>:
+8010689b <vector224>:
 .globl vector224
 vector224:
   pushl $0
-8010661b:	6a 00                	push   $0x0
+8010689b:	6a 00                	push   $0x0
   pushl $224
-8010661d:	68 e0 00 00 00       	push   $0xe0
+8010689d:	68 e0 00 00 00       	push   $0xe0
   jmp alltraps
-80106622:	e9 47 f2 ff ff       	jmp    8010586e <alltraps>
+801068a2:	e9 72 f2 ff ff       	jmp    80105b19 <alltraps>
 
-80106627 <vector225>:
+801068a7 <vector225>:
 .globl vector225
 vector225:
   pushl $0
-80106627:	6a 00                	push   $0x0
+801068a7:	6a 00                	push   $0x0
   pushl $225
-80106629:	68 e1 00 00 00       	push   $0xe1
+801068a9:	68 e1 00 00 00       	push   $0xe1
   jmp alltraps
-8010662e:	e9 3b f2 ff ff       	jmp    8010586e <alltraps>
+801068ae:	e9 66 f2 ff ff       	jmp    80105b19 <alltraps>
 
-80106633 <vector226>:
+801068b3 <vector226>:
 .globl vector226
 vector226:
   pushl $0
-80106633:	6a 00                	push   $0x0
+801068b3:	6a 00                	push   $0x0
   pushl $226
-80106635:	68 e2 00 00 00       	push   $0xe2
+801068b5:	68 e2 00 00 00       	push   $0xe2
   jmp alltraps
-8010663a:	e9 2f f2 ff ff       	jmp    8010586e <alltraps>
+801068ba:	e9 5a f2 ff ff       	jmp    80105b19 <alltraps>
 
-8010663f <vector227>:
+801068bf <vector227>:
 .globl vector227
 vector227:
   pushl $0
-8010663f:	6a 00                	push   $0x0
+801068bf:	6a 00                	push   $0x0
   pushl $227
-80106641:	68 e3 00 00 00       	push   $0xe3
+801068c1:	68 e3 00 00 00       	push   $0xe3
   jmp alltraps
-80106646:	e9 23 f2 ff ff       	jmp    8010586e <alltraps>
+801068c6:	e9 4e f2 ff ff       	jmp    80105b19 <alltraps>
 
-8010664b <vector228>:
+801068cb <vector228>:
 .globl vector228
 vector228:
   pushl $0
-8010664b:	6a 00                	push   $0x0
+801068cb:	6a 00                	push   $0x0
   pushl $228
-8010664d:	68 e4 00 00 00       	push   $0xe4
+801068cd:	68 e4 00 00 00       	push   $0xe4
   jmp alltraps
-80106652:	e9 17 f2 ff ff       	jmp    8010586e <alltraps>
+801068d2:	e9 42 f2 ff ff       	jmp    80105b19 <alltraps>
 
-80106657 <vector229>:
+801068d7 <vector229>:
 .globl vector229
 vector229:
   pushl $0
-80106657:	6a 00                	push   $0x0
+801068d7:	6a 00                	push   $0x0
   pushl $229
-80106659:	68 e5 00 00 00       	push   $0xe5
+801068d9:	68 e5 00 00 00       	push   $0xe5
   jmp alltraps
-8010665e:	e9 0b f2 ff ff       	jmp    8010586e <alltraps>
+801068de:	e9 36 f2 ff ff       	jmp    80105b19 <alltraps>
 
-80106663 <vector230>:
+801068e3 <vector230>:
 .globl vector230
 vector230:
   pushl $0
-80106663:	6a 00                	push   $0x0
+801068e3:	6a 00                	push   $0x0
   pushl $230
-80106665:	68 e6 00 00 00       	push   $0xe6
+801068e5:	68 e6 00 00 00       	push   $0xe6
   jmp alltraps
-8010666a:	e9 ff f1 ff ff       	jmp    8010586e <alltraps>
+801068ea:	e9 2a f2 ff ff       	jmp    80105b19 <alltraps>
 
-8010666f <vector231>:
+801068ef <vector231>:
 .globl vector231
 vector231:
   pushl $0
-8010666f:	6a 00                	push   $0x0
+801068ef:	6a 00                	push   $0x0
   pushl $231
-80106671:	68 e7 00 00 00       	push   $0xe7
+801068f1:	68 e7 00 00 00       	push   $0xe7
   jmp alltraps
-80106676:	e9 f3 f1 ff ff       	jmp    8010586e <alltraps>
+801068f6:	e9 1e f2 ff ff       	jmp    80105b19 <alltraps>
 
-8010667b <vector232>:
+801068fb <vector232>:
 .globl vector232
 vector232:
   pushl $0
-8010667b:	6a 00                	push   $0x0
+801068fb:	6a 00                	push   $0x0
   pushl $232
-8010667d:	68 e8 00 00 00       	push   $0xe8
+801068fd:	68 e8 00 00 00       	push   $0xe8
   jmp alltraps
-80106682:	e9 e7 f1 ff ff       	jmp    8010586e <alltraps>
+80106902:	e9 12 f2 ff ff       	jmp    80105b19 <alltraps>
 
-80106687 <vector233>:
+80106907 <vector233>:
 .globl vector233
 vector233:
   pushl $0
-80106687:	6a 00                	push   $0x0
+80106907:	6a 00                	push   $0x0
   pushl $233
-80106689:	68 e9 00 00 00       	push   $0xe9
+80106909:	68 e9 00 00 00       	push   $0xe9
   jmp alltraps
-8010668e:	e9 db f1 ff ff       	jmp    8010586e <alltraps>
+8010690e:	e9 06 f2 ff ff       	jmp    80105b19 <alltraps>
 
-80106693 <vector234>:
+80106913 <vector234>:
 .globl vector234
 vector234:
   pushl $0
-80106693:	6a 00                	push   $0x0
+80106913:	6a 00                	push   $0x0
   pushl $234
-80106695:	68 ea 00 00 00       	push   $0xea
+80106915:	68 ea 00 00 00       	push   $0xea
   jmp alltraps
-8010669a:	e9 cf f1 ff ff       	jmp    8010586e <alltraps>
+8010691a:	e9 fa f1 ff ff       	jmp    80105b19 <alltraps>
 
-8010669f <vector235>:
+8010691f <vector235>:
 .globl vector235
 vector235:
   pushl $0
-8010669f:	6a 00                	push   $0x0
+8010691f:	6a 00                	push   $0x0
   pushl $235
-801066a1:	68 eb 00 00 00       	push   $0xeb
+80106921:	68 eb 00 00 00       	push   $0xeb
   jmp alltraps
-801066a6:	e9 c3 f1 ff ff       	jmp    8010586e <alltraps>
+80106926:	e9 ee f1 ff ff       	jmp    80105b19 <alltraps>
 
-801066ab <vector236>:
+8010692b <vector236>:
 .globl vector236
 vector236:
   pushl $0
-801066ab:	6a 00                	push   $0x0
+8010692b:	6a 00                	push   $0x0
   pushl $236
-801066ad:	68 ec 00 00 00       	push   $0xec
+8010692d:	68 ec 00 00 00       	push   $0xec
   jmp alltraps
-801066b2:	e9 b7 f1 ff ff       	jmp    8010586e <alltraps>
+80106932:	e9 e2 f1 ff ff       	jmp    80105b19 <alltraps>
 
-801066b7 <vector237>:
+80106937 <vector237>:
 .globl vector237
 vector237:
   pushl $0
-801066b7:	6a 00                	push   $0x0
+80106937:	6a 00                	push   $0x0
   pushl $237
-801066b9:	68 ed 00 00 00       	push   $0xed
+80106939:	68 ed 00 00 00       	push   $0xed
   jmp alltraps
-801066be:	e9 ab f1 ff ff       	jmp    8010586e <alltraps>
+8010693e:	e9 d6 f1 ff ff       	jmp    80105b19 <alltraps>
 
-801066c3 <vector238>:
+80106943 <vector238>:
 .globl vector238
 vector238:
   pushl $0
-801066c3:	6a 00                	push   $0x0
+80106943:	6a 00                	push   $0x0
   pushl $238
-801066c5:	68 ee 00 00 00       	push   $0xee
+80106945:	68 ee 00 00 00       	push   $0xee
   jmp alltraps
-801066ca:	e9 9f f1 ff ff       	jmp    8010586e <alltraps>
+8010694a:	e9 ca f1 ff ff       	jmp    80105b19 <alltraps>
 
-801066cf <vector239>:
+8010694f <vector239>:
 .globl vector239
 vector239:
   pushl $0
-801066cf:	6a 00                	push   $0x0
+8010694f:	6a 00                	push   $0x0
   pushl $239
-801066d1:	68 ef 00 00 00       	push   $0xef
+80106951:	68 ef 00 00 00       	push   $0xef
   jmp alltraps
-801066d6:	e9 93 f1 ff ff       	jmp    8010586e <alltraps>
+80106956:	e9 be f1 ff ff       	jmp    80105b19 <alltraps>
 
-801066db <vector240>:
+8010695b <vector240>:
 .globl vector240
 vector240:
   pushl $0
-801066db:	6a 00                	push   $0x0
+8010695b:	6a 00                	push   $0x0
   pushl $240
-801066dd:	68 f0 00 00 00       	push   $0xf0
+8010695d:	68 f0 00 00 00       	push   $0xf0
   jmp alltraps
-801066e2:	e9 87 f1 ff ff       	jmp    8010586e <alltraps>
+80106962:	e9 b2 f1 ff ff       	jmp    80105b19 <alltraps>
 
-801066e7 <vector241>:
+80106967 <vector241>:
 .globl vector241
 vector241:
   pushl $0
-801066e7:	6a 00                	push   $0x0
+80106967:	6a 00                	push   $0x0
   pushl $241
-801066e9:	68 f1 00 00 00       	push   $0xf1
+80106969:	68 f1 00 00 00       	push   $0xf1
   jmp alltraps
-801066ee:	e9 7b f1 ff ff       	jmp    8010586e <alltraps>
+8010696e:	e9 a6 f1 ff ff       	jmp    80105b19 <alltraps>
 
-801066f3 <vector242>:
+80106973 <vector242>:
 .globl vector242
 vector242:
   pushl $0
-801066f3:	6a 00                	push   $0x0
+80106973:	6a 00                	push   $0x0
   pushl $242
-801066f5:	68 f2 00 00 00       	push   $0xf2
+80106975:	68 f2 00 00 00       	push   $0xf2
   jmp alltraps
-801066fa:	e9 6f f1 ff ff       	jmp    8010586e <alltraps>
+8010697a:	e9 9a f1 ff ff       	jmp    80105b19 <alltraps>
 
-801066ff <vector243>:
+8010697f <vector243>:
 .globl vector243
 vector243:
   pushl $0
-801066ff:	6a 00                	push   $0x0
+8010697f:	6a 00                	push   $0x0
   pushl $243
-80106701:	68 f3 00 00 00       	push   $0xf3
+80106981:	68 f3 00 00 00       	push   $0xf3
   jmp alltraps
-80106706:	e9 63 f1 ff ff       	jmp    8010586e <alltraps>
+80106986:	e9 8e f1 ff ff       	jmp    80105b19 <alltraps>
 
-8010670b <vector244>:
+8010698b <vector244>:
 .globl vector244
 vector244:
   pushl $0
-8010670b:	6a 00                	push   $0x0
+8010698b:	6a 00                	push   $0x0
   pushl $244
-8010670d:	68 f4 00 00 00       	push   $0xf4
+8010698d:	68 f4 00 00 00       	push   $0xf4
   jmp alltraps
-80106712:	e9 57 f1 ff ff       	jmp    8010586e <alltraps>
+80106992:	e9 82 f1 ff ff       	jmp    80105b19 <alltraps>
 
-80106717 <vector245>:
+80106997 <vector245>:
 .globl vector245
 vector245:
   pushl $0
-80106717:	6a 00                	push   $0x0
+80106997:	6a 00                	push   $0x0
   pushl $245
-80106719:	68 f5 00 00 00       	push   $0xf5
+80106999:	68 f5 00 00 00       	push   $0xf5
   jmp alltraps
-8010671e:	e9 4b f1 ff ff       	jmp    8010586e <alltraps>
+8010699e:	e9 76 f1 ff ff       	jmp    80105b19 <alltraps>
 
-80106723 <vector246>:
+801069a3 <vector246>:
 .globl vector246
 vector246:
   pushl $0
-80106723:	6a 00                	push   $0x0
+801069a3:	6a 00                	push   $0x0
   pushl $246
-80106725:	68 f6 00 00 00       	push   $0xf6
+801069a5:	68 f6 00 00 00       	push   $0xf6
   jmp alltraps
-8010672a:	e9 3f f1 ff ff       	jmp    8010586e <alltraps>
+801069aa:	e9 6a f1 ff ff       	jmp    80105b19 <alltraps>
 
-8010672f <vector247>:
+801069af <vector247>:
 .globl vector247
 vector247:
   pushl $0
-8010672f:	6a 00                	push   $0x0
+801069af:	6a 00                	push   $0x0
   pushl $247
-80106731:	68 f7 00 00 00       	push   $0xf7
+801069b1:	68 f7 00 00 00       	push   $0xf7
   jmp alltraps
-80106736:	e9 33 f1 ff ff       	jmp    8010586e <alltraps>
+801069b6:	e9 5e f1 ff ff       	jmp    80105b19 <alltraps>
 
-8010673b <vector248>:
+801069bb <vector248>:
 .globl vector248
 vector248:
   pushl $0
-8010673b:	6a 00                	push   $0x0
+801069bb:	6a 00                	push   $0x0
   pushl $248
-8010673d:	68 f8 00 00 00       	push   $0xf8
+801069bd:	68 f8 00 00 00       	push   $0xf8
   jmp alltraps
-80106742:	e9 27 f1 ff ff       	jmp    8010586e <alltraps>
+801069c2:	e9 52 f1 ff ff       	jmp    80105b19 <alltraps>
 
-80106747 <vector249>:
+801069c7 <vector249>:
 .globl vector249
 vector249:
   pushl $0
-80106747:	6a 00                	push   $0x0
+801069c7:	6a 00                	push   $0x0
   pushl $249
-80106749:	68 f9 00 00 00       	push   $0xf9
+801069c9:	68 f9 00 00 00       	push   $0xf9
   jmp alltraps
-8010674e:	e9 1b f1 ff ff       	jmp    8010586e <alltraps>
+801069ce:	e9 46 f1 ff ff       	jmp    80105b19 <alltraps>
 
-80106753 <vector250>:
+801069d3 <vector250>:
 .globl vector250
 vector250:
   pushl $0
-80106753:	6a 00                	push   $0x0
+801069d3:	6a 00                	push   $0x0
   pushl $250
-80106755:	68 fa 00 00 00       	push   $0xfa
+801069d5:	68 fa 00 00 00       	push   $0xfa
   jmp alltraps
-8010675a:	e9 0f f1 ff ff       	jmp    8010586e <alltraps>
+801069da:	e9 3a f1 ff ff       	jmp    80105b19 <alltraps>
 
-8010675f <vector251>:
+801069df <vector251>:
 .globl vector251
 vector251:
   pushl $0
-8010675f:	6a 00                	push   $0x0
+801069df:	6a 00                	push   $0x0
   pushl $251
-80106761:	68 fb 00 00 00       	push   $0xfb
+801069e1:	68 fb 00 00 00       	push   $0xfb
   jmp alltraps
-80106766:	e9 03 f1 ff ff       	jmp    8010586e <alltraps>
+801069e6:	e9 2e f1 ff ff       	jmp    80105b19 <alltraps>
 
-8010676b <vector252>:
+801069eb <vector252>:
 .globl vector252
 vector252:
   pushl $0
-8010676b:	6a 00                	push   $0x0
+801069eb:	6a 00                	push   $0x0
   pushl $252
-8010676d:	68 fc 00 00 00       	push   $0xfc
+801069ed:	68 fc 00 00 00       	push   $0xfc
   jmp alltraps
-80106772:	e9 f7 f0 ff ff       	jmp    8010586e <alltraps>
+801069f2:	e9 22 f1 ff ff       	jmp    80105b19 <alltraps>
 
-80106777 <vector253>:
+801069f7 <vector253>:
 .globl vector253
 vector253:
   pushl $0
-80106777:	6a 00                	push   $0x0
+801069f7:	6a 00                	push   $0x0
   pushl $253
-80106779:	68 fd 00 00 00       	push   $0xfd
+801069f9:	68 fd 00 00 00       	push   $0xfd
   jmp alltraps
-8010677e:	e9 eb f0 ff ff       	jmp    8010586e <alltraps>
+801069fe:	e9 16 f1 ff ff       	jmp    80105b19 <alltraps>
 
-80106783 <vector254>:
+80106a03 <vector254>:
 .globl vector254
 vector254:
   pushl $0
-80106783:	6a 00                	push   $0x0
+80106a03:	6a 00                	push   $0x0
   pushl $254
-80106785:	68 fe 00 00 00       	push   $0xfe
+80106a05:	68 fe 00 00 00       	push   $0xfe
   jmp alltraps
-8010678a:	e9 df f0 ff ff       	jmp    8010586e <alltraps>
+80106a0a:	e9 0a f1 ff ff       	jmp    80105b19 <alltraps>
 
-8010678f <vector255>:
+80106a0f <vector255>:
 .globl vector255
 vector255:
   pushl $0
-8010678f:	6a 00                	push   $0x0
+80106a0f:	6a 00                	push   $0x0
   pushl $255
-80106791:	68 ff 00 00 00       	push   $0xff
+80106a11:	68 ff 00 00 00       	push   $0xff
   jmp alltraps
-80106796:	e9 d3 f0 ff ff       	jmp    8010586e <alltraps>
-8010679b:	66 90                	xchg   %ax,%ax
-8010679d:	66 90                	xchg   %ax,%ax
-8010679f:	90                   	nop
+80106a16:	e9 fe f0 ff ff       	jmp    80105b19 <alltraps>
+80106a1b:	66 90                	xchg   %ax,%ax
+80106a1d:	66 90                	xchg   %ax,%ax
+80106a1f:	90                   	nop
 
-801067a0 <walkpgdir>:
+80106a20 <walkpgdir>:
 // Return the address of the PTE in page table pgdir
 // that corresponds to virtual address va.  If alloc!=0,
 // create any required page table pages.
 static pte_t *
 walkpgdir(pde_t *pgdir, const void *va, int alloc)
 {
-801067a0:	55                   	push   %ebp
-801067a1:	89 e5                	mov    %esp,%ebp
-801067a3:	57                   	push   %edi
-801067a4:	56                   	push   %esi
-801067a5:	89 d6                	mov    %edx,%esi
+80106a20:	55                   	push   %ebp
+80106a21:	89 e5                	mov    %esp,%ebp
+80106a23:	57                   	push   %edi
+80106a24:	56                   	push   %esi
+80106a25:	89 d6                	mov    %edx,%esi
   pde_t *pde;
   pte_t *pgtab;
 
   pde = &pgdir[PDX(va)];
-801067a7:	c1 ea 16             	shr    $0x16,%edx
+80106a27:	c1 ea 16             	shr    $0x16,%edx
 {
-801067aa:	53                   	push   %ebx
+80106a2a:	53                   	push   %ebx
   pde = &pgdir[PDX(va)];
-801067ab:	8d 3c 90             	lea    (%eax,%edx,4),%edi
+80106a2b:	8d 3c 90             	lea    (%eax,%edx,4),%edi
 {
-801067ae:	83 ec 0c             	sub    $0xc,%esp
+80106a2e:	83 ec 0c             	sub    $0xc,%esp
   if(*pde & PTE_P){
-801067b1:	8b 1f                	mov    (%edi),%ebx
-801067b3:	f6 c3 01             	test   $0x1,%bl
-801067b6:	74 28                	je     801067e0 <walkpgdir+0x40>
+80106a31:	8b 1f                	mov    (%edi),%ebx
+80106a33:	f6 c3 01             	test   $0x1,%bl
+80106a36:	74 28                	je     80106a60 <walkpgdir+0x40>
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-801067b8:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-801067be:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
+80106a38:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+80106a3e:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
     // The permissions here are overly generous, but they can
     // be further restricted by the permissions in the page table
     // entries, if necessary.
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
   }
   return &pgtab[PTX(va)];
-801067c4:	89 f0                	mov    %esi,%eax
+80106a44:	89 f0                	mov    %esi,%eax
 }
-801067c6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106a46:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return &pgtab[PTX(va)];
-801067c9:	c1 e8 0a             	shr    $0xa,%eax
-801067cc:	25 fc 0f 00 00       	and    $0xffc,%eax
-801067d1:	01 d8                	add    %ebx,%eax
-}
-801067d3:	5b                   	pop    %ebx
-801067d4:	5e                   	pop    %esi
-801067d5:	5f                   	pop    %edi
-801067d6:	5d                   	pop    %ebp
-801067d7:	c3                   	ret    
-801067d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801067df:	90                   	nop
+80106a49:	c1 e8 0a             	shr    $0xa,%eax
+80106a4c:	25 fc 0f 00 00       	and    $0xffc,%eax
+80106a51:	01 d8                	add    %ebx,%eax
+}
+80106a53:	5b                   	pop    %ebx
+80106a54:	5e                   	pop    %esi
+80106a55:	5f                   	pop    %edi
+80106a56:	5d                   	pop    %ebp
+80106a57:	c3                   	ret    
+80106a58:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106a5f:	90                   	nop
     if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
-801067e0:	85 c9                	test   %ecx,%ecx
-801067e2:	74 2c                	je     80106810 <walkpgdir+0x70>
-801067e4:	e8 47 be ff ff       	call   80102630 <kalloc>
-801067e9:	89 c3                	mov    %eax,%ebx
-801067eb:	85 c0                	test   %eax,%eax
-801067ed:	74 21                	je     80106810 <walkpgdir+0x70>
+80106a60:	85 c9                	test   %ecx,%ecx
+80106a62:	74 2c                	je     80106a90 <walkpgdir+0x70>
+80106a64:	e8 c7 bb ff ff       	call   80102630 <kalloc>
+80106a69:	89 c3                	mov    %eax,%ebx
+80106a6b:	85 c0                	test   %eax,%eax
+80106a6d:	74 21                	je     80106a90 <walkpgdir+0x70>
     memset(pgtab, 0, PGSIZE);
-801067ef:	83 ec 04             	sub    $0x4,%esp
-801067f2:	68 00 10 00 00       	push   $0x1000
-801067f7:	6a 00                	push   $0x0
-801067f9:	50                   	push   %eax
-801067fa:	e8 71 de ff ff       	call   80104670 <memset>
+80106a6f:	83 ec 04             	sub    $0x4,%esp
+80106a72:	68 00 10 00 00       	push   $0x1000
+80106a77:	6a 00                	push   $0x0
+80106a79:	50                   	push   %eax
+80106a7a:	e8 f1 dd ff ff       	call   80104870 <memset>
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-801067ff:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106805:	83 c4 10             	add    $0x10,%esp
-80106808:	83 c8 07             	or     $0x7,%eax
-8010680b:	89 07                	mov    %eax,(%edi)
-8010680d:	eb b5                	jmp    801067c4 <walkpgdir+0x24>
-8010680f:	90                   	nop
+80106a7f:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106a85:	83 c4 10             	add    $0x10,%esp
+80106a88:	83 c8 07             	or     $0x7,%eax
+80106a8b:	89 07                	mov    %eax,(%edi)
+80106a8d:	eb b5                	jmp    80106a44 <walkpgdir+0x24>
+80106a8f:	90                   	nop
 }
-80106810:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106a90:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return 0;
-80106813:	31 c0                	xor    %eax,%eax
+80106a93:	31 c0                	xor    %eax,%eax
 }
-80106815:	5b                   	pop    %ebx
-80106816:	5e                   	pop    %esi
-80106817:	5f                   	pop    %edi
-80106818:	5d                   	pop    %ebp
-80106819:	c3                   	ret    
-8010681a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106a95:	5b                   	pop    %ebx
+80106a96:	5e                   	pop    %esi
+80106a97:	5f                   	pop    %edi
+80106a98:	5d                   	pop    %ebp
+80106a99:	c3                   	ret    
+80106a9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80106820 <mappages>:
+80106aa0 <mappages>:
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned.
 static int
 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
 {
-80106820:	55                   	push   %ebp
-80106821:	89 e5                	mov    %esp,%ebp
-80106823:	57                   	push   %edi
-80106824:	89 c7                	mov    %eax,%edi
+80106aa0:	55                   	push   %ebp
+80106aa1:	89 e5                	mov    %esp,%ebp
+80106aa3:	57                   	push   %edi
+80106aa4:	89 c7                	mov    %eax,%edi
   char *a, *last;
   pte_t *pte;
 
   a = (char*)PGROUNDDOWN((uint)va);
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-80106826:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
+80106aa6:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
 {
-8010682a:	56                   	push   %esi
+80106aaa:	56                   	push   %esi
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-8010682b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106aab:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   a = (char*)PGROUNDDOWN((uint)va);
-80106830:	89 d6                	mov    %edx,%esi
+80106ab0:	89 d6                	mov    %edx,%esi
 {
-80106832:	53                   	push   %ebx
+80106ab2:	53                   	push   %ebx
   a = (char*)PGROUNDDOWN((uint)va);
-80106833:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+80106ab3:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
 {
-80106839:	83 ec 1c             	sub    $0x1c,%esp
+80106ab9:	83 ec 1c             	sub    $0x1c,%esp
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-8010683c:	89 45 e0             	mov    %eax,-0x20(%ebp)
-8010683f:	8b 45 08             	mov    0x8(%ebp),%eax
-80106842:	29 f0                	sub    %esi,%eax
-80106844:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106847:	eb 1f                	jmp    80106868 <mappages+0x48>
-80106849:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106abc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106abf:	8b 45 08             	mov    0x8(%ebp),%eax
+80106ac2:	29 f0                	sub    %esi,%eax
+80106ac4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106ac7:	eb 1f                	jmp    80106ae8 <mappages+0x48>
+80106ac9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(;;){
     if((pte = walkpgdir(pgdir, a, 1)) == 0)
       return -1;
     if(*pte & PTE_P)
-80106850:	f6 00 01             	testb  $0x1,(%eax)
-80106853:	75 45                	jne    8010689a <mappages+0x7a>
+80106ad0:	f6 00 01             	testb  $0x1,(%eax)
+80106ad3:	75 45                	jne    80106b1a <mappages+0x7a>
       panic("remap");
     *pte = pa | perm | PTE_P;
-80106855:	0b 5d 0c             	or     0xc(%ebp),%ebx
-80106858:	83 cb 01             	or     $0x1,%ebx
-8010685b:	89 18                	mov    %ebx,(%eax)
+80106ad5:	0b 5d 0c             	or     0xc(%ebp),%ebx
+80106ad8:	83 cb 01             	or     $0x1,%ebx
+80106adb:	89 18                	mov    %ebx,(%eax)
     if(a == last)
-8010685d:	3b 75 e0             	cmp    -0x20(%ebp),%esi
-80106860:	74 2e                	je     80106890 <mappages+0x70>
+80106add:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+80106ae0:	74 2e                	je     80106b10 <mappages+0x70>
       break;
     a += PGSIZE;
-80106862:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80106ae2:	81 c6 00 10 00 00    	add    $0x1000,%esi
   for(;;){
-80106868:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106ae8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
     if((pte = walkpgdir(pgdir, a, 1)) == 0)
-8010686b:	b9 01 00 00 00       	mov    $0x1,%ecx
-80106870:	89 f2                	mov    %esi,%edx
-80106872:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
-80106875:	89 f8                	mov    %edi,%eax
-80106877:	e8 24 ff ff ff       	call   801067a0 <walkpgdir>
-8010687c:	85 c0                	test   %eax,%eax
-8010687e:	75 d0                	jne    80106850 <mappages+0x30>
+80106aeb:	b9 01 00 00 00       	mov    $0x1,%ecx
+80106af0:	89 f2                	mov    %esi,%edx
+80106af2:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
+80106af5:	89 f8                	mov    %edi,%eax
+80106af7:	e8 24 ff ff ff       	call   80106a20 <walkpgdir>
+80106afc:	85 c0                	test   %eax,%eax
+80106afe:	75 d0                	jne    80106ad0 <mappages+0x30>
     pa += PGSIZE;
   }
   return 0;
 }
-80106880:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106b00:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-80106883:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106b03:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80106888:	5b                   	pop    %ebx
-80106889:	5e                   	pop    %esi
-8010688a:	5f                   	pop    %edi
-8010688b:	5d                   	pop    %ebp
-8010688c:	c3                   	ret    
-8010688d:	8d 76 00             	lea    0x0(%esi),%esi
-80106890:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106b08:	5b                   	pop    %ebx
+80106b09:	5e                   	pop    %esi
+80106b0a:	5f                   	pop    %edi
+80106b0b:	5d                   	pop    %ebp
+80106b0c:	c3                   	ret    
+80106b0d:	8d 76 00             	lea    0x0(%esi),%esi
+80106b10:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80106893:	31 c0                	xor    %eax,%eax
+80106b13:	31 c0                	xor    %eax,%eax
 }
-80106895:	5b                   	pop    %ebx
-80106896:	5e                   	pop    %esi
-80106897:	5f                   	pop    %edi
-80106898:	5d                   	pop    %ebp
-80106899:	c3                   	ret    
+80106b15:	5b                   	pop    %ebx
+80106b16:	5e                   	pop    %esi
+80106b17:	5f                   	pop    %edi
+80106b18:	5d                   	pop    %ebp
+80106b19:	c3                   	ret    
       panic("remap");
-8010689a:	83 ec 0c             	sub    $0xc,%esp
-8010689d:	68 88 79 10 80       	push   $0x80107988
-801068a2:	e8 e9 9a ff ff       	call   80100390 <panic>
-801068a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801068ae:	66 90                	xchg   %ax,%ax
+80106b1a:	83 ec 0c             	sub    $0xc,%esp
+80106b1d:	68 1c 7c 10 80       	push   $0x80107c1c
+80106b22:	e8 69 98 ff ff       	call   80100390 <panic>
+80106b27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106b2e:	66 90                	xchg   %ax,%ax
 
-801068b0 <deallocuvm.part.0>:
+80106b30 <deallocuvm.part.0>:
 // Deallocate user pages to bring the process size from oldsz to
 // newsz.  oldsz and newsz need not be page-aligned, nor does newsz
 // need to be less than oldsz.  oldsz can be larger than the actual
 // process size.  Returns the new process size.
 int
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-801068b0:	55                   	push   %ebp
-801068b1:	89 e5                	mov    %esp,%ebp
-801068b3:	57                   	push   %edi
-801068b4:	56                   	push   %esi
-801068b5:	89 c6                	mov    %eax,%esi
-801068b7:	53                   	push   %ebx
-801068b8:	89 d3                	mov    %edx,%ebx
+80106b30:	55                   	push   %ebp
+80106b31:	89 e5                	mov    %esp,%ebp
+80106b33:	57                   	push   %edi
+80106b34:	56                   	push   %esi
+80106b35:	89 c6                	mov    %eax,%esi
+80106b37:	53                   	push   %ebx
+80106b38:	89 d3                	mov    %edx,%ebx
   uint a, pa;
 
   if(newsz >= oldsz)
     return oldsz;
 
   a = PGROUNDUP(newsz);
-801068ba:	8d 91 ff 0f 00 00    	lea    0xfff(%ecx),%edx
-801068c0:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+80106b3a:	8d 91 ff 0f 00 00    	lea    0xfff(%ecx),%edx
+80106b40:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-801068c6:	83 ec 1c             	sub    $0x1c,%esp
-801068c9:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+80106b46:	83 ec 1c             	sub    $0x1c,%esp
+80106b49:	89 4d e0             	mov    %ecx,-0x20(%ebp)
   for(; a  < oldsz; a += PGSIZE){
-801068cc:	39 da                	cmp    %ebx,%edx
-801068ce:	73 5b                	jae    8010692b <deallocuvm.part.0+0x7b>
-801068d0:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
-801068d3:	89 d7                	mov    %edx,%edi
-801068d5:	eb 14                	jmp    801068eb <deallocuvm.part.0+0x3b>
-801068d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801068de:	66 90                	xchg   %ax,%ax
-801068e0:	81 c7 00 10 00 00    	add    $0x1000,%edi
-801068e6:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
-801068e9:	76 40                	jbe    8010692b <deallocuvm.part.0+0x7b>
+80106b4c:	39 da                	cmp    %ebx,%edx
+80106b4e:	73 5b                	jae    80106bab <deallocuvm.part.0+0x7b>
+80106b50:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+80106b53:	89 d7                	mov    %edx,%edi
+80106b55:	eb 14                	jmp    80106b6b <deallocuvm.part.0+0x3b>
+80106b57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106b5e:	66 90                	xchg   %ax,%ax
+80106b60:	81 c7 00 10 00 00    	add    $0x1000,%edi
+80106b66:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80106b69:	76 40                	jbe    80106bab <deallocuvm.part.0+0x7b>
     pte = walkpgdir(pgdir, (char*)a, 0);
-801068eb:	31 c9                	xor    %ecx,%ecx
-801068ed:	89 fa                	mov    %edi,%edx
-801068ef:	89 f0                	mov    %esi,%eax
-801068f1:	e8 aa fe ff ff       	call   801067a0 <walkpgdir>
-801068f6:	89 c3                	mov    %eax,%ebx
+80106b6b:	31 c9                	xor    %ecx,%ecx
+80106b6d:	89 fa                	mov    %edi,%edx
+80106b6f:	89 f0                	mov    %esi,%eax
+80106b71:	e8 aa fe ff ff       	call   80106a20 <walkpgdir>
+80106b76:	89 c3                	mov    %eax,%ebx
     if(!pte)
-801068f8:	85 c0                	test   %eax,%eax
-801068fa:	74 44                	je     80106940 <deallocuvm.part.0+0x90>
+80106b78:	85 c0                	test   %eax,%eax
+80106b7a:	74 44                	je     80106bc0 <deallocuvm.part.0+0x90>
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
     else if((*pte & PTE_P) != 0){
-801068fc:	8b 00                	mov    (%eax),%eax
-801068fe:	a8 01                	test   $0x1,%al
-80106900:	74 de                	je     801068e0 <deallocuvm.part.0+0x30>
+80106b7c:	8b 00                	mov    (%eax),%eax
+80106b7e:	a8 01                	test   $0x1,%al
+80106b80:	74 de                	je     80106b60 <deallocuvm.part.0+0x30>
       pa = PTE_ADDR(*pte);
       if(pa == 0)
-80106902:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80106907:	74 47                	je     80106950 <deallocuvm.part.0+0xa0>
+80106b82:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106b87:	74 47                	je     80106bd0 <deallocuvm.part.0+0xa0>
         panic("kfree");
       char *v = P2V(pa);
       kfree(v);
-80106909:	83 ec 0c             	sub    $0xc,%esp
+80106b89:	83 ec 0c             	sub    $0xc,%esp
       char *v = P2V(pa);
-8010690c:	05 00 00 00 80       	add    $0x80000000,%eax
-80106911:	81 c7 00 10 00 00    	add    $0x1000,%edi
+80106b8c:	05 00 00 00 80       	add    $0x80000000,%eax
+80106b91:	81 c7 00 10 00 00    	add    $0x1000,%edi
       kfree(v);
-80106917:	50                   	push   %eax
-80106918:	e8 53 bb ff ff       	call   80102470 <kfree>
+80106b97:	50                   	push   %eax
+80106b98:	e8 d3 b8 ff ff       	call   80102470 <kfree>
       *pte = 0;
-8010691d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-80106923:	83 c4 10             	add    $0x10,%esp
+80106b9d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80106ba3:	83 c4 10             	add    $0x10,%esp
   for(; a  < oldsz; a += PGSIZE){
-80106926:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
-80106929:	77 c0                	ja     801068eb <deallocuvm.part.0+0x3b>
+80106ba6:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80106ba9:	77 c0                	ja     80106b6b <deallocuvm.part.0+0x3b>
     }
   }
   return newsz;
 }
-8010692b:	8b 45 e0             	mov    -0x20(%ebp),%eax
-8010692e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106931:	5b                   	pop    %ebx
-80106932:	5e                   	pop    %esi
-80106933:	5f                   	pop    %edi
-80106934:	5d                   	pop    %ebp
-80106935:	c3                   	ret    
-80106936:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010693d:	8d 76 00             	lea    0x0(%esi),%esi
+80106bab:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106bae:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106bb1:	5b                   	pop    %ebx
+80106bb2:	5e                   	pop    %esi
+80106bb3:	5f                   	pop    %edi
+80106bb4:	5d                   	pop    %ebp
+80106bb5:	c3                   	ret    
+80106bb6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106bbd:	8d 76 00             	lea    0x0(%esi),%esi
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
-80106940:	89 fa                	mov    %edi,%edx
-80106942:	81 e2 00 00 c0 ff    	and    $0xffc00000,%edx
-80106948:	8d ba 00 00 40 00    	lea    0x400000(%edx),%edi
-8010694e:	eb 96                	jmp    801068e6 <deallocuvm.part.0+0x36>
+80106bc0:	89 fa                	mov    %edi,%edx
+80106bc2:	81 e2 00 00 c0 ff    	and    $0xffc00000,%edx
+80106bc8:	8d ba 00 00 40 00    	lea    0x400000(%edx),%edi
+80106bce:	eb 96                	jmp    80106b66 <deallocuvm.part.0+0x36>
         panic("kfree");
-80106950:	83 ec 0c             	sub    $0xc,%esp
-80106953:	68 46 73 10 80       	push   $0x80107346
-80106958:	e8 33 9a ff ff       	call   80100390 <panic>
-8010695d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80106960 <seginit>:
-{
-80106960:	f3 0f 1e fb          	endbr32 
-80106964:	55                   	push   %ebp
-80106965:	89 e5                	mov    %esp,%ebp
-80106967:	83 ec 18             	sub    $0x18,%esp
+80106bd0:	83 ec 0c             	sub    $0xc,%esp
+80106bd3:	68 c6 75 10 80       	push   $0x801075c6
+80106bd8:	e8 b3 97 ff ff       	call   80100390 <panic>
+80106bdd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80106be0 <seginit>:
+{
+80106be0:	f3 0f 1e fb          	endbr32 
+80106be4:	55                   	push   %ebp
+80106be5:	89 e5                	mov    %esp,%ebp
+80106be7:	83 ec 18             	sub    $0x18,%esp
   c = &cpus[cpuid()];
-8010696a:	e8 d1 cf ff ff       	call   80103940 <cpuid>
+80106bea:	e8 71 cd ff ff       	call   80103960 <cpuid>
   pd[0] = size-1;
-8010696f:	ba 2f 00 00 00       	mov    $0x2f,%edx
-80106974:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
-8010697a:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
+80106bef:	ba 2f 00 00 00       	mov    $0x2f,%edx
+80106bf4:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
+80106bfa:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-8010697e:	c7 80 f8 27 11 80 ff 	movl   $0xffff,-0x7feed808(%eax)
-80106985:	ff 00 00 
-80106988:	c7 80 fc 27 11 80 00 	movl   $0xcf9a00,-0x7feed804(%eax)
-8010698f:	9a cf 00 
+80106bfe:	c7 80 f8 27 11 80 ff 	movl   $0xffff,-0x7feed808(%eax)
+80106c05:	ff 00 00 
+80106c08:	c7 80 fc 27 11 80 00 	movl   $0xcf9a00,-0x7feed804(%eax)
+80106c0f:	9a cf 00 
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-80106992:	c7 80 00 28 11 80 ff 	movl   $0xffff,-0x7feed800(%eax)
-80106999:	ff 00 00 
-8010699c:	c7 80 04 28 11 80 00 	movl   $0xcf9200,-0x7feed7fc(%eax)
-801069a3:	92 cf 00 
+80106c12:	c7 80 00 28 11 80 ff 	movl   $0xffff,-0x7feed800(%eax)
+80106c19:	ff 00 00 
+80106c1c:	c7 80 04 28 11 80 00 	movl   $0xcf9200,-0x7feed7fc(%eax)
+80106c23:	92 cf 00 
   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-801069a6:	c7 80 08 28 11 80 ff 	movl   $0xffff,-0x7feed7f8(%eax)
-801069ad:	ff 00 00 
-801069b0:	c7 80 0c 28 11 80 00 	movl   $0xcffa00,-0x7feed7f4(%eax)
-801069b7:	fa cf 00 
+80106c26:	c7 80 08 28 11 80 ff 	movl   $0xffff,-0x7feed7f8(%eax)
+80106c2d:	ff 00 00 
+80106c30:	c7 80 0c 28 11 80 00 	movl   $0xcffa00,-0x7feed7f4(%eax)
+80106c37:	fa cf 00 
   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-801069ba:	c7 80 10 28 11 80 ff 	movl   $0xffff,-0x7feed7f0(%eax)
-801069c1:	ff 00 00 
-801069c4:	c7 80 14 28 11 80 00 	movl   $0xcff200,-0x7feed7ec(%eax)
-801069cb:	f2 cf 00 
+80106c3a:	c7 80 10 28 11 80 ff 	movl   $0xffff,-0x7feed7f0(%eax)
+80106c41:	ff 00 00 
+80106c44:	c7 80 14 28 11 80 00 	movl   $0xcff200,-0x7feed7ec(%eax)
+80106c4b:	f2 cf 00 
   lgdt(c->gdt, sizeof(c->gdt));
-801069ce:	05 f0 27 11 80       	add    $0x801127f0,%eax
+80106c4e:	05 f0 27 11 80       	add    $0x801127f0,%eax
   pd[1] = (uint)p;
-801069d3:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
+80106c53:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
   pd[2] = (uint)p >> 16;
-801069d7:	c1 e8 10             	shr    $0x10,%eax
-801069da:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+80106c57:	c1 e8 10             	shr    $0x10,%eax
+80106c5a:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
   asm volatile("lgdt (%0)" : : "r" (pd));
-801069de:	8d 45 f2             	lea    -0xe(%ebp),%eax
-801069e1:	0f 01 10             	lgdtl  (%eax)
+80106c5e:	8d 45 f2             	lea    -0xe(%ebp),%eax
+80106c61:	0f 01 10             	lgdtl  (%eax)
 }
-801069e4:	c9                   	leave  
-801069e5:	c3                   	ret    
-801069e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801069ed:	8d 76 00             	lea    0x0(%esi),%esi
+80106c64:	c9                   	leave  
+80106c65:	c3                   	ret    
+80106c66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106c6d:	8d 76 00             	lea    0x0(%esi),%esi
 
-801069f0 <switchkvm>:
+80106c70 <switchkvm>:
 {
-801069f0:	f3 0f 1e fb          	endbr32 
+80106c70:	f3 0f 1e fb          	endbr32 
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-801069f4:	a1 a4 54 11 80       	mov    0x801154a4,%eax
-801069f9:	05 00 00 00 80       	add    $0x80000000,%eax
+80106c74:	a1 a4 56 11 80       	mov    0x801156a4,%eax
+80106c79:	05 00 00 00 80       	add    $0x80000000,%eax
 }
 
 static inline void
 lcr3(uint val)
 {
   asm volatile("movl %0,%%cr3" : : "r" (val));
-801069fe:	0f 22 d8             	mov    %eax,%cr3
+80106c7e:	0f 22 d8             	mov    %eax,%cr3
 }
-80106a01:	c3                   	ret    
-80106a02:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106a09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80106a10 <switchuvm>:
-{
-80106a10:	f3 0f 1e fb          	endbr32 
-80106a14:	55                   	push   %ebp
-80106a15:	89 e5                	mov    %esp,%ebp
-80106a17:	57                   	push   %edi
-80106a18:	56                   	push   %esi
-80106a19:	53                   	push   %ebx
-80106a1a:	83 ec 1c             	sub    $0x1c,%esp
-80106a1d:	8b 75 08             	mov    0x8(%ebp),%esi
+80106c81:	c3                   	ret    
+80106c82:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106c89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106c90 <switchuvm>:
+{
+80106c90:	f3 0f 1e fb          	endbr32 
+80106c94:	55                   	push   %ebp
+80106c95:	89 e5                	mov    %esp,%ebp
+80106c97:	57                   	push   %edi
+80106c98:	56                   	push   %esi
+80106c99:	53                   	push   %ebx
+80106c9a:	83 ec 1c             	sub    $0x1c,%esp
+80106c9d:	8b 75 08             	mov    0x8(%ebp),%esi
   if(p == 0)
-80106a20:	85 f6                	test   %esi,%esi
-80106a22:	0f 84 cb 00 00 00    	je     80106af3 <switchuvm+0xe3>
+80106ca0:	85 f6                	test   %esi,%esi
+80106ca2:	0f 84 cb 00 00 00    	je     80106d73 <switchuvm+0xe3>
   if(p->kstack == 0)
-80106a28:	8b 46 08             	mov    0x8(%esi),%eax
-80106a2b:	85 c0                	test   %eax,%eax
-80106a2d:	0f 84 da 00 00 00    	je     80106b0d <switchuvm+0xfd>
+80106ca8:	8b 46 08             	mov    0x8(%esi),%eax
+80106cab:	85 c0                	test   %eax,%eax
+80106cad:	0f 84 da 00 00 00    	je     80106d8d <switchuvm+0xfd>
   if(p->pgdir == 0)
-80106a33:	8b 46 04             	mov    0x4(%esi),%eax
-80106a36:	85 c0                	test   %eax,%eax
-80106a38:	0f 84 c2 00 00 00    	je     80106b00 <switchuvm+0xf0>
+80106cb3:	8b 46 04             	mov    0x4(%esi),%eax
+80106cb6:	85 c0                	test   %eax,%eax
+80106cb8:	0f 84 c2 00 00 00    	je     80106d80 <switchuvm+0xf0>
   pushcli();
-80106a3e:	e8 1d da ff ff       	call   80104460 <pushcli>
+80106cbe:	e8 9d d9 ff ff       	call   80104660 <pushcli>
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106a43:	e8 88 ce ff ff       	call   801038d0 <mycpu>
-80106a48:	89 c3                	mov    %eax,%ebx
-80106a4a:	e8 81 ce ff ff       	call   801038d0 <mycpu>
-80106a4f:	89 c7                	mov    %eax,%edi
-80106a51:	e8 7a ce ff ff       	call   801038d0 <mycpu>
-80106a56:	83 c7 08             	add    $0x8,%edi
-80106a59:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106a5c:	e8 6f ce ff ff       	call   801038d0 <mycpu>
-80106a61:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80106a64:	ba 67 00 00 00       	mov    $0x67,%edx
-80106a69:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
-80106a70:	83 c0 08             	add    $0x8,%eax
-80106a73:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
+80106cc3:	e8 28 cc ff ff       	call   801038f0 <mycpu>
+80106cc8:	89 c3                	mov    %eax,%ebx
+80106cca:	e8 21 cc ff ff       	call   801038f0 <mycpu>
+80106ccf:	89 c7                	mov    %eax,%edi
+80106cd1:	e8 1a cc ff ff       	call   801038f0 <mycpu>
+80106cd6:	83 c7 08             	add    $0x8,%edi
+80106cd9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106cdc:	e8 0f cc ff ff       	call   801038f0 <mycpu>
+80106ce1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80106ce4:	ba 67 00 00 00       	mov    $0x67,%edx
+80106ce9:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
+80106cf0:	83 c0 08             	add    $0x8,%eax
+80106cf3:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106a7a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+80106cfa:	bf ff ff ff ff       	mov    $0xffffffff,%edi
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106a7f:	83 c1 08             	add    $0x8,%ecx
-80106a82:	c1 e8 18             	shr    $0x18,%eax
-80106a85:	c1 e9 10             	shr    $0x10,%ecx
-80106a88:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
-80106a8e:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
-80106a94:	b9 99 40 00 00       	mov    $0x4099,%ecx
-80106a99:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
+80106cff:	83 c1 08             	add    $0x8,%ecx
+80106d02:	c1 e8 18             	shr    $0x18,%eax
+80106d05:	c1 e9 10             	shr    $0x10,%ecx
+80106d08:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
+80106d0e:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
+80106d14:	b9 99 40 00 00       	mov    $0x4099,%ecx
+80106d19:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106aa0:	bb 10 00 00 00       	mov    $0x10,%ebx
+80106d20:	bb 10 00 00 00       	mov    $0x10,%ebx
   mycpu()->gdt[SEG_TSS].s = 0;
-80106aa5:	e8 26 ce ff ff       	call   801038d0 <mycpu>
-80106aaa:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
+80106d25:	e8 c6 cb ff ff       	call   801038f0 <mycpu>
+80106d2a:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106ab1:	e8 1a ce ff ff       	call   801038d0 <mycpu>
-80106ab6:	66 89 58 10          	mov    %bx,0x10(%eax)
+80106d31:	e8 ba cb ff ff       	call   801038f0 <mycpu>
+80106d36:	66 89 58 10          	mov    %bx,0x10(%eax)
   mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
-80106aba:	8b 5e 08             	mov    0x8(%esi),%ebx
-80106abd:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106ac3:	e8 08 ce ff ff       	call   801038d0 <mycpu>
-80106ac8:	89 58 0c             	mov    %ebx,0xc(%eax)
+80106d3a:	8b 5e 08             	mov    0x8(%esi),%ebx
+80106d3d:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106d43:	e8 a8 cb ff ff       	call   801038f0 <mycpu>
+80106d48:	89 58 0c             	mov    %ebx,0xc(%eax)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106acb:	e8 00 ce ff ff       	call   801038d0 <mycpu>
-80106ad0:	66 89 78 6e          	mov    %di,0x6e(%eax)
+80106d4b:	e8 a0 cb ff ff       	call   801038f0 <mycpu>
+80106d50:	66 89 78 6e          	mov    %di,0x6e(%eax)
   asm volatile("ltr %0" : : "r" (sel));
-80106ad4:	b8 28 00 00 00       	mov    $0x28,%eax
-80106ad9:	0f 00 d8             	ltr    %ax
+80106d54:	b8 28 00 00 00       	mov    $0x28,%eax
+80106d59:	0f 00 d8             	ltr    %ax
   lcr3(V2P(p->pgdir));  // switch to process's address space
-80106adc:	8b 46 04             	mov    0x4(%esi),%eax
-80106adf:	05 00 00 00 80       	add    $0x80000000,%eax
+80106d5c:	8b 46 04             	mov    0x4(%esi),%eax
+80106d5f:	05 00 00 00 80       	add    $0x80000000,%eax
   asm volatile("movl %0,%%cr3" : : "r" (val));
-80106ae4:	0f 22 d8             	mov    %eax,%cr3
+80106d64:	0f 22 d8             	mov    %eax,%cr3
 }
-80106ae7:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106aea:	5b                   	pop    %ebx
-80106aeb:	5e                   	pop    %esi
-80106aec:	5f                   	pop    %edi
-80106aed:	5d                   	pop    %ebp
+80106d67:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106d6a:	5b                   	pop    %ebx
+80106d6b:	5e                   	pop    %esi
+80106d6c:	5f                   	pop    %edi
+80106d6d:	5d                   	pop    %ebp
   popcli();
-80106aee:	e9 bd d9 ff ff       	jmp    801044b0 <popcli>
+80106d6e:	e9 3d d9 ff ff       	jmp    801046b0 <popcli>
     panic("switchuvm: no process");
-80106af3:	83 ec 0c             	sub    $0xc,%esp
-80106af6:	68 8e 79 10 80       	push   $0x8010798e
-80106afb:	e8 90 98 ff ff       	call   80100390 <panic>
+80106d73:	83 ec 0c             	sub    $0xc,%esp
+80106d76:	68 22 7c 10 80       	push   $0x80107c22
+80106d7b:	e8 10 96 ff ff       	call   80100390 <panic>
     panic("switchuvm: no pgdir");
-80106b00:	83 ec 0c             	sub    $0xc,%esp
-80106b03:	68 b9 79 10 80       	push   $0x801079b9
-80106b08:	e8 83 98 ff ff       	call   80100390 <panic>
+80106d80:	83 ec 0c             	sub    $0xc,%esp
+80106d83:	68 4d 7c 10 80       	push   $0x80107c4d
+80106d88:	e8 03 96 ff ff       	call   80100390 <panic>
     panic("switchuvm: no kstack");
-80106b0d:	83 ec 0c             	sub    $0xc,%esp
-80106b10:	68 a4 79 10 80       	push   $0x801079a4
-80106b15:	e8 76 98 ff ff       	call   80100390 <panic>
-80106b1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80106b20 <inituvm>:
-{
-80106b20:	f3 0f 1e fb          	endbr32 
-80106b24:	55                   	push   %ebp
-80106b25:	89 e5                	mov    %esp,%ebp
-80106b27:	57                   	push   %edi
-80106b28:	56                   	push   %esi
-80106b29:	53                   	push   %ebx
-80106b2a:	83 ec 1c             	sub    $0x1c,%esp
-80106b2d:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106b30:	8b 75 10             	mov    0x10(%ebp),%esi
-80106b33:	8b 7d 08             	mov    0x8(%ebp),%edi
-80106b36:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106d8d:	83 ec 0c             	sub    $0xc,%esp
+80106d90:	68 38 7c 10 80       	push   $0x80107c38
+80106d95:	e8 f6 95 ff ff       	call   80100390 <panic>
+80106d9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80106da0 <inituvm>:
+{
+80106da0:	f3 0f 1e fb          	endbr32 
+80106da4:	55                   	push   %ebp
+80106da5:	89 e5                	mov    %esp,%ebp
+80106da7:	57                   	push   %edi
+80106da8:	56                   	push   %esi
+80106da9:	53                   	push   %ebx
+80106daa:	83 ec 1c             	sub    $0x1c,%esp
+80106dad:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106db0:	8b 75 10             	mov    0x10(%ebp),%esi
+80106db3:	8b 7d 08             	mov    0x8(%ebp),%edi
+80106db6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(sz >= PGSIZE)
-80106b39:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
-80106b3f:	77 4b                	ja     80106b8c <inituvm+0x6c>
+80106db9:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+80106dbf:	77 4b                	ja     80106e0c <inituvm+0x6c>
   mem = kalloc();
-80106b41:	e8 ea ba ff ff       	call   80102630 <kalloc>
+80106dc1:	e8 6a b8 ff ff       	call   80102630 <kalloc>
   memset(mem, 0, PGSIZE);
-80106b46:	83 ec 04             	sub    $0x4,%esp
-80106b49:	68 00 10 00 00       	push   $0x1000
+80106dc6:	83 ec 04             	sub    $0x4,%esp
+80106dc9:	68 00 10 00 00       	push   $0x1000
   mem = kalloc();
-80106b4e:	89 c3                	mov    %eax,%ebx
+80106dce:	89 c3                	mov    %eax,%ebx
   memset(mem, 0, PGSIZE);
-80106b50:	6a 00                	push   $0x0
-80106b52:	50                   	push   %eax
-80106b53:	e8 18 db ff ff       	call   80104670 <memset>
+80106dd0:	6a 00                	push   $0x0
+80106dd2:	50                   	push   %eax
+80106dd3:	e8 98 da ff ff       	call   80104870 <memset>
   mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
-80106b58:	58                   	pop    %eax
-80106b59:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106b5f:	5a                   	pop    %edx
-80106b60:	6a 06                	push   $0x6
-80106b62:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106b67:	31 d2                	xor    %edx,%edx
-80106b69:	50                   	push   %eax
-80106b6a:	89 f8                	mov    %edi,%eax
-80106b6c:	e8 af fc ff ff       	call   80106820 <mappages>
+80106dd8:	58                   	pop    %eax
+80106dd9:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106ddf:	5a                   	pop    %edx
+80106de0:	6a 06                	push   $0x6
+80106de2:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106de7:	31 d2                	xor    %edx,%edx
+80106de9:	50                   	push   %eax
+80106dea:	89 f8                	mov    %edi,%eax
+80106dec:	e8 af fc ff ff       	call   80106aa0 <mappages>
   memmove(mem, init, sz);
-80106b71:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106b74:	89 75 10             	mov    %esi,0x10(%ebp)
-80106b77:	83 c4 10             	add    $0x10,%esp
-80106b7a:	89 5d 08             	mov    %ebx,0x8(%ebp)
-80106b7d:	89 45 0c             	mov    %eax,0xc(%ebp)
-}
-80106b80:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106b83:	5b                   	pop    %ebx
-80106b84:	5e                   	pop    %esi
-80106b85:	5f                   	pop    %edi
-80106b86:	5d                   	pop    %ebp
+80106df1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106df4:	89 75 10             	mov    %esi,0x10(%ebp)
+80106df7:	83 c4 10             	add    $0x10,%esp
+80106dfa:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80106dfd:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+80106e00:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106e03:	5b                   	pop    %ebx
+80106e04:	5e                   	pop    %esi
+80106e05:	5f                   	pop    %edi
+80106e06:	5d                   	pop    %ebp
   memmove(mem, init, sz);
-80106b87:	e9 84 db ff ff       	jmp    80104710 <memmove>
+80106e07:	e9 04 db ff ff       	jmp    80104910 <memmove>
     panic("inituvm: more than a page");
-80106b8c:	83 ec 0c             	sub    $0xc,%esp
-80106b8f:	68 cd 79 10 80       	push   $0x801079cd
-80106b94:	e8 f7 97 ff ff       	call   80100390 <panic>
-80106b99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80106ba0 <loaduvm>:
-{
-80106ba0:	f3 0f 1e fb          	endbr32 
-80106ba4:	55                   	push   %ebp
-80106ba5:	89 e5                	mov    %esp,%ebp
-80106ba7:	57                   	push   %edi
-80106ba8:	56                   	push   %esi
-80106ba9:	53                   	push   %ebx
-80106baa:	83 ec 1c             	sub    $0x1c,%esp
-80106bad:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106bb0:	8b 75 18             	mov    0x18(%ebp),%esi
+80106e0c:	83 ec 0c             	sub    $0xc,%esp
+80106e0f:	68 61 7c 10 80       	push   $0x80107c61
+80106e14:	e8 77 95 ff ff       	call   80100390 <panic>
+80106e19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106e20 <loaduvm>:
+{
+80106e20:	f3 0f 1e fb          	endbr32 
+80106e24:	55                   	push   %ebp
+80106e25:	89 e5                	mov    %esp,%ebp
+80106e27:	57                   	push   %edi
+80106e28:	56                   	push   %esi
+80106e29:	53                   	push   %ebx
+80106e2a:	83 ec 1c             	sub    $0x1c,%esp
+80106e2d:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106e30:	8b 75 18             	mov    0x18(%ebp),%esi
   if((uint) addr % PGSIZE != 0)
-80106bb3:	a9 ff 0f 00 00       	test   $0xfff,%eax
-80106bb8:	0f 85 99 00 00 00    	jne    80106c57 <loaduvm+0xb7>
+80106e33:	a9 ff 0f 00 00       	test   $0xfff,%eax
+80106e38:	0f 85 99 00 00 00    	jne    80106ed7 <loaduvm+0xb7>
   for(i = 0; i < sz; i += PGSIZE){
-80106bbe:	01 f0                	add    %esi,%eax
-80106bc0:	89 f3                	mov    %esi,%ebx
-80106bc2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106e3e:	01 f0                	add    %esi,%eax
+80106e40:	89 f3                	mov    %esi,%ebx
+80106e42:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106bc5:	8b 45 14             	mov    0x14(%ebp),%eax
-80106bc8:	01 f0                	add    %esi,%eax
-80106bca:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106e45:	8b 45 14             	mov    0x14(%ebp),%eax
+80106e48:	01 f0                	add    %esi,%eax
+80106e4a:	89 45 e0             	mov    %eax,-0x20(%ebp)
   for(i = 0; i < sz; i += PGSIZE){
-80106bcd:	85 f6                	test   %esi,%esi
-80106bcf:	75 15                	jne    80106be6 <loaduvm+0x46>
-80106bd1:	eb 6d                	jmp    80106c40 <loaduvm+0xa0>
-80106bd3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106bd7:	90                   	nop
-80106bd8:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
-80106bde:	89 f0                	mov    %esi,%eax
-80106be0:	29 d8                	sub    %ebx,%eax
-80106be2:	39 c6                	cmp    %eax,%esi
-80106be4:	76 5a                	jbe    80106c40 <loaduvm+0xa0>
+80106e4d:	85 f6                	test   %esi,%esi
+80106e4f:	75 15                	jne    80106e66 <loaduvm+0x46>
+80106e51:	eb 6d                	jmp    80106ec0 <loaduvm+0xa0>
+80106e53:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106e57:	90                   	nop
+80106e58:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
+80106e5e:	89 f0                	mov    %esi,%eax
+80106e60:	29 d8                	sub    %ebx,%eax
+80106e62:	39 c6                	cmp    %eax,%esi
+80106e64:	76 5a                	jbe    80106ec0 <loaduvm+0xa0>
     if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
-80106be6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80106be9:	8b 45 08             	mov    0x8(%ebp),%eax
-80106bec:	31 c9                	xor    %ecx,%ecx
-80106bee:	29 da                	sub    %ebx,%edx
-80106bf0:	e8 ab fb ff ff       	call   801067a0 <walkpgdir>
-80106bf5:	85 c0                	test   %eax,%eax
-80106bf7:	74 51                	je     80106c4a <loaduvm+0xaa>
+80106e66:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80106e69:	8b 45 08             	mov    0x8(%ebp),%eax
+80106e6c:	31 c9                	xor    %ecx,%ecx
+80106e6e:	29 da                	sub    %ebx,%edx
+80106e70:	e8 ab fb ff ff       	call   80106a20 <walkpgdir>
+80106e75:	85 c0                	test   %eax,%eax
+80106e77:	74 51                	je     80106eca <loaduvm+0xaa>
     pa = PTE_ADDR(*pte);
-80106bf9:	8b 00                	mov    (%eax),%eax
+80106e79:	8b 00                	mov    (%eax),%eax
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106bfb:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+80106e7b:	8b 4d e0             	mov    -0x20(%ebp),%ecx
     if(sz - i < PGSIZE)
-80106bfe:	bf 00 10 00 00       	mov    $0x1000,%edi
+80106e7e:	bf 00 10 00 00       	mov    $0x1000,%edi
     pa = PTE_ADDR(*pte);
-80106c03:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106e83:	25 00 f0 ff ff       	and    $0xfffff000,%eax
     if(sz - i < PGSIZE)
-80106c08:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
-80106c0e:	0f 46 fb             	cmovbe %ebx,%edi
+80106e88:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
+80106e8e:	0f 46 fb             	cmovbe %ebx,%edi
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106c11:	29 d9                	sub    %ebx,%ecx
-80106c13:	05 00 00 00 80       	add    $0x80000000,%eax
-80106c18:	57                   	push   %edi
-80106c19:	51                   	push   %ecx
-80106c1a:	50                   	push   %eax
-80106c1b:	ff 75 10             	pushl  0x10(%ebp)
-80106c1e:	e8 3d ae ff ff       	call   80101a60 <readi>
-80106c23:	83 c4 10             	add    $0x10,%esp
-80106c26:	39 f8                	cmp    %edi,%eax
-80106c28:	74 ae                	je     80106bd8 <loaduvm+0x38>
+80106e91:	29 d9                	sub    %ebx,%ecx
+80106e93:	05 00 00 00 80       	add    $0x80000000,%eax
+80106e98:	57                   	push   %edi
+80106e99:	51                   	push   %ecx
+80106e9a:	50                   	push   %eax
+80106e9b:	ff 75 10             	pushl  0x10(%ebp)
+80106e9e:	e8 bd ab ff ff       	call   80101a60 <readi>
+80106ea3:	83 c4 10             	add    $0x10,%esp
+80106ea6:	39 f8                	cmp    %edi,%eax
+80106ea8:	74 ae                	je     80106e58 <loaduvm+0x38>
 }
-80106c2a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106eaa:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-80106c2d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106ead:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80106c32:	5b                   	pop    %ebx
-80106c33:	5e                   	pop    %esi
-80106c34:	5f                   	pop    %edi
-80106c35:	5d                   	pop    %ebp
-80106c36:	c3                   	ret    
-80106c37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106c3e:	66 90                	xchg   %ax,%ax
-80106c40:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106eb2:	5b                   	pop    %ebx
+80106eb3:	5e                   	pop    %esi
+80106eb4:	5f                   	pop    %edi
+80106eb5:	5d                   	pop    %ebp
+80106eb6:	c3                   	ret    
+80106eb7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106ebe:	66 90                	xchg   %ax,%ax
+80106ec0:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80106c43:	31 c0                	xor    %eax,%eax
+80106ec3:	31 c0                	xor    %eax,%eax
 }
-80106c45:	5b                   	pop    %ebx
-80106c46:	5e                   	pop    %esi
-80106c47:	5f                   	pop    %edi
-80106c48:	5d                   	pop    %ebp
-80106c49:	c3                   	ret    
+80106ec5:	5b                   	pop    %ebx
+80106ec6:	5e                   	pop    %esi
+80106ec7:	5f                   	pop    %edi
+80106ec8:	5d                   	pop    %ebp
+80106ec9:	c3                   	ret    
       panic("loaduvm: address should exist");
-80106c4a:	83 ec 0c             	sub    $0xc,%esp
-80106c4d:	68 e7 79 10 80       	push   $0x801079e7
-80106c52:	e8 39 97 ff ff       	call   80100390 <panic>
+80106eca:	83 ec 0c             	sub    $0xc,%esp
+80106ecd:	68 7b 7c 10 80       	push   $0x80107c7b
+80106ed2:	e8 b9 94 ff ff       	call   80100390 <panic>
     panic("loaduvm: addr must be page aligned");
-80106c57:	83 ec 0c             	sub    $0xc,%esp
-80106c5a:	68 88 7a 10 80       	push   $0x80107a88
-80106c5f:	e8 2c 97 ff ff       	call   80100390 <panic>
-80106c64:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106c6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106c6f:	90                   	nop
+80106ed7:	83 ec 0c             	sub    $0xc,%esp
+80106eda:	68 1c 7d 10 80       	push   $0x80107d1c
+80106edf:	e8 ac 94 ff ff       	call   80100390 <panic>
+80106ee4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106eeb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106eef:	90                   	nop
 
-80106c70 <allocuvm>:
+80106ef0 <allocuvm>:
 {
-80106c70:	f3 0f 1e fb          	endbr32 
-80106c74:	55                   	push   %ebp
-80106c75:	89 e5                	mov    %esp,%ebp
-80106c77:	57                   	push   %edi
-80106c78:	56                   	push   %esi
-80106c79:	53                   	push   %ebx
-80106c7a:	83 ec 1c             	sub    $0x1c,%esp
+80106ef0:	f3 0f 1e fb          	endbr32 
+80106ef4:	55                   	push   %ebp
+80106ef5:	89 e5                	mov    %esp,%ebp
+80106ef7:	57                   	push   %edi
+80106ef8:	56                   	push   %esi
+80106ef9:	53                   	push   %ebx
+80106efa:	83 ec 1c             	sub    $0x1c,%esp
   if(newsz >= KERNBASE)
-80106c7d:	8b 45 10             	mov    0x10(%ebp),%eax
+80106efd:	8b 45 10             	mov    0x10(%ebp),%eax
 {
-80106c80:	8b 7d 08             	mov    0x8(%ebp),%edi
+80106f00:	8b 7d 08             	mov    0x8(%ebp),%edi
   if(newsz >= KERNBASE)
-80106c83:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106c86:	85 c0                	test   %eax,%eax
-80106c88:	0f 88 b2 00 00 00    	js     80106d40 <allocuvm+0xd0>
+80106f03:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106f06:	85 c0                	test   %eax,%eax
+80106f08:	0f 88 b2 00 00 00    	js     80106fc0 <allocuvm+0xd0>
   if(newsz < oldsz)
-80106c8e:	3b 45 0c             	cmp    0xc(%ebp),%eax
+80106f0e:	3b 45 0c             	cmp    0xc(%ebp),%eax
     return oldsz;
-80106c91:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106f11:	8b 45 0c             	mov    0xc(%ebp),%eax
   if(newsz < oldsz)
-80106c94:	0f 82 96 00 00 00    	jb     80106d30 <allocuvm+0xc0>
+80106f14:	0f 82 96 00 00 00    	jb     80106fb0 <allocuvm+0xc0>
   a = PGROUNDUP(oldsz);
-80106c9a:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
-80106ca0:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+80106f1a:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
+80106f20:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
   for(; a < newsz; a += PGSIZE){
-80106ca6:	39 75 10             	cmp    %esi,0x10(%ebp)
-80106ca9:	77 40                	ja     80106ceb <allocuvm+0x7b>
-80106cab:	e9 83 00 00 00       	jmp    80106d33 <allocuvm+0xc3>
+80106f26:	39 75 10             	cmp    %esi,0x10(%ebp)
+80106f29:	77 40                	ja     80106f6b <allocuvm+0x7b>
+80106f2b:	e9 83 00 00 00       	jmp    80106fb3 <allocuvm+0xc3>
     memset(mem, 0, PGSIZE);
-80106cb0:	83 ec 04             	sub    $0x4,%esp
-80106cb3:	68 00 10 00 00       	push   $0x1000
-80106cb8:	6a 00                	push   $0x0
-80106cba:	50                   	push   %eax
-80106cbb:	e8 b0 d9 ff ff       	call   80104670 <memset>
+80106f30:	83 ec 04             	sub    $0x4,%esp
+80106f33:	68 00 10 00 00       	push   $0x1000
+80106f38:	6a 00                	push   $0x0
+80106f3a:	50                   	push   %eax
+80106f3b:	e8 30 d9 ff ff       	call   80104870 <memset>
     if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
-80106cc0:	58                   	pop    %eax
-80106cc1:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106cc7:	5a                   	pop    %edx
-80106cc8:	6a 06                	push   $0x6
-80106cca:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106ccf:	89 f2                	mov    %esi,%edx
-80106cd1:	50                   	push   %eax
-80106cd2:	89 f8                	mov    %edi,%eax
-80106cd4:	e8 47 fb ff ff       	call   80106820 <mappages>
-80106cd9:	83 c4 10             	add    $0x10,%esp
-80106cdc:	85 c0                	test   %eax,%eax
-80106cde:	78 78                	js     80106d58 <allocuvm+0xe8>
+80106f40:	58                   	pop    %eax
+80106f41:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106f47:	5a                   	pop    %edx
+80106f48:	6a 06                	push   $0x6
+80106f4a:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106f4f:	89 f2                	mov    %esi,%edx
+80106f51:	50                   	push   %eax
+80106f52:	89 f8                	mov    %edi,%eax
+80106f54:	e8 47 fb ff ff       	call   80106aa0 <mappages>
+80106f59:	83 c4 10             	add    $0x10,%esp
+80106f5c:	85 c0                	test   %eax,%eax
+80106f5e:	78 78                	js     80106fd8 <allocuvm+0xe8>
   for(; a < newsz; a += PGSIZE){
-80106ce0:	81 c6 00 10 00 00    	add    $0x1000,%esi
-80106ce6:	39 75 10             	cmp    %esi,0x10(%ebp)
-80106ce9:	76 48                	jbe    80106d33 <allocuvm+0xc3>
+80106f60:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80106f66:	39 75 10             	cmp    %esi,0x10(%ebp)
+80106f69:	76 48                	jbe    80106fb3 <allocuvm+0xc3>
     mem = kalloc();
-80106ceb:	e8 40 b9 ff ff       	call   80102630 <kalloc>
-80106cf0:	89 c3                	mov    %eax,%ebx
+80106f6b:	e8 c0 b6 ff ff       	call   80102630 <kalloc>
+80106f70:	89 c3                	mov    %eax,%ebx
     if(mem == 0){
-80106cf2:	85 c0                	test   %eax,%eax
-80106cf4:	75 ba                	jne    80106cb0 <allocuvm+0x40>
+80106f72:	85 c0                	test   %eax,%eax
+80106f74:	75 ba                	jne    80106f30 <allocuvm+0x40>
       cprintf("allocuvm out of memory\n");
-80106cf6:	83 ec 0c             	sub    $0xc,%esp
-80106cf9:	68 05 7a 10 80       	push   $0x80107a05
-80106cfe:	e8 ad 99 ff ff       	call   801006b0 <cprintf>
+80106f76:	83 ec 0c             	sub    $0xc,%esp
+80106f79:	68 99 7c 10 80       	push   $0x80107c99
+80106f7e:	e8 2d 97 ff ff       	call   801006b0 <cprintf>
   if(newsz >= oldsz)
-80106d03:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106d06:	83 c4 10             	add    $0x10,%esp
-80106d09:	39 45 10             	cmp    %eax,0x10(%ebp)
-80106d0c:	74 32                	je     80106d40 <allocuvm+0xd0>
-80106d0e:	8b 55 10             	mov    0x10(%ebp),%edx
-80106d11:	89 c1                	mov    %eax,%ecx
-80106d13:	89 f8                	mov    %edi,%eax
-80106d15:	e8 96 fb ff ff       	call   801068b0 <deallocuvm.part.0>
+80106f83:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106f86:	83 c4 10             	add    $0x10,%esp
+80106f89:	39 45 10             	cmp    %eax,0x10(%ebp)
+80106f8c:	74 32                	je     80106fc0 <allocuvm+0xd0>
+80106f8e:	8b 55 10             	mov    0x10(%ebp),%edx
+80106f91:	89 c1                	mov    %eax,%ecx
+80106f93:	89 f8                	mov    %edi,%eax
+80106f95:	e8 96 fb ff ff       	call   80106b30 <deallocuvm.part.0>
       return 0;
-80106d1a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80106f9a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 }
-80106d21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d24:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d27:	5b                   	pop    %ebx
-80106d28:	5e                   	pop    %esi
-80106d29:	5f                   	pop    %edi
-80106d2a:	5d                   	pop    %ebp
-80106d2b:	c3                   	ret    
-80106d2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106fa1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106fa4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106fa7:	5b                   	pop    %ebx
+80106fa8:	5e                   	pop    %esi
+80106fa9:	5f                   	pop    %edi
+80106faa:	5d                   	pop    %ebp
+80106fab:	c3                   	ret    
+80106fac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return oldsz;
-80106d30:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106fb0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 }
-80106d33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d36:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d39:	5b                   	pop    %ebx
-80106d3a:	5e                   	pop    %esi
-80106d3b:	5f                   	pop    %edi
-80106d3c:	5d                   	pop    %ebp
-80106d3d:	c3                   	ret    
-80106d3e:	66 90                	xchg   %ax,%ax
+80106fb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106fb6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106fb9:	5b                   	pop    %ebx
+80106fba:	5e                   	pop    %esi
+80106fbb:	5f                   	pop    %edi
+80106fbc:	5d                   	pop    %ebp
+80106fbd:	c3                   	ret    
+80106fbe:	66 90                	xchg   %ax,%ax
     return 0;
-80106d40:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80106fc0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 }
-80106d47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d4a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d4d:	5b                   	pop    %ebx
-80106d4e:	5e                   	pop    %esi
-80106d4f:	5f                   	pop    %edi
-80106d50:	5d                   	pop    %ebp
-80106d51:	c3                   	ret    
-80106d52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106fc7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106fca:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106fcd:	5b                   	pop    %ebx
+80106fce:	5e                   	pop    %esi
+80106fcf:	5f                   	pop    %edi
+80106fd0:	5d                   	pop    %ebp
+80106fd1:	c3                   	ret    
+80106fd2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       cprintf("allocuvm out of memory (2)\n");
-80106d58:	83 ec 0c             	sub    $0xc,%esp
-80106d5b:	68 1d 7a 10 80       	push   $0x80107a1d
-80106d60:	e8 4b 99 ff ff       	call   801006b0 <cprintf>
+80106fd8:	83 ec 0c             	sub    $0xc,%esp
+80106fdb:	68 b1 7c 10 80       	push   $0x80107cb1
+80106fe0:	e8 cb 96 ff ff       	call   801006b0 <cprintf>
   if(newsz >= oldsz)
-80106d65:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106d68:	83 c4 10             	add    $0x10,%esp
-80106d6b:	39 45 10             	cmp    %eax,0x10(%ebp)
-80106d6e:	74 0c                	je     80106d7c <allocuvm+0x10c>
-80106d70:	8b 55 10             	mov    0x10(%ebp),%edx
-80106d73:	89 c1                	mov    %eax,%ecx
-80106d75:	89 f8                	mov    %edi,%eax
-80106d77:	e8 34 fb ff ff       	call   801068b0 <deallocuvm.part.0>
+80106fe5:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106fe8:	83 c4 10             	add    $0x10,%esp
+80106feb:	39 45 10             	cmp    %eax,0x10(%ebp)
+80106fee:	74 0c                	je     80106ffc <allocuvm+0x10c>
+80106ff0:	8b 55 10             	mov    0x10(%ebp),%edx
+80106ff3:	89 c1                	mov    %eax,%ecx
+80106ff5:	89 f8                	mov    %edi,%eax
+80106ff7:	e8 34 fb ff ff       	call   80106b30 <deallocuvm.part.0>
       kfree(mem);
-80106d7c:	83 ec 0c             	sub    $0xc,%esp
-80106d7f:	53                   	push   %ebx
-80106d80:	e8 eb b6 ff ff       	call   80102470 <kfree>
+80106ffc:	83 ec 0c             	sub    $0xc,%esp
+80106fff:	53                   	push   %ebx
+80107000:	e8 6b b4 ff ff       	call   80102470 <kfree>
       return 0;
-80106d85:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-80106d8c:	83 c4 10             	add    $0x10,%esp
+80107005:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+8010700c:	83 c4 10             	add    $0x10,%esp
 }
-80106d8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d92:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d95:	5b                   	pop    %ebx
-80106d96:	5e                   	pop    %esi
-80106d97:	5f                   	pop    %edi
-80106d98:	5d                   	pop    %ebp
-80106d99:	c3                   	ret    
-80106d9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80106da0 <deallocuvm>:
-{
-80106da0:	f3 0f 1e fb          	endbr32 
-80106da4:	55                   	push   %ebp
-80106da5:	89 e5                	mov    %esp,%ebp
-80106da7:	8b 55 0c             	mov    0xc(%ebp),%edx
-80106daa:	8b 4d 10             	mov    0x10(%ebp),%ecx
-80106dad:	8b 45 08             	mov    0x8(%ebp),%eax
+8010700f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80107012:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107015:	5b                   	pop    %ebx
+80107016:	5e                   	pop    %esi
+80107017:	5f                   	pop    %edi
+80107018:	5d                   	pop    %ebp
+80107019:	c3                   	ret    
+8010701a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80107020 <deallocuvm>:
+{
+80107020:	f3 0f 1e fb          	endbr32 
+80107024:	55                   	push   %ebp
+80107025:	89 e5                	mov    %esp,%ebp
+80107027:	8b 55 0c             	mov    0xc(%ebp),%edx
+8010702a:	8b 4d 10             	mov    0x10(%ebp),%ecx
+8010702d:	8b 45 08             	mov    0x8(%ebp),%eax
   if(newsz >= oldsz)
-80106db0:	39 d1                	cmp    %edx,%ecx
-80106db2:	73 0c                	jae    80106dc0 <deallocuvm+0x20>
+80107030:	39 d1                	cmp    %edx,%ecx
+80107032:	73 0c                	jae    80107040 <deallocuvm+0x20>
 }
-80106db4:	5d                   	pop    %ebp
-80106db5:	e9 f6 fa ff ff       	jmp    801068b0 <deallocuvm.part.0>
-80106dba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80106dc0:	89 d0                	mov    %edx,%eax
-80106dc2:	5d                   	pop    %ebp
-80106dc3:	c3                   	ret    
-80106dc4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106dcb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106dcf:	90                   	nop
+80107034:	5d                   	pop    %ebp
+80107035:	e9 f6 fa ff ff       	jmp    80106b30 <deallocuvm.part.0>
+8010703a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80107040:	89 d0                	mov    %edx,%eax
+80107042:	5d                   	pop    %ebp
+80107043:	c3                   	ret    
+80107044:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010704b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010704f:	90                   	nop
 
-80106dd0 <freevm>:
+80107050 <freevm>:
 
 // Free a page table and all the physical memory pages
 // in the user part.
 void
 freevm(pde_t *pgdir)
 {
-80106dd0:	f3 0f 1e fb          	endbr32 
-80106dd4:	55                   	push   %ebp
-80106dd5:	89 e5                	mov    %esp,%ebp
-80106dd7:	57                   	push   %edi
-80106dd8:	56                   	push   %esi
-80106dd9:	53                   	push   %ebx
-80106dda:	83 ec 0c             	sub    $0xc,%esp
-80106ddd:	8b 75 08             	mov    0x8(%ebp),%esi
+80107050:	f3 0f 1e fb          	endbr32 
+80107054:	55                   	push   %ebp
+80107055:	89 e5                	mov    %esp,%ebp
+80107057:	57                   	push   %edi
+80107058:	56                   	push   %esi
+80107059:	53                   	push   %ebx
+8010705a:	83 ec 0c             	sub    $0xc,%esp
+8010705d:	8b 75 08             	mov    0x8(%ebp),%esi
   uint i;
 
   if(pgdir == 0)
-80106de0:	85 f6                	test   %esi,%esi
-80106de2:	74 55                	je     80106e39 <freevm+0x69>
+80107060:	85 f6                	test   %esi,%esi
+80107062:	74 55                	je     801070b9 <freevm+0x69>
   if(newsz >= oldsz)
-80106de4:	31 c9                	xor    %ecx,%ecx
-80106de6:	ba 00 00 00 80       	mov    $0x80000000,%edx
-80106deb:	89 f0                	mov    %esi,%eax
-80106ded:	89 f3                	mov    %esi,%ebx
-80106def:	e8 bc fa ff ff       	call   801068b0 <deallocuvm.part.0>
+80107064:	31 c9                	xor    %ecx,%ecx
+80107066:	ba 00 00 00 80       	mov    $0x80000000,%edx
+8010706b:	89 f0                	mov    %esi,%eax
+8010706d:	89 f3                	mov    %esi,%ebx
+8010706f:	e8 bc fa ff ff       	call   80106b30 <deallocuvm.part.0>
     panic("freevm: no pgdir");
   deallocuvm(pgdir, KERNBASE, 0);
   for(i = 0; i < NPDENTRIES; i++){
-80106df4:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
-80106dfa:	eb 0b                	jmp    80106e07 <freevm+0x37>
-80106dfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106e00:	83 c3 04             	add    $0x4,%ebx
-80106e03:	39 df                	cmp    %ebx,%edi
-80106e05:	74 23                	je     80106e2a <freevm+0x5a>
+80107074:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
+8010707a:	eb 0b                	jmp    80107087 <freevm+0x37>
+8010707c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107080:	83 c3 04             	add    $0x4,%ebx
+80107083:	39 df                	cmp    %ebx,%edi
+80107085:	74 23                	je     801070aa <freevm+0x5a>
     if(pgdir[i] & PTE_P){
-80106e07:	8b 03                	mov    (%ebx),%eax
-80106e09:	a8 01                	test   $0x1,%al
-80106e0b:	74 f3                	je     80106e00 <freevm+0x30>
+80107087:	8b 03                	mov    (%ebx),%eax
+80107089:	a8 01                	test   $0x1,%al
+8010708b:	74 f3                	je     80107080 <freevm+0x30>
       char * v = P2V(PTE_ADDR(pgdir[i]));
-80106e0d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+8010708d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
       kfree(v);
-80106e12:	83 ec 0c             	sub    $0xc,%esp
-80106e15:	83 c3 04             	add    $0x4,%ebx
+80107092:	83 ec 0c             	sub    $0xc,%esp
+80107095:	83 c3 04             	add    $0x4,%ebx
       char * v = P2V(PTE_ADDR(pgdir[i]));
-80106e18:	05 00 00 00 80       	add    $0x80000000,%eax
+80107098:	05 00 00 00 80       	add    $0x80000000,%eax
       kfree(v);
-80106e1d:	50                   	push   %eax
-80106e1e:	e8 4d b6 ff ff       	call   80102470 <kfree>
-80106e23:	83 c4 10             	add    $0x10,%esp
+8010709d:	50                   	push   %eax
+8010709e:	e8 cd b3 ff ff       	call   80102470 <kfree>
+801070a3:	83 c4 10             	add    $0x10,%esp
   for(i = 0; i < NPDENTRIES; i++){
-80106e26:	39 df                	cmp    %ebx,%edi
-80106e28:	75 dd                	jne    80106e07 <freevm+0x37>
+801070a6:	39 df                	cmp    %ebx,%edi
+801070a8:	75 dd                	jne    80107087 <freevm+0x37>
     }
   }
   kfree((char*)pgdir);
-80106e2a:	89 75 08             	mov    %esi,0x8(%ebp)
+801070aa:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-80106e2d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106e30:	5b                   	pop    %ebx
-80106e31:	5e                   	pop    %esi
-80106e32:	5f                   	pop    %edi
-80106e33:	5d                   	pop    %ebp
+801070ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801070b0:	5b                   	pop    %ebx
+801070b1:	5e                   	pop    %esi
+801070b2:	5f                   	pop    %edi
+801070b3:	5d                   	pop    %ebp
   kfree((char*)pgdir);
-80106e34:	e9 37 b6 ff ff       	jmp    80102470 <kfree>
+801070b4:	e9 b7 b3 ff ff       	jmp    80102470 <kfree>
     panic("freevm: no pgdir");
-80106e39:	83 ec 0c             	sub    $0xc,%esp
-80106e3c:	68 39 7a 10 80       	push   $0x80107a39
-80106e41:	e8 4a 95 ff ff       	call   80100390 <panic>
-80106e46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106e4d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80106e50 <setupkvm>:
-{
-80106e50:	f3 0f 1e fb          	endbr32 
-80106e54:	55                   	push   %ebp
-80106e55:	89 e5                	mov    %esp,%ebp
-80106e57:	56                   	push   %esi
-80106e58:	53                   	push   %ebx
+801070b9:	83 ec 0c             	sub    $0xc,%esp
+801070bc:	68 cd 7c 10 80       	push   $0x80107ccd
+801070c1:	e8 ca 92 ff ff       	call   80100390 <panic>
+801070c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801070cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801070d0 <setupkvm>:
+{
+801070d0:	f3 0f 1e fb          	endbr32 
+801070d4:	55                   	push   %ebp
+801070d5:	89 e5                	mov    %esp,%ebp
+801070d7:	56                   	push   %esi
+801070d8:	53                   	push   %ebx
   if((pgdir = (pde_t*)kalloc()) == 0)
-80106e59:	e8 d2 b7 ff ff       	call   80102630 <kalloc>
-80106e5e:	89 c6                	mov    %eax,%esi
-80106e60:	85 c0                	test   %eax,%eax
-80106e62:	74 42                	je     80106ea6 <setupkvm+0x56>
+801070d9:	e8 52 b5 ff ff       	call   80102630 <kalloc>
+801070de:	89 c6                	mov    %eax,%esi
+801070e0:	85 c0                	test   %eax,%eax
+801070e2:	74 42                	je     80107126 <setupkvm+0x56>
   memset(pgdir, 0, PGSIZE);
-80106e64:	83 ec 04             	sub    $0x4,%esp
+801070e4:	83 ec 04             	sub    $0x4,%esp
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80106e67:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
+801070e7:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
   memset(pgdir, 0, PGSIZE);
-80106e6c:	68 00 10 00 00       	push   $0x1000
-80106e71:	6a 00                	push   $0x0
-80106e73:	50                   	push   %eax
-80106e74:	e8 f7 d7 ff ff       	call   80104670 <memset>
-80106e79:	83 c4 10             	add    $0x10,%esp
+801070ec:	68 00 10 00 00       	push   $0x1000
+801070f1:	6a 00                	push   $0x0
+801070f3:	50                   	push   %eax
+801070f4:	e8 77 d7 ff ff       	call   80104870 <memset>
+801070f9:	83 c4 10             	add    $0x10,%esp
                 (uint)k->phys_start, k->perm) < 0) {
-80106e7c:	8b 43 04             	mov    0x4(%ebx),%eax
+801070fc:	8b 43 04             	mov    0x4(%ebx),%eax
     if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
-80106e7f:	83 ec 08             	sub    $0x8,%esp
-80106e82:	8b 4b 08             	mov    0x8(%ebx),%ecx
-80106e85:	ff 73 0c             	pushl  0xc(%ebx)
-80106e88:	8b 13                	mov    (%ebx),%edx
-80106e8a:	50                   	push   %eax
-80106e8b:	29 c1                	sub    %eax,%ecx
-80106e8d:	89 f0                	mov    %esi,%eax
-80106e8f:	e8 8c f9 ff ff       	call   80106820 <mappages>
-80106e94:	83 c4 10             	add    $0x10,%esp
-80106e97:	85 c0                	test   %eax,%eax
-80106e99:	78 15                	js     80106eb0 <setupkvm+0x60>
+801070ff:	83 ec 08             	sub    $0x8,%esp
+80107102:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80107105:	ff 73 0c             	pushl  0xc(%ebx)
+80107108:	8b 13                	mov    (%ebx),%edx
+8010710a:	50                   	push   %eax
+8010710b:	29 c1                	sub    %eax,%ecx
+8010710d:	89 f0                	mov    %esi,%eax
+8010710f:	e8 8c f9 ff ff       	call   80106aa0 <mappages>
+80107114:	83 c4 10             	add    $0x10,%esp
+80107117:	85 c0                	test   %eax,%eax
+80107119:	78 15                	js     80107130 <setupkvm+0x60>
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80106e9b:	83 c3 10             	add    $0x10,%ebx
-80106e9e:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
-80106ea4:	75 d6                	jne    80106e7c <setupkvm+0x2c>
-}
-80106ea6:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80106ea9:	89 f0                	mov    %esi,%eax
-80106eab:	5b                   	pop    %ebx
-80106eac:	5e                   	pop    %esi
-80106ead:	5d                   	pop    %ebp
-80106eae:	c3                   	ret    
-80106eaf:	90                   	nop
+8010711b:	83 c3 10             	add    $0x10,%ebx
+8010711e:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
+80107124:	75 d6                	jne    801070fc <setupkvm+0x2c>
+}
+80107126:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107129:	89 f0                	mov    %esi,%eax
+8010712b:	5b                   	pop    %ebx
+8010712c:	5e                   	pop    %esi
+8010712d:	5d                   	pop    %ebp
+8010712e:	c3                   	ret    
+8010712f:	90                   	nop
       freevm(pgdir);
-80106eb0:	83 ec 0c             	sub    $0xc,%esp
-80106eb3:	56                   	push   %esi
+80107130:	83 ec 0c             	sub    $0xc,%esp
+80107133:	56                   	push   %esi
       return 0;
-80106eb4:	31 f6                	xor    %esi,%esi
+80107134:	31 f6                	xor    %esi,%esi
       freevm(pgdir);
-80106eb6:	e8 15 ff ff ff       	call   80106dd0 <freevm>
+80107136:	e8 15 ff ff ff       	call   80107050 <freevm>
       return 0;
-80106ebb:	83 c4 10             	add    $0x10,%esp
+8010713b:	83 c4 10             	add    $0x10,%esp
 }
-80106ebe:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80106ec1:	89 f0                	mov    %esi,%eax
-80106ec3:	5b                   	pop    %ebx
-80106ec4:	5e                   	pop    %esi
-80106ec5:	5d                   	pop    %ebp
-80106ec6:	c3                   	ret    
-80106ec7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106ece:	66 90                	xchg   %ax,%ax
-
-80106ed0 <kvmalloc>:
-{
-80106ed0:	f3 0f 1e fb          	endbr32 
-80106ed4:	55                   	push   %ebp
-80106ed5:	89 e5                	mov    %esp,%ebp
-80106ed7:	83 ec 08             	sub    $0x8,%esp
+8010713e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107141:	89 f0                	mov    %esi,%eax
+80107143:	5b                   	pop    %ebx
+80107144:	5e                   	pop    %esi
+80107145:	5d                   	pop    %ebp
+80107146:	c3                   	ret    
+80107147:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010714e:	66 90                	xchg   %ax,%ax
+
+80107150 <kvmalloc>:
+{
+80107150:	f3 0f 1e fb          	endbr32 
+80107154:	55                   	push   %ebp
+80107155:	89 e5                	mov    %esp,%ebp
+80107157:	83 ec 08             	sub    $0x8,%esp
   kpgdir = setupkvm();
-80106eda:	e8 71 ff ff ff       	call   80106e50 <setupkvm>
-80106edf:	a3 a4 54 11 80       	mov    %eax,0x801154a4
+8010715a:	e8 71 ff ff ff       	call   801070d0 <setupkvm>
+8010715f:	a3 a4 56 11 80       	mov    %eax,0x801156a4
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-80106ee4:	05 00 00 00 80       	add    $0x80000000,%eax
-80106ee9:	0f 22 d8             	mov    %eax,%cr3
+80107164:	05 00 00 00 80       	add    $0x80000000,%eax
+80107169:	0f 22 d8             	mov    %eax,%cr3
 }
-80106eec:	c9                   	leave  
-80106eed:	c3                   	ret    
-80106eee:	66 90                	xchg   %ax,%ax
+8010716c:	c9                   	leave  
+8010716d:	c3                   	ret    
+8010716e:	66 90                	xchg   %ax,%ax
 
-80106ef0 <clearpteu>:
+80107170 <clearpteu>:
 
 // Clear PTE_U on a page. Used to create an inaccessible
 // page beneath the user stack.
 void
 clearpteu(pde_t *pgdir, char *uva)
 {
-80106ef0:	f3 0f 1e fb          	endbr32 
-80106ef4:	55                   	push   %ebp
+80107170:	f3 0f 1e fb          	endbr32 
+80107174:	55                   	push   %ebp
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
-80106ef5:	31 c9                	xor    %ecx,%ecx
+80107175:	31 c9                	xor    %ecx,%ecx
 {
-80106ef7:	89 e5                	mov    %esp,%ebp
-80106ef9:	83 ec 08             	sub    $0x8,%esp
+80107177:	89 e5                	mov    %esp,%ebp
+80107179:	83 ec 08             	sub    $0x8,%esp
   pte = walkpgdir(pgdir, uva, 0);
-80106efc:	8b 55 0c             	mov    0xc(%ebp),%edx
-80106eff:	8b 45 08             	mov    0x8(%ebp),%eax
-80106f02:	e8 99 f8 ff ff       	call   801067a0 <walkpgdir>
+8010717c:	8b 55 0c             	mov    0xc(%ebp),%edx
+8010717f:	8b 45 08             	mov    0x8(%ebp),%eax
+80107182:	e8 99 f8 ff ff       	call   80106a20 <walkpgdir>
   if(pte == 0)
-80106f07:	85 c0                	test   %eax,%eax
-80106f09:	74 05                	je     80106f10 <clearpteu+0x20>
+80107187:	85 c0                	test   %eax,%eax
+80107189:	74 05                	je     80107190 <clearpteu+0x20>
     panic("clearpteu");
   *pte &= ~PTE_U;
-80106f0b:	83 20 fb             	andl   $0xfffffffb,(%eax)
+8010718b:	83 20 fb             	andl   $0xfffffffb,(%eax)
 }
-80106f0e:	c9                   	leave  
-80106f0f:	c3                   	ret    
+8010718e:	c9                   	leave  
+8010718f:	c3                   	ret    
     panic("clearpteu");
-80106f10:	83 ec 0c             	sub    $0xc,%esp
-80106f13:	68 4a 7a 10 80       	push   $0x80107a4a
-80106f18:	e8 73 94 ff ff       	call   80100390 <panic>
-80106f1d:	8d 76 00             	lea    0x0(%esi),%esi
+80107190:	83 ec 0c             	sub    $0xc,%esp
+80107193:	68 de 7c 10 80       	push   $0x80107cde
+80107198:	e8 f3 91 ff ff       	call   80100390 <panic>
+8010719d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80106f20 <copyuvm>:
+801071a0 <copyuvm>:
 
 // Given a parent process's page table, create a copy
 // of it for a child.
 pde_t*
 copyuvm(pde_t *pgdir, uint sz)
 {
-80106f20:	f3 0f 1e fb          	endbr32 
-80106f24:	55                   	push   %ebp
-80106f25:	89 e5                	mov    %esp,%ebp
-80106f27:	57                   	push   %edi
-80106f28:	56                   	push   %esi
-80106f29:	53                   	push   %ebx
-80106f2a:	83 ec 1c             	sub    $0x1c,%esp
+801071a0:	f3 0f 1e fb          	endbr32 
+801071a4:	55                   	push   %ebp
+801071a5:	89 e5                	mov    %esp,%ebp
+801071a7:	57                   	push   %edi
+801071a8:	56                   	push   %esi
+801071a9:	53                   	push   %ebx
+801071aa:	83 ec 1c             	sub    $0x1c,%esp
   pde_t *d;
   pte_t *pte;
   uint pa, i, flags;
   char *mem;
 
   if((d = setupkvm()) == 0)
-80106f2d:	e8 1e ff ff ff       	call   80106e50 <setupkvm>
-80106f32:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80106f35:	85 c0                	test   %eax,%eax
-80106f37:	0f 84 9b 00 00 00    	je     80106fd8 <copyuvm+0xb8>
+801071ad:	e8 1e ff ff ff       	call   801070d0 <setupkvm>
+801071b2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801071b5:	85 c0                	test   %eax,%eax
+801071b7:	0f 84 9b 00 00 00    	je     80107258 <copyuvm+0xb8>
     return 0;
   for(i = 0; i < sz; i += PGSIZE){
-80106f3d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80106f40:	85 c9                	test   %ecx,%ecx
-80106f42:	0f 84 90 00 00 00    	je     80106fd8 <copyuvm+0xb8>
-80106f48:	31 f6                	xor    %esi,%esi
-80106f4a:	eb 46                	jmp    80106f92 <copyuvm+0x72>
-80106f4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801071bd:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+801071c0:	85 c9                	test   %ecx,%ecx
+801071c2:	0f 84 90 00 00 00    	je     80107258 <copyuvm+0xb8>
+801071c8:	31 f6                	xor    %esi,%esi
+801071ca:	eb 46                	jmp    80107212 <copyuvm+0x72>
+801071cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       panic("copyuvm: page not present");
     pa = PTE_ADDR(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
       goto bad;
     memmove(mem, (char*)P2V(pa), PGSIZE);
-80106f50:	83 ec 04             	sub    $0x4,%esp
-80106f53:	81 c7 00 00 00 80    	add    $0x80000000,%edi
-80106f59:	68 00 10 00 00       	push   $0x1000
-80106f5e:	57                   	push   %edi
-80106f5f:	50                   	push   %eax
-80106f60:	e8 ab d7 ff ff       	call   80104710 <memmove>
+801071d0:	83 ec 04             	sub    $0x4,%esp
+801071d3:	81 c7 00 00 00 80    	add    $0x80000000,%edi
+801071d9:	68 00 10 00 00       	push   $0x1000
+801071de:	57                   	push   %edi
+801071df:	50                   	push   %eax
+801071e0:	e8 2b d7 ff ff       	call   80104910 <memmove>
     if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
-80106f65:	58                   	pop    %eax
-80106f66:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106f6c:	5a                   	pop    %edx
-80106f6d:	ff 75 e4             	pushl  -0x1c(%ebp)
-80106f70:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106f75:	89 f2                	mov    %esi,%edx
-80106f77:	50                   	push   %eax
-80106f78:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106f7b:	e8 a0 f8 ff ff       	call   80106820 <mappages>
-80106f80:	83 c4 10             	add    $0x10,%esp
-80106f83:	85 c0                	test   %eax,%eax
-80106f85:	78 61                	js     80106fe8 <copyuvm+0xc8>
+801071e5:	58                   	pop    %eax
+801071e6:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+801071ec:	5a                   	pop    %edx
+801071ed:	ff 75 e4             	pushl  -0x1c(%ebp)
+801071f0:	b9 00 10 00 00       	mov    $0x1000,%ecx
+801071f5:	89 f2                	mov    %esi,%edx
+801071f7:	50                   	push   %eax
+801071f8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801071fb:	e8 a0 f8 ff ff       	call   80106aa0 <mappages>
+80107200:	83 c4 10             	add    $0x10,%esp
+80107203:	85 c0                	test   %eax,%eax
+80107205:	78 61                	js     80107268 <copyuvm+0xc8>
   for(i = 0; i < sz; i += PGSIZE){
-80106f87:	81 c6 00 10 00 00    	add    $0x1000,%esi
-80106f8d:	39 75 0c             	cmp    %esi,0xc(%ebp)
-80106f90:	76 46                	jbe    80106fd8 <copyuvm+0xb8>
+80107207:	81 c6 00 10 00 00    	add    $0x1000,%esi
+8010720d:	39 75 0c             	cmp    %esi,0xc(%ebp)
+80107210:	76 46                	jbe    80107258 <copyuvm+0xb8>
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-80106f92:	8b 45 08             	mov    0x8(%ebp),%eax
-80106f95:	31 c9                	xor    %ecx,%ecx
-80106f97:	89 f2                	mov    %esi,%edx
-80106f99:	e8 02 f8 ff ff       	call   801067a0 <walkpgdir>
-80106f9e:	85 c0                	test   %eax,%eax
-80106fa0:	74 61                	je     80107003 <copyuvm+0xe3>
+80107212:	8b 45 08             	mov    0x8(%ebp),%eax
+80107215:	31 c9                	xor    %ecx,%ecx
+80107217:	89 f2                	mov    %esi,%edx
+80107219:	e8 02 f8 ff ff       	call   80106a20 <walkpgdir>
+8010721e:	85 c0                	test   %eax,%eax
+80107220:	74 61                	je     80107283 <copyuvm+0xe3>
     if(!(*pte & PTE_P))
-80106fa2:	8b 00                	mov    (%eax),%eax
-80106fa4:	a8 01                	test   $0x1,%al
-80106fa6:	74 4e                	je     80106ff6 <copyuvm+0xd6>
+80107222:	8b 00                	mov    (%eax),%eax
+80107224:	a8 01                	test   $0x1,%al
+80107226:	74 4e                	je     80107276 <copyuvm+0xd6>
     pa = PTE_ADDR(*pte);
-80106fa8:	89 c7                	mov    %eax,%edi
+80107228:	89 c7                	mov    %eax,%edi
     flags = PTE_FLAGS(*pte);
-80106faa:	25 ff 0f 00 00       	and    $0xfff,%eax
-80106faf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010722a:	25 ff 0f 00 00       	and    $0xfff,%eax
+8010722f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     pa = PTE_ADDR(*pte);
-80106fb2:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+80107232:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
     if((mem = kalloc()) == 0)
-80106fb8:	e8 73 b6 ff ff       	call   80102630 <kalloc>
-80106fbd:	89 c3                	mov    %eax,%ebx
-80106fbf:	85 c0                	test   %eax,%eax
-80106fc1:	75 8d                	jne    80106f50 <copyuvm+0x30>
+80107238:	e8 f3 b3 ff ff       	call   80102630 <kalloc>
+8010723d:	89 c3                	mov    %eax,%ebx
+8010723f:	85 c0                	test   %eax,%eax
+80107241:	75 8d                	jne    801071d0 <copyuvm+0x30>
     }
   }
   return d;
 
 bad:
   freevm(d);
-80106fc3:	83 ec 0c             	sub    $0xc,%esp
-80106fc6:	ff 75 e0             	pushl  -0x20(%ebp)
-80106fc9:	e8 02 fe ff ff       	call   80106dd0 <freevm>
+80107243:	83 ec 0c             	sub    $0xc,%esp
+80107246:	ff 75 e0             	pushl  -0x20(%ebp)
+80107249:	e8 02 fe ff ff       	call   80107050 <freevm>
   return 0;
-80106fce:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
-80106fd5:	83 c4 10             	add    $0x10,%esp
+8010724e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+80107255:	83 c4 10             	add    $0x10,%esp
 }
-80106fd8:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106fdb:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106fde:	5b                   	pop    %ebx
-80106fdf:	5e                   	pop    %esi
-80106fe0:	5f                   	pop    %edi
-80106fe1:	5d                   	pop    %ebp
-80106fe2:	c3                   	ret    
-80106fe3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106fe7:	90                   	nop
+80107258:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010725b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010725e:	5b                   	pop    %ebx
+8010725f:	5e                   	pop    %esi
+80107260:	5f                   	pop    %edi
+80107261:	5d                   	pop    %ebp
+80107262:	c3                   	ret    
+80107263:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107267:	90                   	nop
       kfree(mem);
-80106fe8:	83 ec 0c             	sub    $0xc,%esp
-80106feb:	53                   	push   %ebx
-80106fec:	e8 7f b4 ff ff       	call   80102470 <kfree>
+80107268:	83 ec 0c             	sub    $0xc,%esp
+8010726b:	53                   	push   %ebx
+8010726c:	e8 ff b1 ff ff       	call   80102470 <kfree>
       goto bad;
-80106ff1:	83 c4 10             	add    $0x10,%esp
-80106ff4:	eb cd                	jmp    80106fc3 <copyuvm+0xa3>
+80107271:	83 c4 10             	add    $0x10,%esp
+80107274:	eb cd                	jmp    80107243 <copyuvm+0xa3>
       panic("copyuvm: page not present");
-80106ff6:	83 ec 0c             	sub    $0xc,%esp
-80106ff9:	68 6e 7a 10 80       	push   $0x80107a6e
-80106ffe:	e8 8d 93 ff ff       	call   80100390 <panic>
+80107276:	83 ec 0c             	sub    $0xc,%esp
+80107279:	68 02 7d 10 80       	push   $0x80107d02
+8010727e:	e8 0d 91 ff ff       	call   80100390 <panic>
       panic("copyuvm: pte should exist");
-80107003:	83 ec 0c             	sub    $0xc,%esp
-80107006:	68 54 7a 10 80       	push   $0x80107a54
-8010700b:	e8 80 93 ff ff       	call   80100390 <panic>
+80107283:	83 ec 0c             	sub    $0xc,%esp
+80107286:	68 e8 7c 10 80       	push   $0x80107ce8
+8010728b:	e8 00 91 ff ff       	call   80100390 <panic>
 
-80107010 <uva2ka>:
+80107290 <uva2ka>:
 
 //PAGEBREAK!
 // Map user virtual address to kernel address.
 char*
 uva2ka(pde_t *pgdir, char *uva)
 {
-80107010:	f3 0f 1e fb          	endbr32 
-80107014:	55                   	push   %ebp
+80107290:	f3 0f 1e fb          	endbr32 
+80107294:	55                   	push   %ebp
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
-80107015:	31 c9                	xor    %ecx,%ecx
+80107295:	31 c9                	xor    %ecx,%ecx
 {
-80107017:	89 e5                	mov    %esp,%ebp
-80107019:	83 ec 08             	sub    $0x8,%esp
+80107297:	89 e5                	mov    %esp,%ebp
+80107299:	83 ec 08             	sub    $0x8,%esp
   pte = walkpgdir(pgdir, uva, 0);
-8010701c:	8b 55 0c             	mov    0xc(%ebp),%edx
-8010701f:	8b 45 08             	mov    0x8(%ebp),%eax
-80107022:	e8 79 f7 ff ff       	call   801067a0 <walkpgdir>
+8010729c:	8b 55 0c             	mov    0xc(%ebp),%edx
+8010729f:	8b 45 08             	mov    0x8(%ebp),%eax
+801072a2:	e8 79 f7 ff ff       	call   80106a20 <walkpgdir>
   if((*pte & PTE_P) == 0)
-80107027:	8b 00                	mov    (%eax),%eax
+801072a7:	8b 00                	mov    (%eax),%eax
     return 0;
   if((*pte & PTE_U) == 0)
     return 0;
   return (char*)P2V(PTE_ADDR(*pte));
 }
-80107029:	c9                   	leave  
+801072a9:	c9                   	leave  
   if((*pte & PTE_U) == 0)
-8010702a:	89 c2                	mov    %eax,%edx
+801072aa:	89 c2                	mov    %eax,%edx
   return (char*)P2V(PTE_ADDR(*pte));
-8010702c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+801072ac:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   if((*pte & PTE_U) == 0)
-80107031:	83 e2 05             	and    $0x5,%edx
+801072b1:	83 e2 05             	and    $0x5,%edx
   return (char*)P2V(PTE_ADDR(*pte));
-80107034:	05 00 00 00 80       	add    $0x80000000,%eax
-80107039:	83 fa 05             	cmp    $0x5,%edx
-8010703c:	ba 00 00 00 00       	mov    $0x0,%edx
-80107041:	0f 45 c2             	cmovne %edx,%eax
-}
-80107044:	c3                   	ret    
-80107045:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010704c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801072b4:	05 00 00 00 80       	add    $0x80000000,%eax
+801072b9:	83 fa 05             	cmp    $0x5,%edx
+801072bc:	ba 00 00 00 00       	mov    $0x0,%edx
+801072c1:	0f 45 c2             	cmovne %edx,%eax
+}
+801072c4:	c3                   	ret    
+801072c5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801072cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80107050 <copyout>:
+801072d0 <copyout>:
 // Copy len bytes from p to user address va in page table pgdir.
 // Most useful when pgdir is not the current page table.
 // uva2ka ensures this only works for PTE_U pages.
 int
 copyout(pde_t *pgdir, uint va, void *p, uint len)
 {
-80107050:	f3 0f 1e fb          	endbr32 
-80107054:	55                   	push   %ebp
-80107055:	89 e5                	mov    %esp,%ebp
-80107057:	57                   	push   %edi
-80107058:	56                   	push   %esi
-80107059:	53                   	push   %ebx
-8010705a:	83 ec 0c             	sub    $0xc,%esp
-8010705d:	8b 75 14             	mov    0x14(%ebp),%esi
-80107060:	8b 55 0c             	mov    0xc(%ebp),%edx
+801072d0:	f3 0f 1e fb          	endbr32 
+801072d4:	55                   	push   %ebp
+801072d5:	89 e5                	mov    %esp,%ebp
+801072d7:	57                   	push   %edi
+801072d8:	56                   	push   %esi
+801072d9:	53                   	push   %ebx
+801072da:	83 ec 0c             	sub    $0xc,%esp
+801072dd:	8b 75 14             	mov    0x14(%ebp),%esi
+801072e0:	8b 55 0c             	mov    0xc(%ebp),%edx
   char *buf, *pa0;
   uint n, va0;
 
   buf = (char*)p;
   while(len > 0){
-80107063:	85 f6                	test   %esi,%esi
-80107065:	75 3c                	jne    801070a3 <copyout+0x53>
-80107067:	eb 67                	jmp    801070d0 <copyout+0x80>
-80107069:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801072e3:	85 f6                	test   %esi,%esi
+801072e5:	75 3c                	jne    80107323 <copyout+0x53>
+801072e7:	eb 67                	jmp    80107350 <copyout+0x80>
+801072e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     va0 = (uint)PGROUNDDOWN(va);
     pa0 = uva2ka(pgdir, (char*)va0);
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (va - va0);
-80107070:	8b 55 0c             	mov    0xc(%ebp),%edx
-80107073:	89 fb                	mov    %edi,%ebx
-80107075:	29 d3                	sub    %edx,%ebx
-80107077:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801072f0:	8b 55 0c             	mov    0xc(%ebp),%edx
+801072f3:	89 fb                	mov    %edi,%ebx
+801072f5:	29 d3                	sub    %edx,%ebx
+801072f7:	81 c3 00 10 00 00    	add    $0x1000,%ebx
     if(n > len)
-8010707d:	39 f3                	cmp    %esi,%ebx
-8010707f:	0f 47 de             	cmova  %esi,%ebx
+801072fd:	39 f3                	cmp    %esi,%ebx
+801072ff:	0f 47 de             	cmova  %esi,%ebx
       n = len;
     memmove(pa0 + (va - va0), buf, n);
-80107082:	29 fa                	sub    %edi,%edx
-80107084:	83 ec 04             	sub    $0x4,%esp
-80107087:	01 c2                	add    %eax,%edx
-80107089:	53                   	push   %ebx
-8010708a:	ff 75 10             	pushl  0x10(%ebp)
-8010708d:	52                   	push   %edx
-8010708e:	e8 7d d6 ff ff       	call   80104710 <memmove>
+80107302:	29 fa                	sub    %edi,%edx
+80107304:	83 ec 04             	sub    $0x4,%esp
+80107307:	01 c2                	add    %eax,%edx
+80107309:	53                   	push   %ebx
+8010730a:	ff 75 10             	pushl  0x10(%ebp)
+8010730d:	52                   	push   %edx
+8010730e:	e8 fd d5 ff ff       	call   80104910 <memmove>
     len -= n;
     buf += n;
-80107093:	01 5d 10             	add    %ebx,0x10(%ebp)
+80107313:	01 5d 10             	add    %ebx,0x10(%ebp)
     va = va0 + PGSIZE;
-80107096:	8d 97 00 10 00 00    	lea    0x1000(%edi),%edx
+80107316:	8d 97 00 10 00 00    	lea    0x1000(%edi),%edx
   while(len > 0){
-8010709c:	83 c4 10             	add    $0x10,%esp
-8010709f:	29 de                	sub    %ebx,%esi
-801070a1:	74 2d                	je     801070d0 <copyout+0x80>
+8010731c:	83 c4 10             	add    $0x10,%esp
+8010731f:	29 de                	sub    %ebx,%esi
+80107321:	74 2d                	je     80107350 <copyout+0x80>
     va0 = (uint)PGROUNDDOWN(va);
-801070a3:	89 d7                	mov    %edx,%edi
+80107323:	89 d7                	mov    %edx,%edi
     pa0 = uva2ka(pgdir, (char*)va0);
-801070a5:	83 ec 08             	sub    $0x8,%esp
+80107325:	83 ec 08             	sub    $0x8,%esp
     va0 = (uint)PGROUNDDOWN(va);
-801070a8:	89 55 0c             	mov    %edx,0xc(%ebp)
-801070ab:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+80107328:	89 55 0c             	mov    %edx,0xc(%ebp)
+8010732b:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
     pa0 = uva2ka(pgdir, (char*)va0);
-801070b1:	57                   	push   %edi
-801070b2:	ff 75 08             	pushl  0x8(%ebp)
-801070b5:	e8 56 ff ff ff       	call   80107010 <uva2ka>
+80107331:	57                   	push   %edi
+80107332:	ff 75 08             	pushl  0x8(%ebp)
+80107335:	e8 56 ff ff ff       	call   80107290 <uva2ka>
     if(pa0 == 0)
-801070ba:	83 c4 10             	add    $0x10,%esp
-801070bd:	85 c0                	test   %eax,%eax
-801070bf:	75 af                	jne    80107070 <copyout+0x20>
+8010733a:	83 c4 10             	add    $0x10,%esp
+8010733d:	85 c0                	test   %eax,%eax
+8010733f:	75 af                	jne    801072f0 <copyout+0x20>
   }
   return 0;
 }
-801070c1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107341:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-801070c4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80107344:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801070c9:	5b                   	pop    %ebx
-801070ca:	5e                   	pop    %esi
-801070cb:	5f                   	pop    %edi
-801070cc:	5d                   	pop    %ebp
-801070cd:	c3                   	ret    
-801070ce:	66 90                	xchg   %ax,%ax
-801070d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107349:	5b                   	pop    %ebx
+8010734a:	5e                   	pop    %esi
+8010734b:	5f                   	pop    %edi
+8010734c:	5d                   	pop    %ebp
+8010734d:	c3                   	ret    
+8010734e:	66 90                	xchg   %ax,%ax
+80107350:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-801070d3:	31 c0                	xor    %eax,%eax
+80107353:	31 c0                	xor    %eax,%eax
 }
-801070d5:	5b                   	pop    %ebx
-801070d6:	5e                   	pop    %esi
-801070d7:	5f                   	pop    %edi
-801070d8:	5d                   	pop    %ebp
-801070d9:	c3                   	ret    
+80107355:	5b                   	pop    %ebx
+80107356:	5e                   	pop    %esi
+80107357:	5f                   	pop    %edi
+80107358:	5d                   	pop    %ebp
+80107359:	c3                   	ret    
diff -ruN xv6-public/kernel.sym xv6-new/kernel.sym
--- xv6-public/kernel.sym	2022-10-07 22:45:12.281888101 +0530
+++ xv6-new/kernel.sym	2022-10-07 22:43:37.601886759 +0530
@@ -1,5 +1,5 @@
 80100000 .text
-801070e0 .rodata
+80107360 .rodata
 80108000 .data
 8010a520 .bss
 00000000 .debug_line
@@ -16,7 +16,7 @@
 8010a558 panicked
 80100410 consputc.part.0
 801005a0 printint
-80107150 digits.1577
+801073d0 digits.1591
 00000000 exec.c
 00000000 file.c
 00000000 fs.c
@@ -33,10 +33,10 @@
 00000000 ioapic.c
 00000000 kalloc.c
 00000000 kbd.c
-8010a5b4 shift.1418
-80107480 shiftcode
-80107380 togglecode
-80107360 charcode.1419
+8010a5b4 shift.1430
+80107700 shiftcode
+80107600 togglecode
+801075e0 charcode.1431
 80108200 normalmap
 80108100 shiftmap
 80108000 ctlmap
@@ -53,464 +53,474 @@
 00000000 pipe.c
 00000000 proc.c
 80103790 allocproc
-8010a000 first.1619
+8010a000 first.1640
 8010a5b8 initproc
-8010772c states.1645
+801079ac states.1666
 00000000 sleeplock.c
 00000000 spinlock.c
 00000000 string.c
 00000000 syscall.c
-801077a0 syscalls
+80107a20 syscalls
 00000000 sysfile.c
-80104ab0 create
-80104c50 argfd.constprop.0
+80104cb0 create
+80104e50 argfd.constprop.0
 00000000 sysproc.c
 00000000 trap.c
 00000000 uart.c
-80105ba0 uartgetc
+80105e20 uartgetc
 8010a5bc uart
-80105bd0 uartputc.part.0
+80105e50 uartputc.part.0
 00000000 vm.c
-801067a0 walkpgdir
-80106820 mappages
-801068b0 deallocuvm.part.0
+80106a20 walkpgdir
+80106aa0 mappages
+80106b30 deallocuvm.part.0
 8010a420 kmap
 80100290 consoleread
-801066f3 vector242
-8010614a vector119
+80106973 vector242
+801063ca vector119
 8010000c entry
-8010602a vector87
-80106021 vector86
-80104830 safestrcpy
-80104df0 sys_close
-8010675f vector251
-8010604e vector91
-80105e44 vector33
-80106333 vector162
-80103ed0 yield
+801062aa vector87
+801062a1 vector86
+80104a30 safestrcpy
+80104ff0 sys_close
+801069df vector251
+801062ce vector91
+801060c4 vector33
+801065b3 vector162
+80103f20 yield
 80112680 log
 80112640 kmem
-80106597 vector213
-801060e7 vector108
-80105c20 uartinit
-80105e9e vector43
+80106817 vector213
+80106367 vector108
+80105ea0 uartinit
+8010611e vector43
 801028c0 lapiceoi
-80106357 vector165
-80106447 vector185
+801065d7 vector165
+801066c7 vector185
 80102380 ioapicinit
-80106126 vector115
+801063a6 vector115
 80100ff0 fileread
-80106165 vector122
-80105740 sys_sbrk
+801063e5 vector122
+80105940 sys_sbrk
 80112760 ioapicid
-801062eb vector156
-80106717 vector245
+8010656b vector156
+80106997 vector245
 80112634 ioapic
-80106477 vector189
-80105d68 vector7
-80105f40 vector61
-80105df3 vector24
-80106102 vector111
-801064fb vector200
-80105f76 vector67
-80106213 vector138
-80105fb5 vector74
-80103cd0 sched
-80104710 memmove
-80105f1c vector57
-80104a40 syscall
-801065a3 vector214
-80106096 vector99
-80103940 cpuid
+801066f7 vector189
+80105fe8 vector7
+801061c0 vector61
+80106073 vector24
+80106382 vector111
+8010677b vector200
+801061f6 vector67
+80105a80 sys_getMaxPid
+80106493 vector138
+80106235 vector74
+80103d20 sched
+80104910 memmove
+8010619c vector57
+80104c40 syscall
+80106823 vector214
+80106316 vector99
+80103960 cpuid
 80101b60 writei
-80106237 vector141
-801056a0 sys_fork
+801064b7 vector141
+801058a0 sys_fork
 8010b5c0 bcache
-801063ab vector172
-801066e7 vector241
-80104400 getcallerpcs
-80105300 sys_mkdir
-80106777 vector253
-80105d44 vector3
-80105d3b vector2
+8010662b vector172
+80106967 vector241
+80104600 getcallerpcs
+80105500 sys_mkdir
+801069f7 vector253
+80105fc4 vector3
+80105fbb vector2
 80101c90 namecmp
-8010663f vector227
-80106573 vector210
-80104a00 argstr
-8010661b vector224
-80105e8c vector41
+801068bf vector227
+801067f3 vector210
+80104c00 argstr
+8010689b vector224
+8010610c vector41
 801006b0 cprintf
 80100e70 filedup
 80102030 namei
-80105dd8 vector21
+80106058 vector21
 80100040 binit
-801063e7 vector177
-80106141 vector118
-80105f91 vector70
-80105f88 vector69
-801066b7 vector237
-80105f5b vector64
-80105e0e vector27
-801061cb vector132
-80106453 vector186
-80104d10 sys_read
-801065c7 vector217
-801048b0 fetchint
-80106e50 setupkvm
-80104770 memcpy
-80106dd0 freevm
-80105d32 vector1
-801063f3 vector178
-80105e71 vector38
+80106667 vector177
+801063c1 vector118
+80106211 vector70
+80106208 vector69
+80106937 vector237
+801061db vector64
+8010608e vector27
+8010644b vector132
+801066d3 vector186
+80104f10 sys_read
+80106847 vector217
+80104ab0 fetchint
+801070d0 setupkvm
+80104970 memcpy
+80107050 freevm
+80105fb2 vector1
+80106673 vector178
+801060f1 vector38
 80102470 kfree
-801066c3 vector238
-801038d0 mycpu
+80106943 vector238
+801038f0 mycpu
 80101890 iput
-801061d7 vector133
-80105fac vector73
-8010625b vector144
-80106783 vector254
+80106457 vector133
+8010622c vector73
+801064db vector144
+80106a03 vector254
 80101500 readsb
 8010a004 nextpid
-801060a8 vector101
-8010657f vector211
+80106328 vector101
+801067ff vector211
 801031f0 mpinit
-801063c3 vector174
-801066ff vector243
+80106643 vector174
+8010697f vector243
 80100de0 fileinit
-801043e0 initlock
-8010619b vector128
-80107050 copyout
-80105ff4 vector81
-80103f20 sleep
+80105ad0 sys_set_burst_time
+801045e0 initlock
+8010641b vector128
+801072d0 copyout
+80106274 vector81
+80103f70 sleep
+80104460 get_burst_time
 801028e0 microdelay
-80105d96 vector13
-80105ee6 vector51
-80105dad vector16
+80106016 vector13
+80106166 vector51
+8010602d vector16
 8010ff20 input
-801066db vector240
-80105f01 vector54
-80105dc6 vector19
-80106057 vector92
-8010670b vector244
+8010695b vector240
+80106181 vector54
+80106046 vector19
+801062d7 vector92
+8010698b vector244
 80101a30 stati
-8010622b vector140
-801056e0 sys_kill
-80105eb0 vector45
-80105fe2 vector79
+801064ab vector140
+801058e0 sys_kill
+80106130 vector45
+80106262 vector79
 80103500 pipeclose
-80106657 vector229
-80106303 vector158
-80104e40 sys_fstat
+801068d7 vector229
+80106583 vector158
+80105040 sys_fstat
 80100640 consolewrite
-80105e7a vector39
-8010637b vector168
+801060fa vector39
+801065fb vector168
 80102da0 end_op
-80105e56 vector35
-80106114 vector113
+801060d6 vector35
+80106394 vector113
 80102510 freerange
-80106180 vector125
-80106c70 allocuvm
-80105886 trapret
-801065bb vector216
-80105f52 vector63
-80105e05 vector26
-801064a7 vector193
+80106400 vector125
+80106ef0 allocuvm
+80105b31 trapret
+8010683b vector216
+801061d2 vector63
+80106085 vector26
+80106727 vector193
 801027a0 lapicinit
-801064cb vector196
-80106567 vector209
-80105d4d vector4
-80106393 vector170
+8010674b vector196
+801067e7 vector209
+80105fcd vector4
+80106613 vector170
 8010a5c0 stack
-801061fb vector136
-80105d81 vector10
-80106543 vector206
+8010647b vector136
+80106001 vector10
+801067c3 vector206
 80101840 iunlock
-80105790 sys_sleep
-8010678f vector255
-80106417 vector181
-80105f2e vector59
-80106018 vector85
-8010600f vector84
-8010642f vector183
-8010630f vector159
-8010658b vector212
-80104e90 sys_link
-80105ec2 vector47
-8010664b vector228
-80105e95 vector42
-8010611d vector114
-80107010 uva2ka
-801063cf vector175
-8010624f vector143
+80105990 sys_sleep
+80106a0f vector255
+80106697 vector181
+801061ae vector59
+80106298 vector85
+8010628f vector84
+801066af vector183
+8010658f vector159
+8010680b vector212
+80105090 sys_link
+80106142 vector47
+801068cb vector228
+80106115 vector42
+8010639d vector114
+80107290 uva2ka
+8010664f vector175
+801064cf vector143
 80100e00 filealloc
-801040e0 wakeup
-801061b3 vector130
-80106723 vector246
-80105d78 vector9
-80106243 vector142
-8010609f vector100
-80106507 vector201
-80106ef0 clearpteu
-80103960 myproc
-801058a0 tvinit
-80105f37 vector60
-80105dea vector23
+80104130 wakeup
+80106433 vector130
+801069a3 vector246
+80105ff8 vector9
+801064c3 vector142
+8010631f vector100
+80106787 vector201
+80107170 clearpteu
+80103980 myproc
+80105b40 tvinit
+80105b10 sys_get_burst_time
+801061b7 vector60
+8010606a vector23
 80101730 idup
-801066ab vector236
+8010692b vector236
 80102780 kbdintr
-801051c0 sys_open
-8010666f vector231
-80105f6d vector66
-80105e20 vector29
+801053c0 sys_open
+801068ef vector231
+801061ed vector66
+801060a0 vector29
 80101a60 readi
-801061ef vector135
+8010646f vector135
 80100860 consoleintr
-80104140 kill
-80105fd0 vector77
+801041a0 kill
+80106250 vector77
 801015e0 ialloc
-8010640b vector180
-801154a4 kpgdir
-8010655b vector208
+8010668b vector180
+801156a4 kpgdir
+801067db vector208
 80102990 cmostime
-80105d10 uartintr
-8010608d vector98
-80106084 vector97
-801063db vector176
-801064b3 vector194
-80105e3b vector32
-801154a8 end
-801064ef vector199
-801061bf vector131
-8010676b vector252
+80105f90 uartintr
+8010630d vector98
+80106304 vector97
+8010665b vector176
+80106733 vector194
+801060bb vector32
+80105a90 sys_getProcInfo
+801156a8 end
+8010676f vector199
+8010643f vector131
+801069eb vector252
 80101090 filewrite
-80105d29 vector0
-80104950 argint
+80105fa9 vector0
+80104b50 argint
 80100a80 exec
-80106267 vector145
-80104d80 sys_write
-80104620 release
-801048f0 fetchstr
-801060de vector107
-80105e83 vector40
-80103fe0 wait
-801060b1 vector102
+801064e7 vector145
+80104f80 sys_write
+80104820 release
+80104af0 fetchstr
+8010635e vector107
+80106103 vector40
+80104030 wait
+80106331 vector102
 80109000 entrypgdir
 0010000c _start
-80105f13 vector56
-80105f7f vector68
-80105d5f vector6
+80106193 vector56
+801061ff vector68
+80105fdf vector6
 8010a48c _binary_initcode_end
 80100000 multiboot_header
-801061a7 vector129
-80103c30 scheduler
+80106427 vector129
+80103c50 scheduler
 80101cb0 dirlookup
-801064d7 vector197
+80106757 vector197
 80100ec0 fileclose
 80102d30 begin_op
-801062bb vector152
-80106ed0 kvmalloc
-80106663 vector230
-80104780 strncmp
-80105e68 vector37
-80106537 vector205
-80106327 vector161
-80114c60 tickslock
+8010653b vector152
+80107150 kvmalloc
+801068e3 vector230
+80104980 strncmp
+801060e8 vector37
+801067b7 vector205
+801065a7 vector161
+80114e60 tickslock
 801035a0 pipewrite
-801047d0 strncpy
-80105f9a vector71
-80106f20 copyuvm
+801049d0 strncpy
+8010621a vector71
+801071a0 copyuvm
 8010ffc0 ftable
-8010631b vector160
-801049a0 argptr
-801065af vector215
-801062f7 vector157
-80104ca0 sys_dup
-8010610b vector112
+8010659b vector160
+80104ba0 argptr
+8010682f vector215
+80106577 vector157
+80104ea0 sys_dup
+8010638b vector112
 80100390 panic
-80103860 forkret
-80106423 vector182
-80105d8f vector12
-801046c0 memcmp
+80103880 forkret
+801066a3 vector182
+8010600f vector12
+801048c0 memcmp
 801026a0 kbdgetc
-801060f0 vector109
-80105dcf vector20
-80103b10 fork
-80105ef8 vector53
-80105dbd vector18
+80106370 vector109
+8010604f vector20
+80103b30 fork
+80106178 vector53
+8010603d vector18
 0000008a _binary_entryother_size
 80112780 cpus
-80104340 releasesleep
-80106072 vector95
-80104510 holding
+80104540 releasesleep
+801062f2 vector95
+80104710 holding
 801109c0 sb
-80104560 acquire
-80106633 vector226
+80104760 acquire
+801068b3 vector226
 80102050 nameiparent
-80105ed4 vector49
-80105ea7 vector44
+80106154 vector49
+80106127 vector44
 8011267c lapic
-80105fd9 vector78
-8010586e alltraps
-801063b7 vector173
-80106138 vector117
-80105ffd vector82
-80106603 vector222
-80105d71 vector8
-80106297 vector149
+80106259 vector78
+80105b19 alltraps
+80106637 vector173
+801063b8 vector117
+8010627d vector82
+80106883 vector222
+80105a70 sys_getNumProc
+80105ff1 vector8
+80106517 vector149
 801016a0 iupdate
 80108000 data
-80104670 memset
-8010667b vector232
+80104870 memset
+801068fb vector232
 80103040 main
-801069f0 switchkvm
-801060d5 vector106
-801065eb vector220
-80106045 vector90
-8010633f vector163
-80106693 vector234
+80106c70 switchkvm
+80106355 vector106
+8010686b vector220
+801062c5 vector90
+801065bf vector163
+80106913 vector234
 80102f10 log_write
-801042e0 acquiresleep
-80104fe0 sys_unlink
-80105f49 vector62
-80105dfc vector25
-801064e3 vector198
-80106153 vector120
+801044e0 acquiresleep
+801051e0 sys_unlink
+801061c9 vector62
+8010607c vector25
+80106763 vector198
+80104420 set_burst_time
+801063d3 vector120
 8010a48c _binary_entryother_start
 80102560 kinit1
-80105edd vector50
-80105da4 vector15
-801062af vector151
-80106006 vector83
-8010603c vector89
-80106033 vector88
-80105950 trap
-80105840 sys_uptime
-801063ff vector179
-80105e4d vector34
-80105eb9 vector46
-801061e3 vector134
-8010660f vector223
-80114ca0 idt
-801065d3 vector218
-801038b0 pinit
-80106da0 deallocuvm
-80106627 vector225
+8010615d vector50
+80106024 vector15
+8010652f vector151
+80106286 vector83
+801062bc vector89
+801062b3 vector88
+80105bf0 trap
+80105a40 sys_uptime
+8010667f vector179
+801060cd vector34
+80106139 vector46
+80106463 vector134
+8010688f vector223
+80114ea0 idt
+80106853 vector218
+801038d0 pinit
+80107020 deallocuvm
+801068a7 vector225
 801028a0 lapicid
-8010645f vector187
-80103a90 growproc
-80104380 holdingsleep
+801066df vector187
+80103ab0 growproc
+80104580 holdingsleep
+80104360 getMaxPid
 80112d00 ncpu
-80105e29 vector30
-80103990 userinit
+801060a9 vector30
+801039b0 userinit
 801000d0 bread
-80106192 vector127
+80106412 vector127
 801036a0 piperead
-801154a0 ticks
-8010649b vector192
-80106363 vector166
+801156a0 ticks
+8010671b vector192
+801065e3 vector166
 80100a30 consoleinit
-80105fc7 vector76
-80105fbe vector75
+80106247 vector76
+8010623e vector75
 801021e0 ideintr
-801064bf vector195
-801062a3 vector150
-80105f25 vector58
-8010673b vector248
-8010616e vector123
-8010607b vector96
-80105e32 vector31
-8010651f vector203
-8010621f vector139
-801062c7 vector153
-8010634b vector164
-801041d0 procdump
-8010615c vector121
-80105ce0 uartputc
-80105d56 vector5
-8010636f vector167
-801062df vector155
-80106747 vector249
+8010673f vector195
+80106523 vector150
+801061a5 vector58
+801069bb vector248
+801063ee vector123
+801062fb vector96
+801060b2 vector31
+8010679f vector203
+8010649f vector139
+80106547 vector153
+801065cb vector164
+80104230 procdump
+801063dc vector121
+80105f60 uartputc
+80105fd6 vector5
+801065ef vector167
+8010655f vector155
+80104310 getNumProc
+801069c7 vector249
 801001f0 brelse
-80106753 vector250
-80106177 vector124
-801060f9 vector110
-8010652b vector204
+801043b0 getProcInfo
+801069d3 vector250
+801063f7 vector124
+80106379 vector110
+801067ab vector204
 80101760 ilock
-801054c0 sys_exec
-80106207 vector137
+801056c0 sys_exec
+80106487 vector137
 8010a460 _binary_initcode_start
-80104893 swtch
-8010672f vector247
-80105de1 vector22
-80106513 vector202
-80106960 seginit
+80104a93 swtch
+801069af vector247
+80106061 vector22
+80106793 vector202
+80106be0 seginit
 80101a00 iunlockput
-80105fa3 vector72
-80105f0a vector55
-80106189 vector126
-80105f64 vector65
-80105e17 vector28
+80106223 vector72
+8010618a vector55
+80106409 vector126
+801061e4 vector65
+80106097 vector28
 8010a516 _binary_entryother_end
-80106387 vector169
+80106607 vector169
 801001b0 bwrite
-80106687 vector233
-80105920 idtinit
-80103d90 exit
-801056d0 sys_wait
-801056b0 sys_exit
+80106907 vector233
+80105bc0 idtinit
+80103de0 exit
+801058d0 sys_wait
+801058b0 sys_exit
 80101f70 dirlink
 0000002c _binary_initcode_size
-8010627f vector147
-801042a0 initsleeplock
+801064ff vector147
+801044a0 initsleeplock
 80102150 ideinit
-80106ba0 loaduvm
-801060c3 vector104
-8010612f vector116
+80106e20 loaduvm
+80106343 vector104
+801063af vector116
 80112d20 ptable
 80102430 ioapicenable
-801044b0 popcli
+801046b0 popcli
 8010a008 vectors
-80105eef vector52
-80105db6 vector17
-8010643b vector184
-80104870 strlen
-801055c0 sys_pipe
+8010616f vector52
+80106036 vector17
+801066bb vector184
+80104a70 strlen
+801057c0 sys_pipe
 80101540 iinit
 801033d0 picinit
-8010654f vector207
-80106b20 inituvm
-80106483 vector190
-801066cf vector239
-80106069 vector94
-80106060 vector93
+801067cf vector207
+80106da0 inituvm
+80106703 vector190
+8010694f vector239
+801062e9 vector94
+801062e0 vector93
 80102c90 initlog
-8010646b vector188
-80105ecb vector48
+801066eb vector188
+8010614b vector48
 80102280 iderw
-801065df vector219
-8010628b vector148
-801065f7 vector221
+8010685f vector219
+8010650b vector148
+80106877 vector221
 80102630 kalloc
 80110960 devsw
-80105720 sys_getpid
-80105feb vector80
-8010639f vector171
-801062d3 vector154
-80105e5f vector36
+80105920 sys_getpid
+8010626b vector80
+8010661f vector171
+80106553 vector154
+801060df vector36
 801033f0 pipealloc
-8010669f vector235
-801060cc vector105
-80105410 sys_chdir
+8010691f vector235
+8010634c vector105
+80105610 sys_chdir
 801109e0 icache
-80106273 vector146
-8010648f vector191
-801060ba vector103
-80105370 sys_mknod
+801064f3 vector146
+8010670f vector191
+8010633a vector103
+80105570 sys_mknod
 801028f0 lapicstartap
-80106a10 switchuvm
-80104460 pushcli
+80106c90 switchuvm
+80104660 pushcli
 801025d0 kinit2
-80105d88 vector11
-80105d9d vector14
+80106008 vector11
+8010601d vector14
 80100fa0 filestat
diff -ruN xv6-public/kill.asm xv6-new/kill.asm
--- xv6-public/kill.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/kill.asm	2022-10-07 22:43:42.871886833 +0530
@@ -0,0 +1,1223 @@
+
+_kill:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char **argv)
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	56                   	push   %esi
+  12:	53                   	push   %ebx
+  13:	51                   	push   %ecx
+  14:	83 ec 0c             	sub    $0xc,%esp
+  17:	8b 01                	mov    (%ecx),%eax
+  19:	8b 51 04             	mov    0x4(%ecx),%edx
+  int i;
+
+  if(argc < 2){
+  1c:	83 f8 01             	cmp    $0x1,%eax
+  1f:	7e 30                	jle    51 <main+0x51>
+  21:	8d 5a 04             	lea    0x4(%edx),%ebx
+  24:	8d 34 82             	lea    (%edx,%eax,4),%esi
+  27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  2e:	66 90                	xchg   %ax,%ax
+    printf(2, "usage: kill pid...\n");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+    kill(atoi(argv[i]));
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	83 c3 04             	add    $0x4,%ebx
+  38:	e8 23 02 00 00       	call   260 <atoi>
+  3d:	89 04 24             	mov    %eax,(%esp)
+  40:	e8 be 02 00 00       	call   303 <kill>
+  for(i=1; i<argc; i++)
+  45:	83 c4 10             	add    $0x10,%esp
+  48:	39 f3                	cmp    %esi,%ebx
+  4a:	75 e4                	jne    30 <main+0x30>
+  exit();
+  4c:	e8 82 02 00 00       	call   2d3 <exit>
+    printf(2, "usage: kill pid...\n");
+  51:	50                   	push   %eax
+  52:	50                   	push   %eax
+  53:	68 b8 07 00 00       	push   $0x7b8
+  58:	6a 02                	push   $0x2
+  5a:	e8 f1 03 00 00       	call   450 <printf>
+    exit();
+  5f:	e8 6f 02 00 00       	call   2d3 <exit>
+  64:	66 90                	xchg   %ax,%ax
+  66:	66 90                	xchg   %ax,%ax
+  68:	66 90                	xchg   %ax,%ax
+  6a:	66 90                	xchg   %ax,%ax
+  6c:	66 90                	xchg   %ax,%ax
+  6e:	66 90                	xchg   %ax,%ax
+
+00000070 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  70:	f3 0f 1e fb          	endbr32 
+  74:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  75:	31 c0                	xor    %eax,%eax
+{
+  77:	89 e5                	mov    %esp,%ebp
+  79:	53                   	push   %ebx
+  7a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  7d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  80:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  84:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  87:	83 c0 01             	add    $0x1,%eax
+  8a:	84 d2                	test   %dl,%dl
+  8c:	75 f2                	jne    80 <strcpy+0x10>
+    ;
+  return os;
+}
+  8e:	89 c8                	mov    %ecx,%eax
+  90:	5b                   	pop    %ebx
+  91:	5d                   	pop    %ebp
+  92:	c3                   	ret    
+  93:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000000a0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  a0:	f3 0f 1e fb          	endbr32 
+  a4:	55                   	push   %ebp
+  a5:	89 e5                	mov    %esp,%ebp
+  a7:	53                   	push   %ebx
+  a8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  ab:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  ae:	0f b6 01             	movzbl (%ecx),%eax
+  b1:	0f b6 1a             	movzbl (%edx),%ebx
+  b4:	84 c0                	test   %al,%al
+  b6:	75 19                	jne    d1 <strcmp+0x31>
+  b8:	eb 26                	jmp    e0 <strcmp+0x40>
+  ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  c0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  c4:	83 c1 01             	add    $0x1,%ecx
+  c7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  ca:	0f b6 1a             	movzbl (%edx),%ebx
+  cd:	84 c0                	test   %al,%al
+  cf:	74 0f                	je     e0 <strcmp+0x40>
+  d1:	38 d8                	cmp    %bl,%al
+  d3:	74 eb                	je     c0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  d5:	29 d8                	sub    %ebx,%eax
+}
+  d7:	5b                   	pop    %ebx
+  d8:	5d                   	pop    %ebp
+  d9:	c3                   	ret    
+  da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  e0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  e2:	29 d8                	sub    %ebx,%eax
+}
+  e4:	5b                   	pop    %ebx
+  e5:	5d                   	pop    %ebp
+  e6:	c3                   	ret    
+  e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ee:	66 90                	xchg   %ax,%ax
+
+000000f0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  f0:	f3 0f 1e fb          	endbr32 
+  f4:	55                   	push   %ebp
+  f5:	89 e5                	mov    %esp,%ebp
+  f7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  fa:	80 3a 00             	cmpb   $0x0,(%edx)
+  fd:	74 21                	je     120 <strlen+0x30>
+  ff:	31 c0                	xor    %eax,%eax
+ 101:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 108:	83 c0 01             	add    $0x1,%eax
+ 10b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 10f:	89 c1                	mov    %eax,%ecx
+ 111:	75 f5                	jne    108 <strlen+0x18>
+    ;
+  return n;
+}
+ 113:	89 c8                	mov    %ecx,%eax
+ 115:	5d                   	pop    %ebp
+ 116:	c3                   	ret    
+ 117:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 120:	31 c9                	xor    %ecx,%ecx
+}
+ 122:	5d                   	pop    %ebp
+ 123:	89 c8                	mov    %ecx,%eax
+ 125:	c3                   	ret    
+ 126:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000130 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 130:	f3 0f 1e fb          	endbr32 
+ 134:	55                   	push   %ebp
+ 135:	89 e5                	mov    %esp,%ebp
+ 137:	57                   	push   %edi
+ 138:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 13b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 13e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 141:	89 d7                	mov    %edx,%edi
+ 143:	fc                   	cld    
+ 144:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 146:	89 d0                	mov    %edx,%eax
+ 148:	5f                   	pop    %edi
+ 149:	5d                   	pop    %ebp
+ 14a:	c3                   	ret    
+ 14b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 14f:	90                   	nop
+
+00000150 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 150:	f3 0f 1e fb          	endbr32 
+ 154:	55                   	push   %ebp
+ 155:	89 e5                	mov    %esp,%ebp
+ 157:	8b 45 08             	mov    0x8(%ebp),%eax
+ 15a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 15e:	0f b6 10             	movzbl (%eax),%edx
+ 161:	84 d2                	test   %dl,%dl
+ 163:	75 16                	jne    17b <strchr+0x2b>
+ 165:	eb 21                	jmp    188 <strchr+0x38>
+ 167:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16e:	66 90                	xchg   %ax,%ax
+ 170:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 174:	83 c0 01             	add    $0x1,%eax
+ 177:	84 d2                	test   %dl,%dl
+ 179:	74 0d                	je     188 <strchr+0x38>
+    if(*s == c)
+ 17b:	38 d1                	cmp    %dl,%cl
+ 17d:	75 f1                	jne    170 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 17f:	5d                   	pop    %ebp
+ 180:	c3                   	ret    
+ 181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 188:	31 c0                	xor    %eax,%eax
+}
+ 18a:	5d                   	pop    %ebp
+ 18b:	c3                   	ret    
+ 18c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000190 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 190:	f3 0f 1e fb          	endbr32 
+ 194:	55                   	push   %ebp
+ 195:	89 e5                	mov    %esp,%ebp
+ 197:	57                   	push   %edi
+ 198:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 199:	31 f6                	xor    %esi,%esi
+{
+ 19b:	53                   	push   %ebx
+ 19c:	89 f3                	mov    %esi,%ebx
+ 19e:	83 ec 1c             	sub    $0x1c,%esp
+ 1a1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1a4:	eb 33                	jmp    1d9 <gets+0x49>
+ 1a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ad:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1b0:	83 ec 04             	sub    $0x4,%esp
+ 1b3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1b6:	6a 01                	push   $0x1
+ 1b8:	50                   	push   %eax
+ 1b9:	6a 00                	push   $0x0
+ 1bb:	e8 2b 01 00 00       	call   2eb <read>
+    if(cc < 1)
+ 1c0:	83 c4 10             	add    $0x10,%esp
+ 1c3:	85 c0                	test   %eax,%eax
+ 1c5:	7e 1c                	jle    1e3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1c7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1cb:	83 c7 01             	add    $0x1,%edi
+ 1ce:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1d1:	3c 0a                	cmp    $0xa,%al
+ 1d3:	74 23                	je     1f8 <gets+0x68>
+ 1d5:	3c 0d                	cmp    $0xd,%al
+ 1d7:	74 1f                	je     1f8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1d9:	83 c3 01             	add    $0x1,%ebx
+ 1dc:	89 fe                	mov    %edi,%esi
+ 1de:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1e1:	7c cd                	jl     1b0 <gets+0x20>
+ 1e3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1e5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1e8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1eb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ee:	5b                   	pop    %ebx
+ 1ef:	5e                   	pop    %esi
+ 1f0:	5f                   	pop    %edi
+ 1f1:	5d                   	pop    %ebp
+ 1f2:	c3                   	ret    
+ 1f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1f7:	90                   	nop
+ 1f8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1fb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1fe:	01 de                	add    %ebx,%esi
+ 200:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 202:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 205:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 208:	5b                   	pop    %ebx
+ 209:	5e                   	pop    %esi
+ 20a:	5f                   	pop    %edi
+ 20b:	5d                   	pop    %ebp
+ 20c:	c3                   	ret    
+ 20d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000210 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 210:	f3 0f 1e fb          	endbr32 
+ 214:	55                   	push   %ebp
+ 215:	89 e5                	mov    %esp,%ebp
+ 217:	56                   	push   %esi
+ 218:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 219:	83 ec 08             	sub    $0x8,%esp
+ 21c:	6a 00                	push   $0x0
+ 21e:	ff 75 08             	pushl  0x8(%ebp)
+ 221:	e8 ed 00 00 00       	call   313 <open>
+  if(fd < 0)
+ 226:	83 c4 10             	add    $0x10,%esp
+ 229:	85 c0                	test   %eax,%eax
+ 22b:	78 2b                	js     258 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 22d:	83 ec 08             	sub    $0x8,%esp
+ 230:	ff 75 0c             	pushl  0xc(%ebp)
+ 233:	89 c3                	mov    %eax,%ebx
+ 235:	50                   	push   %eax
+ 236:	e8 f0 00 00 00       	call   32b <fstat>
+  close(fd);
+ 23b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 23e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 240:	e8 b6 00 00 00       	call   2fb <close>
+  return r;
+ 245:	83 c4 10             	add    $0x10,%esp
+}
+ 248:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 24b:	89 f0                	mov    %esi,%eax
+ 24d:	5b                   	pop    %ebx
+ 24e:	5e                   	pop    %esi
+ 24f:	5d                   	pop    %ebp
+ 250:	c3                   	ret    
+ 251:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 258:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 25d:	eb e9                	jmp    248 <stat+0x38>
+ 25f:	90                   	nop
+
+00000260 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 260:	f3 0f 1e fb          	endbr32 
+ 264:	55                   	push   %ebp
+ 265:	89 e5                	mov    %esp,%ebp
+ 267:	53                   	push   %ebx
+ 268:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 26b:	0f be 02             	movsbl (%edx),%eax
+ 26e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 271:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 274:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 279:	77 1a                	ja     295 <atoi+0x35>
+ 27b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 27f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 280:	83 c2 01             	add    $0x1,%edx
+ 283:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 286:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 28a:	0f be 02             	movsbl (%edx),%eax
+ 28d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 290:	80 fb 09             	cmp    $0x9,%bl
+ 293:	76 eb                	jbe    280 <atoi+0x20>
+  return n;
+}
+ 295:	89 c8                	mov    %ecx,%eax
+ 297:	5b                   	pop    %ebx
+ 298:	5d                   	pop    %ebp
+ 299:	c3                   	ret    
+ 29a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000002a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2a0:	f3 0f 1e fb          	endbr32 
+ 2a4:	55                   	push   %ebp
+ 2a5:	89 e5                	mov    %esp,%ebp
+ 2a7:	57                   	push   %edi
+ 2a8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2ab:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2ae:	56                   	push   %esi
+ 2af:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2b2:	85 c0                	test   %eax,%eax
+ 2b4:	7e 0f                	jle    2c5 <memmove+0x25>
+ 2b6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2b8:	89 d7                	mov    %edx,%edi
+ 2ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2c0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2c1:	39 f8                	cmp    %edi,%eax
+ 2c3:	75 fb                	jne    2c0 <memmove+0x20>
+  return vdst;
+}
+ 2c5:	5e                   	pop    %esi
+ 2c6:	89 d0                	mov    %edx,%eax
+ 2c8:	5f                   	pop    %edi
+ 2c9:	5d                   	pop    %ebp
+ 2ca:	c3                   	ret    
+
+000002cb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2cb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <exit>:
+SYSCALL(exit)
+ 2d3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <wait>:
+SYSCALL(wait)
+ 2db:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <pipe>:
+SYSCALL(pipe)
+ 2e3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <read>:
+SYSCALL(read)
+ 2eb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <write>:
+SYSCALL(write)
+ 2f3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <close>:
+SYSCALL(close)
+ 2fb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <kill>:
+SYSCALL(kill)
+ 303:	b8 06 00 00 00       	mov    $0x6,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <exec>:
+SYSCALL(exec)
+ 30b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <open>:
+SYSCALL(open)
+ 313:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <mknod>:
+SYSCALL(mknod)
+ 31b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <unlink>:
+SYSCALL(unlink)
+ 323:	b8 12 00 00 00       	mov    $0x12,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <fstat>:
+SYSCALL(fstat)
+ 32b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <link>:
+SYSCALL(link)
+ 333:	b8 13 00 00 00       	mov    $0x13,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <mkdir>:
+SYSCALL(mkdir)
+ 33b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <chdir>:
+SYSCALL(chdir)
+ 343:	b8 09 00 00 00       	mov    $0x9,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <dup>:
+SYSCALL(dup)
+ 34b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <getpid>:
+SYSCALL(getpid)
+ 353:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <sbrk>:
+SYSCALL(sbrk)
+ 35b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <sleep>:
+SYSCALL(sleep)
+ 363:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <uptime>:
+SYSCALL(uptime)
+ 36b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <getNumProc>:
+SYSCALL(getNumProc)
+ 373:	b8 16 00 00 00       	mov    $0x16,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 37b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 383:	b8 18 00 00 00       	mov    $0x18,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 38b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <get_burst_time>:
+ 393:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+ 39b:	66 90                	xchg   %ax,%ax
+ 39d:	66 90                	xchg   %ax,%ax
+ 39f:	90                   	nop
+
+000003a0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	56                   	push   %esi
+ 3a5:	53                   	push   %ebx
+ 3a6:	83 ec 3c             	sub    $0x3c,%esp
+ 3a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3ac:	89 d1                	mov    %edx,%ecx
+{
+ 3ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3b1:	85 d2                	test   %edx,%edx
+ 3b3:	0f 89 7f 00 00 00    	jns    438 <printint+0x98>
+ 3b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3bd:	74 79                	je     438 <printint+0x98>
+    neg = 1;
+ 3bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3c6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3c8:	31 db                	xor    %ebx,%ebx
+ 3ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3d0:	89 c8                	mov    %ecx,%eax
+ 3d2:	31 d2                	xor    %edx,%edx
+ 3d4:	89 cf                	mov    %ecx,%edi
+ 3d6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3d9:	0f b6 92 d4 07 00 00 	movzbl 0x7d4(%edx),%edx
+ 3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3e3:	89 d8                	mov    %ebx,%eax
+ 3e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3f1:	76 dd                	jbe    3d0 <printint+0x30>
+  if(neg)
+ 3f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3f6:	85 c9                	test   %ecx,%ecx
+ 3f8:	74 0c                	je     406 <printint+0x66>
+    buf[i++] = '-';
+ 3fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3ff:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 401:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 406:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 409:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 40d:	eb 07                	jmp    416 <printint+0x76>
+ 40f:	90                   	nop
+ 410:	0f b6 13             	movzbl (%ebx),%edx
+ 413:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 416:	83 ec 04             	sub    $0x4,%esp
+ 419:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 41c:	6a 01                	push   $0x1
+ 41e:	56                   	push   %esi
+ 41f:	57                   	push   %edi
+ 420:	e8 ce fe ff ff       	call   2f3 <write>
+  while(--i >= 0)
+ 425:	83 c4 10             	add    $0x10,%esp
+ 428:	39 de                	cmp    %ebx,%esi
+ 42a:	75 e4                	jne    410 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 42c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 42f:	5b                   	pop    %ebx
+ 430:	5e                   	pop    %esi
+ 431:	5f                   	pop    %edi
+ 432:	5d                   	pop    %ebp
+ 433:	c3                   	ret    
+ 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 438:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 43f:	eb 87                	jmp    3c8 <printint+0x28>
+ 441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 448:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44f:	90                   	nop
+
+00000450 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 450:	f3 0f 1e fb          	endbr32 
+ 454:	55                   	push   %ebp
+ 455:	89 e5                	mov    %esp,%ebp
+ 457:	57                   	push   %edi
+ 458:	56                   	push   %esi
+ 459:	53                   	push   %ebx
+ 45a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 45d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 460:	0f b6 1e             	movzbl (%esi),%ebx
+ 463:	84 db                	test   %bl,%bl
+ 465:	0f 84 b4 00 00 00    	je     51f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 46b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 46e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 471:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 474:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 476:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 479:	eb 33                	jmp    4ae <printf+0x5e>
+ 47b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 47f:	90                   	nop
+ 480:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 483:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	74 17                	je     4a4 <printf+0x54>
+  write(fd, &c, 1);
+ 48d:	83 ec 04             	sub    $0x4,%esp
+ 490:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 493:	6a 01                	push   $0x1
+ 495:	57                   	push   %edi
+ 496:	ff 75 08             	pushl  0x8(%ebp)
+ 499:	e8 55 fe ff ff       	call   2f3 <write>
+ 49e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 4a1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4a4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4a7:	83 c6 01             	add    $0x1,%esi
+ 4aa:	84 db                	test   %bl,%bl
+ 4ac:	74 71                	je     51f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 4ae:	0f be cb             	movsbl %bl,%ecx
+ 4b1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4b4:	85 d2                	test   %edx,%edx
+ 4b6:	74 c8                	je     480 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4b8:	83 fa 25             	cmp    $0x25,%edx
+ 4bb:	75 e7                	jne    4a4 <printf+0x54>
+      if(c == 'd'){
+ 4bd:	83 f8 64             	cmp    $0x64,%eax
+ 4c0:	0f 84 9a 00 00 00    	je     560 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4c6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4cc:	83 f9 70             	cmp    $0x70,%ecx
+ 4cf:	74 5f                	je     530 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4d1:	83 f8 73             	cmp    $0x73,%eax
+ 4d4:	0f 84 d6 00 00 00    	je     5b0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4da:	83 f8 63             	cmp    $0x63,%eax
+ 4dd:	0f 84 8d 00 00 00    	je     570 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4e3:	83 f8 25             	cmp    $0x25,%eax
+ 4e6:	0f 84 b4 00 00 00    	je     5a0 <printf+0x150>
+  write(fd, &c, 1);
+ 4ec:	83 ec 04             	sub    $0x4,%esp
+ 4ef:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4f3:	6a 01                	push   $0x1
+ 4f5:	57                   	push   %edi
+ 4f6:	ff 75 08             	pushl  0x8(%ebp)
+ 4f9:	e8 f5 fd ff ff       	call   2f3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4fe:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 501:	83 c4 0c             	add    $0xc,%esp
+ 504:	6a 01                	push   $0x1
+ 506:	83 c6 01             	add    $0x1,%esi
+ 509:	57                   	push   %edi
+ 50a:	ff 75 08             	pushl  0x8(%ebp)
+ 50d:	e8 e1 fd ff ff       	call   2f3 <write>
+  for(i = 0; fmt[i]; i++){
+ 512:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 516:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 519:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 51b:	84 db                	test   %bl,%bl
+ 51d:	75 8f                	jne    4ae <printf+0x5e>
+    }
+  }
+}
+ 51f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 522:	5b                   	pop    %ebx
+ 523:	5e                   	pop    %esi
+ 524:	5f                   	pop    %edi
+ 525:	5d                   	pop    %ebp
+ 526:	c3                   	ret    
+ 527:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 52e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 530:	83 ec 0c             	sub    $0xc,%esp
+ 533:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 538:	6a 00                	push   $0x0
+ 53a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 53d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 540:	8b 13                	mov    (%ebx),%edx
+ 542:	e8 59 fe ff ff       	call   3a0 <printint>
+        ap++;
+ 547:	89 d8                	mov    %ebx,%eax
+ 549:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 54c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 54e:	83 c0 04             	add    $0x4,%eax
+ 551:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 554:	e9 4b ff ff ff       	jmp    4a4 <printf+0x54>
+ 559:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 560:	83 ec 0c             	sub    $0xc,%esp
+ 563:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 568:	6a 01                	push   $0x1
+ 56a:	eb ce                	jmp    53a <printf+0xea>
+ 56c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 570:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 573:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 576:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 578:	6a 01                	push   $0x1
+        ap++;
+ 57a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 57d:	57                   	push   %edi
+ 57e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 581:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 584:	e8 6a fd ff ff       	call   2f3 <write>
+        ap++;
+ 589:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 58c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 58f:	31 d2                	xor    %edx,%edx
+ 591:	e9 0e ff ff ff       	jmp    4a4 <printf+0x54>
+ 596:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 59d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5a3:	83 ec 04             	sub    $0x4,%esp
+ 5a6:	e9 59 ff ff ff       	jmp    504 <printf+0xb4>
+ 5ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5af:	90                   	nop
+        s = (char*)*ap;
+ 5b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5b3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5b5:	83 c0 04             	add    $0x4,%eax
+ 5b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5bb:	85 db                	test   %ebx,%ebx
+ 5bd:	74 17                	je     5d6 <printf+0x186>
+        while(*s != 0){
+ 5bf:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5c2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5c4:	84 c0                	test   %al,%al
+ 5c6:	0f 84 d8 fe ff ff    	je     4a4 <printf+0x54>
+ 5cc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5cf:	89 de                	mov    %ebx,%esi
+ 5d1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d4:	eb 1a                	jmp    5f0 <printf+0x1a0>
+          s = "(null)";
+ 5d6:	bb cc 07 00 00       	mov    $0x7cc,%ebx
+        while(*s != 0){
+ 5db:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5de:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5e3:	89 de                	mov    %ebx,%esi
+ 5e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ef:	90                   	nop
+  write(fd, &c, 1);
+ 5f0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5f3:	83 c6 01             	add    $0x1,%esi
+ 5f6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5f9:	6a 01                	push   $0x1
+ 5fb:	57                   	push   %edi
+ 5fc:	53                   	push   %ebx
+ 5fd:	e8 f1 fc ff ff       	call   2f3 <write>
+        while(*s != 0){
+ 602:	0f b6 06             	movzbl (%esi),%eax
+ 605:	83 c4 10             	add    $0x10,%esp
+ 608:	84 c0                	test   %al,%al
+ 60a:	75 e4                	jne    5f0 <printf+0x1a0>
+ 60c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 60f:	31 d2                	xor    %edx,%edx
+ 611:	e9 8e fe ff ff       	jmp    4a4 <printf+0x54>
+ 616:	66 90                	xchg   %ax,%ax
+ 618:	66 90                	xchg   %ax,%ax
+ 61a:	66 90                	xchg   %ax,%ax
+ 61c:	66 90                	xchg   %ax,%ax
+ 61e:	66 90                	xchg   %ax,%ax
+
+00000620 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 620:	f3 0f 1e fb          	endbr32 
+ 624:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 625:	a1 84 0a 00 00       	mov    0xa84,%eax
+{
+ 62a:	89 e5                	mov    %esp,%ebp
+ 62c:	57                   	push   %edi
+ 62d:	56                   	push   %esi
+ 62e:	53                   	push   %ebx
+ 62f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 632:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 634:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 637:	39 c8                	cmp    %ecx,%eax
+ 639:	73 15                	jae    650 <free+0x30>
+ 63b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63f:	90                   	nop
+ 640:	39 d1                	cmp    %edx,%ecx
+ 642:	72 14                	jb     658 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 644:	39 d0                	cmp    %edx,%eax
+ 646:	73 10                	jae    658 <free+0x38>
+{
+ 648:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 64a:	8b 10                	mov    (%eax),%edx
+ 64c:	39 c8                	cmp    %ecx,%eax
+ 64e:	72 f0                	jb     640 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 650:	39 d0                	cmp    %edx,%eax
+ 652:	72 f4                	jb     648 <free+0x28>
+ 654:	39 d1                	cmp    %edx,%ecx
+ 656:	73 f0                	jae    648 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 658:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 65b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 65e:	39 fa                	cmp    %edi,%edx
+ 660:	74 1e                	je     680 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 662:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 665:	8b 50 04             	mov    0x4(%eax),%edx
+ 668:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 66b:	39 f1                	cmp    %esi,%ecx
+ 66d:	74 28                	je     697 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 66f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 671:	5b                   	pop    %ebx
+  freep = p;
+ 672:	a3 84 0a 00 00       	mov    %eax,0xa84
+}
+ 677:	5e                   	pop    %esi
+ 678:	5f                   	pop    %edi
+ 679:	5d                   	pop    %ebp
+ 67a:	c3                   	ret    
+ 67b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 67f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 680:	03 72 04             	add    0x4(%edx),%esi
+ 683:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 686:	8b 10                	mov    (%eax),%edx
+ 688:	8b 12                	mov    (%edx),%edx
+ 68a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 68d:	8b 50 04             	mov    0x4(%eax),%edx
+ 690:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 693:	39 f1                	cmp    %esi,%ecx
+ 695:	75 d8                	jne    66f <free+0x4f>
+    p->s.size += bp->s.size;
+ 697:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 69a:	a3 84 0a 00 00       	mov    %eax,0xa84
+    p->s.size += bp->s.size;
+ 69f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6a2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6a5:	89 10                	mov    %edx,(%eax)
+}
+ 6a7:	5b                   	pop    %ebx
+ 6a8:	5e                   	pop    %esi
+ 6a9:	5f                   	pop    %edi
+ 6aa:	5d                   	pop    %ebp
+ 6ab:	c3                   	ret    
+ 6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006b0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6b0:	f3 0f 1e fb          	endbr32 
+ 6b4:	55                   	push   %ebp
+ 6b5:	89 e5                	mov    %esp,%ebp
+ 6b7:	57                   	push   %edi
+ 6b8:	56                   	push   %esi
+ 6b9:	53                   	push   %ebx
+ 6ba:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6bd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6c0:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6c6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6c9:	c1 ee 03             	shr    $0x3,%esi
+ 6cc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6cf:	85 ff                	test   %edi,%edi
+ 6d1:	0f 84 a9 00 00 00    	je     780 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6d7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6d9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6dc:	39 f1                	cmp    %esi,%ecx
+ 6de:	73 6d                	jae    74d <malloc+0x9d>
+ 6e0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6e6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6eb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ee:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6f5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6f8:	eb 17                	jmp    711 <malloc+0x61>
+ 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 700:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 702:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 705:	39 f1                	cmp    %esi,%ecx
+ 707:	73 4f                	jae    758 <malloc+0xa8>
+ 709:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
+ 70f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 711:	39 c7                	cmp    %eax,%edi
+ 713:	75 eb                	jne    700 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 715:	83 ec 0c             	sub    $0xc,%esp
+ 718:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 71b:	e8 3b fc ff ff       	call   35b <sbrk>
+  if(p == (char*)-1)
+ 720:	83 c4 10             	add    $0x10,%esp
+ 723:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 726:	74 1b                	je     743 <malloc+0x93>
+  hp->s.size = nu;
+ 728:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 72b:	83 ec 0c             	sub    $0xc,%esp
+ 72e:	83 c0 08             	add    $0x8,%eax
+ 731:	50                   	push   %eax
+ 732:	e8 e9 fe ff ff       	call   620 <free>
+  return freep;
+ 737:	a1 84 0a 00 00       	mov    0xa84,%eax
+      if((p = morecore(nunits)) == 0)
+ 73c:	83 c4 10             	add    $0x10,%esp
+ 73f:	85 c0                	test   %eax,%eax
+ 741:	75 bd                	jne    700 <malloc+0x50>
+        return 0;
+  }
+}
+ 743:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 746:	31 c0                	xor    %eax,%eax
+}
+ 748:	5b                   	pop    %ebx
+ 749:	5e                   	pop    %esi
+ 74a:	5f                   	pop    %edi
+ 74b:	5d                   	pop    %ebp
+ 74c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 74d:	89 c2                	mov    %eax,%edx
+ 74f:	89 f8                	mov    %edi,%eax
+ 751:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 758:	39 ce                	cmp    %ecx,%esi
+ 75a:	74 54                	je     7b0 <malloc+0x100>
+        p->s.size -= nunits;
+ 75c:	29 f1                	sub    %esi,%ecx
+ 75e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 761:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 764:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 767:	a3 84 0a 00 00       	mov    %eax,0xa84
+}
+ 76c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 76f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 772:	5b                   	pop    %ebx
+ 773:	5e                   	pop    %esi
+ 774:	5f                   	pop    %edi
+ 775:	5d                   	pop    %ebp
+ 776:	c3                   	ret    
+ 777:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 77e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 780:	c7 05 84 0a 00 00 88 	movl   $0xa88,0xa84
+ 787:	0a 00 00 
+    base.s.size = 0;
+ 78a:	bf 88 0a 00 00       	mov    $0xa88,%edi
+    base.s.ptr = freep = prevp = &base;
+ 78f:	c7 05 88 0a 00 00 88 	movl   $0xa88,0xa88
+ 796:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 799:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 79b:	c7 05 8c 0a 00 00 00 	movl   $0x0,0xa8c
+ 7a2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7a5:	e9 36 ff ff ff       	jmp    6e0 <malloc+0x30>
+ 7aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7b0:	8b 0a                	mov    (%edx),%ecx
+ 7b2:	89 08                	mov    %ecx,(%eax)
+ 7b4:	eb b1                	jmp    767 <malloc+0xb7>
diff -ruN xv6-public/kill.d xv6-new/kill.d
--- xv6-public/kill.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/kill.d	2022-10-07 22:43:42.871886833 +0530
@@ -0,0 +1 @@
+kill.o: kill.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/kill.o and xv6-new/kill.o differ
diff -ruN xv6-public/kill.sym xv6-new/kill.sym
--- xv6-public/kill.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/kill.sym	2022-10-07 22:43:42.871886833 +0530
@@ -0,0 +1,62 @@
+00000000 .text
+000007b8 .rodata
+000007e8 .eh_frame
+00000a84 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 kill.c
+00000000 ulib.c
+00000000 printf.c
+000003a0 printint
+000007d4 digits.1096
+00000000 umalloc.c
+00000a84 freep
+00000a88 base
+00000070 strcpy
+00000450 printf
+000002a0 memmove
+0000031b mknod
+00000190 gets
+00000353 getpid
+000006b0 malloc
+00000363 sleep
+00000393 get_burst_time
+000002e3 pipe
+000002f3 write
+0000032b fstat
+00000303 kill
+00000343 chdir
+0000030b exec
+000002db wait
+000002eb read
+00000323 unlink
+000002cb fork
+0000035b sbrk
+0000036b uptime
+00000a84 __bss_start
+00000130 memset
+00000000 main
+0000038b set_burst_time
+000000a0 strcmp
+0000034b dup
+0000037b getMaxPid
+00000373 getNumProc
+00000383 getProcInfo
+00000210 stat
+00000a84 _edata
+00000a90 _end
+00000333 link
+000002d3 exit
+00000260 atoi
+000000f0 strlen
+00000313 open
+00000150 strchr
+0000033b mkdir
+000002fb close
+00000620 free
Binary files xv6-public/lapic.o and xv6-new/lapic.o differ
diff -ruN xv6-public/ln.asm xv6-new/ln.asm
--- xv6-public/ln.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/ln.asm	2022-10-07 22:43:43.351886840 +0530
@@ -0,0 +1,1215 @@
+
+_ln:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+  if(argc != 3){
+   e:	83 39 03             	cmpl   $0x3,(%ecx)
+{
+  11:	55                   	push   %ebp
+  12:	89 e5                	mov    %esp,%ebp
+  14:	53                   	push   %ebx
+  15:	51                   	push   %ecx
+  16:	8b 59 04             	mov    0x4(%ecx),%ebx
+  if(argc != 3){
+  19:	74 13                	je     2e <main+0x2e>
+    printf(2, "Usage: ln old new\n");
+  1b:	52                   	push   %edx
+  1c:	52                   	push   %edx
+  1d:	68 a8 07 00 00       	push   $0x7a8
+  22:	6a 02                	push   $0x2
+  24:	e8 17 04 00 00       	call   440 <printf>
+    exit();
+  29:	e8 95 02 00 00       	call   2c3 <exit>
+  }
+  if(link(argv[1], argv[2]) < 0)
+  2e:	50                   	push   %eax
+  2f:	50                   	push   %eax
+  30:	ff 73 08             	pushl  0x8(%ebx)
+  33:	ff 73 04             	pushl  0x4(%ebx)
+  36:	e8 e8 02 00 00       	call   323 <link>
+  3b:	83 c4 10             	add    $0x10,%esp
+  3e:	85 c0                	test   %eax,%eax
+  40:	78 05                	js     47 <main+0x47>
+    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  exit();
+  42:	e8 7c 02 00 00       	call   2c3 <exit>
+    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  47:	ff 73 08             	pushl  0x8(%ebx)
+  4a:	ff 73 04             	pushl  0x4(%ebx)
+  4d:	68 bb 07 00 00       	push   $0x7bb
+  52:	6a 02                	push   $0x2
+  54:	e8 e7 03 00 00       	call   440 <printf>
+  59:	83 c4 10             	add    $0x10,%esp
+  5c:	eb e4                	jmp    42 <main+0x42>
+  5e:	66 90                	xchg   %ax,%ax
+
+00000060 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  60:	f3 0f 1e fb          	endbr32 
+  64:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  65:	31 c0                	xor    %eax,%eax
+{
+  67:	89 e5                	mov    %esp,%ebp
+  69:	53                   	push   %ebx
+  6a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  6d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  70:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  74:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  77:	83 c0 01             	add    $0x1,%eax
+  7a:	84 d2                	test   %dl,%dl
+  7c:	75 f2                	jne    70 <strcpy+0x10>
+    ;
+  return os;
+}
+  7e:	89 c8                	mov    %ecx,%eax
+  80:	5b                   	pop    %ebx
+  81:	5d                   	pop    %ebp
+  82:	c3                   	ret    
+  83:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000090 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  90:	f3 0f 1e fb          	endbr32 
+  94:	55                   	push   %ebp
+  95:	89 e5                	mov    %esp,%ebp
+  97:	53                   	push   %ebx
+  98:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  9b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  9e:	0f b6 01             	movzbl (%ecx),%eax
+  a1:	0f b6 1a             	movzbl (%edx),%ebx
+  a4:	84 c0                	test   %al,%al
+  a6:	75 19                	jne    c1 <strcmp+0x31>
+  a8:	eb 26                	jmp    d0 <strcmp+0x40>
+  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  b0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  b4:	83 c1 01             	add    $0x1,%ecx
+  b7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  ba:	0f b6 1a             	movzbl (%edx),%ebx
+  bd:	84 c0                	test   %al,%al
+  bf:	74 0f                	je     d0 <strcmp+0x40>
+  c1:	38 d8                	cmp    %bl,%al
+  c3:	74 eb                	je     b0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  c5:	29 d8                	sub    %ebx,%eax
+}
+  c7:	5b                   	pop    %ebx
+  c8:	5d                   	pop    %ebp
+  c9:	c3                   	ret    
+  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  d0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  d2:	29 d8                	sub    %ebx,%eax
+}
+  d4:	5b                   	pop    %ebx
+  d5:	5d                   	pop    %ebp
+  d6:	c3                   	ret    
+  d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  de:	66 90                	xchg   %ax,%ax
+
+000000e0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  e0:	f3 0f 1e fb          	endbr32 
+  e4:	55                   	push   %ebp
+  e5:	89 e5                	mov    %esp,%ebp
+  e7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  ea:	80 3a 00             	cmpb   $0x0,(%edx)
+  ed:	74 21                	je     110 <strlen+0x30>
+  ef:	31 c0                	xor    %eax,%eax
+  f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  f8:	83 c0 01             	add    $0x1,%eax
+  fb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+  ff:	89 c1                	mov    %eax,%ecx
+ 101:	75 f5                	jne    f8 <strlen+0x18>
+    ;
+  return n;
+}
+ 103:	89 c8                	mov    %ecx,%eax
+ 105:	5d                   	pop    %ebp
+ 106:	c3                   	ret    
+ 107:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 110:	31 c9                	xor    %ecx,%ecx
+}
+ 112:	5d                   	pop    %ebp
+ 113:	89 c8                	mov    %ecx,%eax
+ 115:	c3                   	ret    
+ 116:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000120 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 120:	f3 0f 1e fb          	endbr32 
+ 124:	55                   	push   %ebp
+ 125:	89 e5                	mov    %esp,%ebp
+ 127:	57                   	push   %edi
+ 128:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 12b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 12e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 131:	89 d7                	mov    %edx,%edi
+ 133:	fc                   	cld    
+ 134:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 136:	89 d0                	mov    %edx,%eax
+ 138:	5f                   	pop    %edi
+ 139:	5d                   	pop    %ebp
+ 13a:	c3                   	ret    
+ 13b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 13f:	90                   	nop
+
+00000140 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+ 145:	89 e5                	mov    %esp,%ebp
+ 147:	8b 45 08             	mov    0x8(%ebp),%eax
+ 14a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 14e:	0f b6 10             	movzbl (%eax),%edx
+ 151:	84 d2                	test   %dl,%dl
+ 153:	75 16                	jne    16b <strchr+0x2b>
+ 155:	eb 21                	jmp    178 <strchr+0x38>
+ 157:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 15e:	66 90                	xchg   %ax,%ax
+ 160:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 164:	83 c0 01             	add    $0x1,%eax
+ 167:	84 d2                	test   %dl,%dl
+ 169:	74 0d                	je     178 <strchr+0x38>
+    if(*s == c)
+ 16b:	38 d1                	cmp    %dl,%cl
+ 16d:	75 f1                	jne    160 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 16f:	5d                   	pop    %ebp
+ 170:	c3                   	ret    
+ 171:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 178:	31 c0                	xor    %eax,%eax
+}
+ 17a:	5d                   	pop    %ebp
+ 17b:	c3                   	ret    
+ 17c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000180 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 180:	f3 0f 1e fb          	endbr32 
+ 184:	55                   	push   %ebp
+ 185:	89 e5                	mov    %esp,%ebp
+ 187:	57                   	push   %edi
+ 188:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 189:	31 f6                	xor    %esi,%esi
+{
+ 18b:	53                   	push   %ebx
+ 18c:	89 f3                	mov    %esi,%ebx
+ 18e:	83 ec 1c             	sub    $0x1c,%esp
+ 191:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 194:	eb 33                	jmp    1c9 <gets+0x49>
+ 196:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 19d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1a0:	83 ec 04             	sub    $0x4,%esp
+ 1a3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1a6:	6a 01                	push   $0x1
+ 1a8:	50                   	push   %eax
+ 1a9:	6a 00                	push   $0x0
+ 1ab:	e8 2b 01 00 00       	call   2db <read>
+    if(cc < 1)
+ 1b0:	83 c4 10             	add    $0x10,%esp
+ 1b3:	85 c0                	test   %eax,%eax
+ 1b5:	7e 1c                	jle    1d3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1b7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1bb:	83 c7 01             	add    $0x1,%edi
+ 1be:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1c1:	3c 0a                	cmp    $0xa,%al
+ 1c3:	74 23                	je     1e8 <gets+0x68>
+ 1c5:	3c 0d                	cmp    $0xd,%al
+ 1c7:	74 1f                	je     1e8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1c9:	83 c3 01             	add    $0x1,%ebx
+ 1cc:	89 fe                	mov    %edi,%esi
+ 1ce:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1d1:	7c cd                	jl     1a0 <gets+0x20>
+ 1d3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1d8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1db:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1de:	5b                   	pop    %ebx
+ 1df:	5e                   	pop    %esi
+ 1e0:	5f                   	pop    %edi
+ 1e1:	5d                   	pop    %ebp
+ 1e2:	c3                   	ret    
+ 1e3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1e7:	90                   	nop
+ 1e8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1eb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1ee:	01 de                	add    %ebx,%esi
+ 1f0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1f2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1f8:	5b                   	pop    %ebx
+ 1f9:	5e                   	pop    %esi
+ 1fa:	5f                   	pop    %edi
+ 1fb:	5d                   	pop    %ebp
+ 1fc:	c3                   	ret    
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000200 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 200:	f3 0f 1e fb          	endbr32 
+ 204:	55                   	push   %ebp
+ 205:	89 e5                	mov    %esp,%ebp
+ 207:	56                   	push   %esi
+ 208:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 209:	83 ec 08             	sub    $0x8,%esp
+ 20c:	6a 00                	push   $0x0
+ 20e:	ff 75 08             	pushl  0x8(%ebp)
+ 211:	e8 ed 00 00 00       	call   303 <open>
+  if(fd < 0)
+ 216:	83 c4 10             	add    $0x10,%esp
+ 219:	85 c0                	test   %eax,%eax
+ 21b:	78 2b                	js     248 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 21d:	83 ec 08             	sub    $0x8,%esp
+ 220:	ff 75 0c             	pushl  0xc(%ebp)
+ 223:	89 c3                	mov    %eax,%ebx
+ 225:	50                   	push   %eax
+ 226:	e8 f0 00 00 00       	call   31b <fstat>
+  close(fd);
+ 22b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 22e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 230:	e8 b6 00 00 00       	call   2eb <close>
+  return r;
+ 235:	83 c4 10             	add    $0x10,%esp
+}
+ 238:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 23b:	89 f0                	mov    %esi,%eax
+ 23d:	5b                   	pop    %ebx
+ 23e:	5e                   	pop    %esi
+ 23f:	5d                   	pop    %ebp
+ 240:	c3                   	ret    
+ 241:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 248:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 24d:	eb e9                	jmp    238 <stat+0x38>
+ 24f:	90                   	nop
+
+00000250 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 250:	f3 0f 1e fb          	endbr32 
+ 254:	55                   	push   %ebp
+ 255:	89 e5                	mov    %esp,%ebp
+ 257:	53                   	push   %ebx
+ 258:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 25b:	0f be 02             	movsbl (%edx),%eax
+ 25e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 261:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 264:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 269:	77 1a                	ja     285 <atoi+0x35>
+ 26b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 26f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 270:	83 c2 01             	add    $0x1,%edx
+ 273:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 276:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 27a:	0f be 02             	movsbl (%edx),%eax
+ 27d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 280:	80 fb 09             	cmp    $0x9,%bl
+ 283:	76 eb                	jbe    270 <atoi+0x20>
+  return n;
+}
+ 285:	89 c8                	mov    %ecx,%eax
+ 287:	5b                   	pop    %ebx
+ 288:	5d                   	pop    %ebp
+ 289:	c3                   	ret    
+ 28a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000290 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 290:	f3 0f 1e fb          	endbr32 
+ 294:	55                   	push   %ebp
+ 295:	89 e5                	mov    %esp,%ebp
+ 297:	57                   	push   %edi
+ 298:	8b 45 10             	mov    0x10(%ebp),%eax
+ 29b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 29e:	56                   	push   %esi
+ 29f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2a2:	85 c0                	test   %eax,%eax
+ 2a4:	7e 0f                	jle    2b5 <memmove+0x25>
+ 2a6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2a8:	89 d7                	mov    %edx,%edi
+ 2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2b0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2b1:	39 f8                	cmp    %edi,%eax
+ 2b3:	75 fb                	jne    2b0 <memmove+0x20>
+  return vdst;
+}
+ 2b5:	5e                   	pop    %esi
+ 2b6:	89 d0                	mov    %edx,%eax
+ 2b8:	5f                   	pop    %edi
+ 2b9:	5d                   	pop    %ebp
+ 2ba:	c3                   	ret    
+
+000002bb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2bb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <exit>:
+SYSCALL(exit)
+ 2c3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <wait>:
+SYSCALL(wait)
+ 2cb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <pipe>:
+SYSCALL(pipe)
+ 2d3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <read>:
+SYSCALL(read)
+ 2db:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <write>:
+SYSCALL(write)
+ 2e3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <close>:
+SYSCALL(close)
+ 2eb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <kill>:
+SYSCALL(kill)
+ 2f3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <exec>:
+SYSCALL(exec)
+ 2fb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <open>:
+SYSCALL(open)
+ 303:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <mknod>:
+SYSCALL(mknod)
+ 30b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <unlink>:
+SYSCALL(unlink)
+ 313:	b8 12 00 00 00       	mov    $0x12,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <fstat>:
+SYSCALL(fstat)
+ 31b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <link>:
+SYSCALL(link)
+ 323:	b8 13 00 00 00       	mov    $0x13,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <mkdir>:
+SYSCALL(mkdir)
+ 32b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <chdir>:
+SYSCALL(chdir)
+ 333:	b8 09 00 00 00       	mov    $0x9,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <dup>:
+SYSCALL(dup)
+ 33b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <getpid>:
+SYSCALL(getpid)
+ 343:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <sbrk>:
+SYSCALL(sbrk)
+ 34b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <sleep>:
+SYSCALL(sleep)
+ 353:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <uptime>:
+SYSCALL(uptime)
+ 35b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <getNumProc>:
+SYSCALL(getNumProc)
+ 363:	b8 16 00 00 00       	mov    $0x16,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 36b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 373:	b8 18 00 00 00       	mov    $0x18,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 37b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <get_burst_time>:
+ 383:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+ 38b:	66 90                	xchg   %ax,%ax
+ 38d:	66 90                	xchg   %ax,%ax
+ 38f:	90                   	nop
+
+00000390 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 390:	55                   	push   %ebp
+ 391:	89 e5                	mov    %esp,%ebp
+ 393:	57                   	push   %edi
+ 394:	56                   	push   %esi
+ 395:	53                   	push   %ebx
+ 396:	83 ec 3c             	sub    $0x3c,%esp
+ 399:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 39c:	89 d1                	mov    %edx,%ecx
+{
+ 39e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3a1:	85 d2                	test   %edx,%edx
+ 3a3:	0f 89 7f 00 00 00    	jns    428 <printint+0x98>
+ 3a9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3ad:	74 79                	je     428 <printint+0x98>
+    neg = 1;
+ 3af:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3b6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3b8:	31 db                	xor    %ebx,%ebx
+ 3ba:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3c0:	89 c8                	mov    %ecx,%eax
+ 3c2:	31 d2                	xor    %edx,%edx
+ 3c4:	89 cf                	mov    %ecx,%edi
+ 3c6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3c9:	0f b6 92 d8 07 00 00 	movzbl 0x7d8(%edx),%edx
+ 3d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3d3:	89 d8                	mov    %ebx,%eax
+ 3d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3d8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3db:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3de:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3e1:	76 dd                	jbe    3c0 <printint+0x30>
+  if(neg)
+ 3e3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3e6:	85 c9                	test   %ecx,%ecx
+ 3e8:	74 0c                	je     3f6 <printint+0x66>
+    buf[i++] = '-';
+ 3ea:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3ef:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3f1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3f6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3f9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3fd:	eb 07                	jmp    406 <printint+0x76>
+ 3ff:	90                   	nop
+ 400:	0f b6 13             	movzbl (%ebx),%edx
+ 403:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 406:	83 ec 04             	sub    $0x4,%esp
+ 409:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 40c:	6a 01                	push   $0x1
+ 40e:	56                   	push   %esi
+ 40f:	57                   	push   %edi
+ 410:	e8 ce fe ff ff       	call   2e3 <write>
+  while(--i >= 0)
+ 415:	83 c4 10             	add    $0x10,%esp
+ 418:	39 de                	cmp    %ebx,%esi
+ 41a:	75 e4                	jne    400 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 41f:	5b                   	pop    %ebx
+ 420:	5e                   	pop    %esi
+ 421:	5f                   	pop    %edi
+ 422:	5d                   	pop    %ebp
+ 423:	c3                   	ret    
+ 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 428:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 42f:	eb 87                	jmp    3b8 <printint+0x28>
+ 431:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 438:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 43f:	90                   	nop
+
+00000440 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 440:	f3 0f 1e fb          	endbr32 
+ 444:	55                   	push   %ebp
+ 445:	89 e5                	mov    %esp,%ebp
+ 447:	57                   	push   %edi
+ 448:	56                   	push   %esi
+ 449:	53                   	push   %ebx
+ 44a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 44d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 450:	0f b6 1e             	movzbl (%esi),%ebx
+ 453:	84 db                	test   %bl,%bl
+ 455:	0f 84 b4 00 00 00    	je     50f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 45b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 45e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 461:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 464:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 466:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 469:	eb 33                	jmp    49e <printf+0x5e>
+ 46b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 46f:	90                   	nop
+ 470:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 473:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 478:	83 f8 25             	cmp    $0x25,%eax
+ 47b:	74 17                	je     494 <printf+0x54>
+  write(fd, &c, 1);
+ 47d:	83 ec 04             	sub    $0x4,%esp
+ 480:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 483:	6a 01                	push   $0x1
+ 485:	57                   	push   %edi
+ 486:	ff 75 08             	pushl  0x8(%ebp)
+ 489:	e8 55 fe ff ff       	call   2e3 <write>
+ 48e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 491:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 494:	0f b6 1e             	movzbl (%esi),%ebx
+ 497:	83 c6 01             	add    $0x1,%esi
+ 49a:	84 db                	test   %bl,%bl
+ 49c:	74 71                	je     50f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 49e:	0f be cb             	movsbl %bl,%ecx
+ 4a1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4a4:	85 d2                	test   %edx,%edx
+ 4a6:	74 c8                	je     470 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4a8:	83 fa 25             	cmp    $0x25,%edx
+ 4ab:	75 e7                	jne    494 <printf+0x54>
+      if(c == 'd'){
+ 4ad:	83 f8 64             	cmp    $0x64,%eax
+ 4b0:	0f 84 9a 00 00 00    	je     550 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4b6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4bc:	83 f9 70             	cmp    $0x70,%ecx
+ 4bf:	74 5f                	je     520 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4c1:	83 f8 73             	cmp    $0x73,%eax
+ 4c4:	0f 84 d6 00 00 00    	je     5a0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ca:	83 f8 63             	cmp    $0x63,%eax
+ 4cd:	0f 84 8d 00 00 00    	je     560 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4d3:	83 f8 25             	cmp    $0x25,%eax
+ 4d6:	0f 84 b4 00 00 00    	je     590 <printf+0x150>
+  write(fd, &c, 1);
+ 4dc:	83 ec 04             	sub    $0x4,%esp
+ 4df:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4e3:	6a 01                	push   $0x1
+ 4e5:	57                   	push   %edi
+ 4e6:	ff 75 08             	pushl  0x8(%ebp)
+ 4e9:	e8 f5 fd ff ff       	call   2e3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4ee:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 4f1:	83 c4 0c             	add    $0xc,%esp
+ 4f4:	6a 01                	push   $0x1
+ 4f6:	83 c6 01             	add    $0x1,%esi
+ 4f9:	57                   	push   %edi
+ 4fa:	ff 75 08             	pushl  0x8(%ebp)
+ 4fd:	e8 e1 fd ff ff       	call   2e3 <write>
+  for(i = 0; fmt[i]; i++){
+ 502:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 506:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 509:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 50b:	84 db                	test   %bl,%bl
+ 50d:	75 8f                	jne    49e <printf+0x5e>
+    }
+  }
+}
+ 50f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 512:	5b                   	pop    %ebx
+ 513:	5e                   	pop    %esi
+ 514:	5f                   	pop    %edi
+ 515:	5d                   	pop    %ebp
+ 516:	c3                   	ret    
+ 517:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 51e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 520:	83 ec 0c             	sub    $0xc,%esp
+ 523:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 528:	6a 00                	push   $0x0
+ 52a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 52d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 530:	8b 13                	mov    (%ebx),%edx
+ 532:	e8 59 fe ff ff       	call   390 <printint>
+        ap++;
+ 537:	89 d8                	mov    %ebx,%eax
+ 539:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 53c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 53e:	83 c0 04             	add    $0x4,%eax
+ 541:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 544:	e9 4b ff ff ff       	jmp    494 <printf+0x54>
+ 549:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 550:	83 ec 0c             	sub    $0xc,%esp
+ 553:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 558:	6a 01                	push   $0x1
+ 55a:	eb ce                	jmp    52a <printf+0xea>
+ 55c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 560:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 563:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 566:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 568:	6a 01                	push   $0x1
+        ap++;
+ 56a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 56d:	57                   	push   %edi
+ 56e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 571:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 574:	e8 6a fd ff ff       	call   2e3 <write>
+        ap++;
+ 579:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 57c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 57f:	31 d2                	xor    %edx,%edx
+ 581:	e9 0e ff ff ff       	jmp    494 <printf+0x54>
+ 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 58d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 590:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 593:	83 ec 04             	sub    $0x4,%esp
+ 596:	e9 59 ff ff ff       	jmp    4f4 <printf+0xb4>
+ 59b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 59f:	90                   	nop
+        s = (char*)*ap;
+ 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5a3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5a5:	83 c0 04             	add    $0x4,%eax
+ 5a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5ab:	85 db                	test   %ebx,%ebx
+ 5ad:	74 17                	je     5c6 <printf+0x186>
+        while(*s != 0){
+ 5af:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5b2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5b4:	84 c0                	test   %al,%al
+ 5b6:	0f 84 d8 fe ff ff    	je     494 <printf+0x54>
+ 5bc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5bf:	89 de                	mov    %ebx,%esi
+ 5c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5c4:	eb 1a                	jmp    5e0 <printf+0x1a0>
+          s = "(null)";
+ 5c6:	bb cf 07 00 00       	mov    $0x7cf,%ebx
+        while(*s != 0){
+ 5cb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ce:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5d3:	89 de                	mov    %ebx,%esi
+ 5d5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5df:	90                   	nop
+  write(fd, &c, 1);
+ 5e0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5e3:	83 c6 01             	add    $0x1,%esi
+ 5e6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5e9:	6a 01                	push   $0x1
+ 5eb:	57                   	push   %edi
+ 5ec:	53                   	push   %ebx
+ 5ed:	e8 f1 fc ff ff       	call   2e3 <write>
+        while(*s != 0){
+ 5f2:	0f b6 06             	movzbl (%esi),%eax
+ 5f5:	83 c4 10             	add    $0x10,%esp
+ 5f8:	84 c0                	test   %al,%al
+ 5fa:	75 e4                	jne    5e0 <printf+0x1a0>
+ 5fc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 5ff:	31 d2                	xor    %edx,%edx
+ 601:	e9 8e fe ff ff       	jmp    494 <printf+0x54>
+ 606:	66 90                	xchg   %ax,%ax
+ 608:	66 90                	xchg   %ax,%ax
+ 60a:	66 90                	xchg   %ax,%ax
+ 60c:	66 90                	xchg   %ax,%ax
+ 60e:	66 90                	xchg   %ax,%ax
+
+00000610 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 610:	f3 0f 1e fb          	endbr32 
+ 614:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 615:	a1 84 0a 00 00       	mov    0xa84,%eax
+{
+ 61a:	89 e5                	mov    %esp,%ebp
+ 61c:	57                   	push   %edi
+ 61d:	56                   	push   %esi
+ 61e:	53                   	push   %ebx
+ 61f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 622:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 624:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 627:	39 c8                	cmp    %ecx,%eax
+ 629:	73 15                	jae    640 <free+0x30>
+ 62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 62f:	90                   	nop
+ 630:	39 d1                	cmp    %edx,%ecx
+ 632:	72 14                	jb     648 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 634:	39 d0                	cmp    %edx,%eax
+ 636:	73 10                	jae    648 <free+0x38>
+{
+ 638:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 63a:	8b 10                	mov    (%eax),%edx
+ 63c:	39 c8                	cmp    %ecx,%eax
+ 63e:	72 f0                	jb     630 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 640:	39 d0                	cmp    %edx,%eax
+ 642:	72 f4                	jb     638 <free+0x28>
+ 644:	39 d1                	cmp    %edx,%ecx
+ 646:	73 f0                	jae    638 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 64e:	39 fa                	cmp    %edi,%edx
+ 650:	74 1e                	je     670 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 652:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 655:	8b 50 04             	mov    0x4(%eax),%edx
+ 658:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 65b:	39 f1                	cmp    %esi,%ecx
+ 65d:	74 28                	je     687 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 65f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 661:	5b                   	pop    %ebx
+  freep = p;
+ 662:	a3 84 0a 00 00       	mov    %eax,0xa84
+}
+ 667:	5e                   	pop    %esi
+ 668:	5f                   	pop    %edi
+ 669:	5d                   	pop    %ebp
+ 66a:	c3                   	ret    
+ 66b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 66f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 670:	03 72 04             	add    0x4(%edx),%esi
+ 673:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 676:	8b 10                	mov    (%eax),%edx
+ 678:	8b 12                	mov    (%edx),%edx
+ 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 67d:	8b 50 04             	mov    0x4(%eax),%edx
+ 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 683:	39 f1                	cmp    %esi,%ecx
+ 685:	75 d8                	jne    65f <free+0x4f>
+    p->s.size += bp->s.size;
+ 687:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 68a:	a3 84 0a 00 00       	mov    %eax,0xa84
+    p->s.size += bp->s.size;
+ 68f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 692:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 695:	89 10                	mov    %edx,(%eax)
+}
+ 697:	5b                   	pop    %ebx
+ 698:	5e                   	pop    %esi
+ 699:	5f                   	pop    %edi
+ 69a:	5d                   	pop    %ebp
+ 69b:	c3                   	ret    
+ 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006a0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6a0:	f3 0f 1e fb          	endbr32 
+ 6a4:	55                   	push   %ebp
+ 6a5:	89 e5                	mov    %esp,%ebp
+ 6a7:	57                   	push   %edi
+ 6a8:	56                   	push   %esi
+ 6a9:	53                   	push   %ebx
+ 6aa:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6b0:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6b6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6b9:	c1 ee 03             	shr    $0x3,%esi
+ 6bc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6bf:	85 ff                	test   %edi,%edi
+ 6c1:	0f 84 a9 00 00 00    	je     770 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6c7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6c9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6cc:	39 f1                	cmp    %esi,%ecx
+ 6ce:	73 6d                	jae    73d <malloc+0x9d>
+ 6d0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6d6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6db:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6de:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6e5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6e8:	eb 17                	jmp    701 <malloc+0x61>
+ 6ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6f0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 6f2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6f5:	39 f1                	cmp    %esi,%ecx
+ 6f7:	73 4f                	jae    748 <malloc+0xa8>
+ 6f9:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
+ 6ff:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 701:	39 c7                	cmp    %eax,%edi
+ 703:	75 eb                	jne    6f0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 705:	83 ec 0c             	sub    $0xc,%esp
+ 708:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 70b:	e8 3b fc ff ff       	call   34b <sbrk>
+  if(p == (char*)-1)
+ 710:	83 c4 10             	add    $0x10,%esp
+ 713:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 716:	74 1b                	je     733 <malloc+0x93>
+  hp->s.size = nu;
+ 718:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 71b:	83 ec 0c             	sub    $0xc,%esp
+ 71e:	83 c0 08             	add    $0x8,%eax
+ 721:	50                   	push   %eax
+ 722:	e8 e9 fe ff ff       	call   610 <free>
+  return freep;
+ 727:	a1 84 0a 00 00       	mov    0xa84,%eax
+      if((p = morecore(nunits)) == 0)
+ 72c:	83 c4 10             	add    $0x10,%esp
+ 72f:	85 c0                	test   %eax,%eax
+ 731:	75 bd                	jne    6f0 <malloc+0x50>
+        return 0;
+  }
+}
+ 733:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 736:	31 c0                	xor    %eax,%eax
+}
+ 738:	5b                   	pop    %ebx
+ 739:	5e                   	pop    %esi
+ 73a:	5f                   	pop    %edi
+ 73b:	5d                   	pop    %ebp
+ 73c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 73d:	89 c2                	mov    %eax,%edx
+ 73f:	89 f8                	mov    %edi,%eax
+ 741:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 748:	39 ce                	cmp    %ecx,%esi
+ 74a:	74 54                	je     7a0 <malloc+0x100>
+        p->s.size -= nunits;
+ 74c:	29 f1                	sub    %esi,%ecx
+ 74e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 751:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 754:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 757:	a3 84 0a 00 00       	mov    %eax,0xa84
+}
+ 75c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 75f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 762:	5b                   	pop    %ebx
+ 763:	5e                   	pop    %esi
+ 764:	5f                   	pop    %edi
+ 765:	5d                   	pop    %ebp
+ 766:	c3                   	ret    
+ 767:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 76e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 770:	c7 05 84 0a 00 00 88 	movl   $0xa88,0xa84
+ 777:	0a 00 00 
+    base.s.size = 0;
+ 77a:	bf 88 0a 00 00       	mov    $0xa88,%edi
+    base.s.ptr = freep = prevp = &base;
+ 77f:	c7 05 88 0a 00 00 88 	movl   $0xa88,0xa88
+ 786:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 789:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 78b:	c7 05 8c 0a 00 00 00 	movl   $0x0,0xa8c
+ 792:	00 00 00 
+    if(p->s.size >= nunits){
+ 795:	e9 36 ff ff ff       	jmp    6d0 <malloc+0x30>
+ 79a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7a0:	8b 0a                	mov    (%edx),%ecx
+ 7a2:	89 08                	mov    %ecx,(%eax)
+ 7a4:	eb b1                	jmp    757 <malloc+0xb7>
diff -ruN xv6-public/ln.d xv6-new/ln.d
--- xv6-public/ln.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/ln.d	2022-10-07 22:43:43.351886840 +0530
@@ -0,0 +1 @@
+ln.o: ln.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/ln.o and xv6-new/ln.o differ
diff -ruN xv6-public/ln.sym xv6-new/ln.sym
--- xv6-public/ln.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/ln.sym	2022-10-07 22:43:43.351886840 +0530
@@ -0,0 +1,62 @@
+00000000 .text
+000007a8 .rodata
+000007ec .eh_frame
+00000a84 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 ln.c
+00000000 ulib.c
+00000000 printf.c
+00000390 printint
+000007d8 digits.1096
+00000000 umalloc.c
+00000a84 freep
+00000a88 base
+00000060 strcpy
+00000440 printf
+00000290 memmove
+0000030b mknod
+00000180 gets
+00000343 getpid
+000006a0 malloc
+00000353 sleep
+00000383 get_burst_time
+000002d3 pipe
+000002e3 write
+0000031b fstat
+000002f3 kill
+00000333 chdir
+000002fb exec
+000002cb wait
+000002db read
+00000313 unlink
+000002bb fork
+0000034b sbrk
+0000035b uptime
+00000a84 __bss_start
+00000120 memset
+00000000 main
+0000037b set_burst_time
+00000090 strcmp
+0000033b dup
+0000036b getMaxPid
+00000363 getNumProc
+00000373 getProcInfo
+00000200 stat
+00000a84 _edata
+00000a90 _end
+00000323 link
+000002c3 exit
+00000250 atoi
+000000e0 strlen
+00000303 open
+00000140 strchr
+0000032b mkdir
+000002eb close
+00000610 free
Binary files xv6-public/log.o and xv6-new/log.o differ
diff -ruN xv6-public/ls.asm xv6-new/ls.asm
--- xv6-public/ls.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/ls.asm	2022-10-07 22:43:43.351886840 +0530
@@ -0,0 +1,1496 @@
+
+_ls:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  close(fd);
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	56                   	push   %esi
+  12:	53                   	push   %ebx
+  13:	51                   	push   %ecx
+  14:	83 ec 0c             	sub    $0xc,%esp
+  17:	8b 01                	mov    (%ecx),%eax
+  19:	8b 51 04             	mov    0x4(%ecx),%edx
+  int i;
+
+  if(argc < 2){
+  1c:	83 f8 01             	cmp    $0x1,%eax
+  1f:	7e 28                	jle    49 <main+0x49>
+  21:	8d 5a 04             	lea    0x4(%edx),%ebx
+  24:	8d 34 82             	lea    (%edx,%eax,4),%esi
+  27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  2e:	66 90                	xchg   %ax,%ax
+    ls(".");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+    ls(argv[i]);
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	83 c3 04             	add    $0x4,%ebx
+  38:	e8 c3 00 00 00       	call   100 <ls>
+  for(i=1; i<argc; i++)
+  3d:	83 c4 10             	add    $0x10,%esp
+  40:	39 f3                	cmp    %esi,%ebx
+  42:	75 ec                	jne    30 <main+0x30>
+  exit();
+  44:	e8 5a 05 00 00       	call   5a3 <exit>
+    ls(".");
+  49:	83 ec 0c             	sub    $0xc,%esp
+  4c:	68 d0 0a 00 00       	push   $0xad0
+  51:	e8 aa 00 00 00       	call   100 <ls>
+    exit();
+  56:	e8 48 05 00 00       	call   5a3 <exit>
+  5b:	66 90                	xchg   %ax,%ax
+  5d:	66 90                	xchg   %ax,%ax
+  5f:	90                   	nop
+
+00000060 <fmtname>:
+{
+  60:	f3 0f 1e fb          	endbr32 
+  64:	55                   	push   %ebp
+  65:	89 e5                	mov    %esp,%ebp
+  67:	56                   	push   %esi
+  68:	53                   	push   %ebx
+  69:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(p=path+strlen(path); p >= path && *p != '/'; p--)
+  6c:	83 ec 0c             	sub    $0xc,%esp
+  6f:	56                   	push   %esi
+  70:	e8 4b 03 00 00       	call   3c0 <strlen>
+  75:	83 c4 10             	add    $0x10,%esp
+  78:	01 f0                	add    %esi,%eax
+  7a:	89 c3                	mov    %eax,%ebx
+  7c:	73 0b                	jae    89 <fmtname+0x29>
+  7e:	eb 0e                	jmp    8e <fmtname+0x2e>
+  80:	8d 43 ff             	lea    -0x1(%ebx),%eax
+  83:	39 c6                	cmp    %eax,%esi
+  85:	77 0a                	ja     91 <fmtname+0x31>
+  87:	89 c3                	mov    %eax,%ebx
+  89:	80 3b 2f             	cmpb   $0x2f,(%ebx)
+  8c:	75 f2                	jne    80 <fmtname+0x20>
+  8e:	83 c3 01             	add    $0x1,%ebx
+  if(strlen(p) >= DIRSIZ)
+  91:	83 ec 0c             	sub    $0xc,%esp
+  94:	53                   	push   %ebx
+  95:	e8 26 03 00 00       	call   3c0 <strlen>
+  9a:	83 c4 10             	add    $0x10,%esp
+  9d:	83 f8 0d             	cmp    $0xd,%eax
+  a0:	77 4a                	ja     ec <fmtname+0x8c>
+  memmove(buf, p, strlen(p));
+  a2:	83 ec 0c             	sub    $0xc,%esp
+  a5:	53                   	push   %ebx
+  a6:	e8 15 03 00 00       	call   3c0 <strlen>
+  ab:	83 c4 0c             	add    $0xc,%esp
+  ae:	50                   	push   %eax
+  af:	53                   	push   %ebx
+  b0:	68 04 0e 00 00       	push   $0xe04
+  b5:	e8 b6 04 00 00       	call   570 <memmove>
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  ba:	89 1c 24             	mov    %ebx,(%esp)
+  bd:	e8 fe 02 00 00       	call   3c0 <strlen>
+  c2:	89 1c 24             	mov    %ebx,(%esp)
+  return buf;
+  c5:	bb 04 0e 00 00       	mov    $0xe04,%ebx
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  ca:	89 c6                	mov    %eax,%esi
+  cc:	e8 ef 02 00 00       	call   3c0 <strlen>
+  d1:	ba 0e 00 00 00       	mov    $0xe,%edx
+  d6:	83 c4 0c             	add    $0xc,%esp
+  d9:	29 f2                	sub    %esi,%edx
+  db:	05 04 0e 00 00       	add    $0xe04,%eax
+  e0:	52                   	push   %edx
+  e1:	6a 20                	push   $0x20
+  e3:	50                   	push   %eax
+  e4:	e8 17 03 00 00       	call   400 <memset>
+  return buf;
+  e9:	83 c4 10             	add    $0x10,%esp
+}
+  ec:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  ef:	89 d8                	mov    %ebx,%eax
+  f1:	5b                   	pop    %ebx
+  f2:	5e                   	pop    %esi
+  f3:	5d                   	pop    %ebp
+  f4:	c3                   	ret    
+  f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000100 <ls>:
+{
+ 100:	f3 0f 1e fb          	endbr32 
+ 104:	55                   	push   %ebp
+ 105:	89 e5                	mov    %esp,%ebp
+ 107:	57                   	push   %edi
+ 108:	56                   	push   %esi
+ 109:	53                   	push   %ebx
+ 10a:	81 ec 64 02 00 00    	sub    $0x264,%esp
+ 110:	8b 7d 08             	mov    0x8(%ebp),%edi
+  if((fd = open(path, 0)) < 0){
+ 113:	6a 00                	push   $0x0
+ 115:	57                   	push   %edi
+ 116:	e8 c8 04 00 00       	call   5e3 <open>
+ 11b:	83 c4 10             	add    $0x10,%esp
+ 11e:	85 c0                	test   %eax,%eax
+ 120:	0f 88 9a 01 00 00    	js     2c0 <ls+0x1c0>
+  if(fstat(fd, &st) < 0){
+ 126:	83 ec 08             	sub    $0x8,%esp
+ 129:	8d b5 d4 fd ff ff    	lea    -0x22c(%ebp),%esi
+ 12f:	89 c3                	mov    %eax,%ebx
+ 131:	56                   	push   %esi
+ 132:	50                   	push   %eax
+ 133:	e8 c3 04 00 00       	call   5fb <fstat>
+ 138:	83 c4 10             	add    $0x10,%esp
+ 13b:	85 c0                	test   %eax,%eax
+ 13d:	0f 88 bd 01 00 00    	js     300 <ls+0x200>
+  switch(st.type){
+ 143:	0f b7 85 d4 fd ff ff 	movzwl -0x22c(%ebp),%eax
+ 14a:	66 83 f8 01          	cmp    $0x1,%ax
+ 14e:	74 60                	je     1b0 <ls+0xb0>
+ 150:	66 83 f8 02          	cmp    $0x2,%ax
+ 154:	74 1a                	je     170 <ls+0x70>
+  close(fd);
+ 156:	83 ec 0c             	sub    $0xc,%esp
+ 159:	53                   	push   %ebx
+ 15a:	e8 6c 04 00 00       	call   5cb <close>
+ 15f:	83 c4 10             	add    $0x10,%esp
+}
+ 162:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 165:	5b                   	pop    %ebx
+ 166:	5e                   	pop    %esi
+ 167:	5f                   	pop    %edi
+ 168:	5d                   	pop    %ebp
+ 169:	c3                   	ret    
+ 16a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    printf(1, "%s %d %d %d\n", fmtname(path), st.type, st.ino, st.size);
+ 170:	83 ec 0c             	sub    $0xc,%esp
+ 173:	8b 95 e4 fd ff ff    	mov    -0x21c(%ebp),%edx
+ 179:	8b b5 dc fd ff ff    	mov    -0x224(%ebp),%esi
+ 17f:	57                   	push   %edi
+ 180:	89 95 b4 fd ff ff    	mov    %edx,-0x24c(%ebp)
+ 186:	e8 d5 fe ff ff       	call   60 <fmtname>
+ 18b:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
+ 191:	59                   	pop    %ecx
+ 192:	5f                   	pop    %edi
+ 193:	52                   	push   %edx
+ 194:	56                   	push   %esi
+ 195:	6a 02                	push   $0x2
+ 197:	50                   	push   %eax
+ 198:	68 b0 0a 00 00       	push   $0xab0
+ 19d:	6a 01                	push   $0x1
+ 19f:	e8 7c 05 00 00       	call   720 <printf>
+    break;
+ 1a4:	83 c4 20             	add    $0x20,%esp
+ 1a7:	eb ad                	jmp    156 <ls+0x56>
+ 1a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
+ 1b0:	83 ec 0c             	sub    $0xc,%esp
+ 1b3:	57                   	push   %edi
+ 1b4:	e8 07 02 00 00       	call   3c0 <strlen>
+ 1b9:	83 c4 10             	add    $0x10,%esp
+ 1bc:	83 c0 10             	add    $0x10,%eax
+ 1bf:	3d 00 02 00 00       	cmp    $0x200,%eax
+ 1c4:	0f 87 16 01 00 00    	ja     2e0 <ls+0x1e0>
+    strcpy(buf, path);
+ 1ca:	83 ec 08             	sub    $0x8,%esp
+ 1cd:	57                   	push   %edi
+ 1ce:	8d bd e8 fd ff ff    	lea    -0x218(%ebp),%edi
+ 1d4:	57                   	push   %edi
+ 1d5:	e8 66 01 00 00       	call   340 <strcpy>
+    p = buf+strlen(buf);
+ 1da:	89 3c 24             	mov    %edi,(%esp)
+ 1dd:	e8 de 01 00 00       	call   3c0 <strlen>
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 1e2:	83 c4 10             	add    $0x10,%esp
+    p = buf+strlen(buf);
+ 1e5:	01 f8                	add    %edi,%eax
+    *p++ = '/';
+ 1e7:	8d 48 01             	lea    0x1(%eax),%ecx
+    p = buf+strlen(buf);
+ 1ea:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
+    *p++ = '/';
+ 1f0:	89 8d a4 fd ff ff    	mov    %ecx,-0x25c(%ebp)
+ 1f6:	c6 00 2f             	movb   $0x2f,(%eax)
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 200:	83 ec 04             	sub    $0x4,%esp
+ 203:	8d 85 c4 fd ff ff    	lea    -0x23c(%ebp),%eax
+ 209:	6a 10                	push   $0x10
+ 20b:	50                   	push   %eax
+ 20c:	53                   	push   %ebx
+ 20d:	e8 a9 03 00 00       	call   5bb <read>
+ 212:	83 c4 10             	add    $0x10,%esp
+ 215:	83 f8 10             	cmp    $0x10,%eax
+ 218:	0f 85 38 ff ff ff    	jne    156 <ls+0x56>
+      if(de.inum == 0)
+ 21e:	66 83 bd c4 fd ff ff 	cmpw   $0x0,-0x23c(%ebp)
+ 225:	00 
+ 226:	74 d8                	je     200 <ls+0x100>
+      memmove(p, de.name, DIRSIZ);
+ 228:	83 ec 04             	sub    $0x4,%esp
+ 22b:	8d 85 c6 fd ff ff    	lea    -0x23a(%ebp),%eax
+ 231:	6a 0e                	push   $0xe
+ 233:	50                   	push   %eax
+ 234:	ff b5 a4 fd ff ff    	pushl  -0x25c(%ebp)
+ 23a:	e8 31 03 00 00       	call   570 <memmove>
+      p[DIRSIZ] = 0;
+ 23f:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
+ 245:	c6 40 0f 00          	movb   $0x0,0xf(%eax)
+      if(stat(buf, &st) < 0){
+ 249:	58                   	pop    %eax
+ 24a:	5a                   	pop    %edx
+ 24b:	56                   	push   %esi
+ 24c:	57                   	push   %edi
+ 24d:	e8 8e 02 00 00       	call   4e0 <stat>
+ 252:	83 c4 10             	add    $0x10,%esp
+ 255:	85 c0                	test   %eax,%eax
+ 257:	0f 88 cb 00 00 00    	js     328 <ls+0x228>
+      printf(1, "%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
+ 25d:	83 ec 0c             	sub    $0xc,%esp
+ 260:	8b 8d e4 fd ff ff    	mov    -0x21c(%ebp),%ecx
+ 266:	8b 95 dc fd ff ff    	mov    -0x224(%ebp),%edx
+ 26c:	57                   	push   %edi
+ 26d:	0f bf 85 d4 fd ff ff 	movswl -0x22c(%ebp),%eax
+ 274:	89 8d ac fd ff ff    	mov    %ecx,-0x254(%ebp)
+ 27a:	89 95 b0 fd ff ff    	mov    %edx,-0x250(%ebp)
+ 280:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
+ 286:	e8 d5 fd ff ff       	call   60 <fmtname>
+ 28b:	5a                   	pop    %edx
+ 28c:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
+ 292:	59                   	pop    %ecx
+ 293:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
+ 299:	51                   	push   %ecx
+ 29a:	52                   	push   %edx
+ 29b:	ff b5 b4 fd ff ff    	pushl  -0x24c(%ebp)
+ 2a1:	50                   	push   %eax
+ 2a2:	68 b0 0a 00 00       	push   $0xab0
+ 2a7:	6a 01                	push   $0x1
+ 2a9:	e8 72 04 00 00       	call   720 <printf>
+ 2ae:	83 c4 20             	add    $0x20,%esp
+ 2b1:	e9 4a ff ff ff       	jmp    200 <ls+0x100>
+ 2b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2bd:	8d 76 00             	lea    0x0(%esi),%esi
+    printf(2, "ls: cannot open %s\n", path);
+ 2c0:	83 ec 04             	sub    $0x4,%esp
+ 2c3:	57                   	push   %edi
+ 2c4:	68 88 0a 00 00       	push   $0xa88
+ 2c9:	6a 02                	push   $0x2
+ 2cb:	e8 50 04 00 00       	call   720 <printf>
+    return;
+ 2d0:	83 c4 10             	add    $0x10,%esp
+}
+ 2d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2d6:	5b                   	pop    %ebx
+ 2d7:	5e                   	pop    %esi
+ 2d8:	5f                   	pop    %edi
+ 2d9:	5d                   	pop    %ebp
+ 2da:	c3                   	ret    
+ 2db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2df:	90                   	nop
+      printf(1, "ls: path too long\n");
+ 2e0:	83 ec 08             	sub    $0x8,%esp
+ 2e3:	68 bd 0a 00 00       	push   $0xabd
+ 2e8:	6a 01                	push   $0x1
+ 2ea:	e8 31 04 00 00       	call   720 <printf>
+      break;
+ 2ef:	83 c4 10             	add    $0x10,%esp
+ 2f2:	e9 5f fe ff ff       	jmp    156 <ls+0x56>
+ 2f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2fe:	66 90                	xchg   %ax,%ax
+    printf(2, "ls: cannot stat %s\n", path);
+ 300:	83 ec 04             	sub    $0x4,%esp
+ 303:	57                   	push   %edi
+ 304:	68 9c 0a 00 00       	push   $0xa9c
+ 309:	6a 02                	push   $0x2
+ 30b:	e8 10 04 00 00       	call   720 <printf>
+    close(fd);
+ 310:	89 1c 24             	mov    %ebx,(%esp)
+ 313:	e8 b3 02 00 00       	call   5cb <close>
+    return;
+ 318:	83 c4 10             	add    $0x10,%esp
+}
+ 31b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 31e:	5b                   	pop    %ebx
+ 31f:	5e                   	pop    %esi
+ 320:	5f                   	pop    %edi
+ 321:	5d                   	pop    %ebp
+ 322:	c3                   	ret    
+ 323:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 327:	90                   	nop
+        printf(1, "ls: cannot stat %s\n", buf);
+ 328:	83 ec 04             	sub    $0x4,%esp
+ 32b:	57                   	push   %edi
+ 32c:	68 9c 0a 00 00       	push   $0xa9c
+ 331:	6a 01                	push   $0x1
+ 333:	e8 e8 03 00 00       	call   720 <printf>
+        continue;
+ 338:	83 c4 10             	add    $0x10,%esp
+ 33b:	e9 c0 fe ff ff       	jmp    200 <ls+0x100>
+
+00000340 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 340:	f3 0f 1e fb          	endbr32 
+ 344:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 345:	31 c0                	xor    %eax,%eax
+{
+ 347:	89 e5                	mov    %esp,%ebp
+ 349:	53                   	push   %ebx
+ 34a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 34d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 350:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 354:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 357:	83 c0 01             	add    $0x1,%eax
+ 35a:	84 d2                	test   %dl,%dl
+ 35c:	75 f2                	jne    350 <strcpy+0x10>
+    ;
+  return os;
+}
+ 35e:	89 c8                	mov    %ecx,%eax
+ 360:	5b                   	pop    %ebx
+ 361:	5d                   	pop    %ebp
+ 362:	c3                   	ret    
+ 363:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000370 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 370:	f3 0f 1e fb          	endbr32 
+ 374:	55                   	push   %ebp
+ 375:	89 e5                	mov    %esp,%ebp
+ 377:	53                   	push   %ebx
+ 378:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 37b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 37e:	0f b6 01             	movzbl (%ecx),%eax
+ 381:	0f b6 1a             	movzbl (%edx),%ebx
+ 384:	84 c0                	test   %al,%al
+ 386:	75 19                	jne    3a1 <strcmp+0x31>
+ 388:	eb 26                	jmp    3b0 <strcmp+0x40>
+ 38a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 390:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 394:	83 c1 01             	add    $0x1,%ecx
+ 397:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 39a:	0f b6 1a             	movzbl (%edx),%ebx
+ 39d:	84 c0                	test   %al,%al
+ 39f:	74 0f                	je     3b0 <strcmp+0x40>
+ 3a1:	38 d8                	cmp    %bl,%al
+ 3a3:	74 eb                	je     390 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 3a5:	29 d8                	sub    %ebx,%eax
+}
+ 3a7:	5b                   	pop    %ebx
+ 3a8:	5d                   	pop    %ebp
+ 3a9:	c3                   	ret    
+ 3aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 3b0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 3b2:	29 d8                	sub    %ebx,%eax
+}
+ 3b4:	5b                   	pop    %ebx
+ 3b5:	5d                   	pop    %ebp
+ 3b6:	c3                   	ret    
+ 3b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3be:	66 90                	xchg   %ax,%ax
+
+000003c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 3c0:	f3 0f 1e fb          	endbr32 
+ 3c4:	55                   	push   %ebp
+ 3c5:	89 e5                	mov    %esp,%ebp
+ 3c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3ca:	80 3a 00             	cmpb   $0x0,(%edx)
+ 3cd:	74 21                	je     3f0 <strlen+0x30>
+ 3cf:	31 c0                	xor    %eax,%eax
+ 3d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3d8:	83 c0 01             	add    $0x1,%eax
+ 3db:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 3df:	89 c1                	mov    %eax,%ecx
+ 3e1:	75 f5                	jne    3d8 <strlen+0x18>
+    ;
+  return n;
+}
+ 3e3:	89 c8                	mov    %ecx,%eax
+ 3e5:	5d                   	pop    %ebp
+ 3e6:	c3                   	ret    
+ 3e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ee:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 3f0:	31 c9                	xor    %ecx,%ecx
+}
+ 3f2:	5d                   	pop    %ebp
+ 3f3:	89 c8                	mov    %ecx,%eax
+ 3f5:	c3                   	ret    
+ 3f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000400 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 400:	f3 0f 1e fb          	endbr32 
+ 404:	55                   	push   %ebp
+ 405:	89 e5                	mov    %esp,%ebp
+ 407:	57                   	push   %edi
+ 408:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 40b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 40e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 411:	89 d7                	mov    %edx,%edi
+ 413:	fc                   	cld    
+ 414:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 416:	89 d0                	mov    %edx,%eax
+ 418:	5f                   	pop    %edi
+ 419:	5d                   	pop    %ebp
+ 41a:	c3                   	ret    
+ 41b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 41f:	90                   	nop
+
+00000420 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 420:	f3 0f 1e fb          	endbr32 
+ 424:	55                   	push   %ebp
+ 425:	89 e5                	mov    %esp,%ebp
+ 427:	8b 45 08             	mov    0x8(%ebp),%eax
+ 42a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 42e:	0f b6 10             	movzbl (%eax),%edx
+ 431:	84 d2                	test   %dl,%dl
+ 433:	75 16                	jne    44b <strchr+0x2b>
+ 435:	eb 21                	jmp    458 <strchr+0x38>
+ 437:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 43e:	66 90                	xchg   %ax,%ax
+ 440:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 444:	83 c0 01             	add    $0x1,%eax
+ 447:	84 d2                	test   %dl,%dl
+ 449:	74 0d                	je     458 <strchr+0x38>
+    if(*s == c)
+ 44b:	38 d1                	cmp    %dl,%cl
+ 44d:	75 f1                	jne    440 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 44f:	5d                   	pop    %ebp
+ 450:	c3                   	ret    
+ 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 458:	31 c0                	xor    %eax,%eax
+}
+ 45a:	5d                   	pop    %ebp
+ 45b:	c3                   	ret    
+ 45c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000460 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 460:	f3 0f 1e fb          	endbr32 
+ 464:	55                   	push   %ebp
+ 465:	89 e5                	mov    %esp,%ebp
+ 467:	57                   	push   %edi
+ 468:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 469:	31 f6                	xor    %esi,%esi
+{
+ 46b:	53                   	push   %ebx
+ 46c:	89 f3                	mov    %esi,%ebx
+ 46e:	83 ec 1c             	sub    $0x1c,%esp
+ 471:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 474:	eb 33                	jmp    4a9 <gets+0x49>
+ 476:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 47d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 480:	83 ec 04             	sub    $0x4,%esp
+ 483:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 486:	6a 01                	push   $0x1
+ 488:	50                   	push   %eax
+ 489:	6a 00                	push   $0x0
+ 48b:	e8 2b 01 00 00       	call   5bb <read>
+    if(cc < 1)
+ 490:	83 c4 10             	add    $0x10,%esp
+ 493:	85 c0                	test   %eax,%eax
+ 495:	7e 1c                	jle    4b3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 497:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 49b:	83 c7 01             	add    $0x1,%edi
+ 49e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 4a1:	3c 0a                	cmp    $0xa,%al
+ 4a3:	74 23                	je     4c8 <gets+0x68>
+ 4a5:	3c 0d                	cmp    $0xd,%al
+ 4a7:	74 1f                	je     4c8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 4a9:	83 c3 01             	add    $0x1,%ebx
+ 4ac:	89 fe                	mov    %edi,%esi
+ 4ae:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 4b1:	7c cd                	jl     480 <gets+0x20>
+ 4b3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 4b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 4b8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4be:	5b                   	pop    %ebx
+ 4bf:	5e                   	pop    %esi
+ 4c0:	5f                   	pop    %edi
+ 4c1:	5d                   	pop    %ebp
+ 4c2:	c3                   	ret    
+ 4c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4c7:	90                   	nop
+ 4c8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4cb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4ce:	01 de                	add    %ebx,%esi
+ 4d0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 4d2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4d8:	5b                   	pop    %ebx
+ 4d9:	5e                   	pop    %esi
+ 4da:	5f                   	pop    %edi
+ 4db:	5d                   	pop    %ebp
+ 4dc:	c3                   	ret    
+ 4dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000004e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 4e0:	f3 0f 1e fb          	endbr32 
+ 4e4:	55                   	push   %ebp
+ 4e5:	89 e5                	mov    %esp,%ebp
+ 4e7:	56                   	push   %esi
+ 4e8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 4e9:	83 ec 08             	sub    $0x8,%esp
+ 4ec:	6a 00                	push   $0x0
+ 4ee:	ff 75 08             	pushl  0x8(%ebp)
+ 4f1:	e8 ed 00 00 00       	call   5e3 <open>
+  if(fd < 0)
+ 4f6:	83 c4 10             	add    $0x10,%esp
+ 4f9:	85 c0                	test   %eax,%eax
+ 4fb:	78 2b                	js     528 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 4fd:	83 ec 08             	sub    $0x8,%esp
+ 500:	ff 75 0c             	pushl  0xc(%ebp)
+ 503:	89 c3                	mov    %eax,%ebx
+ 505:	50                   	push   %eax
+ 506:	e8 f0 00 00 00       	call   5fb <fstat>
+  close(fd);
+ 50b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 50e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 510:	e8 b6 00 00 00       	call   5cb <close>
+  return r;
+ 515:	83 c4 10             	add    $0x10,%esp
+}
+ 518:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 51b:	89 f0                	mov    %esi,%eax
+ 51d:	5b                   	pop    %ebx
+ 51e:	5e                   	pop    %esi
+ 51f:	5d                   	pop    %ebp
+ 520:	c3                   	ret    
+ 521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 528:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 52d:	eb e9                	jmp    518 <stat+0x38>
+ 52f:	90                   	nop
+
+00000530 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 530:	f3 0f 1e fb          	endbr32 
+ 534:	55                   	push   %ebp
+ 535:	89 e5                	mov    %esp,%ebp
+ 537:	53                   	push   %ebx
+ 538:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 53b:	0f be 02             	movsbl (%edx),%eax
+ 53e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 541:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 544:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 549:	77 1a                	ja     565 <atoi+0x35>
+ 54b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 54f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 550:	83 c2 01             	add    $0x1,%edx
+ 553:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 556:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 55a:	0f be 02             	movsbl (%edx),%eax
+ 55d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 560:	80 fb 09             	cmp    $0x9,%bl
+ 563:	76 eb                	jbe    550 <atoi+0x20>
+  return n;
+}
+ 565:	89 c8                	mov    %ecx,%eax
+ 567:	5b                   	pop    %ebx
+ 568:	5d                   	pop    %ebp
+ 569:	c3                   	ret    
+ 56a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000570 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 570:	f3 0f 1e fb          	endbr32 
+ 574:	55                   	push   %ebp
+ 575:	89 e5                	mov    %esp,%ebp
+ 577:	57                   	push   %edi
+ 578:	8b 45 10             	mov    0x10(%ebp),%eax
+ 57b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 57e:	56                   	push   %esi
+ 57f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 582:	85 c0                	test   %eax,%eax
+ 584:	7e 0f                	jle    595 <memmove+0x25>
+ 586:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 588:	89 d7                	mov    %edx,%edi
+ 58a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 590:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 591:	39 f8                	cmp    %edi,%eax
+ 593:	75 fb                	jne    590 <memmove+0x20>
+  return vdst;
+}
+ 595:	5e                   	pop    %esi
+ 596:	89 d0                	mov    %edx,%eax
+ 598:	5f                   	pop    %edi
+ 599:	5d                   	pop    %ebp
+ 59a:	c3                   	ret    
+
+0000059b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 59b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 5a0:	cd 40                	int    $0x40
+ 5a2:	c3                   	ret    
+
+000005a3 <exit>:
+SYSCALL(exit)
+ 5a3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 5a8:	cd 40                	int    $0x40
+ 5aa:	c3                   	ret    
+
+000005ab <wait>:
+SYSCALL(wait)
+ 5ab:	b8 03 00 00 00       	mov    $0x3,%eax
+ 5b0:	cd 40                	int    $0x40
+ 5b2:	c3                   	ret    
+
+000005b3 <pipe>:
+SYSCALL(pipe)
+ 5b3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 5b8:	cd 40                	int    $0x40
+ 5ba:	c3                   	ret    
+
+000005bb <read>:
+SYSCALL(read)
+ 5bb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 5c0:	cd 40                	int    $0x40
+ 5c2:	c3                   	ret    
+
+000005c3 <write>:
+SYSCALL(write)
+ 5c3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5c8:	cd 40                	int    $0x40
+ 5ca:	c3                   	ret    
+
+000005cb <close>:
+SYSCALL(close)
+ 5cb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5d0:	cd 40                	int    $0x40
+ 5d2:	c3                   	ret    
+
+000005d3 <kill>:
+SYSCALL(kill)
+ 5d3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5d8:	cd 40                	int    $0x40
+ 5da:	c3                   	ret    
+
+000005db <exec>:
+SYSCALL(exec)
+ 5db:	b8 07 00 00 00       	mov    $0x7,%eax
+ 5e0:	cd 40                	int    $0x40
+ 5e2:	c3                   	ret    
+
+000005e3 <open>:
+SYSCALL(open)
+ 5e3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 5e8:	cd 40                	int    $0x40
+ 5ea:	c3                   	ret    
+
+000005eb <mknod>:
+SYSCALL(mknod)
+ 5eb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 5f0:	cd 40                	int    $0x40
+ 5f2:	c3                   	ret    
+
+000005f3 <unlink>:
+SYSCALL(unlink)
+ 5f3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 5f8:	cd 40                	int    $0x40
+ 5fa:	c3                   	ret    
+
+000005fb <fstat>:
+SYSCALL(fstat)
+ 5fb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 600:	cd 40                	int    $0x40
+ 602:	c3                   	ret    
+
+00000603 <link>:
+SYSCALL(link)
+ 603:	b8 13 00 00 00       	mov    $0x13,%eax
+ 608:	cd 40                	int    $0x40
+ 60a:	c3                   	ret    
+
+0000060b <mkdir>:
+SYSCALL(mkdir)
+ 60b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 610:	cd 40                	int    $0x40
+ 612:	c3                   	ret    
+
+00000613 <chdir>:
+SYSCALL(chdir)
+ 613:	b8 09 00 00 00       	mov    $0x9,%eax
+ 618:	cd 40                	int    $0x40
+ 61a:	c3                   	ret    
+
+0000061b <dup>:
+SYSCALL(dup)
+ 61b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 620:	cd 40                	int    $0x40
+ 622:	c3                   	ret    
+
+00000623 <getpid>:
+SYSCALL(getpid)
+ 623:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 628:	cd 40                	int    $0x40
+ 62a:	c3                   	ret    
+
+0000062b <sbrk>:
+SYSCALL(sbrk)
+ 62b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 630:	cd 40                	int    $0x40
+ 632:	c3                   	ret    
+
+00000633 <sleep>:
+SYSCALL(sleep)
+ 633:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 638:	cd 40                	int    $0x40
+ 63a:	c3                   	ret    
+
+0000063b <uptime>:
+SYSCALL(uptime)
+ 63b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 640:	cd 40                	int    $0x40
+ 642:	c3                   	ret    
+
+00000643 <getNumProc>:
+SYSCALL(getNumProc)
+ 643:	b8 16 00 00 00       	mov    $0x16,%eax
+ 648:	cd 40                	int    $0x40
+ 64a:	c3                   	ret    
+
+0000064b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 64b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 650:	cd 40                	int    $0x40
+ 652:	c3                   	ret    
+
+00000653 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 653:	b8 18 00 00 00       	mov    $0x18,%eax
+ 658:	cd 40                	int    $0x40
+ 65a:	c3                   	ret    
+
+0000065b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 65b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 660:	cd 40                	int    $0x40
+ 662:	c3                   	ret    
+
+00000663 <get_burst_time>:
+ 663:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 668:	cd 40                	int    $0x40
+ 66a:	c3                   	ret    
+ 66b:	66 90                	xchg   %ax,%ax
+ 66d:	66 90                	xchg   %ax,%ax
+ 66f:	90                   	nop
+
+00000670 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 670:	55                   	push   %ebp
+ 671:	89 e5                	mov    %esp,%ebp
+ 673:	57                   	push   %edi
+ 674:	56                   	push   %esi
+ 675:	53                   	push   %ebx
+ 676:	83 ec 3c             	sub    $0x3c,%esp
+ 679:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 67c:	89 d1                	mov    %edx,%ecx
+{
+ 67e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 681:	85 d2                	test   %edx,%edx
+ 683:	0f 89 7f 00 00 00    	jns    708 <printint+0x98>
+ 689:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 68d:	74 79                	je     708 <printint+0x98>
+    neg = 1;
+ 68f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 696:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 698:	31 db                	xor    %ebx,%ebx
+ 69a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 69d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 6a0:	89 c8                	mov    %ecx,%eax
+ 6a2:	31 d2                	xor    %edx,%edx
+ 6a4:	89 cf                	mov    %ecx,%edi
+ 6a6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 6a9:	0f b6 92 dc 0a 00 00 	movzbl 0xadc(%edx),%edx
+ 6b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 6b3:	89 d8                	mov    %ebx,%eax
+ 6b5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 6b8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 6bb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 6be:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 6c1:	76 dd                	jbe    6a0 <printint+0x30>
+  if(neg)
+ 6c3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 6c6:	85 c9                	test   %ecx,%ecx
+ 6c8:	74 0c                	je     6d6 <printint+0x66>
+    buf[i++] = '-';
+ 6ca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 6cf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 6d1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 6d6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 6d9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6dd:	eb 07                	jmp    6e6 <printint+0x76>
+ 6df:	90                   	nop
+ 6e0:	0f b6 13             	movzbl (%ebx),%edx
+ 6e3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 6e6:	83 ec 04             	sub    $0x4,%esp
+ 6e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 6ec:	6a 01                	push   $0x1
+ 6ee:	56                   	push   %esi
+ 6ef:	57                   	push   %edi
+ 6f0:	e8 ce fe ff ff       	call   5c3 <write>
+  while(--i >= 0)
+ 6f5:	83 c4 10             	add    $0x10,%esp
+ 6f8:	39 de                	cmp    %ebx,%esi
+ 6fa:	75 e4                	jne    6e0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 6fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6ff:	5b                   	pop    %ebx
+ 700:	5e                   	pop    %esi
+ 701:	5f                   	pop    %edi
+ 702:	5d                   	pop    %ebp
+ 703:	c3                   	ret    
+ 704:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 708:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 70f:	eb 87                	jmp    698 <printint+0x28>
+ 711:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 718:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 71f:	90                   	nop
+
+00000720 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 720:	f3 0f 1e fb          	endbr32 
+ 724:	55                   	push   %ebp
+ 725:	89 e5                	mov    %esp,%ebp
+ 727:	57                   	push   %edi
+ 728:	56                   	push   %esi
+ 729:	53                   	push   %ebx
+ 72a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 72d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 730:	0f b6 1e             	movzbl (%esi),%ebx
+ 733:	84 db                	test   %bl,%bl
+ 735:	0f 84 b4 00 00 00    	je     7ef <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 73b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 73e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 741:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 744:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 746:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 749:	eb 33                	jmp    77e <printf+0x5e>
+ 74b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 74f:	90                   	nop
+ 750:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 753:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 758:	83 f8 25             	cmp    $0x25,%eax
+ 75b:	74 17                	je     774 <printf+0x54>
+  write(fd, &c, 1);
+ 75d:	83 ec 04             	sub    $0x4,%esp
+ 760:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 763:	6a 01                	push   $0x1
+ 765:	57                   	push   %edi
+ 766:	ff 75 08             	pushl  0x8(%ebp)
+ 769:	e8 55 fe ff ff       	call   5c3 <write>
+ 76e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 771:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 774:	0f b6 1e             	movzbl (%esi),%ebx
+ 777:	83 c6 01             	add    $0x1,%esi
+ 77a:	84 db                	test   %bl,%bl
+ 77c:	74 71                	je     7ef <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 77e:	0f be cb             	movsbl %bl,%ecx
+ 781:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 784:	85 d2                	test   %edx,%edx
+ 786:	74 c8                	je     750 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 788:	83 fa 25             	cmp    $0x25,%edx
+ 78b:	75 e7                	jne    774 <printf+0x54>
+      if(c == 'd'){
+ 78d:	83 f8 64             	cmp    $0x64,%eax
+ 790:	0f 84 9a 00 00 00    	je     830 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 796:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 79c:	83 f9 70             	cmp    $0x70,%ecx
+ 79f:	74 5f                	je     800 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 7a1:	83 f8 73             	cmp    $0x73,%eax
+ 7a4:	0f 84 d6 00 00 00    	je     880 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 7aa:	83 f8 63             	cmp    $0x63,%eax
+ 7ad:	0f 84 8d 00 00 00    	je     840 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 7b3:	83 f8 25             	cmp    $0x25,%eax
+ 7b6:	0f 84 b4 00 00 00    	je     870 <printf+0x150>
+  write(fd, &c, 1);
+ 7bc:	83 ec 04             	sub    $0x4,%esp
+ 7bf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7c3:	6a 01                	push   $0x1
+ 7c5:	57                   	push   %edi
+ 7c6:	ff 75 08             	pushl  0x8(%ebp)
+ 7c9:	e8 f5 fd ff ff       	call   5c3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 7ce:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 7d1:	83 c4 0c             	add    $0xc,%esp
+ 7d4:	6a 01                	push   $0x1
+ 7d6:	83 c6 01             	add    $0x1,%esi
+ 7d9:	57                   	push   %edi
+ 7da:	ff 75 08             	pushl  0x8(%ebp)
+ 7dd:	e8 e1 fd ff ff       	call   5c3 <write>
+  for(i = 0; fmt[i]; i++){
+ 7e2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 7e6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 7e9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 7eb:	84 db                	test   %bl,%bl
+ 7ed:	75 8f                	jne    77e <printf+0x5e>
+    }
+  }
+}
+ 7ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7f2:	5b                   	pop    %ebx
+ 7f3:	5e                   	pop    %esi
+ 7f4:	5f                   	pop    %edi
+ 7f5:	5d                   	pop    %ebp
+ 7f6:	c3                   	ret    
+ 7f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7fe:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 800:	83 ec 0c             	sub    $0xc,%esp
+ 803:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 808:	6a 00                	push   $0x0
+ 80a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 80d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 810:	8b 13                	mov    (%ebx),%edx
+ 812:	e8 59 fe ff ff       	call   670 <printint>
+        ap++;
+ 817:	89 d8                	mov    %ebx,%eax
+ 819:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 81c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 81e:	83 c0 04             	add    $0x4,%eax
+ 821:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 824:	e9 4b ff ff ff       	jmp    774 <printf+0x54>
+ 829:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 830:	83 ec 0c             	sub    $0xc,%esp
+ 833:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 838:	6a 01                	push   $0x1
+ 83a:	eb ce                	jmp    80a <printf+0xea>
+ 83c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 840:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 843:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 846:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 848:	6a 01                	push   $0x1
+        ap++;
+ 84a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 84d:	57                   	push   %edi
+ 84e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 851:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 854:	e8 6a fd ff ff       	call   5c3 <write>
+        ap++;
+ 859:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 85c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 85f:	31 d2                	xor    %edx,%edx
+ 861:	e9 0e ff ff ff       	jmp    774 <printf+0x54>
+ 866:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 86d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 870:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 873:	83 ec 04             	sub    $0x4,%esp
+ 876:	e9 59 ff ff ff       	jmp    7d4 <printf+0xb4>
+ 87b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 87f:	90                   	nop
+        s = (char*)*ap;
+ 880:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 883:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 885:	83 c0 04             	add    $0x4,%eax
+ 888:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 88b:	85 db                	test   %ebx,%ebx
+ 88d:	74 17                	je     8a6 <printf+0x186>
+        while(*s != 0){
+ 88f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 892:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 894:	84 c0                	test   %al,%al
+ 896:	0f 84 d8 fe ff ff    	je     774 <printf+0x54>
+ 89c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 89f:	89 de                	mov    %ebx,%esi
+ 8a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8a4:	eb 1a                	jmp    8c0 <printf+0x1a0>
+          s = "(null)";
+ 8a6:	bb d2 0a 00 00       	mov    $0xad2,%ebx
+        while(*s != 0){
+ 8ab:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 8ae:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8b3:	89 de                	mov    %ebx,%esi
+ 8b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8bf:	90                   	nop
+  write(fd, &c, 1);
+ 8c0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 8c3:	83 c6 01             	add    $0x1,%esi
+ 8c6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 8c9:	6a 01                	push   $0x1
+ 8cb:	57                   	push   %edi
+ 8cc:	53                   	push   %ebx
+ 8cd:	e8 f1 fc ff ff       	call   5c3 <write>
+        while(*s != 0){
+ 8d2:	0f b6 06             	movzbl (%esi),%eax
+ 8d5:	83 c4 10             	add    $0x10,%esp
+ 8d8:	84 c0                	test   %al,%al
+ 8da:	75 e4                	jne    8c0 <printf+0x1a0>
+ 8dc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 8df:	31 d2                	xor    %edx,%edx
+ 8e1:	e9 8e fe ff ff       	jmp    774 <printf+0x54>
+ 8e6:	66 90                	xchg   %ax,%ax
+ 8e8:	66 90                	xchg   %ax,%ax
+ 8ea:	66 90                	xchg   %ax,%ax
+ 8ec:	66 90                	xchg   %ax,%ax
+ 8ee:	66 90                	xchg   %ax,%ax
+
+000008f0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 8f0:	f3 0f 1e fb          	endbr32 
+ 8f4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8f5:	a1 14 0e 00 00       	mov    0xe14,%eax
+{
+ 8fa:	89 e5                	mov    %esp,%ebp
+ 8fc:	57                   	push   %edi
+ 8fd:	56                   	push   %esi
+ 8fe:	53                   	push   %ebx
+ 8ff:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 902:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 904:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 907:	39 c8                	cmp    %ecx,%eax
+ 909:	73 15                	jae    920 <free+0x30>
+ 90b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 90f:	90                   	nop
+ 910:	39 d1                	cmp    %edx,%ecx
+ 912:	72 14                	jb     928 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 914:	39 d0                	cmp    %edx,%eax
+ 916:	73 10                	jae    928 <free+0x38>
+{
+ 918:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 91a:	8b 10                	mov    (%eax),%edx
+ 91c:	39 c8                	cmp    %ecx,%eax
+ 91e:	72 f0                	jb     910 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 920:	39 d0                	cmp    %edx,%eax
+ 922:	72 f4                	jb     918 <free+0x28>
+ 924:	39 d1                	cmp    %edx,%ecx
+ 926:	73 f0                	jae    918 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 928:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 92b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 92e:	39 fa                	cmp    %edi,%edx
+ 930:	74 1e                	je     950 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 932:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 935:	8b 50 04             	mov    0x4(%eax),%edx
+ 938:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 93b:	39 f1                	cmp    %esi,%ecx
+ 93d:	74 28                	je     967 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 93f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 941:	5b                   	pop    %ebx
+  freep = p;
+ 942:	a3 14 0e 00 00       	mov    %eax,0xe14
+}
+ 947:	5e                   	pop    %esi
+ 948:	5f                   	pop    %edi
+ 949:	5d                   	pop    %ebp
+ 94a:	c3                   	ret    
+ 94b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 94f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 950:	03 72 04             	add    0x4(%edx),%esi
+ 953:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 956:	8b 10                	mov    (%eax),%edx
+ 958:	8b 12                	mov    (%edx),%edx
+ 95a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 95d:	8b 50 04             	mov    0x4(%eax),%edx
+ 960:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 963:	39 f1                	cmp    %esi,%ecx
+ 965:	75 d8                	jne    93f <free+0x4f>
+    p->s.size += bp->s.size;
+ 967:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 96a:	a3 14 0e 00 00       	mov    %eax,0xe14
+    p->s.size += bp->s.size;
+ 96f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 972:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 975:	89 10                	mov    %edx,(%eax)
+}
+ 977:	5b                   	pop    %ebx
+ 978:	5e                   	pop    %esi
+ 979:	5f                   	pop    %edi
+ 97a:	5d                   	pop    %ebp
+ 97b:	c3                   	ret    
+ 97c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000980 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 980:	f3 0f 1e fb          	endbr32 
+ 984:	55                   	push   %ebp
+ 985:	89 e5                	mov    %esp,%ebp
+ 987:	57                   	push   %edi
+ 988:	56                   	push   %esi
+ 989:	53                   	push   %ebx
+ 98a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 98d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 990:	8b 3d 14 0e 00 00    	mov    0xe14,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 996:	8d 70 07             	lea    0x7(%eax),%esi
+ 999:	c1 ee 03             	shr    $0x3,%esi
+ 99c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 99f:	85 ff                	test   %edi,%edi
+ 9a1:	0f 84 a9 00 00 00    	je     a50 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9a7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 9a9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 9ac:	39 f1                	cmp    %esi,%ecx
+ 9ae:	73 6d                	jae    a1d <malloc+0x9d>
+ 9b0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 9b6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 9bb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 9be:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 9c5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 9c8:	eb 17                	jmp    9e1 <malloc+0x61>
+ 9ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9d0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 9d2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 9d5:	39 f1                	cmp    %esi,%ecx
+ 9d7:	73 4f                	jae    a28 <malloc+0xa8>
+ 9d9:	8b 3d 14 0e 00 00    	mov    0xe14,%edi
+ 9df:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 9e1:	39 c7                	cmp    %eax,%edi
+ 9e3:	75 eb                	jne    9d0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 9e5:	83 ec 0c             	sub    $0xc,%esp
+ 9e8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 9eb:	e8 3b fc ff ff       	call   62b <sbrk>
+  if(p == (char*)-1)
+ 9f0:	83 c4 10             	add    $0x10,%esp
+ 9f3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 9f6:	74 1b                	je     a13 <malloc+0x93>
+  hp->s.size = nu;
+ 9f8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 9fb:	83 ec 0c             	sub    $0xc,%esp
+ 9fe:	83 c0 08             	add    $0x8,%eax
+ a01:	50                   	push   %eax
+ a02:	e8 e9 fe ff ff       	call   8f0 <free>
+  return freep;
+ a07:	a1 14 0e 00 00       	mov    0xe14,%eax
+      if((p = morecore(nunits)) == 0)
+ a0c:	83 c4 10             	add    $0x10,%esp
+ a0f:	85 c0                	test   %eax,%eax
+ a11:	75 bd                	jne    9d0 <malloc+0x50>
+        return 0;
+  }
+}
+ a13:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ a16:	31 c0                	xor    %eax,%eax
+}
+ a18:	5b                   	pop    %ebx
+ a19:	5e                   	pop    %esi
+ a1a:	5f                   	pop    %edi
+ a1b:	5d                   	pop    %ebp
+ a1c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ a1d:	89 c2                	mov    %eax,%edx
+ a1f:	89 f8                	mov    %edi,%eax
+ a21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ a28:	39 ce                	cmp    %ecx,%esi
+ a2a:	74 54                	je     a80 <malloc+0x100>
+        p->s.size -= nunits;
+ a2c:	29 f1                	sub    %esi,%ecx
+ a2e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ a31:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ a34:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ a37:	a3 14 0e 00 00       	mov    %eax,0xe14
+}
+ a3c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ a3f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ a42:	5b                   	pop    %ebx
+ a43:	5e                   	pop    %esi
+ a44:	5f                   	pop    %edi
+ a45:	5d                   	pop    %ebp
+ a46:	c3                   	ret    
+ a47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a4e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ a50:	c7 05 14 0e 00 00 18 	movl   $0xe18,0xe14
+ a57:	0e 00 00 
+    base.s.size = 0;
+ a5a:	bf 18 0e 00 00       	mov    $0xe18,%edi
+    base.s.ptr = freep = prevp = &base;
+ a5f:	c7 05 18 0e 00 00 18 	movl   $0xe18,0xe18
+ a66:	0e 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a69:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ a6b:	c7 05 1c 0e 00 00 00 	movl   $0x0,0xe1c
+ a72:	00 00 00 
+    if(p->s.size >= nunits){
+ a75:	e9 36 ff ff ff       	jmp    9b0 <malloc+0x30>
+ a7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ a80:	8b 0a                	mov    (%edx),%ecx
+ a82:	89 08                	mov    %ecx,(%eax)
+ a84:	eb b1                	jmp    a37 <malloc+0xb7>
diff -ruN xv6-public/ls.d xv6-new/ls.d
--- xv6-public/ls.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/ls.d	2022-10-07 22:43:43.351886840 +0530
@@ -0,0 +1 @@
+ls.o: ls.c /usr/include/stdc-predef.h types.h stat.h user.h fs.h
Binary files xv6-public/ls.o and xv6-new/ls.o differ
diff -ruN xv6-public/ls.sym xv6-new/ls.sym
--- xv6-public/ls.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/ls.sym	2022-10-07 22:43:43.351886840 +0530
@@ -0,0 +1,65 @@
+00000000 .text
+00000a88 .rodata
+00000af0 .eh_frame
+00000e04 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 ls.c
+00000e04 buf.1107
+00000000 ulib.c
+00000000 printf.c
+00000670 printint
+00000adc digits.1096
+00000000 umalloc.c
+00000e14 freep
+00000e18 base
+00000340 strcpy
+00000060 fmtname
+00000720 printf
+00000570 memmove
+000005eb mknod
+00000460 gets
+00000623 getpid
+00000980 malloc
+00000633 sleep
+00000663 get_burst_time
+000005b3 pipe
+000005c3 write
+000005fb fstat
+000005d3 kill
+00000613 chdir
+000005db exec
+000005ab wait
+000005bb read
+000005f3 unlink
+0000059b fork
+0000062b sbrk
+0000063b uptime
+00000e04 __bss_start
+00000400 memset
+00000000 main
+0000065b set_burst_time
+00000370 strcmp
+0000061b dup
+0000064b getMaxPid
+00000643 getNumProc
+00000653 getProcInfo
+000004e0 stat
+00000e04 _edata
+00000e20 _end
+00000603 link
+00000100 ls
+000005a3 exit
+00000530 atoi
+000003c0 strlen
+000005e3 open
+00000420 strchr
+0000060b mkdir
+000005cb close
+000008f0 free
Binary files xv6-public/main.o and xv6-new/main.o differ
diff -ruN xv6-public/mkdir.asm xv6-new/mkdir.asm
--- xv6-public/mkdir.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/mkdir.asm	2022-10-07 22:43:43.351886840 +0530
@@ -0,0 +1,1238 @@
+
+_mkdir:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	bf 01 00 00 00       	mov    $0x1,%edi
+  17:	56                   	push   %esi
+  18:	53                   	push   %ebx
+  19:	51                   	push   %ecx
+  1a:	83 ec 08             	sub    $0x8,%esp
+  1d:	8b 59 04             	mov    0x4(%ecx),%ebx
+  20:	8b 31                	mov    (%ecx),%esi
+  22:	83 c3 04             	add    $0x4,%ebx
+  int i;
+
+  if(argc < 2){
+  25:	83 fe 01             	cmp    $0x1,%esi
+  28:	7e 3a                	jle    64 <main+0x64>
+  2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    printf(2, "Usage: mkdir files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(mkdir(argv[i]) < 0){
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	e8 11 03 00 00       	call   34b <mkdir>
+  3a:	83 c4 10             	add    $0x10,%esp
+  3d:	85 c0                	test   %eax,%eax
+  3f:	78 0f                	js     50 <main+0x50>
+  for(i = 1; i < argc; i++){
+  41:	83 c7 01             	add    $0x1,%edi
+  44:	83 c3 04             	add    $0x4,%ebx
+  47:	39 fe                	cmp    %edi,%esi
+  49:	75 e5                	jne    30 <main+0x30>
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+  4b:	e8 93 02 00 00       	call   2e3 <exit>
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+  50:	50                   	push   %eax
+  51:	ff 33                	pushl  (%ebx)
+  53:	68 df 07 00 00       	push   $0x7df
+  58:	6a 02                	push   $0x2
+  5a:	e8 01 04 00 00       	call   460 <printf>
+      break;
+  5f:	83 c4 10             	add    $0x10,%esp
+  62:	eb e7                	jmp    4b <main+0x4b>
+    printf(2, "Usage: mkdir files...\n");
+  64:	52                   	push   %edx
+  65:	52                   	push   %edx
+  66:	68 c8 07 00 00       	push   $0x7c8
+  6b:	6a 02                	push   $0x2
+  6d:	e8 ee 03 00 00       	call   460 <printf>
+    exit();
+  72:	e8 6c 02 00 00       	call   2e3 <exit>
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	f3 0f 1e fb          	endbr32 
+  84:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  85:	31 c0                	xor    %eax,%eax
+{
+  87:	89 e5                	mov    %esp,%ebp
+  89:	53                   	push   %ebx
+  8a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  8d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  90:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  94:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  97:	83 c0 01             	add    $0x1,%eax
+  9a:	84 d2                	test   %dl,%dl
+  9c:	75 f2                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  9e:	89 c8                	mov    %ecx,%eax
+  a0:	5b                   	pop    %ebx
+  a1:	5d                   	pop    %ebp
+  a2:	c3                   	ret    
+  a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	f3 0f 1e fb          	endbr32 
+  b4:	55                   	push   %ebp
+  b5:	89 e5                	mov    %esp,%ebp
+  b7:	53                   	push   %ebx
+  b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  bb:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  be:	0f b6 01             	movzbl (%ecx),%eax
+  c1:	0f b6 1a             	movzbl (%edx),%ebx
+  c4:	84 c0                	test   %al,%al
+  c6:	75 19                	jne    e1 <strcmp+0x31>
+  c8:	eb 26                	jmp    f0 <strcmp+0x40>
+  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  d0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  d4:	83 c1 01             	add    $0x1,%ecx
+  d7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  da:	0f b6 1a             	movzbl (%edx),%ebx
+  dd:	84 c0                	test   %al,%al
+  df:	74 0f                	je     f0 <strcmp+0x40>
+  e1:	38 d8                	cmp    %bl,%al
+  e3:	74 eb                	je     d0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  e5:	29 d8                	sub    %ebx,%eax
+}
+  e7:	5b                   	pop    %ebx
+  e8:	5d                   	pop    %ebp
+  e9:	c3                   	ret    
+  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  f0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  f2:	29 d8                	sub    %ebx,%eax
+}
+  f4:	5b                   	pop    %ebx
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fe:	66 90                	xchg   %ax,%ax
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	f3 0f 1e fb          	endbr32 
+ 104:	55                   	push   %ebp
+ 105:	89 e5                	mov    %esp,%ebp
+ 107:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 10a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 10d:	74 21                	je     130 <strlen+0x30>
+ 10f:	31 c0                	xor    %eax,%eax
+ 111:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 118:	83 c0 01             	add    $0x1,%eax
+ 11b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 11f:	89 c1                	mov    %eax,%ecx
+ 121:	75 f5                	jne    118 <strlen+0x18>
+    ;
+  return n;
+}
+ 123:	89 c8                	mov    %ecx,%eax
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 130:	31 c9                	xor    %ecx,%ecx
+}
+ 132:	5d                   	pop    %ebp
+ 133:	89 c8                	mov    %ecx,%eax
+ 135:	c3                   	ret    
+ 136:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000140 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+ 145:	89 e5                	mov    %esp,%ebp
+ 147:	57                   	push   %edi
+ 148:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 14b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 14e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 151:	89 d7                	mov    %edx,%edi
+ 153:	fc                   	cld    
+ 154:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 156:	89 d0                	mov    %edx,%eax
+ 158:	5f                   	pop    %edi
+ 159:	5d                   	pop    %ebp
+ 15a:	c3                   	ret    
+ 15b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 15f:	90                   	nop
+
+00000160 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 160:	f3 0f 1e fb          	endbr32 
+ 164:	55                   	push   %ebp
+ 165:	89 e5                	mov    %esp,%ebp
+ 167:	8b 45 08             	mov    0x8(%ebp),%eax
+ 16a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 16e:	0f b6 10             	movzbl (%eax),%edx
+ 171:	84 d2                	test   %dl,%dl
+ 173:	75 16                	jne    18b <strchr+0x2b>
+ 175:	eb 21                	jmp    198 <strchr+0x38>
+ 177:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17e:	66 90                	xchg   %ax,%ax
+ 180:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 184:	83 c0 01             	add    $0x1,%eax
+ 187:	84 d2                	test   %dl,%dl
+ 189:	74 0d                	je     198 <strchr+0x38>
+    if(*s == c)
+ 18b:	38 d1                	cmp    %dl,%cl
+ 18d:	75 f1                	jne    180 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 18f:	5d                   	pop    %ebp
+ 190:	c3                   	ret    
+ 191:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 198:	31 c0                	xor    %eax,%eax
+}
+ 19a:	5d                   	pop    %ebp
+ 19b:	c3                   	ret    
+ 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001a0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1a0:	f3 0f 1e fb          	endbr32 
+ 1a4:	55                   	push   %ebp
+ 1a5:	89 e5                	mov    %esp,%ebp
+ 1a7:	57                   	push   %edi
+ 1a8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1a9:	31 f6                	xor    %esi,%esi
+{
+ 1ab:	53                   	push   %ebx
+ 1ac:	89 f3                	mov    %esi,%ebx
+ 1ae:	83 ec 1c             	sub    $0x1c,%esp
+ 1b1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1b4:	eb 33                	jmp    1e9 <gets+0x49>
+ 1b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bd:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1c0:	83 ec 04             	sub    $0x4,%esp
+ 1c3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1c6:	6a 01                	push   $0x1
+ 1c8:	50                   	push   %eax
+ 1c9:	6a 00                	push   $0x0
+ 1cb:	e8 2b 01 00 00       	call   2fb <read>
+    if(cc < 1)
+ 1d0:	83 c4 10             	add    $0x10,%esp
+ 1d3:	85 c0                	test   %eax,%eax
+ 1d5:	7e 1c                	jle    1f3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1d7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1db:	83 c7 01             	add    $0x1,%edi
+ 1de:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1e1:	3c 0a                	cmp    $0xa,%al
+ 1e3:	74 23                	je     208 <gets+0x68>
+ 1e5:	3c 0d                	cmp    $0xd,%al
+ 1e7:	74 1f                	je     208 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1e9:	83 c3 01             	add    $0x1,%ebx
+ 1ec:	89 fe                	mov    %edi,%esi
+ 1ee:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1f1:	7c cd                	jl     1c0 <gets+0x20>
+ 1f3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1f8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1fe:	5b                   	pop    %ebx
+ 1ff:	5e                   	pop    %esi
+ 200:	5f                   	pop    %edi
+ 201:	5d                   	pop    %ebp
+ 202:	c3                   	ret    
+ 203:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 207:	90                   	nop
+ 208:	8b 75 08             	mov    0x8(%ebp),%esi
+ 20b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 20e:	01 de                	add    %ebx,%esi
+ 210:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 212:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 215:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 218:	5b                   	pop    %ebx
+ 219:	5e                   	pop    %esi
+ 21a:	5f                   	pop    %edi
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000220 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	56                   	push   %esi
+ 228:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	6a 00                	push   $0x0
+ 22e:	ff 75 08             	pushl  0x8(%ebp)
+ 231:	e8 ed 00 00 00       	call   323 <open>
+  if(fd < 0)
+ 236:	83 c4 10             	add    $0x10,%esp
+ 239:	85 c0                	test   %eax,%eax
+ 23b:	78 2b                	js     268 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 23d:	83 ec 08             	sub    $0x8,%esp
+ 240:	ff 75 0c             	pushl  0xc(%ebp)
+ 243:	89 c3                	mov    %eax,%ebx
+ 245:	50                   	push   %eax
+ 246:	e8 f0 00 00 00       	call   33b <fstat>
+  close(fd);
+ 24b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 24e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 250:	e8 b6 00 00 00       	call   30b <close>
+  return r;
+ 255:	83 c4 10             	add    $0x10,%esp
+}
+ 258:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 25b:	89 f0                	mov    %esi,%eax
+ 25d:	5b                   	pop    %ebx
+ 25e:	5e                   	pop    %esi
+ 25f:	5d                   	pop    %ebp
+ 260:	c3                   	ret    
+ 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 268:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 26d:	eb e9                	jmp    258 <stat+0x38>
+ 26f:	90                   	nop
+
+00000270 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	53                   	push   %ebx
+ 278:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 27b:	0f be 02             	movsbl (%edx),%eax
+ 27e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 281:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 284:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 289:	77 1a                	ja     2a5 <atoi+0x35>
+ 28b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 28f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 290:	83 c2 01             	add    $0x1,%edx
+ 293:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 296:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 29a:	0f be 02             	movsbl (%edx),%eax
+ 29d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 2a0:	80 fb 09             	cmp    $0x9,%bl
+ 2a3:	76 eb                	jbe    290 <atoi+0x20>
+  return n;
+}
+ 2a5:	89 c8                	mov    %ecx,%eax
+ 2a7:	5b                   	pop    %ebx
+ 2a8:	5d                   	pop    %ebp
+ 2a9:	c3                   	ret    
+ 2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000002b0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	57                   	push   %edi
+ 2b8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2bb:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2be:	56                   	push   %esi
+ 2bf:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2c2:	85 c0                	test   %eax,%eax
+ 2c4:	7e 0f                	jle    2d5 <memmove+0x25>
+ 2c6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2c8:	89 d7                	mov    %edx,%edi
+ 2ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2d0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2d1:	39 f8                	cmp    %edi,%eax
+ 2d3:	75 fb                	jne    2d0 <memmove+0x20>
+  return vdst;
+}
+ 2d5:	5e                   	pop    %esi
+ 2d6:	89 d0                	mov    %edx,%eax
+ 2d8:	5f                   	pop    %edi
+ 2d9:	5d                   	pop    %ebp
+ 2da:	c3                   	ret    
+
+000002db <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2db:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <exit>:
+SYSCALL(exit)
+ 2e3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <wait>:
+SYSCALL(wait)
+ 2eb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <pipe>:
+SYSCALL(pipe)
+ 2f3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <read>:
+SYSCALL(read)
+ 2fb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <write>:
+SYSCALL(write)
+ 303:	b8 10 00 00 00       	mov    $0x10,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <close>:
+SYSCALL(close)
+ 30b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <kill>:
+SYSCALL(kill)
+ 313:	b8 06 00 00 00       	mov    $0x6,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <exec>:
+SYSCALL(exec)
+ 31b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <open>:
+SYSCALL(open)
+ 323:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <mknod>:
+SYSCALL(mknod)
+ 32b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <unlink>:
+SYSCALL(unlink)
+ 333:	b8 12 00 00 00       	mov    $0x12,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <fstat>:
+SYSCALL(fstat)
+ 33b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <link>:
+SYSCALL(link)
+ 343:	b8 13 00 00 00       	mov    $0x13,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <mkdir>:
+SYSCALL(mkdir)
+ 34b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <chdir>:
+SYSCALL(chdir)
+ 353:	b8 09 00 00 00       	mov    $0x9,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <dup>:
+SYSCALL(dup)
+ 35b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <getpid>:
+SYSCALL(getpid)
+ 363:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <sbrk>:
+SYSCALL(sbrk)
+ 36b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <sleep>:
+SYSCALL(sleep)
+ 373:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <uptime>:
+SYSCALL(uptime)
+ 37b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <getNumProc>:
+SYSCALL(getNumProc)
+ 383:	b8 16 00 00 00       	mov    $0x16,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 38b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 393:	b8 18 00 00 00       	mov    $0x18,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 39b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <get_burst_time>:
+ 3a3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+ 3ab:	66 90                	xchg   %ax,%ax
+ 3ad:	66 90                	xchg   %ax,%ax
+ 3af:	90                   	nop
+
+000003b0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3b0:	55                   	push   %ebp
+ 3b1:	89 e5                	mov    %esp,%ebp
+ 3b3:	57                   	push   %edi
+ 3b4:	56                   	push   %esi
+ 3b5:	53                   	push   %ebx
+ 3b6:	83 ec 3c             	sub    $0x3c,%esp
+ 3b9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3bc:	89 d1                	mov    %edx,%ecx
+{
+ 3be:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3c1:	85 d2                	test   %edx,%edx
+ 3c3:	0f 89 7f 00 00 00    	jns    448 <printint+0x98>
+ 3c9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3cd:	74 79                	je     448 <printint+0x98>
+    neg = 1;
+ 3cf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3d6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3d8:	31 db                	xor    %ebx,%ebx
+ 3da:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3e0:	89 c8                	mov    %ecx,%eax
+ 3e2:	31 d2                	xor    %edx,%edx
+ 3e4:	89 cf                	mov    %ecx,%edi
+ 3e6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3e9:	0f b6 92 04 08 00 00 	movzbl 0x804(%edx),%edx
+ 3f0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3f3:	89 d8                	mov    %ebx,%eax
+ 3f5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3f8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3fb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3fe:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 401:	76 dd                	jbe    3e0 <printint+0x30>
+  if(neg)
+ 403:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 406:	85 c9                	test   %ecx,%ecx
+ 408:	74 0c                	je     416 <printint+0x66>
+    buf[i++] = '-';
+ 40a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 40f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 411:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 416:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 419:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 41d:	eb 07                	jmp    426 <printint+0x76>
+ 41f:	90                   	nop
+ 420:	0f b6 13             	movzbl (%ebx),%edx
+ 423:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 426:	83 ec 04             	sub    $0x4,%esp
+ 429:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 42c:	6a 01                	push   $0x1
+ 42e:	56                   	push   %esi
+ 42f:	57                   	push   %edi
+ 430:	e8 ce fe ff ff       	call   303 <write>
+  while(--i >= 0)
+ 435:	83 c4 10             	add    $0x10,%esp
+ 438:	39 de                	cmp    %ebx,%esi
+ 43a:	75 e4                	jne    420 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 43c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 43f:	5b                   	pop    %ebx
+ 440:	5e                   	pop    %esi
+ 441:	5f                   	pop    %edi
+ 442:	5d                   	pop    %ebp
+ 443:	c3                   	ret    
+ 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 448:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 44f:	eb 87                	jmp    3d8 <printint+0x28>
+ 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 458:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45f:	90                   	nop
+
+00000460 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 460:	f3 0f 1e fb          	endbr32 
+ 464:	55                   	push   %ebp
+ 465:	89 e5                	mov    %esp,%ebp
+ 467:	57                   	push   %edi
+ 468:	56                   	push   %esi
+ 469:	53                   	push   %ebx
+ 46a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 46d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 470:	0f b6 1e             	movzbl (%esi),%ebx
+ 473:	84 db                	test   %bl,%bl
+ 475:	0f 84 b4 00 00 00    	je     52f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 47b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 47e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 481:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 484:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 486:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 489:	eb 33                	jmp    4be <printf+0x5e>
+ 48b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 48f:	90                   	nop
+ 490:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 493:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	74 17                	je     4b4 <printf+0x54>
+  write(fd, &c, 1);
+ 49d:	83 ec 04             	sub    $0x4,%esp
+ 4a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4a3:	6a 01                	push   $0x1
+ 4a5:	57                   	push   %edi
+ 4a6:	ff 75 08             	pushl  0x8(%ebp)
+ 4a9:	e8 55 fe ff ff       	call   303 <write>
+ 4ae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 4b1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4b4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4b7:	83 c6 01             	add    $0x1,%esi
+ 4ba:	84 db                	test   %bl,%bl
+ 4bc:	74 71                	je     52f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 4be:	0f be cb             	movsbl %bl,%ecx
+ 4c1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4c4:	85 d2                	test   %edx,%edx
+ 4c6:	74 c8                	je     490 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4c8:	83 fa 25             	cmp    $0x25,%edx
+ 4cb:	75 e7                	jne    4b4 <printf+0x54>
+      if(c == 'd'){
+ 4cd:	83 f8 64             	cmp    $0x64,%eax
+ 4d0:	0f 84 9a 00 00 00    	je     570 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4d6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4dc:	83 f9 70             	cmp    $0x70,%ecx
+ 4df:	74 5f                	je     540 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4e1:	83 f8 73             	cmp    $0x73,%eax
+ 4e4:	0f 84 d6 00 00 00    	je     5c0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ea:	83 f8 63             	cmp    $0x63,%eax
+ 4ed:	0f 84 8d 00 00 00    	je     580 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4f3:	83 f8 25             	cmp    $0x25,%eax
+ 4f6:	0f 84 b4 00 00 00    	je     5b0 <printf+0x150>
+  write(fd, &c, 1);
+ 4fc:	83 ec 04             	sub    $0x4,%esp
+ 4ff:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 503:	6a 01                	push   $0x1
+ 505:	57                   	push   %edi
+ 506:	ff 75 08             	pushl  0x8(%ebp)
+ 509:	e8 f5 fd ff ff       	call   303 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 50e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 511:	83 c4 0c             	add    $0xc,%esp
+ 514:	6a 01                	push   $0x1
+ 516:	83 c6 01             	add    $0x1,%esi
+ 519:	57                   	push   %edi
+ 51a:	ff 75 08             	pushl  0x8(%ebp)
+ 51d:	e8 e1 fd ff ff       	call   303 <write>
+  for(i = 0; fmt[i]; i++){
+ 522:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 526:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 529:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 52b:	84 db                	test   %bl,%bl
+ 52d:	75 8f                	jne    4be <printf+0x5e>
+    }
+  }
+}
+ 52f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 532:	5b                   	pop    %ebx
+ 533:	5e                   	pop    %esi
+ 534:	5f                   	pop    %edi
+ 535:	5d                   	pop    %ebp
+ 536:	c3                   	ret    
+ 537:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 540:	83 ec 0c             	sub    $0xc,%esp
+ 543:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 548:	6a 00                	push   $0x0
+ 54a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 54d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 550:	8b 13                	mov    (%ebx),%edx
+ 552:	e8 59 fe ff ff       	call   3b0 <printint>
+        ap++;
+ 557:	89 d8                	mov    %ebx,%eax
+ 559:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 55c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 55e:	83 c0 04             	add    $0x4,%eax
+ 561:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 564:	e9 4b ff ff ff       	jmp    4b4 <printf+0x54>
+ 569:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	eb ce                	jmp    54a <printf+0xea>
+ 57c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 580:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 583:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 586:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 588:	6a 01                	push   $0x1
+        ap++;
+ 58a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 58d:	57                   	push   %edi
+ 58e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 591:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 594:	e8 6a fd ff ff       	call   303 <write>
+        ap++;
+ 599:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 59c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 59f:	31 d2                	xor    %edx,%edx
+ 5a1:	e9 0e ff ff ff       	jmp    4b4 <printf+0x54>
+ 5a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ad:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5b3:	83 ec 04             	sub    $0x4,%esp
+ 5b6:	e9 59 ff ff ff       	jmp    514 <printf+0xb4>
+ 5bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5bf:	90                   	nop
+        s = (char*)*ap;
+ 5c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5c3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5c5:	83 c0 04             	add    $0x4,%eax
+ 5c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5cb:	85 db                	test   %ebx,%ebx
+ 5cd:	74 17                	je     5e6 <printf+0x186>
+        while(*s != 0){
+ 5cf:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5d2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5d4:	84 c0                	test   %al,%al
+ 5d6:	0f 84 d8 fe ff ff    	je     4b4 <printf+0x54>
+ 5dc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5df:	89 de                	mov    %ebx,%esi
+ 5e1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e4:	eb 1a                	jmp    600 <printf+0x1a0>
+          s = "(null)";
+ 5e6:	bb fb 07 00 00       	mov    $0x7fb,%ebx
+        while(*s != 0){
+ 5eb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ee:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5f3:	89 de                	mov    %ebx,%esi
+ 5f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ff:	90                   	nop
+  write(fd, &c, 1);
+ 600:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 603:	83 c6 01             	add    $0x1,%esi
+ 606:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 609:	6a 01                	push   $0x1
+ 60b:	57                   	push   %edi
+ 60c:	53                   	push   %ebx
+ 60d:	e8 f1 fc ff ff       	call   303 <write>
+        while(*s != 0){
+ 612:	0f b6 06             	movzbl (%esi),%eax
+ 615:	83 c4 10             	add    $0x10,%esp
+ 618:	84 c0                	test   %al,%al
+ 61a:	75 e4                	jne    600 <printf+0x1a0>
+ 61c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 61f:	31 d2                	xor    %edx,%edx
+ 621:	e9 8e fe ff ff       	jmp    4b4 <printf+0x54>
+ 626:	66 90                	xchg   %ax,%ax
+ 628:	66 90                	xchg   %ax,%ax
+ 62a:	66 90                	xchg   %ax,%ax
+ 62c:	66 90                	xchg   %ax,%ax
+ 62e:	66 90                	xchg   %ax,%ax
+
+00000630 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 630:	f3 0f 1e fb          	endbr32 
+ 634:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 635:	a1 bc 0a 00 00       	mov    0xabc,%eax
+{
+ 63a:	89 e5                	mov    %esp,%ebp
+ 63c:	57                   	push   %edi
+ 63d:	56                   	push   %esi
+ 63e:	53                   	push   %ebx
+ 63f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 642:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 644:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 647:	39 c8                	cmp    %ecx,%eax
+ 649:	73 15                	jae    660 <free+0x30>
+ 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+ 650:	39 d1                	cmp    %edx,%ecx
+ 652:	72 14                	jb     668 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 654:	39 d0                	cmp    %edx,%eax
+ 656:	73 10                	jae    668 <free+0x38>
+{
+ 658:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 65a:	8b 10                	mov    (%eax),%edx
+ 65c:	39 c8                	cmp    %ecx,%eax
+ 65e:	72 f0                	jb     650 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 660:	39 d0                	cmp    %edx,%eax
+ 662:	72 f4                	jb     658 <free+0x28>
+ 664:	39 d1                	cmp    %edx,%ecx
+ 666:	73 f0                	jae    658 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 668:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 66b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 66e:	39 fa                	cmp    %edi,%edx
+ 670:	74 1e                	je     690 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 672:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 675:	8b 50 04             	mov    0x4(%eax),%edx
+ 678:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 67b:	39 f1                	cmp    %esi,%ecx
+ 67d:	74 28                	je     6a7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 67f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 681:	5b                   	pop    %ebx
+  freep = p;
+ 682:	a3 bc 0a 00 00       	mov    %eax,0xabc
+}
+ 687:	5e                   	pop    %esi
+ 688:	5f                   	pop    %edi
+ 689:	5d                   	pop    %ebp
+ 68a:	c3                   	ret    
+ 68b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 68f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 690:	03 72 04             	add    0x4(%edx),%esi
+ 693:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 696:	8b 10                	mov    (%eax),%edx
+ 698:	8b 12                	mov    (%edx),%edx
+ 69a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 69d:	8b 50 04             	mov    0x4(%eax),%edx
+ 6a0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6a3:	39 f1                	cmp    %esi,%ecx
+ 6a5:	75 d8                	jne    67f <free+0x4f>
+    p->s.size += bp->s.size;
+ 6a7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6aa:	a3 bc 0a 00 00       	mov    %eax,0xabc
+    p->s.size += bp->s.size;
+ 6af:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6b2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6b5:	89 10                	mov    %edx,(%eax)
+}
+ 6b7:	5b                   	pop    %ebx
+ 6b8:	5e                   	pop    %esi
+ 6b9:	5f                   	pop    %edi
+ 6ba:	5d                   	pop    %ebp
+ 6bb:	c3                   	ret    
+ 6bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006c0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6c0:	f3 0f 1e fb          	endbr32 
+ 6c4:	55                   	push   %ebp
+ 6c5:	89 e5                	mov    %esp,%ebp
+ 6c7:	57                   	push   %edi
+ 6c8:	56                   	push   %esi
+ 6c9:	53                   	push   %ebx
+ 6ca:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6d0:	8b 3d bc 0a 00 00    	mov    0xabc,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6d6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6d9:	c1 ee 03             	shr    $0x3,%esi
+ 6dc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6df:	85 ff                	test   %edi,%edi
+ 6e1:	0f 84 a9 00 00 00    	je     790 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6e7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6e9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ec:	39 f1                	cmp    %esi,%ecx
+ 6ee:	73 6d                	jae    75d <malloc+0x9d>
+ 6f0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6f6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6fb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6fe:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 705:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 708:	eb 17                	jmp    721 <malloc+0x61>
+ 70a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 710:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 712:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 715:	39 f1                	cmp    %esi,%ecx
+ 717:	73 4f                	jae    768 <malloc+0xa8>
+ 719:	8b 3d bc 0a 00 00    	mov    0xabc,%edi
+ 71f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 721:	39 c7                	cmp    %eax,%edi
+ 723:	75 eb                	jne    710 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 725:	83 ec 0c             	sub    $0xc,%esp
+ 728:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 72b:	e8 3b fc ff ff       	call   36b <sbrk>
+  if(p == (char*)-1)
+ 730:	83 c4 10             	add    $0x10,%esp
+ 733:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 736:	74 1b                	je     753 <malloc+0x93>
+  hp->s.size = nu;
+ 738:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 73b:	83 ec 0c             	sub    $0xc,%esp
+ 73e:	83 c0 08             	add    $0x8,%eax
+ 741:	50                   	push   %eax
+ 742:	e8 e9 fe ff ff       	call   630 <free>
+  return freep;
+ 747:	a1 bc 0a 00 00       	mov    0xabc,%eax
+      if((p = morecore(nunits)) == 0)
+ 74c:	83 c4 10             	add    $0x10,%esp
+ 74f:	85 c0                	test   %eax,%eax
+ 751:	75 bd                	jne    710 <malloc+0x50>
+        return 0;
+  }
+}
+ 753:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 756:	31 c0                	xor    %eax,%eax
+}
+ 758:	5b                   	pop    %ebx
+ 759:	5e                   	pop    %esi
+ 75a:	5f                   	pop    %edi
+ 75b:	5d                   	pop    %ebp
+ 75c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 75d:	89 c2                	mov    %eax,%edx
+ 75f:	89 f8                	mov    %edi,%eax
+ 761:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 768:	39 ce                	cmp    %ecx,%esi
+ 76a:	74 54                	je     7c0 <malloc+0x100>
+        p->s.size -= nunits;
+ 76c:	29 f1                	sub    %esi,%ecx
+ 76e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 771:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 774:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 777:	a3 bc 0a 00 00       	mov    %eax,0xabc
+}
+ 77c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 77f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 782:	5b                   	pop    %ebx
+ 783:	5e                   	pop    %esi
+ 784:	5f                   	pop    %edi
+ 785:	5d                   	pop    %ebp
+ 786:	c3                   	ret    
+ 787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 78e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 790:	c7 05 bc 0a 00 00 c0 	movl   $0xac0,0xabc
+ 797:	0a 00 00 
+    base.s.size = 0;
+ 79a:	bf c0 0a 00 00       	mov    $0xac0,%edi
+    base.s.ptr = freep = prevp = &base;
+ 79f:	c7 05 c0 0a 00 00 c0 	movl   $0xac0,0xac0
+ 7a6:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a9:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 7ab:	c7 05 c4 0a 00 00 00 	movl   $0x0,0xac4
+ 7b2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7b5:	e9 36 ff ff ff       	jmp    6f0 <malloc+0x30>
+ 7ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7c0:	8b 0a                	mov    (%edx),%ecx
+ 7c2:	89 08                	mov    %ecx,(%eax)
+ 7c4:	eb b1                	jmp    777 <malloc+0xb7>
diff -ruN xv6-public/mkdir.d xv6-new/mkdir.d
--- xv6-public/mkdir.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/mkdir.d	2022-10-07 22:43:43.351886840 +0530
@@ -0,0 +1 @@
+mkdir.o: mkdir.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/mkdir.o and xv6-new/mkdir.o differ
diff -ruN xv6-public/mkdir.sym xv6-new/mkdir.sym
--- xv6-public/mkdir.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/mkdir.sym	2022-10-07 22:43:43.351886840 +0530
@@ -0,0 +1,62 @@
+00000000 .text
+000007c8 .rodata
+00000818 .eh_frame
+00000abc .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 mkdir.c
+00000000 ulib.c
+00000000 printf.c
+000003b0 printint
+00000804 digits.1096
+00000000 umalloc.c
+00000abc freep
+00000ac0 base
+00000080 strcpy
+00000460 printf
+000002b0 memmove
+0000032b mknod
+000001a0 gets
+00000363 getpid
+000006c0 malloc
+00000373 sleep
+000003a3 get_burst_time
+000002f3 pipe
+00000303 write
+0000033b fstat
+00000313 kill
+00000353 chdir
+0000031b exec
+000002eb wait
+000002fb read
+00000333 unlink
+000002db fork
+0000036b sbrk
+0000037b uptime
+00000abc __bss_start
+00000140 memset
+00000000 main
+0000039b set_burst_time
+000000b0 strcmp
+0000035b dup
+0000038b getMaxPid
+00000383 getNumProc
+00000393 getProcInfo
+00000220 stat
+00000abc _edata
+00000ac8 _end
+00000343 link
+000002e3 exit
+00000270 atoi
+00000100 strlen
+00000323 open
+00000160 strchr
+0000034b mkdir
+0000030b close
+00000630 free
Binary files xv6-public/mkfs and xv6-new/mkfs differ
Binary files xv6-public/mp.o and xv6-new/mp.o differ
diff -ruN xv6-public/partA_test1.asm xv6-new/partA_test1.asm
--- xv6-public/partA_test1.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/partA_test1.asm	2022-10-07 22:43:45.271886867 +0530
@@ -0,0 +1,1200 @@
+
+_partA_test1:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(void){
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	51                   	push   %ecx
+  12:	83 ec 04             	sub    $0x4,%esp
+    printf(1, "Total Number of Active Processes, as computed by getNumProc() system call: %d\n", getNumProc());
+  15:	e8 39 03 00 00       	call   353 <getNumProc>
+  1a:	83 ec 04             	sub    $0x4,%esp
+  1d:	50                   	push   %eax
+  1e:	68 98 07 00 00       	push   $0x798
+  23:	6a 01                	push   $0x1
+  25:	e8 06 04 00 00       	call   430 <printf>
+    printf(1, "Maximum PID among those Active Processes, as computed by getMaxPid() system call: %d\n", getMaxPid());
+  2a:	e8 2c 03 00 00       	call   35b <getMaxPid>
+  2f:	83 c4 0c             	add    $0xc,%esp
+  32:	50                   	push   %eax
+  33:	68 e8 07 00 00       	push   $0x7e8
+  38:	6a 01                	push   $0x1
+  3a:	e8 f1 03 00 00       	call   430 <printf>
+    exit();
+  3f:	e8 6f 02 00 00       	call   2b3 <exit>
+  44:	66 90                	xchg   %ax,%ax
+  46:	66 90                	xchg   %ax,%ax
+  48:	66 90                	xchg   %ax,%ax
+  4a:	66 90                	xchg   %ax,%ax
+  4c:	66 90                	xchg   %ax,%ax
+  4e:	66 90                	xchg   %ax,%ax
+
+00000050 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  50:	f3 0f 1e fb          	endbr32 
+  54:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  55:	31 c0                	xor    %eax,%eax
+{
+  57:	89 e5                	mov    %esp,%ebp
+  59:	53                   	push   %ebx
+  5a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  5d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  60:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  64:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  67:	83 c0 01             	add    $0x1,%eax
+  6a:	84 d2                	test   %dl,%dl
+  6c:	75 f2                	jne    60 <strcpy+0x10>
+    ;
+  return os;
+}
+  6e:	89 c8                	mov    %ecx,%eax
+  70:	5b                   	pop    %ebx
+  71:	5d                   	pop    %ebp
+  72:	c3                   	ret    
+  73:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000080 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  80:	f3 0f 1e fb          	endbr32 
+  84:	55                   	push   %ebp
+  85:	89 e5                	mov    %esp,%ebp
+  87:	53                   	push   %ebx
+  88:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  8b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  8e:	0f b6 01             	movzbl (%ecx),%eax
+  91:	0f b6 1a             	movzbl (%edx),%ebx
+  94:	84 c0                	test   %al,%al
+  96:	75 19                	jne    b1 <strcmp+0x31>
+  98:	eb 26                	jmp    c0 <strcmp+0x40>
+  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  a0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  a4:	83 c1 01             	add    $0x1,%ecx
+  a7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  aa:	0f b6 1a             	movzbl (%edx),%ebx
+  ad:	84 c0                	test   %al,%al
+  af:	74 0f                	je     c0 <strcmp+0x40>
+  b1:	38 d8                	cmp    %bl,%al
+  b3:	74 eb                	je     a0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  b5:	29 d8                	sub    %ebx,%eax
+}
+  b7:	5b                   	pop    %ebx
+  b8:	5d                   	pop    %ebp
+  b9:	c3                   	ret    
+  ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  c0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  c2:	29 d8                	sub    %ebx,%eax
+}
+  c4:	5b                   	pop    %ebx
+  c5:	5d                   	pop    %ebp
+  c6:	c3                   	ret    
+  c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ce:	66 90                	xchg   %ax,%ax
+
+000000d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  d0:	f3 0f 1e fb          	endbr32 
+  d4:	55                   	push   %ebp
+  d5:	89 e5                	mov    %esp,%ebp
+  d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  da:	80 3a 00             	cmpb   $0x0,(%edx)
+  dd:	74 21                	je     100 <strlen+0x30>
+  df:	31 c0                	xor    %eax,%eax
+  e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  e8:	83 c0 01             	add    $0x1,%eax
+  eb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+  ef:	89 c1                	mov    %eax,%ecx
+  f1:	75 f5                	jne    e8 <strlen+0x18>
+    ;
+  return n;
+}
+  f3:	89 c8                	mov    %ecx,%eax
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fe:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 100:	31 c9                	xor    %ecx,%ecx
+}
+ 102:	5d                   	pop    %ebp
+ 103:	89 c8                	mov    %ecx,%eax
+ 105:	c3                   	ret    
+ 106:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000110 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 110:	f3 0f 1e fb          	endbr32 
+ 114:	55                   	push   %ebp
+ 115:	89 e5                	mov    %esp,%ebp
+ 117:	57                   	push   %edi
+ 118:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 11b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 11e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 121:	89 d7                	mov    %edx,%edi
+ 123:	fc                   	cld    
+ 124:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 126:	89 d0                	mov    %edx,%eax
+ 128:	5f                   	pop    %edi
+ 129:	5d                   	pop    %ebp
+ 12a:	c3                   	ret    
+ 12b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 12f:	90                   	nop
+
+00000130 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 130:	f3 0f 1e fb          	endbr32 
+ 134:	55                   	push   %ebp
+ 135:	89 e5                	mov    %esp,%ebp
+ 137:	8b 45 08             	mov    0x8(%ebp),%eax
+ 13a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 13e:	0f b6 10             	movzbl (%eax),%edx
+ 141:	84 d2                	test   %dl,%dl
+ 143:	75 16                	jne    15b <strchr+0x2b>
+ 145:	eb 21                	jmp    168 <strchr+0x38>
+ 147:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 14e:	66 90                	xchg   %ax,%ax
+ 150:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 154:	83 c0 01             	add    $0x1,%eax
+ 157:	84 d2                	test   %dl,%dl
+ 159:	74 0d                	je     168 <strchr+0x38>
+    if(*s == c)
+ 15b:	38 d1                	cmp    %dl,%cl
+ 15d:	75 f1                	jne    150 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 15f:	5d                   	pop    %ebp
+ 160:	c3                   	ret    
+ 161:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 168:	31 c0                	xor    %eax,%eax
+}
+ 16a:	5d                   	pop    %ebp
+ 16b:	c3                   	ret    
+ 16c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000170 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 170:	f3 0f 1e fb          	endbr32 
+ 174:	55                   	push   %ebp
+ 175:	89 e5                	mov    %esp,%ebp
+ 177:	57                   	push   %edi
+ 178:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 179:	31 f6                	xor    %esi,%esi
+{
+ 17b:	53                   	push   %ebx
+ 17c:	89 f3                	mov    %esi,%ebx
+ 17e:	83 ec 1c             	sub    $0x1c,%esp
+ 181:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 184:	eb 33                	jmp    1b9 <gets+0x49>
+ 186:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 18d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 190:	83 ec 04             	sub    $0x4,%esp
+ 193:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 196:	6a 01                	push   $0x1
+ 198:	50                   	push   %eax
+ 199:	6a 00                	push   $0x0
+ 19b:	e8 2b 01 00 00       	call   2cb <read>
+    if(cc < 1)
+ 1a0:	83 c4 10             	add    $0x10,%esp
+ 1a3:	85 c0                	test   %eax,%eax
+ 1a5:	7e 1c                	jle    1c3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1a7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1ab:	83 c7 01             	add    $0x1,%edi
+ 1ae:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1b1:	3c 0a                	cmp    $0xa,%al
+ 1b3:	74 23                	je     1d8 <gets+0x68>
+ 1b5:	3c 0d                	cmp    $0xd,%al
+ 1b7:	74 1f                	je     1d8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1b9:	83 c3 01             	add    $0x1,%ebx
+ 1bc:	89 fe                	mov    %edi,%esi
+ 1be:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1c1:	7c cd                	jl     190 <gets+0x20>
+ 1c3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1c5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1c8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1cb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ce:	5b                   	pop    %ebx
+ 1cf:	5e                   	pop    %esi
+ 1d0:	5f                   	pop    %edi
+ 1d1:	5d                   	pop    %ebp
+ 1d2:	c3                   	ret    
+ 1d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1d7:	90                   	nop
+ 1d8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1db:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1de:	01 de                	add    %ebx,%esi
+ 1e0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1e2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1e5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1e8:	5b                   	pop    %ebx
+ 1e9:	5e                   	pop    %esi
+ 1ea:	5f                   	pop    %edi
+ 1eb:	5d                   	pop    %ebp
+ 1ec:	c3                   	ret    
+ 1ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001f0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1f0:	f3 0f 1e fb          	endbr32 
+ 1f4:	55                   	push   %ebp
+ 1f5:	89 e5                	mov    %esp,%ebp
+ 1f7:	56                   	push   %esi
+ 1f8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1f9:	83 ec 08             	sub    $0x8,%esp
+ 1fc:	6a 00                	push   $0x0
+ 1fe:	ff 75 08             	pushl  0x8(%ebp)
+ 201:	e8 ed 00 00 00       	call   2f3 <open>
+  if(fd < 0)
+ 206:	83 c4 10             	add    $0x10,%esp
+ 209:	85 c0                	test   %eax,%eax
+ 20b:	78 2b                	js     238 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 20d:	83 ec 08             	sub    $0x8,%esp
+ 210:	ff 75 0c             	pushl  0xc(%ebp)
+ 213:	89 c3                	mov    %eax,%ebx
+ 215:	50                   	push   %eax
+ 216:	e8 f0 00 00 00       	call   30b <fstat>
+  close(fd);
+ 21b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 21e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 220:	e8 b6 00 00 00       	call   2db <close>
+  return r;
+ 225:	83 c4 10             	add    $0x10,%esp
+}
+ 228:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 22b:	89 f0                	mov    %esi,%eax
+ 22d:	5b                   	pop    %ebx
+ 22e:	5e                   	pop    %esi
+ 22f:	5d                   	pop    %ebp
+ 230:	c3                   	ret    
+ 231:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 238:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 23d:	eb e9                	jmp    228 <stat+0x38>
+ 23f:	90                   	nop
+
+00000240 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 240:	f3 0f 1e fb          	endbr32 
+ 244:	55                   	push   %ebp
+ 245:	89 e5                	mov    %esp,%ebp
+ 247:	53                   	push   %ebx
+ 248:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 24b:	0f be 02             	movsbl (%edx),%eax
+ 24e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 251:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 254:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 259:	77 1a                	ja     275 <atoi+0x35>
+ 25b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 25f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 260:	83 c2 01             	add    $0x1,%edx
+ 263:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 266:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 26a:	0f be 02             	movsbl (%edx),%eax
+ 26d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 270:	80 fb 09             	cmp    $0x9,%bl
+ 273:	76 eb                	jbe    260 <atoi+0x20>
+  return n;
+}
+ 275:	89 c8                	mov    %ecx,%eax
+ 277:	5b                   	pop    %ebx
+ 278:	5d                   	pop    %ebp
+ 279:	c3                   	ret    
+ 27a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000280 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 280:	f3 0f 1e fb          	endbr32 
+ 284:	55                   	push   %ebp
+ 285:	89 e5                	mov    %esp,%ebp
+ 287:	57                   	push   %edi
+ 288:	8b 45 10             	mov    0x10(%ebp),%eax
+ 28b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 28e:	56                   	push   %esi
+ 28f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 292:	85 c0                	test   %eax,%eax
+ 294:	7e 0f                	jle    2a5 <memmove+0x25>
+ 296:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 298:	89 d7                	mov    %edx,%edi
+ 29a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2a0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2a1:	39 f8                	cmp    %edi,%eax
+ 2a3:	75 fb                	jne    2a0 <memmove+0x20>
+  return vdst;
+}
+ 2a5:	5e                   	pop    %esi
+ 2a6:	89 d0                	mov    %edx,%eax
+ 2a8:	5f                   	pop    %edi
+ 2a9:	5d                   	pop    %ebp
+ 2aa:	c3                   	ret    
+
+000002ab <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2ab:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2b0:	cd 40                	int    $0x40
+ 2b2:	c3                   	ret    
+
+000002b3 <exit>:
+SYSCALL(exit)
+ 2b3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2b8:	cd 40                	int    $0x40
+ 2ba:	c3                   	ret    
+
+000002bb <wait>:
+SYSCALL(wait)
+ 2bb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <pipe>:
+SYSCALL(pipe)
+ 2c3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <read>:
+SYSCALL(read)
+ 2cb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <write>:
+SYSCALL(write)
+ 2d3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <close>:
+SYSCALL(close)
+ 2db:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <kill>:
+SYSCALL(kill)
+ 2e3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <exec>:
+SYSCALL(exec)
+ 2eb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <open>:
+SYSCALL(open)
+ 2f3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <mknod>:
+SYSCALL(mknod)
+ 2fb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <unlink>:
+SYSCALL(unlink)
+ 303:	b8 12 00 00 00       	mov    $0x12,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <fstat>:
+SYSCALL(fstat)
+ 30b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <link>:
+SYSCALL(link)
+ 313:	b8 13 00 00 00       	mov    $0x13,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <mkdir>:
+SYSCALL(mkdir)
+ 31b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <chdir>:
+SYSCALL(chdir)
+ 323:	b8 09 00 00 00       	mov    $0x9,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <dup>:
+SYSCALL(dup)
+ 32b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <getpid>:
+SYSCALL(getpid)
+ 333:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <sbrk>:
+SYSCALL(sbrk)
+ 33b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <sleep>:
+SYSCALL(sleep)
+ 343:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <uptime>:
+SYSCALL(uptime)
+ 34b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <getNumProc>:
+SYSCALL(getNumProc)
+ 353:	b8 16 00 00 00       	mov    $0x16,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 35b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 363:	b8 18 00 00 00       	mov    $0x18,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 36b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <get_burst_time>:
+ 373:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+ 37b:	66 90                	xchg   %ax,%ax
+ 37d:	66 90                	xchg   %ax,%ax
+ 37f:	90                   	nop
+
+00000380 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	57                   	push   %edi
+ 384:	56                   	push   %esi
+ 385:	53                   	push   %ebx
+ 386:	83 ec 3c             	sub    $0x3c,%esp
+ 389:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 38c:	89 d1                	mov    %edx,%ecx
+{
+ 38e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 391:	85 d2                	test   %edx,%edx
+ 393:	0f 89 7f 00 00 00    	jns    418 <printint+0x98>
+ 399:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 39d:	74 79                	je     418 <printint+0x98>
+    neg = 1;
+ 39f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3a6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3a8:	31 db                	xor    %ebx,%ebx
+ 3aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3ad:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3b0:	89 c8                	mov    %ecx,%eax
+ 3b2:	31 d2                	xor    %edx,%edx
+ 3b4:	89 cf                	mov    %ecx,%edi
+ 3b6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3b9:	0f b6 92 48 08 00 00 	movzbl 0x848(%edx),%edx
+ 3c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3c3:	89 d8                	mov    %ebx,%eax
+ 3c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3d1:	76 dd                	jbe    3b0 <printint+0x30>
+  if(neg)
+ 3d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3d6:	85 c9                	test   %ecx,%ecx
+ 3d8:	74 0c                	je     3e6 <printint+0x66>
+    buf[i++] = '-';
+ 3da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3df:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3ed:	eb 07                	jmp    3f6 <printint+0x76>
+ 3ef:	90                   	nop
+ 3f0:	0f b6 13             	movzbl (%ebx),%edx
+ 3f3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3f6:	83 ec 04             	sub    $0x4,%esp
+ 3f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3fc:	6a 01                	push   $0x1
+ 3fe:	56                   	push   %esi
+ 3ff:	57                   	push   %edi
+ 400:	e8 ce fe ff ff       	call   2d3 <write>
+  while(--i >= 0)
+ 405:	83 c4 10             	add    $0x10,%esp
+ 408:	39 de                	cmp    %ebx,%esi
+ 40a:	75 e4                	jne    3f0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 40f:	5b                   	pop    %ebx
+ 410:	5e                   	pop    %esi
+ 411:	5f                   	pop    %edi
+ 412:	5d                   	pop    %ebp
+ 413:	c3                   	ret    
+ 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 418:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 41f:	eb 87                	jmp    3a8 <printint+0x28>
+ 421:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 428:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 42f:	90                   	nop
+
+00000430 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 430:	f3 0f 1e fb          	endbr32 
+ 434:	55                   	push   %ebp
+ 435:	89 e5                	mov    %esp,%ebp
+ 437:	57                   	push   %edi
+ 438:	56                   	push   %esi
+ 439:	53                   	push   %ebx
+ 43a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 43d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 440:	0f b6 1e             	movzbl (%esi),%ebx
+ 443:	84 db                	test   %bl,%bl
+ 445:	0f 84 b4 00 00 00    	je     4ff <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 44b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 44e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 451:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 454:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 456:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 459:	eb 33                	jmp    48e <printf+0x5e>
+ 45b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 45f:	90                   	nop
+ 460:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 463:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 468:	83 f8 25             	cmp    $0x25,%eax
+ 46b:	74 17                	je     484 <printf+0x54>
+  write(fd, &c, 1);
+ 46d:	83 ec 04             	sub    $0x4,%esp
+ 470:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 473:	6a 01                	push   $0x1
+ 475:	57                   	push   %edi
+ 476:	ff 75 08             	pushl  0x8(%ebp)
+ 479:	e8 55 fe ff ff       	call   2d3 <write>
+ 47e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 481:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 484:	0f b6 1e             	movzbl (%esi),%ebx
+ 487:	83 c6 01             	add    $0x1,%esi
+ 48a:	84 db                	test   %bl,%bl
+ 48c:	74 71                	je     4ff <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 48e:	0f be cb             	movsbl %bl,%ecx
+ 491:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 494:	85 d2                	test   %edx,%edx
+ 496:	74 c8                	je     460 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 498:	83 fa 25             	cmp    $0x25,%edx
+ 49b:	75 e7                	jne    484 <printf+0x54>
+      if(c == 'd'){
+ 49d:	83 f8 64             	cmp    $0x64,%eax
+ 4a0:	0f 84 9a 00 00 00    	je     540 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4a6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4ac:	83 f9 70             	cmp    $0x70,%ecx
+ 4af:	74 5f                	je     510 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4b1:	83 f8 73             	cmp    $0x73,%eax
+ 4b4:	0f 84 d6 00 00 00    	je     590 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ba:	83 f8 63             	cmp    $0x63,%eax
+ 4bd:	0f 84 8d 00 00 00    	je     550 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4c3:	83 f8 25             	cmp    $0x25,%eax
+ 4c6:	0f 84 b4 00 00 00    	je     580 <printf+0x150>
+  write(fd, &c, 1);
+ 4cc:	83 ec 04             	sub    $0x4,%esp
+ 4cf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4d3:	6a 01                	push   $0x1
+ 4d5:	57                   	push   %edi
+ 4d6:	ff 75 08             	pushl  0x8(%ebp)
+ 4d9:	e8 f5 fd ff ff       	call   2d3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4de:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 4e1:	83 c4 0c             	add    $0xc,%esp
+ 4e4:	6a 01                	push   $0x1
+ 4e6:	83 c6 01             	add    $0x1,%esi
+ 4e9:	57                   	push   %edi
+ 4ea:	ff 75 08             	pushl  0x8(%ebp)
+ 4ed:	e8 e1 fd ff ff       	call   2d3 <write>
+  for(i = 0; fmt[i]; i++){
+ 4f2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 4f6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 4f9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 4fb:	84 db                	test   %bl,%bl
+ 4fd:	75 8f                	jne    48e <printf+0x5e>
+    }
+  }
+}
+ 4ff:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 502:	5b                   	pop    %ebx
+ 503:	5e                   	pop    %esi
+ 504:	5f                   	pop    %edi
+ 505:	5d                   	pop    %ebp
+ 506:	c3                   	ret    
+ 507:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 50e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 510:	83 ec 0c             	sub    $0xc,%esp
+ 513:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 518:	6a 00                	push   $0x0
+ 51a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 51d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 520:	8b 13                	mov    (%ebx),%edx
+ 522:	e8 59 fe ff ff       	call   380 <printint>
+        ap++;
+ 527:	89 d8                	mov    %ebx,%eax
+ 529:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 52c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 52e:	83 c0 04             	add    $0x4,%eax
+ 531:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 534:	e9 4b ff ff ff       	jmp    484 <printf+0x54>
+ 539:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 540:	83 ec 0c             	sub    $0xc,%esp
+ 543:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 548:	6a 01                	push   $0x1
+ 54a:	eb ce                	jmp    51a <printf+0xea>
+ 54c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 550:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 553:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 556:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 558:	6a 01                	push   $0x1
+        ap++;
+ 55a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 55d:	57                   	push   %edi
+ 55e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 561:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 564:	e8 6a fd ff ff       	call   2d3 <write>
+        ap++;
+ 569:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 56c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 56f:	31 d2                	xor    %edx,%edx
+ 571:	e9 0e ff ff ff       	jmp    484 <printf+0x54>
+ 576:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 57d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 580:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 583:	83 ec 04             	sub    $0x4,%esp
+ 586:	e9 59 ff ff ff       	jmp    4e4 <printf+0xb4>
+ 58b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 58f:	90                   	nop
+        s = (char*)*ap;
+ 590:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 593:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 595:	83 c0 04             	add    $0x4,%eax
+ 598:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 59b:	85 db                	test   %ebx,%ebx
+ 59d:	74 17                	je     5b6 <printf+0x186>
+        while(*s != 0){
+ 59f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5a2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5a4:	84 c0                	test   %al,%al
+ 5a6:	0f 84 d8 fe ff ff    	je     484 <printf+0x54>
+ 5ac:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5af:	89 de                	mov    %ebx,%esi
+ 5b1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5b4:	eb 1a                	jmp    5d0 <printf+0x1a0>
+          s = "(null)";
+ 5b6:	bb 3e 08 00 00       	mov    $0x83e,%ebx
+        while(*s != 0){
+ 5bb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5be:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5c3:	89 de                	mov    %ebx,%esi
+ 5c5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5cf:	90                   	nop
+  write(fd, &c, 1);
+ 5d0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5d3:	83 c6 01             	add    $0x1,%esi
+ 5d6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5d9:	6a 01                	push   $0x1
+ 5db:	57                   	push   %edi
+ 5dc:	53                   	push   %ebx
+ 5dd:	e8 f1 fc ff ff       	call   2d3 <write>
+        while(*s != 0){
+ 5e2:	0f b6 06             	movzbl (%esi),%eax
+ 5e5:	83 c4 10             	add    $0x10,%esp
+ 5e8:	84 c0                	test   %al,%al
+ 5ea:	75 e4                	jne    5d0 <printf+0x1a0>
+ 5ec:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 5ef:	31 d2                	xor    %edx,%edx
+ 5f1:	e9 8e fe ff ff       	jmp    484 <printf+0x54>
+ 5f6:	66 90                	xchg   %ax,%ax
+ 5f8:	66 90                	xchg   %ax,%ax
+ 5fa:	66 90                	xchg   %ax,%ax
+ 5fc:	66 90                	xchg   %ax,%ax
+ 5fe:	66 90                	xchg   %ax,%ax
+
+00000600 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 600:	f3 0f 1e fb          	endbr32 
+ 604:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 605:	a1 f0 0a 00 00       	mov    0xaf0,%eax
+{
+ 60a:	89 e5                	mov    %esp,%ebp
+ 60c:	57                   	push   %edi
+ 60d:	56                   	push   %esi
+ 60e:	53                   	push   %ebx
+ 60f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 612:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 614:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 617:	39 c8                	cmp    %ecx,%eax
+ 619:	73 15                	jae    630 <free+0x30>
+ 61b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 61f:	90                   	nop
+ 620:	39 d1                	cmp    %edx,%ecx
+ 622:	72 14                	jb     638 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 624:	39 d0                	cmp    %edx,%eax
+ 626:	73 10                	jae    638 <free+0x38>
+{
+ 628:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 62a:	8b 10                	mov    (%eax),%edx
+ 62c:	39 c8                	cmp    %ecx,%eax
+ 62e:	72 f0                	jb     620 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 630:	39 d0                	cmp    %edx,%eax
+ 632:	72 f4                	jb     628 <free+0x28>
+ 634:	39 d1                	cmp    %edx,%ecx
+ 636:	73 f0                	jae    628 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 638:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 63b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 63e:	39 fa                	cmp    %edi,%edx
+ 640:	74 1e                	je     660 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 642:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 645:	8b 50 04             	mov    0x4(%eax),%edx
+ 648:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 64b:	39 f1                	cmp    %esi,%ecx
+ 64d:	74 28                	je     677 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 64f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 651:	5b                   	pop    %ebx
+  freep = p;
+ 652:	a3 f0 0a 00 00       	mov    %eax,0xaf0
+}
+ 657:	5e                   	pop    %esi
+ 658:	5f                   	pop    %edi
+ 659:	5d                   	pop    %ebp
+ 65a:	c3                   	ret    
+ 65b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 65f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 660:	03 72 04             	add    0x4(%edx),%esi
+ 663:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 666:	8b 10                	mov    (%eax),%edx
+ 668:	8b 12                	mov    (%edx),%edx
+ 66a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 66d:	8b 50 04             	mov    0x4(%eax),%edx
+ 670:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 673:	39 f1                	cmp    %esi,%ecx
+ 675:	75 d8                	jne    64f <free+0x4f>
+    p->s.size += bp->s.size;
+ 677:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 67a:	a3 f0 0a 00 00       	mov    %eax,0xaf0
+    p->s.size += bp->s.size;
+ 67f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 682:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 685:	89 10                	mov    %edx,(%eax)
+}
+ 687:	5b                   	pop    %ebx
+ 688:	5e                   	pop    %esi
+ 689:	5f                   	pop    %edi
+ 68a:	5d                   	pop    %ebp
+ 68b:	c3                   	ret    
+ 68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000690 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 690:	f3 0f 1e fb          	endbr32 
+ 694:	55                   	push   %ebp
+ 695:	89 e5                	mov    %esp,%ebp
+ 697:	57                   	push   %edi
+ 698:	56                   	push   %esi
+ 699:	53                   	push   %ebx
+ 69a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 69d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6a0:	8b 3d f0 0a 00 00    	mov    0xaf0,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6a6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6a9:	c1 ee 03             	shr    $0x3,%esi
+ 6ac:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6af:	85 ff                	test   %edi,%edi
+ 6b1:	0f 84 a9 00 00 00    	je     760 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6b7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6b9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6bc:	39 f1                	cmp    %esi,%ecx
+ 6be:	73 6d                	jae    72d <malloc+0x9d>
+ 6c0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6c6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6cb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ce:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6d5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6d8:	eb 17                	jmp    6f1 <malloc+0x61>
+ 6da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6e0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 6e2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6e5:	39 f1                	cmp    %esi,%ecx
+ 6e7:	73 4f                	jae    738 <malloc+0xa8>
+ 6e9:	8b 3d f0 0a 00 00    	mov    0xaf0,%edi
+ 6ef:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6f1:	39 c7                	cmp    %eax,%edi
+ 6f3:	75 eb                	jne    6e0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 6f5:	83 ec 0c             	sub    $0xc,%esp
+ 6f8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 6fb:	e8 3b fc ff ff       	call   33b <sbrk>
+  if(p == (char*)-1)
+ 700:	83 c4 10             	add    $0x10,%esp
+ 703:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 706:	74 1b                	je     723 <malloc+0x93>
+  hp->s.size = nu;
+ 708:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 70b:	83 ec 0c             	sub    $0xc,%esp
+ 70e:	83 c0 08             	add    $0x8,%eax
+ 711:	50                   	push   %eax
+ 712:	e8 e9 fe ff ff       	call   600 <free>
+  return freep;
+ 717:	a1 f0 0a 00 00       	mov    0xaf0,%eax
+      if((p = morecore(nunits)) == 0)
+ 71c:	83 c4 10             	add    $0x10,%esp
+ 71f:	85 c0                	test   %eax,%eax
+ 721:	75 bd                	jne    6e0 <malloc+0x50>
+        return 0;
+  }
+}
+ 723:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 726:	31 c0                	xor    %eax,%eax
+}
+ 728:	5b                   	pop    %ebx
+ 729:	5e                   	pop    %esi
+ 72a:	5f                   	pop    %edi
+ 72b:	5d                   	pop    %ebp
+ 72c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 72d:	89 c2                	mov    %eax,%edx
+ 72f:	89 f8                	mov    %edi,%eax
+ 731:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 738:	39 ce                	cmp    %ecx,%esi
+ 73a:	74 54                	je     790 <malloc+0x100>
+        p->s.size -= nunits;
+ 73c:	29 f1                	sub    %esi,%ecx
+ 73e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 741:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 744:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 747:	a3 f0 0a 00 00       	mov    %eax,0xaf0
+}
+ 74c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 74f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 752:	5b                   	pop    %ebx
+ 753:	5e                   	pop    %esi
+ 754:	5f                   	pop    %edi
+ 755:	5d                   	pop    %ebp
+ 756:	c3                   	ret    
+ 757:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 75e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 760:	c7 05 f0 0a 00 00 f4 	movl   $0xaf4,0xaf0
+ 767:	0a 00 00 
+    base.s.size = 0;
+ 76a:	bf f4 0a 00 00       	mov    $0xaf4,%edi
+    base.s.ptr = freep = prevp = &base;
+ 76f:	c7 05 f4 0a 00 00 f4 	movl   $0xaf4,0xaf4
+ 776:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 779:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 77b:	c7 05 f8 0a 00 00 00 	movl   $0x0,0xaf8
+ 782:	00 00 00 
+    if(p->s.size >= nunits){
+ 785:	e9 36 ff ff ff       	jmp    6c0 <malloc+0x30>
+ 78a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 790:	8b 0a                	mov    (%edx),%ecx
+ 792:	89 08                	mov    %ecx,(%eax)
+ 794:	eb b1                	jmp    747 <malloc+0xb7>
diff -ruN xv6-public/partA_test1.c xv6-new/partA_test1.c
--- xv6-public/partA_test1.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/partA_test1.c	2022-10-04 22:36:28.268194300 +0530
@@ -0,0 +1,9 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(void){
+    printf(1, "Total Number of Active Processes, as computed by getNumProc() system call: %d\n", getNumProc());
+    printf(1, "Maximum PID among those Active Processes, as computed by getMaxPid() system call: %d\n", getMaxPid());
+    exit();
+}
\ No newline at end of file
diff -ruN xv6-public/partA_test1.d xv6-new/partA_test1.d
--- xv6-public/partA_test1.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/partA_test1.d	2022-10-07 22:43:45.271886867 +0530
@@ -0,0 +1,2 @@
+partA_test1.o: partA_test1.c /usr/include/stdc-predef.h types.h stat.h \
+ user.h
Binary files xv6-public/partA_test1.o and xv6-new/partA_test1.o differ
diff -ruN xv6-public/partA_test1.sym xv6-new/partA_test1.sym
--- xv6-public/partA_test1.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/partA_test1.sym	2022-10-07 22:43:45.271886867 +0530
@@ -0,0 +1,62 @@
+00000000 .text
+00000798 .rodata
+0000085c .eh_frame
+00000af0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 partA_test1.c
+00000000 ulib.c
+00000000 printf.c
+00000380 printint
+00000848 digits.1096
+00000000 umalloc.c
+00000af0 freep
+00000af4 base
+00000050 strcpy
+00000430 printf
+00000280 memmove
+000002fb mknod
+00000170 gets
+00000333 getpid
+00000690 malloc
+00000343 sleep
+00000373 get_burst_time
+000002c3 pipe
+000002d3 write
+0000030b fstat
+000002e3 kill
+00000323 chdir
+000002eb exec
+000002bb wait
+000002cb read
+00000303 unlink
+000002ab fork
+0000033b sbrk
+0000034b uptime
+00000af0 __bss_start
+00000110 memset
+00000000 main
+0000036b set_burst_time
+00000080 strcmp
+0000032b dup
+0000035b getMaxPid
+00000353 getNumProc
+00000363 getProcInfo
+000001f0 stat
+00000af0 _edata
+00000afc _end
+00000313 link
+000002b3 exit
+00000240 atoi
+000000d0 strlen
+000002f3 open
+00000130 strchr
+0000031b mkdir
+000002db close
+00000600 free
diff -ruN xv6-public/partA_test2.asm xv6-new/partA_test2.asm
--- xv6-public/partA_test2.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/partA_test2.asm	2022-10-07 22:43:45.271886867 +0530
@@ -0,0 +1,1232 @@
+
+_partA_test2:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "processInfo.h"
+
+int main(void){
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	56                   	push   %esi
+  12:	53                   	push   %ebx
+    struct processInfo procInfo;
+    printf(1, "PID    ParentPID    SIZE    Number of Context Switches\n");
+
+    for(int pid=1; pid<=getMaxPid(); pid++){
+        if(getProcInfo(pid, &procInfo) == 0){ 
+  13:	8d 75 dc             	lea    -0x24(%ebp),%esi
+    for(int pid=1; pid<=getMaxPid(); pid++){
+  16:	bb 01 00 00 00       	mov    $0x1,%ebx
+int main(void){
+  1b:	51                   	push   %ecx
+  1c:	83 ec 24             	sub    $0x24,%esp
+    printf(1, "PID    ParentPID    SIZE    Number of Context Switches\n");
+  1f:	68 c8 07 00 00       	push   $0x7c8
+  24:	6a 01                	push   $0x1
+  26:	e8 35 04 00 00       	call   460 <printf>
+    for(int pid=1; pid<=getMaxPid(); pid++){
+  2b:	83 c4 10             	add    $0x10,%esp
+  2e:	eb 03                	jmp    33 <main+0x33>
+  30:	83 c3 01             	add    $0x1,%ebx
+  33:	e8 53 03 00 00       	call   38b <getMaxPid>
+  38:	39 d8                	cmp    %ebx,%eax
+  3a:	7c 34                	jl     70 <main+0x70>
+        if(getProcInfo(pid, &procInfo) == 0){ 
+  3c:	83 ec 08             	sub    $0x8,%esp
+  3f:	56                   	push   %esi
+  40:	53                   	push   %ebx
+  41:	e8 4d 03 00 00       	call   393 <getProcInfo>
+  46:	83 c4 10             	add    $0x10,%esp
+  49:	85 c0                	test   %eax,%eax
+  4b:	75 e3                	jne    30 <main+0x30>
+	        printf(1, "%d      %d      %d    %d\n", pid, procInfo.ppid, procInfo.psize, procInfo.numberContextSwitches);
+  4d:	83 ec 08             	sub    $0x8,%esp
+  50:	ff 75 e4             	pushl  -0x1c(%ebp)
+  53:	ff 75 e0             	pushl  -0x20(%ebp)
+  56:	ff 75 dc             	pushl  -0x24(%ebp)
+  59:	53                   	push   %ebx
+  5a:	68 00 08 00 00       	push   $0x800
+  5f:	6a 01                	push   $0x1
+  61:	e8 fa 03 00 00       	call   460 <printf>
+  66:	83 c4 20             	add    $0x20,%esp
+  69:	eb c5                	jmp    30 <main+0x30>
+  6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  6f:	90                   	nop
+        }
+    }
+    exit();
+  70:	e8 6e 02 00 00       	call   2e3 <exit>
+  75:	66 90                	xchg   %ax,%ax
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	f3 0f 1e fb          	endbr32 
+  84:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  85:	31 c0                	xor    %eax,%eax
+{
+  87:	89 e5                	mov    %esp,%ebp
+  89:	53                   	push   %ebx
+  8a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  8d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  90:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  94:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  97:	83 c0 01             	add    $0x1,%eax
+  9a:	84 d2                	test   %dl,%dl
+  9c:	75 f2                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  9e:	89 c8                	mov    %ecx,%eax
+  a0:	5b                   	pop    %ebx
+  a1:	5d                   	pop    %ebp
+  a2:	c3                   	ret    
+  a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	f3 0f 1e fb          	endbr32 
+  b4:	55                   	push   %ebp
+  b5:	89 e5                	mov    %esp,%ebp
+  b7:	53                   	push   %ebx
+  b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  bb:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  be:	0f b6 01             	movzbl (%ecx),%eax
+  c1:	0f b6 1a             	movzbl (%edx),%ebx
+  c4:	84 c0                	test   %al,%al
+  c6:	75 19                	jne    e1 <strcmp+0x31>
+  c8:	eb 26                	jmp    f0 <strcmp+0x40>
+  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  d0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  d4:	83 c1 01             	add    $0x1,%ecx
+  d7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  da:	0f b6 1a             	movzbl (%edx),%ebx
+  dd:	84 c0                	test   %al,%al
+  df:	74 0f                	je     f0 <strcmp+0x40>
+  e1:	38 d8                	cmp    %bl,%al
+  e3:	74 eb                	je     d0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  e5:	29 d8                	sub    %ebx,%eax
+}
+  e7:	5b                   	pop    %ebx
+  e8:	5d                   	pop    %ebp
+  e9:	c3                   	ret    
+  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  f0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  f2:	29 d8                	sub    %ebx,%eax
+}
+  f4:	5b                   	pop    %ebx
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fe:	66 90                	xchg   %ax,%ax
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	f3 0f 1e fb          	endbr32 
+ 104:	55                   	push   %ebp
+ 105:	89 e5                	mov    %esp,%ebp
+ 107:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 10a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 10d:	74 21                	je     130 <strlen+0x30>
+ 10f:	31 c0                	xor    %eax,%eax
+ 111:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 118:	83 c0 01             	add    $0x1,%eax
+ 11b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 11f:	89 c1                	mov    %eax,%ecx
+ 121:	75 f5                	jne    118 <strlen+0x18>
+    ;
+  return n;
+}
+ 123:	89 c8                	mov    %ecx,%eax
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 130:	31 c9                	xor    %ecx,%ecx
+}
+ 132:	5d                   	pop    %ebp
+ 133:	89 c8                	mov    %ecx,%eax
+ 135:	c3                   	ret    
+ 136:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000140 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+ 145:	89 e5                	mov    %esp,%ebp
+ 147:	57                   	push   %edi
+ 148:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 14b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 14e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 151:	89 d7                	mov    %edx,%edi
+ 153:	fc                   	cld    
+ 154:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 156:	89 d0                	mov    %edx,%eax
+ 158:	5f                   	pop    %edi
+ 159:	5d                   	pop    %ebp
+ 15a:	c3                   	ret    
+ 15b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 15f:	90                   	nop
+
+00000160 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 160:	f3 0f 1e fb          	endbr32 
+ 164:	55                   	push   %ebp
+ 165:	89 e5                	mov    %esp,%ebp
+ 167:	8b 45 08             	mov    0x8(%ebp),%eax
+ 16a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 16e:	0f b6 10             	movzbl (%eax),%edx
+ 171:	84 d2                	test   %dl,%dl
+ 173:	75 16                	jne    18b <strchr+0x2b>
+ 175:	eb 21                	jmp    198 <strchr+0x38>
+ 177:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17e:	66 90                	xchg   %ax,%ax
+ 180:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 184:	83 c0 01             	add    $0x1,%eax
+ 187:	84 d2                	test   %dl,%dl
+ 189:	74 0d                	je     198 <strchr+0x38>
+    if(*s == c)
+ 18b:	38 d1                	cmp    %dl,%cl
+ 18d:	75 f1                	jne    180 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 18f:	5d                   	pop    %ebp
+ 190:	c3                   	ret    
+ 191:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 198:	31 c0                	xor    %eax,%eax
+}
+ 19a:	5d                   	pop    %ebp
+ 19b:	c3                   	ret    
+ 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001a0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1a0:	f3 0f 1e fb          	endbr32 
+ 1a4:	55                   	push   %ebp
+ 1a5:	89 e5                	mov    %esp,%ebp
+ 1a7:	57                   	push   %edi
+ 1a8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1a9:	31 f6                	xor    %esi,%esi
+{
+ 1ab:	53                   	push   %ebx
+ 1ac:	89 f3                	mov    %esi,%ebx
+ 1ae:	83 ec 1c             	sub    $0x1c,%esp
+ 1b1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1b4:	eb 33                	jmp    1e9 <gets+0x49>
+ 1b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bd:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1c0:	83 ec 04             	sub    $0x4,%esp
+ 1c3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1c6:	6a 01                	push   $0x1
+ 1c8:	50                   	push   %eax
+ 1c9:	6a 00                	push   $0x0
+ 1cb:	e8 2b 01 00 00       	call   2fb <read>
+    if(cc < 1)
+ 1d0:	83 c4 10             	add    $0x10,%esp
+ 1d3:	85 c0                	test   %eax,%eax
+ 1d5:	7e 1c                	jle    1f3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1d7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1db:	83 c7 01             	add    $0x1,%edi
+ 1de:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1e1:	3c 0a                	cmp    $0xa,%al
+ 1e3:	74 23                	je     208 <gets+0x68>
+ 1e5:	3c 0d                	cmp    $0xd,%al
+ 1e7:	74 1f                	je     208 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1e9:	83 c3 01             	add    $0x1,%ebx
+ 1ec:	89 fe                	mov    %edi,%esi
+ 1ee:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1f1:	7c cd                	jl     1c0 <gets+0x20>
+ 1f3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1f8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1fe:	5b                   	pop    %ebx
+ 1ff:	5e                   	pop    %esi
+ 200:	5f                   	pop    %edi
+ 201:	5d                   	pop    %ebp
+ 202:	c3                   	ret    
+ 203:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 207:	90                   	nop
+ 208:	8b 75 08             	mov    0x8(%ebp),%esi
+ 20b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 20e:	01 de                	add    %ebx,%esi
+ 210:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 212:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 215:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 218:	5b                   	pop    %ebx
+ 219:	5e                   	pop    %esi
+ 21a:	5f                   	pop    %edi
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000220 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	56                   	push   %esi
+ 228:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	6a 00                	push   $0x0
+ 22e:	ff 75 08             	pushl  0x8(%ebp)
+ 231:	e8 ed 00 00 00       	call   323 <open>
+  if(fd < 0)
+ 236:	83 c4 10             	add    $0x10,%esp
+ 239:	85 c0                	test   %eax,%eax
+ 23b:	78 2b                	js     268 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 23d:	83 ec 08             	sub    $0x8,%esp
+ 240:	ff 75 0c             	pushl  0xc(%ebp)
+ 243:	89 c3                	mov    %eax,%ebx
+ 245:	50                   	push   %eax
+ 246:	e8 f0 00 00 00       	call   33b <fstat>
+  close(fd);
+ 24b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 24e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 250:	e8 b6 00 00 00       	call   30b <close>
+  return r;
+ 255:	83 c4 10             	add    $0x10,%esp
+}
+ 258:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 25b:	89 f0                	mov    %esi,%eax
+ 25d:	5b                   	pop    %ebx
+ 25e:	5e                   	pop    %esi
+ 25f:	5d                   	pop    %ebp
+ 260:	c3                   	ret    
+ 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 268:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 26d:	eb e9                	jmp    258 <stat+0x38>
+ 26f:	90                   	nop
+
+00000270 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	53                   	push   %ebx
+ 278:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 27b:	0f be 02             	movsbl (%edx),%eax
+ 27e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 281:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 284:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 289:	77 1a                	ja     2a5 <atoi+0x35>
+ 28b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 28f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 290:	83 c2 01             	add    $0x1,%edx
+ 293:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 296:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 29a:	0f be 02             	movsbl (%edx),%eax
+ 29d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 2a0:	80 fb 09             	cmp    $0x9,%bl
+ 2a3:	76 eb                	jbe    290 <atoi+0x20>
+  return n;
+}
+ 2a5:	89 c8                	mov    %ecx,%eax
+ 2a7:	5b                   	pop    %ebx
+ 2a8:	5d                   	pop    %ebp
+ 2a9:	c3                   	ret    
+ 2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000002b0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	57                   	push   %edi
+ 2b8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2bb:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2be:	56                   	push   %esi
+ 2bf:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2c2:	85 c0                	test   %eax,%eax
+ 2c4:	7e 0f                	jle    2d5 <memmove+0x25>
+ 2c6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2c8:	89 d7                	mov    %edx,%edi
+ 2ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2d0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2d1:	39 f8                	cmp    %edi,%eax
+ 2d3:	75 fb                	jne    2d0 <memmove+0x20>
+  return vdst;
+}
+ 2d5:	5e                   	pop    %esi
+ 2d6:	89 d0                	mov    %edx,%eax
+ 2d8:	5f                   	pop    %edi
+ 2d9:	5d                   	pop    %ebp
+ 2da:	c3                   	ret    
+
+000002db <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2db:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <exit>:
+SYSCALL(exit)
+ 2e3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <wait>:
+SYSCALL(wait)
+ 2eb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <pipe>:
+SYSCALL(pipe)
+ 2f3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <read>:
+SYSCALL(read)
+ 2fb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <write>:
+SYSCALL(write)
+ 303:	b8 10 00 00 00       	mov    $0x10,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <close>:
+SYSCALL(close)
+ 30b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <kill>:
+SYSCALL(kill)
+ 313:	b8 06 00 00 00       	mov    $0x6,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <exec>:
+SYSCALL(exec)
+ 31b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <open>:
+SYSCALL(open)
+ 323:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <mknod>:
+SYSCALL(mknod)
+ 32b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <unlink>:
+SYSCALL(unlink)
+ 333:	b8 12 00 00 00       	mov    $0x12,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <fstat>:
+SYSCALL(fstat)
+ 33b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <link>:
+SYSCALL(link)
+ 343:	b8 13 00 00 00       	mov    $0x13,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <mkdir>:
+SYSCALL(mkdir)
+ 34b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <chdir>:
+SYSCALL(chdir)
+ 353:	b8 09 00 00 00       	mov    $0x9,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <dup>:
+SYSCALL(dup)
+ 35b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <getpid>:
+SYSCALL(getpid)
+ 363:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <sbrk>:
+SYSCALL(sbrk)
+ 36b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <sleep>:
+SYSCALL(sleep)
+ 373:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <uptime>:
+SYSCALL(uptime)
+ 37b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <getNumProc>:
+SYSCALL(getNumProc)
+ 383:	b8 16 00 00 00       	mov    $0x16,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 38b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 393:	b8 18 00 00 00       	mov    $0x18,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 39b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <get_burst_time>:
+ 3a3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+ 3ab:	66 90                	xchg   %ax,%ax
+ 3ad:	66 90                	xchg   %ax,%ax
+ 3af:	90                   	nop
+
+000003b0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3b0:	55                   	push   %ebp
+ 3b1:	89 e5                	mov    %esp,%ebp
+ 3b3:	57                   	push   %edi
+ 3b4:	56                   	push   %esi
+ 3b5:	53                   	push   %ebx
+ 3b6:	83 ec 3c             	sub    $0x3c,%esp
+ 3b9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3bc:	89 d1                	mov    %edx,%ecx
+{
+ 3be:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3c1:	85 d2                	test   %edx,%edx
+ 3c3:	0f 89 7f 00 00 00    	jns    448 <printint+0x98>
+ 3c9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3cd:	74 79                	je     448 <printint+0x98>
+    neg = 1;
+ 3cf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3d6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3d8:	31 db                	xor    %ebx,%ebx
+ 3da:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3e0:	89 c8                	mov    %ecx,%eax
+ 3e2:	31 d2                	xor    %edx,%edx
+ 3e4:	89 cf                	mov    %ecx,%edi
+ 3e6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3e9:	0f b6 92 24 08 00 00 	movzbl 0x824(%edx),%edx
+ 3f0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3f3:	89 d8                	mov    %ebx,%eax
+ 3f5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3f8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3fb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3fe:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 401:	76 dd                	jbe    3e0 <printint+0x30>
+  if(neg)
+ 403:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 406:	85 c9                	test   %ecx,%ecx
+ 408:	74 0c                	je     416 <printint+0x66>
+    buf[i++] = '-';
+ 40a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 40f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 411:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 416:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 419:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 41d:	eb 07                	jmp    426 <printint+0x76>
+ 41f:	90                   	nop
+ 420:	0f b6 13             	movzbl (%ebx),%edx
+ 423:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 426:	83 ec 04             	sub    $0x4,%esp
+ 429:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 42c:	6a 01                	push   $0x1
+ 42e:	56                   	push   %esi
+ 42f:	57                   	push   %edi
+ 430:	e8 ce fe ff ff       	call   303 <write>
+  while(--i >= 0)
+ 435:	83 c4 10             	add    $0x10,%esp
+ 438:	39 de                	cmp    %ebx,%esi
+ 43a:	75 e4                	jne    420 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 43c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 43f:	5b                   	pop    %ebx
+ 440:	5e                   	pop    %esi
+ 441:	5f                   	pop    %edi
+ 442:	5d                   	pop    %ebp
+ 443:	c3                   	ret    
+ 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 448:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 44f:	eb 87                	jmp    3d8 <printint+0x28>
+ 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 458:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45f:	90                   	nop
+
+00000460 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 460:	f3 0f 1e fb          	endbr32 
+ 464:	55                   	push   %ebp
+ 465:	89 e5                	mov    %esp,%ebp
+ 467:	57                   	push   %edi
+ 468:	56                   	push   %esi
+ 469:	53                   	push   %ebx
+ 46a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 46d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 470:	0f b6 1e             	movzbl (%esi),%ebx
+ 473:	84 db                	test   %bl,%bl
+ 475:	0f 84 b4 00 00 00    	je     52f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 47b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 47e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 481:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 484:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 486:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 489:	eb 33                	jmp    4be <printf+0x5e>
+ 48b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 48f:	90                   	nop
+ 490:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 493:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	74 17                	je     4b4 <printf+0x54>
+  write(fd, &c, 1);
+ 49d:	83 ec 04             	sub    $0x4,%esp
+ 4a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4a3:	6a 01                	push   $0x1
+ 4a5:	57                   	push   %edi
+ 4a6:	ff 75 08             	pushl  0x8(%ebp)
+ 4a9:	e8 55 fe ff ff       	call   303 <write>
+ 4ae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 4b1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4b4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4b7:	83 c6 01             	add    $0x1,%esi
+ 4ba:	84 db                	test   %bl,%bl
+ 4bc:	74 71                	je     52f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 4be:	0f be cb             	movsbl %bl,%ecx
+ 4c1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4c4:	85 d2                	test   %edx,%edx
+ 4c6:	74 c8                	je     490 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4c8:	83 fa 25             	cmp    $0x25,%edx
+ 4cb:	75 e7                	jne    4b4 <printf+0x54>
+      if(c == 'd'){
+ 4cd:	83 f8 64             	cmp    $0x64,%eax
+ 4d0:	0f 84 9a 00 00 00    	je     570 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4d6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4dc:	83 f9 70             	cmp    $0x70,%ecx
+ 4df:	74 5f                	je     540 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4e1:	83 f8 73             	cmp    $0x73,%eax
+ 4e4:	0f 84 d6 00 00 00    	je     5c0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ea:	83 f8 63             	cmp    $0x63,%eax
+ 4ed:	0f 84 8d 00 00 00    	je     580 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4f3:	83 f8 25             	cmp    $0x25,%eax
+ 4f6:	0f 84 b4 00 00 00    	je     5b0 <printf+0x150>
+  write(fd, &c, 1);
+ 4fc:	83 ec 04             	sub    $0x4,%esp
+ 4ff:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 503:	6a 01                	push   $0x1
+ 505:	57                   	push   %edi
+ 506:	ff 75 08             	pushl  0x8(%ebp)
+ 509:	e8 f5 fd ff ff       	call   303 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 50e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 511:	83 c4 0c             	add    $0xc,%esp
+ 514:	6a 01                	push   $0x1
+ 516:	83 c6 01             	add    $0x1,%esi
+ 519:	57                   	push   %edi
+ 51a:	ff 75 08             	pushl  0x8(%ebp)
+ 51d:	e8 e1 fd ff ff       	call   303 <write>
+  for(i = 0; fmt[i]; i++){
+ 522:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 526:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 529:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 52b:	84 db                	test   %bl,%bl
+ 52d:	75 8f                	jne    4be <printf+0x5e>
+    }
+  }
+}
+ 52f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 532:	5b                   	pop    %ebx
+ 533:	5e                   	pop    %esi
+ 534:	5f                   	pop    %edi
+ 535:	5d                   	pop    %ebp
+ 536:	c3                   	ret    
+ 537:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 540:	83 ec 0c             	sub    $0xc,%esp
+ 543:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 548:	6a 00                	push   $0x0
+ 54a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 54d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 550:	8b 13                	mov    (%ebx),%edx
+ 552:	e8 59 fe ff ff       	call   3b0 <printint>
+        ap++;
+ 557:	89 d8                	mov    %ebx,%eax
+ 559:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 55c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 55e:	83 c0 04             	add    $0x4,%eax
+ 561:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 564:	e9 4b ff ff ff       	jmp    4b4 <printf+0x54>
+ 569:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	eb ce                	jmp    54a <printf+0xea>
+ 57c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 580:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 583:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 586:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 588:	6a 01                	push   $0x1
+        ap++;
+ 58a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 58d:	57                   	push   %edi
+ 58e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 591:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 594:	e8 6a fd ff ff       	call   303 <write>
+        ap++;
+ 599:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 59c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 59f:	31 d2                	xor    %edx,%edx
+ 5a1:	e9 0e ff ff ff       	jmp    4b4 <printf+0x54>
+ 5a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ad:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5b3:	83 ec 04             	sub    $0x4,%esp
+ 5b6:	e9 59 ff ff ff       	jmp    514 <printf+0xb4>
+ 5bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5bf:	90                   	nop
+        s = (char*)*ap;
+ 5c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5c3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5c5:	83 c0 04             	add    $0x4,%eax
+ 5c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5cb:	85 db                	test   %ebx,%ebx
+ 5cd:	74 17                	je     5e6 <printf+0x186>
+        while(*s != 0){
+ 5cf:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5d2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5d4:	84 c0                	test   %al,%al
+ 5d6:	0f 84 d8 fe ff ff    	je     4b4 <printf+0x54>
+ 5dc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5df:	89 de                	mov    %ebx,%esi
+ 5e1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e4:	eb 1a                	jmp    600 <printf+0x1a0>
+          s = "(null)";
+ 5e6:	bb 1a 08 00 00       	mov    $0x81a,%ebx
+        while(*s != 0){
+ 5eb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ee:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5f3:	89 de                	mov    %ebx,%esi
+ 5f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ff:	90                   	nop
+  write(fd, &c, 1);
+ 600:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 603:	83 c6 01             	add    $0x1,%esi
+ 606:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 609:	6a 01                	push   $0x1
+ 60b:	57                   	push   %edi
+ 60c:	53                   	push   %ebx
+ 60d:	e8 f1 fc ff ff       	call   303 <write>
+        while(*s != 0){
+ 612:	0f b6 06             	movzbl (%esi),%eax
+ 615:	83 c4 10             	add    $0x10,%esp
+ 618:	84 c0                	test   %al,%al
+ 61a:	75 e4                	jne    600 <printf+0x1a0>
+ 61c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 61f:	31 d2                	xor    %edx,%edx
+ 621:	e9 8e fe ff ff       	jmp    4b4 <printf+0x54>
+ 626:	66 90                	xchg   %ax,%ax
+ 628:	66 90                	xchg   %ax,%ax
+ 62a:	66 90                	xchg   %ax,%ax
+ 62c:	66 90                	xchg   %ax,%ax
+ 62e:	66 90                	xchg   %ax,%ax
+
+00000630 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 630:	f3 0f 1e fb          	endbr32 
+ 634:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 635:	a1 d4 0a 00 00       	mov    0xad4,%eax
+{
+ 63a:	89 e5                	mov    %esp,%ebp
+ 63c:	57                   	push   %edi
+ 63d:	56                   	push   %esi
+ 63e:	53                   	push   %ebx
+ 63f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 642:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 644:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 647:	39 c8                	cmp    %ecx,%eax
+ 649:	73 15                	jae    660 <free+0x30>
+ 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+ 650:	39 d1                	cmp    %edx,%ecx
+ 652:	72 14                	jb     668 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 654:	39 d0                	cmp    %edx,%eax
+ 656:	73 10                	jae    668 <free+0x38>
+{
+ 658:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 65a:	8b 10                	mov    (%eax),%edx
+ 65c:	39 c8                	cmp    %ecx,%eax
+ 65e:	72 f0                	jb     650 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 660:	39 d0                	cmp    %edx,%eax
+ 662:	72 f4                	jb     658 <free+0x28>
+ 664:	39 d1                	cmp    %edx,%ecx
+ 666:	73 f0                	jae    658 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 668:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 66b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 66e:	39 fa                	cmp    %edi,%edx
+ 670:	74 1e                	je     690 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 672:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 675:	8b 50 04             	mov    0x4(%eax),%edx
+ 678:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 67b:	39 f1                	cmp    %esi,%ecx
+ 67d:	74 28                	je     6a7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 67f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 681:	5b                   	pop    %ebx
+  freep = p;
+ 682:	a3 d4 0a 00 00       	mov    %eax,0xad4
+}
+ 687:	5e                   	pop    %esi
+ 688:	5f                   	pop    %edi
+ 689:	5d                   	pop    %ebp
+ 68a:	c3                   	ret    
+ 68b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 68f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 690:	03 72 04             	add    0x4(%edx),%esi
+ 693:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 696:	8b 10                	mov    (%eax),%edx
+ 698:	8b 12                	mov    (%edx),%edx
+ 69a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 69d:	8b 50 04             	mov    0x4(%eax),%edx
+ 6a0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6a3:	39 f1                	cmp    %esi,%ecx
+ 6a5:	75 d8                	jne    67f <free+0x4f>
+    p->s.size += bp->s.size;
+ 6a7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6aa:	a3 d4 0a 00 00       	mov    %eax,0xad4
+    p->s.size += bp->s.size;
+ 6af:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6b2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6b5:	89 10                	mov    %edx,(%eax)
+}
+ 6b7:	5b                   	pop    %ebx
+ 6b8:	5e                   	pop    %esi
+ 6b9:	5f                   	pop    %edi
+ 6ba:	5d                   	pop    %ebp
+ 6bb:	c3                   	ret    
+ 6bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006c0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6c0:	f3 0f 1e fb          	endbr32 
+ 6c4:	55                   	push   %ebp
+ 6c5:	89 e5                	mov    %esp,%ebp
+ 6c7:	57                   	push   %edi
+ 6c8:	56                   	push   %esi
+ 6c9:	53                   	push   %ebx
+ 6ca:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6d0:	8b 3d d4 0a 00 00    	mov    0xad4,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6d6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6d9:	c1 ee 03             	shr    $0x3,%esi
+ 6dc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6df:	85 ff                	test   %edi,%edi
+ 6e1:	0f 84 a9 00 00 00    	je     790 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6e7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6e9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ec:	39 f1                	cmp    %esi,%ecx
+ 6ee:	73 6d                	jae    75d <malloc+0x9d>
+ 6f0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6f6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6fb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6fe:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 705:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 708:	eb 17                	jmp    721 <malloc+0x61>
+ 70a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 710:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 712:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 715:	39 f1                	cmp    %esi,%ecx
+ 717:	73 4f                	jae    768 <malloc+0xa8>
+ 719:	8b 3d d4 0a 00 00    	mov    0xad4,%edi
+ 71f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 721:	39 c7                	cmp    %eax,%edi
+ 723:	75 eb                	jne    710 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 725:	83 ec 0c             	sub    $0xc,%esp
+ 728:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 72b:	e8 3b fc ff ff       	call   36b <sbrk>
+  if(p == (char*)-1)
+ 730:	83 c4 10             	add    $0x10,%esp
+ 733:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 736:	74 1b                	je     753 <malloc+0x93>
+  hp->s.size = nu;
+ 738:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 73b:	83 ec 0c             	sub    $0xc,%esp
+ 73e:	83 c0 08             	add    $0x8,%eax
+ 741:	50                   	push   %eax
+ 742:	e8 e9 fe ff ff       	call   630 <free>
+  return freep;
+ 747:	a1 d4 0a 00 00       	mov    0xad4,%eax
+      if((p = morecore(nunits)) == 0)
+ 74c:	83 c4 10             	add    $0x10,%esp
+ 74f:	85 c0                	test   %eax,%eax
+ 751:	75 bd                	jne    710 <malloc+0x50>
+        return 0;
+  }
+}
+ 753:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 756:	31 c0                	xor    %eax,%eax
+}
+ 758:	5b                   	pop    %ebx
+ 759:	5e                   	pop    %esi
+ 75a:	5f                   	pop    %edi
+ 75b:	5d                   	pop    %ebp
+ 75c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 75d:	89 c2                	mov    %eax,%edx
+ 75f:	89 f8                	mov    %edi,%eax
+ 761:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 768:	39 ce                	cmp    %ecx,%esi
+ 76a:	74 54                	je     7c0 <malloc+0x100>
+        p->s.size -= nunits;
+ 76c:	29 f1                	sub    %esi,%ecx
+ 76e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 771:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 774:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 777:	a3 d4 0a 00 00       	mov    %eax,0xad4
+}
+ 77c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 77f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 782:	5b                   	pop    %ebx
+ 783:	5e                   	pop    %esi
+ 784:	5f                   	pop    %edi
+ 785:	5d                   	pop    %ebp
+ 786:	c3                   	ret    
+ 787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 78e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 790:	c7 05 d4 0a 00 00 d8 	movl   $0xad8,0xad4
+ 797:	0a 00 00 
+    base.s.size = 0;
+ 79a:	bf d8 0a 00 00       	mov    $0xad8,%edi
+    base.s.ptr = freep = prevp = &base;
+ 79f:	c7 05 d8 0a 00 00 d8 	movl   $0xad8,0xad8
+ 7a6:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a9:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 7ab:	c7 05 dc 0a 00 00 00 	movl   $0x0,0xadc
+ 7b2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7b5:	e9 36 ff ff ff       	jmp    6f0 <malloc+0x30>
+ 7ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7c0:	8b 0a                	mov    (%edx),%ecx
+ 7c2:	89 08                	mov    %ecx,(%eax)
+ 7c4:	eb b1                	jmp    777 <malloc+0xb7>
diff -ruN xv6-public/partA_test2.c xv6-new/partA_test2.c
--- xv6-public/partA_test2.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/partA_test2.c	2022-10-04 22:36:30.188194300 +0530
@@ -0,0 +1,16 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "processInfo.h"
+
+int main(void){
+    struct processInfo procInfo;
+    printf(1, "PID    ParentPID    SIZE    Number of Context Switches\n");
+
+    for(int pid=1; pid<=getMaxPid(); pid++){
+        if(getProcInfo(pid, &procInfo) == 0){ 
+	        printf(1, "%d      %d      %d    %d\n", pid, procInfo.ppid, procInfo.psize, procInfo.numberContextSwitches);
+        }
+    }
+    exit();
+}
\ No newline at end of file
diff -ruN xv6-public/partA_test2.d xv6-new/partA_test2.d
--- xv6-public/partA_test2.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/partA_test2.d	2022-10-07 22:43:45.271886867 +0530
@@ -0,0 +1,2 @@
+partA_test2.o: partA_test2.c /usr/include/stdc-predef.h types.h stat.h \
+ user.h processInfo.h
Binary files xv6-public/partA_test2.o and xv6-new/partA_test2.o differ
diff -ruN xv6-public/partA_test2.sym xv6-new/partA_test2.sym
--- xv6-public/partA_test2.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/partA_test2.sym	2022-10-07 22:43:45.271886867 +0530
@@ -0,0 +1,62 @@
+00000000 .text
+000007c8 .rodata
+00000838 .eh_frame
+00000ad4 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 partA_test2.c
+00000000 ulib.c
+00000000 printf.c
+000003b0 printint
+00000824 digits.1096
+00000000 umalloc.c
+00000ad4 freep
+00000ad8 base
+00000080 strcpy
+00000460 printf
+000002b0 memmove
+0000032b mknod
+000001a0 gets
+00000363 getpid
+000006c0 malloc
+00000373 sleep
+000003a3 get_burst_time
+000002f3 pipe
+00000303 write
+0000033b fstat
+00000313 kill
+00000353 chdir
+0000031b exec
+000002eb wait
+000002fb read
+00000333 unlink
+000002db fork
+0000036b sbrk
+0000037b uptime
+00000ad4 __bss_start
+00000140 memset
+00000000 main
+0000039b set_burst_time
+000000b0 strcmp
+0000035b dup
+0000038b getMaxPid
+00000383 getNumProc
+00000393 getProcInfo
+00000220 stat
+00000ad4 _edata
+00000ae0 _end
+00000343 link
+000002e3 exit
+00000270 atoi
+00000100 strlen
+00000323 open
+00000160 strchr
+0000034b mkdir
+0000030b close
+00000630 free
diff -ruN xv6-public/partA_test3.asm xv6-new/partA_test3.asm
--- xv6-public/partA_test3.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/partA_test3.asm	2022-10-07 22:43:45.271886867 +0530
@@ -0,0 +1,1217 @@
+
+_partA_test3:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(void){
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	56                   	push   %esi
+  12:	be 0a 00 00 00       	mov    $0xa,%esi
+  17:	53                   	push   %ebx
+    for(int i=1; i<10; i++){
+        set_burst_time((3 * i + 7) % 17 + 1);
+  18:	bb f1 f0 f0 f0       	mov    $0xf0f0f0f1,%ebx
+int main(void){
+  1d:	51                   	push   %ecx
+  1e:	83 ec 0c             	sub    $0xc,%esp
+  21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        set_burst_time((3 * i + 7) % 17 + 1);
+  28:	89 f0                	mov    %esi,%eax
+  2a:	83 ec 0c             	sub    $0xc,%esp
+  2d:	f7 e3                	mul    %ebx
+  2f:	89 d0                	mov    %edx,%eax
+  31:	83 e2 f0             	and    $0xfffffff0,%edx
+  34:	c1 e8 04             	shr    $0x4,%eax
+  37:	01 c2                	add    %eax,%edx
+  39:	89 f0                	mov    %esi,%eax
+  3b:	83 c6 03             	add    $0x3,%esi
+  3e:	29 d0                	sub    %edx,%eax
+  40:	83 c0 01             	add    $0x1,%eax
+  43:	50                   	push   %eax
+  44:	e8 42 03 00 00       	call   38b <set_burst_time>
+        printf(1, "Burst Time: %d\n", get_burst_time());
+  49:	e8 45 03 00 00       	call   393 <get_burst_time>
+  4e:	83 c4 0c             	add    $0xc,%esp
+  51:	50                   	push   %eax
+  52:	68 b8 07 00 00       	push   $0x7b8
+  57:	6a 01                	push   $0x1
+  59:	e8 f2 03 00 00       	call   450 <printf>
+    for(int i=1; i<10; i++){
+  5e:	83 c4 10             	add    $0x10,%esp
+  61:	83 fe 25             	cmp    $0x25,%esi
+  64:	75 c2                	jne    28 <main+0x28>
+    }
+    exit();
+  66:	e8 68 02 00 00       	call   2d3 <exit>
+  6b:	66 90                	xchg   %ax,%ax
+  6d:	66 90                	xchg   %ax,%ax
+  6f:	90                   	nop
+
+00000070 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  70:	f3 0f 1e fb          	endbr32 
+  74:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  75:	31 c0                	xor    %eax,%eax
+{
+  77:	89 e5                	mov    %esp,%ebp
+  79:	53                   	push   %ebx
+  7a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  7d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  80:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  84:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  87:	83 c0 01             	add    $0x1,%eax
+  8a:	84 d2                	test   %dl,%dl
+  8c:	75 f2                	jne    80 <strcpy+0x10>
+    ;
+  return os;
+}
+  8e:	89 c8                	mov    %ecx,%eax
+  90:	5b                   	pop    %ebx
+  91:	5d                   	pop    %ebp
+  92:	c3                   	ret    
+  93:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000000a0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  a0:	f3 0f 1e fb          	endbr32 
+  a4:	55                   	push   %ebp
+  a5:	89 e5                	mov    %esp,%ebp
+  a7:	53                   	push   %ebx
+  a8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  ab:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  ae:	0f b6 01             	movzbl (%ecx),%eax
+  b1:	0f b6 1a             	movzbl (%edx),%ebx
+  b4:	84 c0                	test   %al,%al
+  b6:	75 19                	jne    d1 <strcmp+0x31>
+  b8:	eb 26                	jmp    e0 <strcmp+0x40>
+  ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  c0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  c4:	83 c1 01             	add    $0x1,%ecx
+  c7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  ca:	0f b6 1a             	movzbl (%edx),%ebx
+  cd:	84 c0                	test   %al,%al
+  cf:	74 0f                	je     e0 <strcmp+0x40>
+  d1:	38 d8                	cmp    %bl,%al
+  d3:	74 eb                	je     c0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  d5:	29 d8                	sub    %ebx,%eax
+}
+  d7:	5b                   	pop    %ebx
+  d8:	5d                   	pop    %ebp
+  d9:	c3                   	ret    
+  da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  e0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  e2:	29 d8                	sub    %ebx,%eax
+}
+  e4:	5b                   	pop    %ebx
+  e5:	5d                   	pop    %ebp
+  e6:	c3                   	ret    
+  e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ee:	66 90                	xchg   %ax,%ax
+
+000000f0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  f0:	f3 0f 1e fb          	endbr32 
+  f4:	55                   	push   %ebp
+  f5:	89 e5                	mov    %esp,%ebp
+  f7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  fa:	80 3a 00             	cmpb   $0x0,(%edx)
+  fd:	74 21                	je     120 <strlen+0x30>
+  ff:	31 c0                	xor    %eax,%eax
+ 101:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 108:	83 c0 01             	add    $0x1,%eax
+ 10b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 10f:	89 c1                	mov    %eax,%ecx
+ 111:	75 f5                	jne    108 <strlen+0x18>
+    ;
+  return n;
+}
+ 113:	89 c8                	mov    %ecx,%eax
+ 115:	5d                   	pop    %ebp
+ 116:	c3                   	ret    
+ 117:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 120:	31 c9                	xor    %ecx,%ecx
+}
+ 122:	5d                   	pop    %ebp
+ 123:	89 c8                	mov    %ecx,%eax
+ 125:	c3                   	ret    
+ 126:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000130 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 130:	f3 0f 1e fb          	endbr32 
+ 134:	55                   	push   %ebp
+ 135:	89 e5                	mov    %esp,%ebp
+ 137:	57                   	push   %edi
+ 138:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 13b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 13e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 141:	89 d7                	mov    %edx,%edi
+ 143:	fc                   	cld    
+ 144:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 146:	89 d0                	mov    %edx,%eax
+ 148:	5f                   	pop    %edi
+ 149:	5d                   	pop    %ebp
+ 14a:	c3                   	ret    
+ 14b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 14f:	90                   	nop
+
+00000150 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 150:	f3 0f 1e fb          	endbr32 
+ 154:	55                   	push   %ebp
+ 155:	89 e5                	mov    %esp,%ebp
+ 157:	8b 45 08             	mov    0x8(%ebp),%eax
+ 15a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 15e:	0f b6 10             	movzbl (%eax),%edx
+ 161:	84 d2                	test   %dl,%dl
+ 163:	75 16                	jne    17b <strchr+0x2b>
+ 165:	eb 21                	jmp    188 <strchr+0x38>
+ 167:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16e:	66 90                	xchg   %ax,%ax
+ 170:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 174:	83 c0 01             	add    $0x1,%eax
+ 177:	84 d2                	test   %dl,%dl
+ 179:	74 0d                	je     188 <strchr+0x38>
+    if(*s == c)
+ 17b:	38 d1                	cmp    %dl,%cl
+ 17d:	75 f1                	jne    170 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 17f:	5d                   	pop    %ebp
+ 180:	c3                   	ret    
+ 181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 188:	31 c0                	xor    %eax,%eax
+}
+ 18a:	5d                   	pop    %ebp
+ 18b:	c3                   	ret    
+ 18c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000190 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 190:	f3 0f 1e fb          	endbr32 
+ 194:	55                   	push   %ebp
+ 195:	89 e5                	mov    %esp,%ebp
+ 197:	57                   	push   %edi
+ 198:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 199:	31 f6                	xor    %esi,%esi
+{
+ 19b:	53                   	push   %ebx
+ 19c:	89 f3                	mov    %esi,%ebx
+ 19e:	83 ec 1c             	sub    $0x1c,%esp
+ 1a1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1a4:	eb 33                	jmp    1d9 <gets+0x49>
+ 1a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ad:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1b0:	83 ec 04             	sub    $0x4,%esp
+ 1b3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1b6:	6a 01                	push   $0x1
+ 1b8:	50                   	push   %eax
+ 1b9:	6a 00                	push   $0x0
+ 1bb:	e8 2b 01 00 00       	call   2eb <read>
+    if(cc < 1)
+ 1c0:	83 c4 10             	add    $0x10,%esp
+ 1c3:	85 c0                	test   %eax,%eax
+ 1c5:	7e 1c                	jle    1e3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1c7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1cb:	83 c7 01             	add    $0x1,%edi
+ 1ce:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1d1:	3c 0a                	cmp    $0xa,%al
+ 1d3:	74 23                	je     1f8 <gets+0x68>
+ 1d5:	3c 0d                	cmp    $0xd,%al
+ 1d7:	74 1f                	je     1f8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1d9:	83 c3 01             	add    $0x1,%ebx
+ 1dc:	89 fe                	mov    %edi,%esi
+ 1de:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1e1:	7c cd                	jl     1b0 <gets+0x20>
+ 1e3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1e5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1e8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1eb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ee:	5b                   	pop    %ebx
+ 1ef:	5e                   	pop    %esi
+ 1f0:	5f                   	pop    %edi
+ 1f1:	5d                   	pop    %ebp
+ 1f2:	c3                   	ret    
+ 1f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1f7:	90                   	nop
+ 1f8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1fb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1fe:	01 de                	add    %ebx,%esi
+ 200:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 202:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 205:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 208:	5b                   	pop    %ebx
+ 209:	5e                   	pop    %esi
+ 20a:	5f                   	pop    %edi
+ 20b:	5d                   	pop    %ebp
+ 20c:	c3                   	ret    
+ 20d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000210 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 210:	f3 0f 1e fb          	endbr32 
+ 214:	55                   	push   %ebp
+ 215:	89 e5                	mov    %esp,%ebp
+ 217:	56                   	push   %esi
+ 218:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 219:	83 ec 08             	sub    $0x8,%esp
+ 21c:	6a 00                	push   $0x0
+ 21e:	ff 75 08             	pushl  0x8(%ebp)
+ 221:	e8 ed 00 00 00       	call   313 <open>
+  if(fd < 0)
+ 226:	83 c4 10             	add    $0x10,%esp
+ 229:	85 c0                	test   %eax,%eax
+ 22b:	78 2b                	js     258 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 22d:	83 ec 08             	sub    $0x8,%esp
+ 230:	ff 75 0c             	pushl  0xc(%ebp)
+ 233:	89 c3                	mov    %eax,%ebx
+ 235:	50                   	push   %eax
+ 236:	e8 f0 00 00 00       	call   32b <fstat>
+  close(fd);
+ 23b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 23e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 240:	e8 b6 00 00 00       	call   2fb <close>
+  return r;
+ 245:	83 c4 10             	add    $0x10,%esp
+}
+ 248:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 24b:	89 f0                	mov    %esi,%eax
+ 24d:	5b                   	pop    %ebx
+ 24e:	5e                   	pop    %esi
+ 24f:	5d                   	pop    %ebp
+ 250:	c3                   	ret    
+ 251:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 258:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 25d:	eb e9                	jmp    248 <stat+0x38>
+ 25f:	90                   	nop
+
+00000260 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 260:	f3 0f 1e fb          	endbr32 
+ 264:	55                   	push   %ebp
+ 265:	89 e5                	mov    %esp,%ebp
+ 267:	53                   	push   %ebx
+ 268:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 26b:	0f be 02             	movsbl (%edx),%eax
+ 26e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 271:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 274:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 279:	77 1a                	ja     295 <atoi+0x35>
+ 27b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 27f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 280:	83 c2 01             	add    $0x1,%edx
+ 283:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 286:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 28a:	0f be 02             	movsbl (%edx),%eax
+ 28d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 290:	80 fb 09             	cmp    $0x9,%bl
+ 293:	76 eb                	jbe    280 <atoi+0x20>
+  return n;
+}
+ 295:	89 c8                	mov    %ecx,%eax
+ 297:	5b                   	pop    %ebx
+ 298:	5d                   	pop    %ebp
+ 299:	c3                   	ret    
+ 29a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000002a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2a0:	f3 0f 1e fb          	endbr32 
+ 2a4:	55                   	push   %ebp
+ 2a5:	89 e5                	mov    %esp,%ebp
+ 2a7:	57                   	push   %edi
+ 2a8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2ab:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2ae:	56                   	push   %esi
+ 2af:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2b2:	85 c0                	test   %eax,%eax
+ 2b4:	7e 0f                	jle    2c5 <memmove+0x25>
+ 2b6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2b8:	89 d7                	mov    %edx,%edi
+ 2ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2c0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2c1:	39 f8                	cmp    %edi,%eax
+ 2c3:	75 fb                	jne    2c0 <memmove+0x20>
+  return vdst;
+}
+ 2c5:	5e                   	pop    %esi
+ 2c6:	89 d0                	mov    %edx,%eax
+ 2c8:	5f                   	pop    %edi
+ 2c9:	5d                   	pop    %ebp
+ 2ca:	c3                   	ret    
+
+000002cb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2cb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <exit>:
+SYSCALL(exit)
+ 2d3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <wait>:
+SYSCALL(wait)
+ 2db:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <pipe>:
+SYSCALL(pipe)
+ 2e3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <read>:
+SYSCALL(read)
+ 2eb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <write>:
+SYSCALL(write)
+ 2f3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <close>:
+SYSCALL(close)
+ 2fb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <kill>:
+SYSCALL(kill)
+ 303:	b8 06 00 00 00       	mov    $0x6,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <exec>:
+SYSCALL(exec)
+ 30b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <open>:
+SYSCALL(open)
+ 313:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <mknod>:
+SYSCALL(mknod)
+ 31b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <unlink>:
+SYSCALL(unlink)
+ 323:	b8 12 00 00 00       	mov    $0x12,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <fstat>:
+SYSCALL(fstat)
+ 32b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <link>:
+SYSCALL(link)
+ 333:	b8 13 00 00 00       	mov    $0x13,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <mkdir>:
+SYSCALL(mkdir)
+ 33b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <chdir>:
+SYSCALL(chdir)
+ 343:	b8 09 00 00 00       	mov    $0x9,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <dup>:
+SYSCALL(dup)
+ 34b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <getpid>:
+SYSCALL(getpid)
+ 353:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <sbrk>:
+SYSCALL(sbrk)
+ 35b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <sleep>:
+SYSCALL(sleep)
+ 363:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <uptime>:
+SYSCALL(uptime)
+ 36b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <getNumProc>:
+SYSCALL(getNumProc)
+ 373:	b8 16 00 00 00       	mov    $0x16,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 37b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 383:	b8 18 00 00 00       	mov    $0x18,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 38b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <get_burst_time>:
+ 393:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+ 39b:	66 90                	xchg   %ax,%ax
+ 39d:	66 90                	xchg   %ax,%ax
+ 39f:	90                   	nop
+
+000003a0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	56                   	push   %esi
+ 3a5:	53                   	push   %ebx
+ 3a6:	83 ec 3c             	sub    $0x3c,%esp
+ 3a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3ac:	89 d1                	mov    %edx,%ecx
+{
+ 3ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3b1:	85 d2                	test   %edx,%edx
+ 3b3:	0f 89 7f 00 00 00    	jns    438 <printint+0x98>
+ 3b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3bd:	74 79                	je     438 <printint+0x98>
+    neg = 1;
+ 3bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3c6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3c8:	31 db                	xor    %ebx,%ebx
+ 3ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3d0:	89 c8                	mov    %ecx,%eax
+ 3d2:	31 d2                	xor    %edx,%edx
+ 3d4:	89 cf                	mov    %ecx,%edi
+ 3d6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3d9:	0f b6 92 d0 07 00 00 	movzbl 0x7d0(%edx),%edx
+ 3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3e3:	89 d8                	mov    %ebx,%eax
+ 3e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3f1:	76 dd                	jbe    3d0 <printint+0x30>
+  if(neg)
+ 3f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3f6:	85 c9                	test   %ecx,%ecx
+ 3f8:	74 0c                	je     406 <printint+0x66>
+    buf[i++] = '-';
+ 3fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3ff:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 401:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 406:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 409:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 40d:	eb 07                	jmp    416 <printint+0x76>
+ 40f:	90                   	nop
+ 410:	0f b6 13             	movzbl (%ebx),%edx
+ 413:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 416:	83 ec 04             	sub    $0x4,%esp
+ 419:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 41c:	6a 01                	push   $0x1
+ 41e:	56                   	push   %esi
+ 41f:	57                   	push   %edi
+ 420:	e8 ce fe ff ff       	call   2f3 <write>
+  while(--i >= 0)
+ 425:	83 c4 10             	add    $0x10,%esp
+ 428:	39 de                	cmp    %ebx,%esi
+ 42a:	75 e4                	jne    410 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 42c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 42f:	5b                   	pop    %ebx
+ 430:	5e                   	pop    %esi
+ 431:	5f                   	pop    %edi
+ 432:	5d                   	pop    %ebp
+ 433:	c3                   	ret    
+ 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 438:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 43f:	eb 87                	jmp    3c8 <printint+0x28>
+ 441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 448:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44f:	90                   	nop
+
+00000450 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 450:	f3 0f 1e fb          	endbr32 
+ 454:	55                   	push   %ebp
+ 455:	89 e5                	mov    %esp,%ebp
+ 457:	57                   	push   %edi
+ 458:	56                   	push   %esi
+ 459:	53                   	push   %ebx
+ 45a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 45d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 460:	0f b6 1e             	movzbl (%esi),%ebx
+ 463:	84 db                	test   %bl,%bl
+ 465:	0f 84 b4 00 00 00    	je     51f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 46b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 46e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 471:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 474:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 476:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 479:	eb 33                	jmp    4ae <printf+0x5e>
+ 47b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 47f:	90                   	nop
+ 480:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 483:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	74 17                	je     4a4 <printf+0x54>
+  write(fd, &c, 1);
+ 48d:	83 ec 04             	sub    $0x4,%esp
+ 490:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 493:	6a 01                	push   $0x1
+ 495:	57                   	push   %edi
+ 496:	ff 75 08             	pushl  0x8(%ebp)
+ 499:	e8 55 fe ff ff       	call   2f3 <write>
+ 49e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 4a1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4a4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4a7:	83 c6 01             	add    $0x1,%esi
+ 4aa:	84 db                	test   %bl,%bl
+ 4ac:	74 71                	je     51f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 4ae:	0f be cb             	movsbl %bl,%ecx
+ 4b1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4b4:	85 d2                	test   %edx,%edx
+ 4b6:	74 c8                	je     480 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4b8:	83 fa 25             	cmp    $0x25,%edx
+ 4bb:	75 e7                	jne    4a4 <printf+0x54>
+      if(c == 'd'){
+ 4bd:	83 f8 64             	cmp    $0x64,%eax
+ 4c0:	0f 84 9a 00 00 00    	je     560 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4c6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4cc:	83 f9 70             	cmp    $0x70,%ecx
+ 4cf:	74 5f                	je     530 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4d1:	83 f8 73             	cmp    $0x73,%eax
+ 4d4:	0f 84 d6 00 00 00    	je     5b0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4da:	83 f8 63             	cmp    $0x63,%eax
+ 4dd:	0f 84 8d 00 00 00    	je     570 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4e3:	83 f8 25             	cmp    $0x25,%eax
+ 4e6:	0f 84 b4 00 00 00    	je     5a0 <printf+0x150>
+  write(fd, &c, 1);
+ 4ec:	83 ec 04             	sub    $0x4,%esp
+ 4ef:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4f3:	6a 01                	push   $0x1
+ 4f5:	57                   	push   %edi
+ 4f6:	ff 75 08             	pushl  0x8(%ebp)
+ 4f9:	e8 f5 fd ff ff       	call   2f3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4fe:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 501:	83 c4 0c             	add    $0xc,%esp
+ 504:	6a 01                	push   $0x1
+ 506:	83 c6 01             	add    $0x1,%esi
+ 509:	57                   	push   %edi
+ 50a:	ff 75 08             	pushl  0x8(%ebp)
+ 50d:	e8 e1 fd ff ff       	call   2f3 <write>
+  for(i = 0; fmt[i]; i++){
+ 512:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 516:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 519:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 51b:	84 db                	test   %bl,%bl
+ 51d:	75 8f                	jne    4ae <printf+0x5e>
+    }
+  }
+}
+ 51f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 522:	5b                   	pop    %ebx
+ 523:	5e                   	pop    %esi
+ 524:	5f                   	pop    %edi
+ 525:	5d                   	pop    %ebp
+ 526:	c3                   	ret    
+ 527:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 52e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 530:	83 ec 0c             	sub    $0xc,%esp
+ 533:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 538:	6a 00                	push   $0x0
+ 53a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 53d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 540:	8b 13                	mov    (%ebx),%edx
+ 542:	e8 59 fe ff ff       	call   3a0 <printint>
+        ap++;
+ 547:	89 d8                	mov    %ebx,%eax
+ 549:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 54c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 54e:	83 c0 04             	add    $0x4,%eax
+ 551:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 554:	e9 4b ff ff ff       	jmp    4a4 <printf+0x54>
+ 559:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 560:	83 ec 0c             	sub    $0xc,%esp
+ 563:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 568:	6a 01                	push   $0x1
+ 56a:	eb ce                	jmp    53a <printf+0xea>
+ 56c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 570:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 573:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 576:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 578:	6a 01                	push   $0x1
+        ap++;
+ 57a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 57d:	57                   	push   %edi
+ 57e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 581:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 584:	e8 6a fd ff ff       	call   2f3 <write>
+        ap++;
+ 589:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 58c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 58f:	31 d2                	xor    %edx,%edx
+ 591:	e9 0e ff ff ff       	jmp    4a4 <printf+0x54>
+ 596:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 59d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5a3:	83 ec 04             	sub    $0x4,%esp
+ 5a6:	e9 59 ff ff ff       	jmp    504 <printf+0xb4>
+ 5ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5af:	90                   	nop
+        s = (char*)*ap;
+ 5b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5b3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5b5:	83 c0 04             	add    $0x4,%eax
+ 5b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5bb:	85 db                	test   %ebx,%ebx
+ 5bd:	74 17                	je     5d6 <printf+0x186>
+        while(*s != 0){
+ 5bf:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5c2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5c4:	84 c0                	test   %al,%al
+ 5c6:	0f 84 d8 fe ff ff    	je     4a4 <printf+0x54>
+ 5cc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5cf:	89 de                	mov    %ebx,%esi
+ 5d1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d4:	eb 1a                	jmp    5f0 <printf+0x1a0>
+          s = "(null)";
+ 5d6:	bb c8 07 00 00       	mov    $0x7c8,%ebx
+        while(*s != 0){
+ 5db:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5de:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5e3:	89 de                	mov    %ebx,%esi
+ 5e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ef:	90                   	nop
+  write(fd, &c, 1);
+ 5f0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5f3:	83 c6 01             	add    $0x1,%esi
+ 5f6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5f9:	6a 01                	push   $0x1
+ 5fb:	57                   	push   %edi
+ 5fc:	53                   	push   %ebx
+ 5fd:	e8 f1 fc ff ff       	call   2f3 <write>
+        while(*s != 0){
+ 602:	0f b6 06             	movzbl (%esi),%eax
+ 605:	83 c4 10             	add    $0x10,%esp
+ 608:	84 c0                	test   %al,%al
+ 60a:	75 e4                	jne    5f0 <printf+0x1a0>
+ 60c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 60f:	31 d2                	xor    %edx,%edx
+ 611:	e9 8e fe ff ff       	jmp    4a4 <printf+0x54>
+ 616:	66 90                	xchg   %ax,%ax
+ 618:	66 90                	xchg   %ax,%ax
+ 61a:	66 90                	xchg   %ax,%ax
+ 61c:	66 90                	xchg   %ax,%ax
+ 61e:	66 90                	xchg   %ax,%ax
+
+00000620 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 620:	f3 0f 1e fb          	endbr32 
+ 624:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 625:	a1 84 0a 00 00       	mov    0xa84,%eax
+{
+ 62a:	89 e5                	mov    %esp,%ebp
+ 62c:	57                   	push   %edi
+ 62d:	56                   	push   %esi
+ 62e:	53                   	push   %ebx
+ 62f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 632:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 634:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 637:	39 c8                	cmp    %ecx,%eax
+ 639:	73 15                	jae    650 <free+0x30>
+ 63b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63f:	90                   	nop
+ 640:	39 d1                	cmp    %edx,%ecx
+ 642:	72 14                	jb     658 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 644:	39 d0                	cmp    %edx,%eax
+ 646:	73 10                	jae    658 <free+0x38>
+{
+ 648:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 64a:	8b 10                	mov    (%eax),%edx
+ 64c:	39 c8                	cmp    %ecx,%eax
+ 64e:	72 f0                	jb     640 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 650:	39 d0                	cmp    %edx,%eax
+ 652:	72 f4                	jb     648 <free+0x28>
+ 654:	39 d1                	cmp    %edx,%ecx
+ 656:	73 f0                	jae    648 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 658:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 65b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 65e:	39 fa                	cmp    %edi,%edx
+ 660:	74 1e                	je     680 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 662:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 665:	8b 50 04             	mov    0x4(%eax),%edx
+ 668:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 66b:	39 f1                	cmp    %esi,%ecx
+ 66d:	74 28                	je     697 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 66f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 671:	5b                   	pop    %ebx
+  freep = p;
+ 672:	a3 84 0a 00 00       	mov    %eax,0xa84
+}
+ 677:	5e                   	pop    %esi
+ 678:	5f                   	pop    %edi
+ 679:	5d                   	pop    %ebp
+ 67a:	c3                   	ret    
+ 67b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 67f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 680:	03 72 04             	add    0x4(%edx),%esi
+ 683:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 686:	8b 10                	mov    (%eax),%edx
+ 688:	8b 12                	mov    (%edx),%edx
+ 68a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 68d:	8b 50 04             	mov    0x4(%eax),%edx
+ 690:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 693:	39 f1                	cmp    %esi,%ecx
+ 695:	75 d8                	jne    66f <free+0x4f>
+    p->s.size += bp->s.size;
+ 697:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 69a:	a3 84 0a 00 00       	mov    %eax,0xa84
+    p->s.size += bp->s.size;
+ 69f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6a2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6a5:	89 10                	mov    %edx,(%eax)
+}
+ 6a7:	5b                   	pop    %ebx
+ 6a8:	5e                   	pop    %esi
+ 6a9:	5f                   	pop    %edi
+ 6aa:	5d                   	pop    %ebp
+ 6ab:	c3                   	ret    
+ 6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006b0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6b0:	f3 0f 1e fb          	endbr32 
+ 6b4:	55                   	push   %ebp
+ 6b5:	89 e5                	mov    %esp,%ebp
+ 6b7:	57                   	push   %edi
+ 6b8:	56                   	push   %esi
+ 6b9:	53                   	push   %ebx
+ 6ba:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6bd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6c0:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6c6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6c9:	c1 ee 03             	shr    $0x3,%esi
+ 6cc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6cf:	85 ff                	test   %edi,%edi
+ 6d1:	0f 84 a9 00 00 00    	je     780 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6d7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6d9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6dc:	39 f1                	cmp    %esi,%ecx
+ 6de:	73 6d                	jae    74d <malloc+0x9d>
+ 6e0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6e6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6eb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ee:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6f5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6f8:	eb 17                	jmp    711 <malloc+0x61>
+ 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 700:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 702:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 705:	39 f1                	cmp    %esi,%ecx
+ 707:	73 4f                	jae    758 <malloc+0xa8>
+ 709:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
+ 70f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 711:	39 c7                	cmp    %eax,%edi
+ 713:	75 eb                	jne    700 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 715:	83 ec 0c             	sub    $0xc,%esp
+ 718:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 71b:	e8 3b fc ff ff       	call   35b <sbrk>
+  if(p == (char*)-1)
+ 720:	83 c4 10             	add    $0x10,%esp
+ 723:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 726:	74 1b                	je     743 <malloc+0x93>
+  hp->s.size = nu;
+ 728:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 72b:	83 ec 0c             	sub    $0xc,%esp
+ 72e:	83 c0 08             	add    $0x8,%eax
+ 731:	50                   	push   %eax
+ 732:	e8 e9 fe ff ff       	call   620 <free>
+  return freep;
+ 737:	a1 84 0a 00 00       	mov    0xa84,%eax
+      if((p = morecore(nunits)) == 0)
+ 73c:	83 c4 10             	add    $0x10,%esp
+ 73f:	85 c0                	test   %eax,%eax
+ 741:	75 bd                	jne    700 <malloc+0x50>
+        return 0;
+  }
+}
+ 743:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 746:	31 c0                	xor    %eax,%eax
+}
+ 748:	5b                   	pop    %ebx
+ 749:	5e                   	pop    %esi
+ 74a:	5f                   	pop    %edi
+ 74b:	5d                   	pop    %ebp
+ 74c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 74d:	89 c2                	mov    %eax,%edx
+ 74f:	89 f8                	mov    %edi,%eax
+ 751:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 758:	39 ce                	cmp    %ecx,%esi
+ 75a:	74 54                	je     7b0 <malloc+0x100>
+        p->s.size -= nunits;
+ 75c:	29 f1                	sub    %esi,%ecx
+ 75e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 761:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 764:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 767:	a3 84 0a 00 00       	mov    %eax,0xa84
+}
+ 76c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 76f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 772:	5b                   	pop    %ebx
+ 773:	5e                   	pop    %esi
+ 774:	5f                   	pop    %edi
+ 775:	5d                   	pop    %ebp
+ 776:	c3                   	ret    
+ 777:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 77e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 780:	c7 05 84 0a 00 00 88 	movl   $0xa88,0xa84
+ 787:	0a 00 00 
+    base.s.size = 0;
+ 78a:	bf 88 0a 00 00       	mov    $0xa88,%edi
+    base.s.ptr = freep = prevp = &base;
+ 78f:	c7 05 88 0a 00 00 88 	movl   $0xa88,0xa88
+ 796:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 799:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 79b:	c7 05 8c 0a 00 00 00 	movl   $0x0,0xa8c
+ 7a2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7a5:	e9 36 ff ff ff       	jmp    6e0 <malloc+0x30>
+ 7aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7b0:	8b 0a                	mov    (%edx),%ecx
+ 7b2:	89 08                	mov    %ecx,(%eax)
+ 7b4:	eb b1                	jmp    767 <malloc+0xb7>
diff -ruN xv6-public/partA_test3.c xv6-new/partA_test3.c
--- xv6-public/partA_test3.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/partA_test3.c	2022-10-05 12:06:56.143761500 +0530
@@ -0,0 +1,11 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(void){
+    for(int i=1; i<10; i++){
+        set_burst_time((3 * i + 7) % 17 + 1);
+        printf(1, "Burst Time: %d\n", get_burst_time());
+    }
+    exit();
+}
\ No newline at end of file
diff -ruN xv6-public/partA_test3.d xv6-new/partA_test3.d
--- xv6-public/partA_test3.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/partA_test3.d	2022-10-07 22:43:45.271886867 +0530
@@ -0,0 +1,2 @@
+partA_test3.o: partA_test3.c /usr/include/stdc-predef.h types.h stat.h \
+ user.h
Binary files xv6-public/partA_test3.o and xv6-new/partA_test3.o differ
diff -ruN xv6-public/partA_test3.sym xv6-new/partA_test3.sym
--- xv6-public/partA_test3.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/partA_test3.sym	2022-10-07 22:43:45.271886867 +0530
@@ -0,0 +1,62 @@
+00000000 .text
+000007b8 .rodata
+000007e4 .eh_frame
+00000a84 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 partA_test3.c
+00000000 ulib.c
+00000000 printf.c
+000003a0 printint
+000007d0 digits.1096
+00000000 umalloc.c
+00000a84 freep
+00000a88 base
+00000070 strcpy
+00000450 printf
+000002a0 memmove
+0000031b mknod
+00000190 gets
+00000353 getpid
+000006b0 malloc
+00000363 sleep
+00000393 get_burst_time
+000002e3 pipe
+000002f3 write
+0000032b fstat
+00000303 kill
+00000343 chdir
+0000030b exec
+000002db wait
+000002eb read
+00000323 unlink
+000002cb fork
+0000035b sbrk
+0000036b uptime
+00000a84 __bss_start
+00000130 memset
+00000000 main
+0000038b set_burst_time
+000000a0 strcmp
+0000034b dup
+0000037b getMaxPid
+00000373 getNumProc
+00000383 getProcInfo
+00000210 stat
+00000a84 _edata
+00000a90 _end
+00000333 link
+000002d3 exit
+00000260 atoi
+000000f0 strlen
+00000313 open
+00000150 strchr
+0000033b mkdir
+000002fb close
+00000620 free
Binary files xv6-public/pipe.o and xv6-new/pipe.o differ
diff -ruN xv6-public/printf.d xv6-new/printf.d
--- xv6-public/printf.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/printf.d	2022-10-07 22:43:42.871886833 +0530
@@ -0,0 +1 @@
+printf.o: printf.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/printf.o and xv6-new/printf.o differ
diff -ruN xv6-public/proc.c xv6-new/proc.c
--- xv6-public/proc.c	2022-10-07 22:44:57.841887896 +0530
+++ xv6-new/proc.c	2022-10-07 11:57:22.641337100 +0530
@@ -6,12 +6,19 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "processInfo.h"
+
 
 struct {
   struct spinlock lock;
   struct proc proc[NPROC];
 } ptable;
 
+struct queue_node{
+  struct proc *process;
+  struct queue_node *next;
+};
+
 static struct proc *initproc;
 
 int nextpid = 1;
@@ -88,7 +95,8 @@
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-
+  p->number_of_context_switches = 0;  
+  p->burst_time = 0;
   release(&ptable.lock);
 
   // Allocate kernel stack.
@@ -319,35 +327,79 @@
 //  - swtch to start running that process
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
+// void
+// scheduler(void)
+// {
+//   struct proc *p;
+//   struct cpu *c = mycpu();
+//   c->proc = 0;
+  
+//   for(;;){
+//     // Enable interrupts on this processor.
+//     sti();
+
+//     // Loop over process table looking for process to run.
+//     acquire(&ptable.lock);
+//     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+//       if(p->state != RUNNABLE)
+//         continue;
+
+//       // Switch to chosen process.  It is the process's job
+//       // to release ptable.lock and then reacquire it
+//       // before jumping back to us.
+//       (p -> number_of_context_switches)++;
+//       c->proc = p;
+//       switchuvm(p);
+//       p->state = RUNNING;
+
+//       swtch(&(c->scheduler), p->context);
+//       switchkvm();
+
+//       // Process is done running for now.
+//       // It should have changed its p->state before coming back.
+//       c->proc = 0;
+//     }
+//     release(&ptable.lock);
+
+//   }
+// }
+
+
+
+// // SJF scheduler
 void
 scheduler(void)
 {
-  struct proc *p;
+  struct proc *proc_to_be_executed ;
   struct cpu *c = mycpu();
-  c->proc = 0;
-  
+  c -> proc = 0;
+    
+  struct proc* iterator; 
   for(;;){
     // Enable interrupts on this processor.
     sti();
 
-    // Loop over process table looking for process to run.
+    proc_to_be_executed = 0;
+    int min_time_so_far = 1e9; // It's the minimum time obtained so far.
     acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
-
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      c->proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
 
-      swtch(&(c->scheduler), p->context);
+    // Loop over process table looking for process to run.
+    for(iterator = ptable.proc; iterator < &ptable.proc[NPROC]; iterator++){
+      if((iterator -> state == RUNNABLE) && (iterator -> burst_time) < min_time_so_far){
+        min_time_so_far = iterator -> burst_time;
+        proc_to_be_executed = iterator;
+      }
+    }
+    
+    if(proc_to_be_executed != 0){
+      c->proc = proc_to_be_executed;
+      switchuvm(proc_to_be_executed);
+      proc_to_be_executed->state = RUNNING;
+      
+      swtch(&(c->scheduler), proc_to_be_executed->context);
+      (proc_to_be_executed -> number_of_context_switches)++;
       switchkvm();
 
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
       c->proc = 0;
     }
     release(&ptable.lock);
@@ -355,6 +407,9 @@
   }
 }
 
+
+
+
 // Enter scheduler.  Must hold only ptable.lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -532,3 +587,75 @@
     cprintf("\n");
   }
 }
+
+int 
+getNumProc(void){
+  struct proc *p;
+
+  acquire(&ptable.lock);
+
+  int activeProcesses = 0;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state != UNUSED){
+      activeProcesses++;
+    }
+  }
+  release(&ptable.lock);
+  return activeProcesses;
+}
+
+int 
+getMaxPid(void){
+  struct proc *p;
+
+  acquire(&ptable.lock);
+  int maxPID = -1e9;
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(maxPID < (p -> pid)){
+      maxPID = (p -> pid);
+    }
+  }
+  release(&ptable.lock);
+  return maxPID;
+}
+
+int 
+getProcInfo(int pid,struct processInfo* procInfo){
+  struct proc *p;
+
+  acquire(&ptable.lock);
+  int isProcessPresent = -1;
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p -> pid == pid){
+      isProcessPresent = 0;
+      procInfo -> psize = p -> sz;
+      procInfo -> numberContextSwitches = p -> number_of_context_switches;
+      procInfo -> ppid = p -> parent -> pid;
+    }
+  }
+  release(&ptable.lock);
+  return isProcessPresent;
+}
+
+int 
+set_burst_time(int n){
+
+  acquire(&ptable.lock);
+  int BurstTimeSet = -1;
+  mycpu()->proc->burst_time = n;
+  BurstTimeSet = 0;
+  release(&ptable.lock);
+  yield();
+  return BurstTimeSet;
+}
+
+int 
+get_burst_time(){
+  
+  acquire(&ptable.lock);
+  int burstTime = -1;
+  burstTime = mycpu()->proc->burst_time;
+  release(&ptable.lock);
+  return burstTime;
+}
\ No newline at end of file
diff -ruN xv6-public/proc.d xv6-new/proc.d
--- xv6-public/proc.d	2022-10-07 22:45:10.841888080 +0530
+++ xv6-new/proc.d	2022-10-07 22:43:36.171886738 +0530
@@ -1,2 +1,2 @@
 proc.o: proc.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h x86.h proc.h spinlock.h
+ memlayout.h mmu.h x86.h proc.h spinlock.h processInfo.h
diff -ruN xv6-public/proc.h xv6-new/proc.h
--- xv6-public/proc.h	2022-10-07 22:44:57.841887896 +0530
+++ xv6-new/proc.h	2022-10-05 23:29:36.804342200 +0530
@@ -49,6 +49,8 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int number_of_context_switches;         // Number of Times this proceess context switches
+  int burst_time;              // CPU burst time of the process
 };
 
 // Process memory is laid out contiguously, low addresses first:
Binary files xv6-public/proc.o and xv6-new/proc.o differ
diff -ruN xv6-public/processInfo.h xv6-new/processInfo.h
--- xv6-public/processInfo.h	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/processInfo.h	2022-10-04 22:36:38.728194400 +0530
@@ -0,0 +1,6 @@
+struct processInfo
+{
+    int ppid;
+    int psize;
+    int numberContextSwitches;
+};
diff -ruN xv6-public/rm.asm xv6-new/rm.asm
--- xv6-public/rm.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/rm.asm	2022-10-07 22:43:43.351886840 +0530
@@ -0,0 +1,1238 @@
+
+_rm:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	bf 01 00 00 00       	mov    $0x1,%edi
+  17:	56                   	push   %esi
+  18:	53                   	push   %ebx
+  19:	51                   	push   %ecx
+  1a:	83 ec 08             	sub    $0x8,%esp
+  1d:	8b 59 04             	mov    0x4(%ecx),%ebx
+  20:	8b 31                	mov    (%ecx),%esi
+  22:	83 c3 04             	add    $0x4,%ebx
+  int i;
+
+  if(argc < 2){
+  25:	83 fe 01             	cmp    $0x1,%esi
+  28:	7e 3a                	jle    64 <main+0x64>
+  2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    printf(2, "Usage: rm files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(unlink(argv[i]) < 0){
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	e8 f9 02 00 00       	call   333 <unlink>
+  3a:	83 c4 10             	add    $0x10,%esp
+  3d:	85 c0                	test   %eax,%eax
+  3f:	78 0f                	js     50 <main+0x50>
+  for(i = 1; i < argc; i++){
+  41:	83 c7 01             	add    $0x1,%edi
+  44:	83 c3 04             	add    $0x4,%ebx
+  47:	39 fe                	cmp    %edi,%esi
+  49:	75 e5                	jne    30 <main+0x30>
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+  4b:	e8 93 02 00 00       	call   2e3 <exit>
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+  50:	50                   	push   %eax
+  51:	ff 33                	pushl  (%ebx)
+  53:	68 dc 07 00 00       	push   $0x7dc
+  58:	6a 02                	push   $0x2
+  5a:	e8 01 04 00 00       	call   460 <printf>
+      break;
+  5f:	83 c4 10             	add    $0x10,%esp
+  62:	eb e7                	jmp    4b <main+0x4b>
+    printf(2, "Usage: rm files...\n");
+  64:	52                   	push   %edx
+  65:	52                   	push   %edx
+  66:	68 c8 07 00 00       	push   $0x7c8
+  6b:	6a 02                	push   $0x2
+  6d:	e8 ee 03 00 00       	call   460 <printf>
+    exit();
+  72:	e8 6c 02 00 00       	call   2e3 <exit>
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	f3 0f 1e fb          	endbr32 
+  84:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  85:	31 c0                	xor    %eax,%eax
+{
+  87:	89 e5                	mov    %esp,%ebp
+  89:	53                   	push   %ebx
+  8a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  8d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  90:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  94:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  97:	83 c0 01             	add    $0x1,%eax
+  9a:	84 d2                	test   %dl,%dl
+  9c:	75 f2                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  9e:	89 c8                	mov    %ecx,%eax
+  a0:	5b                   	pop    %ebx
+  a1:	5d                   	pop    %ebp
+  a2:	c3                   	ret    
+  a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	f3 0f 1e fb          	endbr32 
+  b4:	55                   	push   %ebp
+  b5:	89 e5                	mov    %esp,%ebp
+  b7:	53                   	push   %ebx
+  b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  bb:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  be:	0f b6 01             	movzbl (%ecx),%eax
+  c1:	0f b6 1a             	movzbl (%edx),%ebx
+  c4:	84 c0                	test   %al,%al
+  c6:	75 19                	jne    e1 <strcmp+0x31>
+  c8:	eb 26                	jmp    f0 <strcmp+0x40>
+  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  d0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  d4:	83 c1 01             	add    $0x1,%ecx
+  d7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  da:	0f b6 1a             	movzbl (%edx),%ebx
+  dd:	84 c0                	test   %al,%al
+  df:	74 0f                	je     f0 <strcmp+0x40>
+  e1:	38 d8                	cmp    %bl,%al
+  e3:	74 eb                	je     d0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  e5:	29 d8                	sub    %ebx,%eax
+}
+  e7:	5b                   	pop    %ebx
+  e8:	5d                   	pop    %ebp
+  e9:	c3                   	ret    
+  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  f0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  f2:	29 d8                	sub    %ebx,%eax
+}
+  f4:	5b                   	pop    %ebx
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fe:	66 90                	xchg   %ax,%ax
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	f3 0f 1e fb          	endbr32 
+ 104:	55                   	push   %ebp
+ 105:	89 e5                	mov    %esp,%ebp
+ 107:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 10a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 10d:	74 21                	je     130 <strlen+0x30>
+ 10f:	31 c0                	xor    %eax,%eax
+ 111:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 118:	83 c0 01             	add    $0x1,%eax
+ 11b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 11f:	89 c1                	mov    %eax,%ecx
+ 121:	75 f5                	jne    118 <strlen+0x18>
+    ;
+  return n;
+}
+ 123:	89 c8                	mov    %ecx,%eax
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 130:	31 c9                	xor    %ecx,%ecx
+}
+ 132:	5d                   	pop    %ebp
+ 133:	89 c8                	mov    %ecx,%eax
+ 135:	c3                   	ret    
+ 136:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000140 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+ 145:	89 e5                	mov    %esp,%ebp
+ 147:	57                   	push   %edi
+ 148:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 14b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 14e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 151:	89 d7                	mov    %edx,%edi
+ 153:	fc                   	cld    
+ 154:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 156:	89 d0                	mov    %edx,%eax
+ 158:	5f                   	pop    %edi
+ 159:	5d                   	pop    %ebp
+ 15a:	c3                   	ret    
+ 15b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 15f:	90                   	nop
+
+00000160 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 160:	f3 0f 1e fb          	endbr32 
+ 164:	55                   	push   %ebp
+ 165:	89 e5                	mov    %esp,%ebp
+ 167:	8b 45 08             	mov    0x8(%ebp),%eax
+ 16a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 16e:	0f b6 10             	movzbl (%eax),%edx
+ 171:	84 d2                	test   %dl,%dl
+ 173:	75 16                	jne    18b <strchr+0x2b>
+ 175:	eb 21                	jmp    198 <strchr+0x38>
+ 177:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17e:	66 90                	xchg   %ax,%ax
+ 180:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 184:	83 c0 01             	add    $0x1,%eax
+ 187:	84 d2                	test   %dl,%dl
+ 189:	74 0d                	je     198 <strchr+0x38>
+    if(*s == c)
+ 18b:	38 d1                	cmp    %dl,%cl
+ 18d:	75 f1                	jne    180 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 18f:	5d                   	pop    %ebp
+ 190:	c3                   	ret    
+ 191:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 198:	31 c0                	xor    %eax,%eax
+}
+ 19a:	5d                   	pop    %ebp
+ 19b:	c3                   	ret    
+ 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001a0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1a0:	f3 0f 1e fb          	endbr32 
+ 1a4:	55                   	push   %ebp
+ 1a5:	89 e5                	mov    %esp,%ebp
+ 1a7:	57                   	push   %edi
+ 1a8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1a9:	31 f6                	xor    %esi,%esi
+{
+ 1ab:	53                   	push   %ebx
+ 1ac:	89 f3                	mov    %esi,%ebx
+ 1ae:	83 ec 1c             	sub    $0x1c,%esp
+ 1b1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1b4:	eb 33                	jmp    1e9 <gets+0x49>
+ 1b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bd:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1c0:	83 ec 04             	sub    $0x4,%esp
+ 1c3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1c6:	6a 01                	push   $0x1
+ 1c8:	50                   	push   %eax
+ 1c9:	6a 00                	push   $0x0
+ 1cb:	e8 2b 01 00 00       	call   2fb <read>
+    if(cc < 1)
+ 1d0:	83 c4 10             	add    $0x10,%esp
+ 1d3:	85 c0                	test   %eax,%eax
+ 1d5:	7e 1c                	jle    1f3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1d7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1db:	83 c7 01             	add    $0x1,%edi
+ 1de:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1e1:	3c 0a                	cmp    $0xa,%al
+ 1e3:	74 23                	je     208 <gets+0x68>
+ 1e5:	3c 0d                	cmp    $0xd,%al
+ 1e7:	74 1f                	je     208 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1e9:	83 c3 01             	add    $0x1,%ebx
+ 1ec:	89 fe                	mov    %edi,%esi
+ 1ee:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1f1:	7c cd                	jl     1c0 <gets+0x20>
+ 1f3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1f8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1fe:	5b                   	pop    %ebx
+ 1ff:	5e                   	pop    %esi
+ 200:	5f                   	pop    %edi
+ 201:	5d                   	pop    %ebp
+ 202:	c3                   	ret    
+ 203:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 207:	90                   	nop
+ 208:	8b 75 08             	mov    0x8(%ebp),%esi
+ 20b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 20e:	01 de                	add    %ebx,%esi
+ 210:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 212:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 215:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 218:	5b                   	pop    %ebx
+ 219:	5e                   	pop    %esi
+ 21a:	5f                   	pop    %edi
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000220 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	56                   	push   %esi
+ 228:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	6a 00                	push   $0x0
+ 22e:	ff 75 08             	pushl  0x8(%ebp)
+ 231:	e8 ed 00 00 00       	call   323 <open>
+  if(fd < 0)
+ 236:	83 c4 10             	add    $0x10,%esp
+ 239:	85 c0                	test   %eax,%eax
+ 23b:	78 2b                	js     268 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 23d:	83 ec 08             	sub    $0x8,%esp
+ 240:	ff 75 0c             	pushl  0xc(%ebp)
+ 243:	89 c3                	mov    %eax,%ebx
+ 245:	50                   	push   %eax
+ 246:	e8 f0 00 00 00       	call   33b <fstat>
+  close(fd);
+ 24b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 24e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 250:	e8 b6 00 00 00       	call   30b <close>
+  return r;
+ 255:	83 c4 10             	add    $0x10,%esp
+}
+ 258:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 25b:	89 f0                	mov    %esi,%eax
+ 25d:	5b                   	pop    %ebx
+ 25e:	5e                   	pop    %esi
+ 25f:	5d                   	pop    %ebp
+ 260:	c3                   	ret    
+ 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 268:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 26d:	eb e9                	jmp    258 <stat+0x38>
+ 26f:	90                   	nop
+
+00000270 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	53                   	push   %ebx
+ 278:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 27b:	0f be 02             	movsbl (%edx),%eax
+ 27e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 281:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 284:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 289:	77 1a                	ja     2a5 <atoi+0x35>
+ 28b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 28f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 290:	83 c2 01             	add    $0x1,%edx
+ 293:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 296:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 29a:	0f be 02             	movsbl (%edx),%eax
+ 29d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 2a0:	80 fb 09             	cmp    $0x9,%bl
+ 2a3:	76 eb                	jbe    290 <atoi+0x20>
+  return n;
+}
+ 2a5:	89 c8                	mov    %ecx,%eax
+ 2a7:	5b                   	pop    %ebx
+ 2a8:	5d                   	pop    %ebp
+ 2a9:	c3                   	ret    
+ 2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000002b0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	57                   	push   %edi
+ 2b8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2bb:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2be:	56                   	push   %esi
+ 2bf:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2c2:	85 c0                	test   %eax,%eax
+ 2c4:	7e 0f                	jle    2d5 <memmove+0x25>
+ 2c6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2c8:	89 d7                	mov    %edx,%edi
+ 2ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2d0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2d1:	39 f8                	cmp    %edi,%eax
+ 2d3:	75 fb                	jne    2d0 <memmove+0x20>
+  return vdst;
+}
+ 2d5:	5e                   	pop    %esi
+ 2d6:	89 d0                	mov    %edx,%eax
+ 2d8:	5f                   	pop    %edi
+ 2d9:	5d                   	pop    %ebp
+ 2da:	c3                   	ret    
+
+000002db <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2db:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <exit>:
+SYSCALL(exit)
+ 2e3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <wait>:
+SYSCALL(wait)
+ 2eb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <pipe>:
+SYSCALL(pipe)
+ 2f3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <read>:
+SYSCALL(read)
+ 2fb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <write>:
+SYSCALL(write)
+ 303:	b8 10 00 00 00       	mov    $0x10,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <close>:
+SYSCALL(close)
+ 30b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <kill>:
+SYSCALL(kill)
+ 313:	b8 06 00 00 00       	mov    $0x6,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <exec>:
+SYSCALL(exec)
+ 31b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <open>:
+SYSCALL(open)
+ 323:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <mknod>:
+SYSCALL(mknod)
+ 32b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <unlink>:
+SYSCALL(unlink)
+ 333:	b8 12 00 00 00       	mov    $0x12,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <fstat>:
+SYSCALL(fstat)
+ 33b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <link>:
+SYSCALL(link)
+ 343:	b8 13 00 00 00       	mov    $0x13,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <mkdir>:
+SYSCALL(mkdir)
+ 34b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <chdir>:
+SYSCALL(chdir)
+ 353:	b8 09 00 00 00       	mov    $0x9,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <dup>:
+SYSCALL(dup)
+ 35b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <getpid>:
+SYSCALL(getpid)
+ 363:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <sbrk>:
+SYSCALL(sbrk)
+ 36b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <sleep>:
+SYSCALL(sleep)
+ 373:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <uptime>:
+SYSCALL(uptime)
+ 37b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <getNumProc>:
+SYSCALL(getNumProc)
+ 383:	b8 16 00 00 00       	mov    $0x16,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 38b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 393:	b8 18 00 00 00       	mov    $0x18,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 39b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <get_burst_time>:
+ 3a3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+ 3ab:	66 90                	xchg   %ax,%ax
+ 3ad:	66 90                	xchg   %ax,%ax
+ 3af:	90                   	nop
+
+000003b0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3b0:	55                   	push   %ebp
+ 3b1:	89 e5                	mov    %esp,%ebp
+ 3b3:	57                   	push   %edi
+ 3b4:	56                   	push   %esi
+ 3b5:	53                   	push   %ebx
+ 3b6:	83 ec 3c             	sub    $0x3c,%esp
+ 3b9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3bc:	89 d1                	mov    %edx,%ecx
+{
+ 3be:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3c1:	85 d2                	test   %edx,%edx
+ 3c3:	0f 89 7f 00 00 00    	jns    448 <printint+0x98>
+ 3c9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3cd:	74 79                	je     448 <printint+0x98>
+    neg = 1;
+ 3cf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3d6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3d8:	31 db                	xor    %ebx,%ebx
+ 3da:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3e0:	89 c8                	mov    %ecx,%eax
+ 3e2:	31 d2                	xor    %edx,%edx
+ 3e4:	89 cf                	mov    %ecx,%edi
+ 3e6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3e9:	0f b6 92 fc 07 00 00 	movzbl 0x7fc(%edx),%edx
+ 3f0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3f3:	89 d8                	mov    %ebx,%eax
+ 3f5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3f8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3fb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3fe:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 401:	76 dd                	jbe    3e0 <printint+0x30>
+  if(neg)
+ 403:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 406:	85 c9                	test   %ecx,%ecx
+ 408:	74 0c                	je     416 <printint+0x66>
+    buf[i++] = '-';
+ 40a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 40f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 411:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 416:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 419:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 41d:	eb 07                	jmp    426 <printint+0x76>
+ 41f:	90                   	nop
+ 420:	0f b6 13             	movzbl (%ebx),%edx
+ 423:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 426:	83 ec 04             	sub    $0x4,%esp
+ 429:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 42c:	6a 01                	push   $0x1
+ 42e:	56                   	push   %esi
+ 42f:	57                   	push   %edi
+ 430:	e8 ce fe ff ff       	call   303 <write>
+  while(--i >= 0)
+ 435:	83 c4 10             	add    $0x10,%esp
+ 438:	39 de                	cmp    %ebx,%esi
+ 43a:	75 e4                	jne    420 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 43c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 43f:	5b                   	pop    %ebx
+ 440:	5e                   	pop    %esi
+ 441:	5f                   	pop    %edi
+ 442:	5d                   	pop    %ebp
+ 443:	c3                   	ret    
+ 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 448:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 44f:	eb 87                	jmp    3d8 <printint+0x28>
+ 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 458:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45f:	90                   	nop
+
+00000460 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 460:	f3 0f 1e fb          	endbr32 
+ 464:	55                   	push   %ebp
+ 465:	89 e5                	mov    %esp,%ebp
+ 467:	57                   	push   %edi
+ 468:	56                   	push   %esi
+ 469:	53                   	push   %ebx
+ 46a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 46d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 470:	0f b6 1e             	movzbl (%esi),%ebx
+ 473:	84 db                	test   %bl,%bl
+ 475:	0f 84 b4 00 00 00    	je     52f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 47b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 47e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 481:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 484:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 486:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 489:	eb 33                	jmp    4be <printf+0x5e>
+ 48b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 48f:	90                   	nop
+ 490:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 493:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	74 17                	je     4b4 <printf+0x54>
+  write(fd, &c, 1);
+ 49d:	83 ec 04             	sub    $0x4,%esp
+ 4a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4a3:	6a 01                	push   $0x1
+ 4a5:	57                   	push   %edi
+ 4a6:	ff 75 08             	pushl  0x8(%ebp)
+ 4a9:	e8 55 fe ff ff       	call   303 <write>
+ 4ae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 4b1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4b4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4b7:	83 c6 01             	add    $0x1,%esi
+ 4ba:	84 db                	test   %bl,%bl
+ 4bc:	74 71                	je     52f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 4be:	0f be cb             	movsbl %bl,%ecx
+ 4c1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4c4:	85 d2                	test   %edx,%edx
+ 4c6:	74 c8                	je     490 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4c8:	83 fa 25             	cmp    $0x25,%edx
+ 4cb:	75 e7                	jne    4b4 <printf+0x54>
+      if(c == 'd'){
+ 4cd:	83 f8 64             	cmp    $0x64,%eax
+ 4d0:	0f 84 9a 00 00 00    	je     570 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4d6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4dc:	83 f9 70             	cmp    $0x70,%ecx
+ 4df:	74 5f                	je     540 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4e1:	83 f8 73             	cmp    $0x73,%eax
+ 4e4:	0f 84 d6 00 00 00    	je     5c0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ea:	83 f8 63             	cmp    $0x63,%eax
+ 4ed:	0f 84 8d 00 00 00    	je     580 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4f3:	83 f8 25             	cmp    $0x25,%eax
+ 4f6:	0f 84 b4 00 00 00    	je     5b0 <printf+0x150>
+  write(fd, &c, 1);
+ 4fc:	83 ec 04             	sub    $0x4,%esp
+ 4ff:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 503:	6a 01                	push   $0x1
+ 505:	57                   	push   %edi
+ 506:	ff 75 08             	pushl  0x8(%ebp)
+ 509:	e8 f5 fd ff ff       	call   303 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 50e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 511:	83 c4 0c             	add    $0xc,%esp
+ 514:	6a 01                	push   $0x1
+ 516:	83 c6 01             	add    $0x1,%esi
+ 519:	57                   	push   %edi
+ 51a:	ff 75 08             	pushl  0x8(%ebp)
+ 51d:	e8 e1 fd ff ff       	call   303 <write>
+  for(i = 0; fmt[i]; i++){
+ 522:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 526:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 529:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 52b:	84 db                	test   %bl,%bl
+ 52d:	75 8f                	jne    4be <printf+0x5e>
+    }
+  }
+}
+ 52f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 532:	5b                   	pop    %ebx
+ 533:	5e                   	pop    %esi
+ 534:	5f                   	pop    %edi
+ 535:	5d                   	pop    %ebp
+ 536:	c3                   	ret    
+ 537:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 540:	83 ec 0c             	sub    $0xc,%esp
+ 543:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 548:	6a 00                	push   $0x0
+ 54a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 54d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 550:	8b 13                	mov    (%ebx),%edx
+ 552:	e8 59 fe ff ff       	call   3b0 <printint>
+        ap++;
+ 557:	89 d8                	mov    %ebx,%eax
+ 559:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 55c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 55e:	83 c0 04             	add    $0x4,%eax
+ 561:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 564:	e9 4b ff ff ff       	jmp    4b4 <printf+0x54>
+ 569:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	eb ce                	jmp    54a <printf+0xea>
+ 57c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 580:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 583:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 586:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 588:	6a 01                	push   $0x1
+        ap++;
+ 58a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 58d:	57                   	push   %edi
+ 58e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 591:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 594:	e8 6a fd ff ff       	call   303 <write>
+        ap++;
+ 599:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 59c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 59f:	31 d2                	xor    %edx,%edx
+ 5a1:	e9 0e ff ff ff       	jmp    4b4 <printf+0x54>
+ 5a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ad:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5b3:	83 ec 04             	sub    $0x4,%esp
+ 5b6:	e9 59 ff ff ff       	jmp    514 <printf+0xb4>
+ 5bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5bf:	90                   	nop
+        s = (char*)*ap;
+ 5c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5c3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5c5:	83 c0 04             	add    $0x4,%eax
+ 5c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5cb:	85 db                	test   %ebx,%ebx
+ 5cd:	74 17                	je     5e6 <printf+0x186>
+        while(*s != 0){
+ 5cf:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5d2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5d4:	84 c0                	test   %al,%al
+ 5d6:	0f 84 d8 fe ff ff    	je     4b4 <printf+0x54>
+ 5dc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5df:	89 de                	mov    %ebx,%esi
+ 5e1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e4:	eb 1a                	jmp    600 <printf+0x1a0>
+          s = "(null)";
+ 5e6:	bb f5 07 00 00       	mov    $0x7f5,%ebx
+        while(*s != 0){
+ 5eb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ee:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5f3:	89 de                	mov    %ebx,%esi
+ 5f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ff:	90                   	nop
+  write(fd, &c, 1);
+ 600:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 603:	83 c6 01             	add    $0x1,%esi
+ 606:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 609:	6a 01                	push   $0x1
+ 60b:	57                   	push   %edi
+ 60c:	53                   	push   %ebx
+ 60d:	e8 f1 fc ff ff       	call   303 <write>
+        while(*s != 0){
+ 612:	0f b6 06             	movzbl (%esi),%eax
+ 615:	83 c4 10             	add    $0x10,%esp
+ 618:	84 c0                	test   %al,%al
+ 61a:	75 e4                	jne    600 <printf+0x1a0>
+ 61c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 61f:	31 d2                	xor    %edx,%edx
+ 621:	e9 8e fe ff ff       	jmp    4b4 <printf+0x54>
+ 626:	66 90                	xchg   %ax,%ax
+ 628:	66 90                	xchg   %ax,%ax
+ 62a:	66 90                	xchg   %ax,%ax
+ 62c:	66 90                	xchg   %ax,%ax
+ 62e:	66 90                	xchg   %ax,%ax
+
+00000630 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 630:	f3 0f 1e fb          	endbr32 
+ 634:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 635:	a1 b4 0a 00 00       	mov    0xab4,%eax
+{
+ 63a:	89 e5                	mov    %esp,%ebp
+ 63c:	57                   	push   %edi
+ 63d:	56                   	push   %esi
+ 63e:	53                   	push   %ebx
+ 63f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 642:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 644:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 647:	39 c8                	cmp    %ecx,%eax
+ 649:	73 15                	jae    660 <free+0x30>
+ 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+ 650:	39 d1                	cmp    %edx,%ecx
+ 652:	72 14                	jb     668 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 654:	39 d0                	cmp    %edx,%eax
+ 656:	73 10                	jae    668 <free+0x38>
+{
+ 658:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 65a:	8b 10                	mov    (%eax),%edx
+ 65c:	39 c8                	cmp    %ecx,%eax
+ 65e:	72 f0                	jb     650 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 660:	39 d0                	cmp    %edx,%eax
+ 662:	72 f4                	jb     658 <free+0x28>
+ 664:	39 d1                	cmp    %edx,%ecx
+ 666:	73 f0                	jae    658 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 668:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 66b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 66e:	39 fa                	cmp    %edi,%edx
+ 670:	74 1e                	je     690 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 672:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 675:	8b 50 04             	mov    0x4(%eax),%edx
+ 678:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 67b:	39 f1                	cmp    %esi,%ecx
+ 67d:	74 28                	je     6a7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 67f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 681:	5b                   	pop    %ebx
+  freep = p;
+ 682:	a3 b4 0a 00 00       	mov    %eax,0xab4
+}
+ 687:	5e                   	pop    %esi
+ 688:	5f                   	pop    %edi
+ 689:	5d                   	pop    %ebp
+ 68a:	c3                   	ret    
+ 68b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 68f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 690:	03 72 04             	add    0x4(%edx),%esi
+ 693:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 696:	8b 10                	mov    (%eax),%edx
+ 698:	8b 12                	mov    (%edx),%edx
+ 69a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 69d:	8b 50 04             	mov    0x4(%eax),%edx
+ 6a0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6a3:	39 f1                	cmp    %esi,%ecx
+ 6a5:	75 d8                	jne    67f <free+0x4f>
+    p->s.size += bp->s.size;
+ 6a7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6aa:	a3 b4 0a 00 00       	mov    %eax,0xab4
+    p->s.size += bp->s.size;
+ 6af:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6b2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6b5:	89 10                	mov    %edx,(%eax)
+}
+ 6b7:	5b                   	pop    %ebx
+ 6b8:	5e                   	pop    %esi
+ 6b9:	5f                   	pop    %edi
+ 6ba:	5d                   	pop    %ebp
+ 6bb:	c3                   	ret    
+ 6bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006c0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6c0:	f3 0f 1e fb          	endbr32 
+ 6c4:	55                   	push   %ebp
+ 6c5:	89 e5                	mov    %esp,%ebp
+ 6c7:	57                   	push   %edi
+ 6c8:	56                   	push   %esi
+ 6c9:	53                   	push   %ebx
+ 6ca:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6d0:	8b 3d b4 0a 00 00    	mov    0xab4,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6d6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6d9:	c1 ee 03             	shr    $0x3,%esi
+ 6dc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6df:	85 ff                	test   %edi,%edi
+ 6e1:	0f 84 a9 00 00 00    	je     790 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6e7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6e9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ec:	39 f1                	cmp    %esi,%ecx
+ 6ee:	73 6d                	jae    75d <malloc+0x9d>
+ 6f0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6f6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6fb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6fe:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 705:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 708:	eb 17                	jmp    721 <malloc+0x61>
+ 70a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 710:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 712:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 715:	39 f1                	cmp    %esi,%ecx
+ 717:	73 4f                	jae    768 <malloc+0xa8>
+ 719:	8b 3d b4 0a 00 00    	mov    0xab4,%edi
+ 71f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 721:	39 c7                	cmp    %eax,%edi
+ 723:	75 eb                	jne    710 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 725:	83 ec 0c             	sub    $0xc,%esp
+ 728:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 72b:	e8 3b fc ff ff       	call   36b <sbrk>
+  if(p == (char*)-1)
+ 730:	83 c4 10             	add    $0x10,%esp
+ 733:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 736:	74 1b                	je     753 <malloc+0x93>
+  hp->s.size = nu;
+ 738:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 73b:	83 ec 0c             	sub    $0xc,%esp
+ 73e:	83 c0 08             	add    $0x8,%eax
+ 741:	50                   	push   %eax
+ 742:	e8 e9 fe ff ff       	call   630 <free>
+  return freep;
+ 747:	a1 b4 0a 00 00       	mov    0xab4,%eax
+      if((p = morecore(nunits)) == 0)
+ 74c:	83 c4 10             	add    $0x10,%esp
+ 74f:	85 c0                	test   %eax,%eax
+ 751:	75 bd                	jne    710 <malloc+0x50>
+        return 0;
+  }
+}
+ 753:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 756:	31 c0                	xor    %eax,%eax
+}
+ 758:	5b                   	pop    %ebx
+ 759:	5e                   	pop    %esi
+ 75a:	5f                   	pop    %edi
+ 75b:	5d                   	pop    %ebp
+ 75c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 75d:	89 c2                	mov    %eax,%edx
+ 75f:	89 f8                	mov    %edi,%eax
+ 761:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 768:	39 ce                	cmp    %ecx,%esi
+ 76a:	74 54                	je     7c0 <malloc+0x100>
+        p->s.size -= nunits;
+ 76c:	29 f1                	sub    %esi,%ecx
+ 76e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 771:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 774:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 777:	a3 b4 0a 00 00       	mov    %eax,0xab4
+}
+ 77c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 77f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 782:	5b                   	pop    %ebx
+ 783:	5e                   	pop    %esi
+ 784:	5f                   	pop    %edi
+ 785:	5d                   	pop    %ebp
+ 786:	c3                   	ret    
+ 787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 78e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 790:	c7 05 b4 0a 00 00 b8 	movl   $0xab8,0xab4
+ 797:	0a 00 00 
+    base.s.size = 0;
+ 79a:	bf b8 0a 00 00       	mov    $0xab8,%edi
+    base.s.ptr = freep = prevp = &base;
+ 79f:	c7 05 b8 0a 00 00 b8 	movl   $0xab8,0xab8
+ 7a6:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a9:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 7ab:	c7 05 bc 0a 00 00 00 	movl   $0x0,0xabc
+ 7b2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7b5:	e9 36 ff ff ff       	jmp    6f0 <malloc+0x30>
+ 7ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7c0:	8b 0a                	mov    (%edx),%ecx
+ 7c2:	89 08                	mov    %ecx,(%eax)
+ 7c4:	eb b1                	jmp    777 <malloc+0xb7>
diff -ruN xv6-public/rm.d xv6-new/rm.d
--- xv6-public/rm.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/rm.d	2022-10-07 22:43:43.351886840 +0530
@@ -0,0 +1 @@
+rm.o: rm.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/rm.o and xv6-new/rm.o differ
diff -ruN xv6-public/rm.sym xv6-new/rm.sym
--- xv6-public/rm.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/rm.sym	2022-10-07 22:43:43.351886840 +0530
@@ -0,0 +1,62 @@
+00000000 .text
+000007c8 .rodata
+00000810 .eh_frame
+00000ab4 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 rm.c
+00000000 ulib.c
+00000000 printf.c
+000003b0 printint
+000007fc digits.1096
+00000000 umalloc.c
+00000ab4 freep
+00000ab8 base
+00000080 strcpy
+00000460 printf
+000002b0 memmove
+0000032b mknod
+000001a0 gets
+00000363 getpid
+000006c0 malloc
+00000373 sleep
+000003a3 get_burst_time
+000002f3 pipe
+00000303 write
+0000033b fstat
+00000313 kill
+00000353 chdir
+0000031b exec
+000002eb wait
+000002fb read
+00000333 unlink
+000002db fork
+0000036b sbrk
+0000037b uptime
+00000ab4 __bss_start
+00000140 memset
+00000000 main
+0000039b set_burst_time
+000000b0 strcmp
+0000035b dup
+0000038b getMaxPid
+00000383 getNumProc
+00000393 getProcInfo
+00000220 stat
+00000ab4 _edata
+00000ac0 _end
+00000343 link
+000002e3 exit
+00000270 atoi
+00000100 strlen
+00000323 open
+00000160 strchr
+0000034b mkdir
+0000030b close
+00000630 free
diff -ruN xv6-public/sh.asm xv6-new/sh.asm
--- xv6-public/sh.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/sh.asm	2022-10-07 22:43:43.831886847 +0530
@@ -0,0 +1,2642 @@
+
+_sh:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return 0;
+}
+
+int
+main(void)
+{
+       0:	f3 0f 1e fb          	endbr32 
+       4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+       8:	83 e4 f0             	and    $0xfffffff0,%esp
+       b:	ff 71 fc             	pushl  -0x4(%ecx)
+       e:	55                   	push   %ebp
+       f:	89 e5                	mov    %esp,%ebp
+      11:	51                   	push   %ecx
+      12:	83 ec 04             	sub    $0x4,%esp
+  static char buf[100];
+  int fd;
+
+  // Ensure that three file descriptors are open.
+  while((fd = open("console", O_RDWR)) >= 0){
+      15:	eb 12                	jmp    29 <main+0x29>
+      17:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      1e:	66 90                	xchg   %ax,%ax
+    if(fd >= 3){
+      20:	83 f8 02             	cmp    $0x2,%eax
+      23:	0f 8f b7 00 00 00    	jg     e0 <main+0xe0>
+  while((fd = open("console", O_RDWR)) >= 0){
+      29:	83 ec 08             	sub    $0x8,%esp
+      2c:	6a 02                	push   $0x2
+      2e:	68 19 13 00 00       	push   $0x1319
+      33:	e8 9b 0d 00 00       	call   dd3 <open>
+      38:	83 c4 10             	add    $0x10,%esp
+      3b:	85 c0                	test   %eax,%eax
+      3d:	79 e1                	jns    20 <main+0x20>
+      3f:	eb 32                	jmp    73 <main+0x73>
+      41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    }
+  }
+
+  // Read and run input commands.
+  while(getcmd(buf, sizeof(buf)) >= 0){
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      48:	80 3d 62 19 00 00 20 	cmpb   $0x20,0x1962
+      4f:	74 51                	je     a2 <main+0xa2>
+      51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+int
+fork1(void)
+{
+  int pid;
+
+  pid = fork();
+      58:	e8 2e 0d 00 00       	call   d8b <fork>
+  if(pid == -1)
+      5d:	83 f8 ff             	cmp    $0xffffffff,%eax
+      60:	0f 84 9d 00 00 00    	je     103 <main+0x103>
+    if(fork1() == 0)
+      66:	85 c0                	test   %eax,%eax
+      68:	0f 84 80 00 00 00    	je     ee <main+0xee>
+    wait();
+      6e:	e8 28 0d 00 00       	call   d9b <wait>
+  while(getcmd(buf, sizeof(buf)) >= 0){
+      73:	83 ec 08             	sub    $0x8,%esp
+      76:	6a 64                	push   $0x64
+      78:	68 60 19 00 00       	push   $0x1960
+      7d:	e8 8e 00 00 00       	call   110 <getcmd>
+      82:	83 c4 10             	add    $0x10,%esp
+      85:	85 c0                	test   %eax,%eax
+      87:	78 14                	js     9d <main+0x9d>
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      89:	80 3d 60 19 00 00 63 	cmpb   $0x63,0x1960
+      90:	75 c6                	jne    58 <main+0x58>
+      92:	80 3d 61 19 00 00 64 	cmpb   $0x64,0x1961
+      99:	75 bd                	jne    58 <main+0x58>
+      9b:	eb ab                	jmp    48 <main+0x48>
+  exit();
+      9d:	e8 f1 0c 00 00       	call   d93 <exit>
+      buf[strlen(buf)-1] = 0;  // chop \n
+      a2:	83 ec 0c             	sub    $0xc,%esp
+      a5:	68 60 19 00 00       	push   $0x1960
+      aa:	e8 01 0b 00 00       	call   bb0 <strlen>
+      if(chdir(buf+3) < 0)
+      af:	c7 04 24 63 19 00 00 	movl   $0x1963,(%esp)
+      buf[strlen(buf)-1] = 0;  // chop \n
+      b6:	c6 80 5f 19 00 00 00 	movb   $0x0,0x195f(%eax)
+      if(chdir(buf+3) < 0)
+      bd:	e8 41 0d 00 00       	call   e03 <chdir>
+      c2:	83 c4 10             	add    $0x10,%esp
+      c5:	85 c0                	test   %eax,%eax
+      c7:	79 aa                	jns    73 <main+0x73>
+        printf(2, "cannot cd %s\n", buf+3);
+      c9:	50                   	push   %eax
+      ca:	68 63 19 00 00       	push   $0x1963
+      cf:	68 21 13 00 00       	push   $0x1321
+      d4:	6a 02                	push   $0x2
+      d6:	e8 35 0e 00 00       	call   f10 <printf>
+      db:	83 c4 10             	add    $0x10,%esp
+      de:	eb 93                	jmp    73 <main+0x73>
+      close(fd);
+      e0:	83 ec 0c             	sub    $0xc,%esp
+      e3:	50                   	push   %eax
+      e4:	e8 d2 0c 00 00       	call   dbb <close>
+      break;
+      e9:	83 c4 10             	add    $0x10,%esp
+      ec:	eb 85                	jmp    73 <main+0x73>
+      runcmd(parsecmd(buf));
+      ee:	83 ec 0c             	sub    $0xc,%esp
+      f1:	68 60 19 00 00       	push   $0x1960
+      f6:	e8 c5 09 00 00       	call   ac0 <parsecmd>
+      fb:	89 04 24             	mov    %eax,(%esp)
+      fe:	e8 7d 00 00 00       	call   180 <runcmd>
+    panic("fork");
+     103:	83 ec 0c             	sub    $0xc,%esp
+     106:	68 a2 12 00 00       	push   $0x12a2
+     10b:	e8 50 00 00 00       	call   160 <panic>
+
+00000110 <getcmd>:
+{
+     110:	f3 0f 1e fb          	endbr32 
+     114:	55                   	push   %ebp
+     115:	89 e5                	mov    %esp,%ebp
+     117:	56                   	push   %esi
+     118:	53                   	push   %ebx
+     119:	8b 75 0c             	mov    0xc(%ebp),%esi
+     11c:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  printf(2, "$ ");
+     11f:	83 ec 08             	sub    $0x8,%esp
+     122:	68 78 12 00 00       	push   $0x1278
+     127:	6a 02                	push   $0x2
+     129:	e8 e2 0d 00 00       	call   f10 <printf>
+  memset(buf, 0, nbuf);
+     12e:	83 c4 0c             	add    $0xc,%esp
+     131:	56                   	push   %esi
+     132:	6a 00                	push   $0x0
+     134:	53                   	push   %ebx
+     135:	e8 b6 0a 00 00       	call   bf0 <memset>
+  gets(buf, nbuf);
+     13a:	58                   	pop    %eax
+     13b:	5a                   	pop    %edx
+     13c:	56                   	push   %esi
+     13d:	53                   	push   %ebx
+     13e:	e8 0d 0b 00 00       	call   c50 <gets>
+  if(buf[0] == 0) // EOF
+     143:	83 c4 10             	add    $0x10,%esp
+     146:	31 c0                	xor    %eax,%eax
+     148:	80 3b 00             	cmpb   $0x0,(%ebx)
+     14b:	0f 94 c0             	sete   %al
+}
+     14e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     151:	5b                   	pop    %ebx
+  if(buf[0] == 0) // EOF
+     152:	f7 d8                	neg    %eax
+}
+     154:	5e                   	pop    %esi
+     155:	5d                   	pop    %ebp
+     156:	c3                   	ret    
+     157:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     15e:	66 90                	xchg   %ax,%ax
+
+00000160 <panic>:
+{
+     160:	f3 0f 1e fb          	endbr32 
+     164:	55                   	push   %ebp
+     165:	89 e5                	mov    %esp,%ebp
+     167:	83 ec 0c             	sub    $0xc,%esp
+  printf(2, "%s\n", s);
+     16a:	ff 75 08             	pushl  0x8(%ebp)
+     16d:	68 15 13 00 00       	push   $0x1315
+     172:	6a 02                	push   $0x2
+     174:	e8 97 0d 00 00       	call   f10 <printf>
+  exit();
+     179:	e8 15 0c 00 00       	call   d93 <exit>
+     17e:	66 90                	xchg   %ax,%ax
+
+00000180 <runcmd>:
+{
+     180:	f3 0f 1e fb          	endbr32 
+     184:	55                   	push   %ebp
+     185:	89 e5                	mov    %esp,%ebp
+     187:	53                   	push   %ebx
+     188:	83 ec 14             	sub    $0x14,%esp
+     18b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(cmd == 0)
+     18e:	85 db                	test   %ebx,%ebx
+     190:	74 7e                	je     210 <runcmd+0x90>
+  switch(cmd->type){
+     192:	83 3b 05             	cmpl   $0x5,(%ebx)
+     195:	0f 87 04 01 00 00    	ja     29f <runcmd+0x11f>
+     19b:	8b 03                	mov    (%ebx),%eax
+     19d:	3e ff 24 85 30 13 00 	notrack jmp *0x1330(,%eax,4)
+     1a4:	00 
+    if(pipe(p) < 0)
+     1a5:	83 ec 0c             	sub    $0xc,%esp
+     1a8:	8d 45 f0             	lea    -0x10(%ebp),%eax
+     1ab:	50                   	push   %eax
+     1ac:	e8 f2 0b 00 00       	call   da3 <pipe>
+     1b1:	83 c4 10             	add    $0x10,%esp
+     1b4:	85 c0                	test   %eax,%eax
+     1b6:	0f 88 05 01 00 00    	js     2c1 <runcmd+0x141>
+  pid = fork();
+     1bc:	e8 ca 0b 00 00       	call   d8b <fork>
+  if(pid == -1)
+     1c1:	83 f8 ff             	cmp    $0xffffffff,%eax
+     1c4:	0f 84 60 01 00 00    	je     32a <runcmd+0x1aa>
+    if(fork1() == 0){
+     1ca:	85 c0                	test   %eax,%eax
+     1cc:	0f 84 fc 00 00 00    	je     2ce <runcmd+0x14e>
+  pid = fork();
+     1d2:	e8 b4 0b 00 00       	call   d8b <fork>
+  if(pid == -1)
+     1d7:	83 f8 ff             	cmp    $0xffffffff,%eax
+     1da:	0f 84 4a 01 00 00    	je     32a <runcmd+0x1aa>
+    if(fork1() == 0){
+     1e0:	85 c0                	test   %eax,%eax
+     1e2:	0f 84 14 01 00 00    	je     2fc <runcmd+0x17c>
+    close(p[0]);
+     1e8:	83 ec 0c             	sub    $0xc,%esp
+     1eb:	ff 75 f0             	pushl  -0x10(%ebp)
+     1ee:	e8 c8 0b 00 00       	call   dbb <close>
+    close(p[1]);
+     1f3:	58                   	pop    %eax
+     1f4:	ff 75 f4             	pushl  -0xc(%ebp)
+     1f7:	e8 bf 0b 00 00       	call   dbb <close>
+    wait();
+     1fc:	e8 9a 0b 00 00       	call   d9b <wait>
+    wait();
+     201:	e8 95 0b 00 00       	call   d9b <wait>
+    break;
+     206:	83 c4 10             	add    $0x10,%esp
+     209:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    exit();
+     210:	e8 7e 0b 00 00       	call   d93 <exit>
+  pid = fork();
+     215:	e8 71 0b 00 00       	call   d8b <fork>
+  if(pid == -1)
+     21a:	83 f8 ff             	cmp    $0xffffffff,%eax
+     21d:	0f 84 07 01 00 00    	je     32a <runcmd+0x1aa>
+    if(fork1() == 0)
+     223:	85 c0                	test   %eax,%eax
+     225:	75 e9                	jne    210 <runcmd+0x90>
+     227:	eb 6b                	jmp    294 <runcmd+0x114>
+    if(ecmd->argv[0] == 0)
+     229:	8b 43 04             	mov    0x4(%ebx),%eax
+     22c:	85 c0                	test   %eax,%eax
+     22e:	74 e0                	je     210 <runcmd+0x90>
+    exec(ecmd->argv[0], ecmd->argv);
+     230:	8d 53 04             	lea    0x4(%ebx),%edx
+     233:	51                   	push   %ecx
+     234:	51                   	push   %ecx
+     235:	52                   	push   %edx
+     236:	50                   	push   %eax
+     237:	e8 8f 0b 00 00       	call   dcb <exec>
+    printf(2, "exec %s failed\n", ecmd->argv[0]);
+     23c:	83 c4 0c             	add    $0xc,%esp
+     23f:	ff 73 04             	pushl  0x4(%ebx)
+     242:	68 82 12 00 00       	push   $0x1282
+     247:	6a 02                	push   $0x2
+     249:	e8 c2 0c 00 00       	call   f10 <printf>
+    break;
+     24e:	83 c4 10             	add    $0x10,%esp
+     251:	eb bd                	jmp    210 <runcmd+0x90>
+  pid = fork();
+     253:	e8 33 0b 00 00       	call   d8b <fork>
+  if(pid == -1)
+     258:	83 f8 ff             	cmp    $0xffffffff,%eax
+     25b:	0f 84 c9 00 00 00    	je     32a <runcmd+0x1aa>
+    if(fork1() == 0)
+     261:	85 c0                	test   %eax,%eax
+     263:	74 2f                	je     294 <runcmd+0x114>
+    wait();
+     265:	e8 31 0b 00 00       	call   d9b <wait>
+    runcmd(lcmd->right);
+     26a:	83 ec 0c             	sub    $0xc,%esp
+     26d:	ff 73 08             	pushl  0x8(%ebx)
+     270:	e8 0b ff ff ff       	call   180 <runcmd>
+    close(rcmd->fd);
+     275:	83 ec 0c             	sub    $0xc,%esp
+     278:	ff 73 14             	pushl  0x14(%ebx)
+     27b:	e8 3b 0b 00 00       	call   dbb <close>
+    if(open(rcmd->file, rcmd->mode) < 0){
+     280:	58                   	pop    %eax
+     281:	5a                   	pop    %edx
+     282:	ff 73 10             	pushl  0x10(%ebx)
+     285:	ff 73 08             	pushl  0x8(%ebx)
+     288:	e8 46 0b 00 00       	call   dd3 <open>
+     28d:	83 c4 10             	add    $0x10,%esp
+     290:	85 c0                	test   %eax,%eax
+     292:	78 18                	js     2ac <runcmd+0x12c>
+      runcmd(bcmd->cmd);
+     294:	83 ec 0c             	sub    $0xc,%esp
+     297:	ff 73 04             	pushl  0x4(%ebx)
+     29a:	e8 e1 fe ff ff       	call   180 <runcmd>
+    panic("runcmd");
+     29f:	83 ec 0c             	sub    $0xc,%esp
+     2a2:	68 7b 12 00 00       	push   $0x127b
+     2a7:	e8 b4 fe ff ff       	call   160 <panic>
+      printf(2, "open %s failed\n", rcmd->file);
+     2ac:	51                   	push   %ecx
+     2ad:	ff 73 08             	pushl  0x8(%ebx)
+     2b0:	68 92 12 00 00       	push   $0x1292
+     2b5:	6a 02                	push   $0x2
+     2b7:	e8 54 0c 00 00       	call   f10 <printf>
+      exit();
+     2bc:	e8 d2 0a 00 00       	call   d93 <exit>
+      panic("pipe");
+     2c1:	83 ec 0c             	sub    $0xc,%esp
+     2c4:	68 a7 12 00 00       	push   $0x12a7
+     2c9:	e8 92 fe ff ff       	call   160 <panic>
+      close(1);
+     2ce:	83 ec 0c             	sub    $0xc,%esp
+     2d1:	6a 01                	push   $0x1
+     2d3:	e8 e3 0a 00 00       	call   dbb <close>
+      dup(p[1]);
+     2d8:	58                   	pop    %eax
+     2d9:	ff 75 f4             	pushl  -0xc(%ebp)
+     2dc:	e8 2a 0b 00 00       	call   e0b <dup>
+      close(p[0]);
+     2e1:	58                   	pop    %eax
+     2e2:	ff 75 f0             	pushl  -0x10(%ebp)
+     2e5:	e8 d1 0a 00 00       	call   dbb <close>
+      close(p[1]);
+     2ea:	58                   	pop    %eax
+     2eb:	ff 75 f4             	pushl  -0xc(%ebp)
+     2ee:	e8 c8 0a 00 00       	call   dbb <close>
+      runcmd(pcmd->left);
+     2f3:	5a                   	pop    %edx
+     2f4:	ff 73 04             	pushl  0x4(%ebx)
+     2f7:	e8 84 fe ff ff       	call   180 <runcmd>
+      close(0);
+     2fc:	83 ec 0c             	sub    $0xc,%esp
+     2ff:	6a 00                	push   $0x0
+     301:	e8 b5 0a 00 00       	call   dbb <close>
+      dup(p[0]);
+     306:	5a                   	pop    %edx
+     307:	ff 75 f0             	pushl  -0x10(%ebp)
+     30a:	e8 fc 0a 00 00       	call   e0b <dup>
+      close(p[0]);
+     30f:	59                   	pop    %ecx
+     310:	ff 75 f0             	pushl  -0x10(%ebp)
+     313:	e8 a3 0a 00 00       	call   dbb <close>
+      close(p[1]);
+     318:	58                   	pop    %eax
+     319:	ff 75 f4             	pushl  -0xc(%ebp)
+     31c:	e8 9a 0a 00 00       	call   dbb <close>
+      runcmd(pcmd->right);
+     321:	58                   	pop    %eax
+     322:	ff 73 08             	pushl  0x8(%ebx)
+     325:	e8 56 fe ff ff       	call   180 <runcmd>
+    panic("fork");
+     32a:	83 ec 0c             	sub    $0xc,%esp
+     32d:	68 a2 12 00 00       	push   $0x12a2
+     332:	e8 29 fe ff ff       	call   160 <panic>
+     337:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     33e:	66 90                	xchg   %ax,%ax
+
+00000340 <fork1>:
+{
+     340:	f3 0f 1e fb          	endbr32 
+     344:	55                   	push   %ebp
+     345:	89 e5                	mov    %esp,%ebp
+     347:	83 ec 08             	sub    $0x8,%esp
+  pid = fork();
+     34a:	e8 3c 0a 00 00       	call   d8b <fork>
+  if(pid == -1)
+     34f:	83 f8 ff             	cmp    $0xffffffff,%eax
+     352:	74 02                	je     356 <fork1+0x16>
+  return pid;
+}
+     354:	c9                   	leave  
+     355:	c3                   	ret    
+    panic("fork");
+     356:	83 ec 0c             	sub    $0xc,%esp
+     359:	68 a2 12 00 00       	push   $0x12a2
+     35e:	e8 fd fd ff ff       	call   160 <panic>
+     363:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000370 <execcmd>:
+//PAGEBREAK!
+// Constructors
+
+struct cmd*
+execcmd(void)
+{
+     370:	f3 0f 1e fb          	endbr32 
+     374:	55                   	push   %ebp
+     375:	89 e5                	mov    %esp,%ebp
+     377:	53                   	push   %ebx
+     378:	83 ec 10             	sub    $0x10,%esp
+  struct execcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     37b:	6a 54                	push   $0x54
+     37d:	e8 ee 0d 00 00       	call   1170 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     382:	83 c4 0c             	add    $0xc,%esp
+     385:	6a 54                	push   $0x54
+  cmd = malloc(sizeof(*cmd));
+     387:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     389:	6a 00                	push   $0x0
+     38b:	50                   	push   %eax
+     38c:	e8 5f 08 00 00       	call   bf0 <memset>
+  cmd->type = EXEC;
+     391:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+  return (struct cmd*)cmd;
+}
+     397:	89 d8                	mov    %ebx,%eax
+     399:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     39c:	c9                   	leave  
+     39d:	c3                   	ret    
+     39e:	66 90                	xchg   %ax,%ax
+
+000003a0 <redircmd>:
+
+struct cmd*
+redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
+{
+     3a0:	f3 0f 1e fb          	endbr32 
+     3a4:	55                   	push   %ebp
+     3a5:	89 e5                	mov    %esp,%ebp
+     3a7:	53                   	push   %ebx
+     3a8:	83 ec 10             	sub    $0x10,%esp
+  struct redircmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     3ab:	6a 18                	push   $0x18
+     3ad:	e8 be 0d 00 00       	call   1170 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     3b2:	83 c4 0c             	add    $0xc,%esp
+     3b5:	6a 18                	push   $0x18
+  cmd = malloc(sizeof(*cmd));
+     3b7:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     3b9:	6a 00                	push   $0x0
+     3bb:	50                   	push   %eax
+     3bc:	e8 2f 08 00 00       	call   bf0 <memset>
+  cmd->type = REDIR;
+  cmd->cmd = subcmd;
+     3c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = REDIR;
+     3c4:	c7 03 02 00 00 00    	movl   $0x2,(%ebx)
+  cmd->cmd = subcmd;
+     3ca:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->file = file;
+     3cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+     3d0:	89 43 08             	mov    %eax,0x8(%ebx)
+  cmd->efile = efile;
+     3d3:	8b 45 10             	mov    0x10(%ebp),%eax
+     3d6:	89 43 0c             	mov    %eax,0xc(%ebx)
+  cmd->mode = mode;
+     3d9:	8b 45 14             	mov    0x14(%ebp),%eax
+     3dc:	89 43 10             	mov    %eax,0x10(%ebx)
+  cmd->fd = fd;
+     3df:	8b 45 18             	mov    0x18(%ebp),%eax
+     3e2:	89 43 14             	mov    %eax,0x14(%ebx)
+  return (struct cmd*)cmd;
+}
+     3e5:	89 d8                	mov    %ebx,%eax
+     3e7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     3ea:	c9                   	leave  
+     3eb:	c3                   	ret    
+     3ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000003f0 <pipecmd>:
+
+struct cmd*
+pipecmd(struct cmd *left, struct cmd *right)
+{
+     3f0:	f3 0f 1e fb          	endbr32 
+     3f4:	55                   	push   %ebp
+     3f5:	89 e5                	mov    %esp,%ebp
+     3f7:	53                   	push   %ebx
+     3f8:	83 ec 10             	sub    $0x10,%esp
+  struct pipecmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     3fb:	6a 0c                	push   $0xc
+     3fd:	e8 6e 0d 00 00       	call   1170 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     402:	83 c4 0c             	add    $0xc,%esp
+     405:	6a 0c                	push   $0xc
+  cmd = malloc(sizeof(*cmd));
+     407:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     409:	6a 00                	push   $0x0
+     40b:	50                   	push   %eax
+     40c:	e8 df 07 00 00       	call   bf0 <memset>
+  cmd->type = PIPE;
+  cmd->left = left;
+     411:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = PIPE;
+     414:	c7 03 03 00 00 00    	movl   $0x3,(%ebx)
+  cmd->left = left;
+     41a:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->right = right;
+     41d:	8b 45 0c             	mov    0xc(%ebp),%eax
+     420:	89 43 08             	mov    %eax,0x8(%ebx)
+  return (struct cmd*)cmd;
+}
+     423:	89 d8                	mov    %ebx,%eax
+     425:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     428:	c9                   	leave  
+     429:	c3                   	ret    
+     42a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000430 <listcmd>:
+
+struct cmd*
+listcmd(struct cmd *left, struct cmd *right)
+{
+     430:	f3 0f 1e fb          	endbr32 
+     434:	55                   	push   %ebp
+     435:	89 e5                	mov    %esp,%ebp
+     437:	53                   	push   %ebx
+     438:	83 ec 10             	sub    $0x10,%esp
+  struct listcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     43b:	6a 0c                	push   $0xc
+     43d:	e8 2e 0d 00 00       	call   1170 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     442:	83 c4 0c             	add    $0xc,%esp
+     445:	6a 0c                	push   $0xc
+  cmd = malloc(sizeof(*cmd));
+     447:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     449:	6a 00                	push   $0x0
+     44b:	50                   	push   %eax
+     44c:	e8 9f 07 00 00       	call   bf0 <memset>
+  cmd->type = LIST;
+  cmd->left = left;
+     451:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = LIST;
+     454:	c7 03 04 00 00 00    	movl   $0x4,(%ebx)
+  cmd->left = left;
+     45a:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->right = right;
+     45d:	8b 45 0c             	mov    0xc(%ebp),%eax
+     460:	89 43 08             	mov    %eax,0x8(%ebx)
+  return (struct cmd*)cmd;
+}
+     463:	89 d8                	mov    %ebx,%eax
+     465:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     468:	c9                   	leave  
+     469:	c3                   	ret    
+     46a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000470 <backcmd>:
+
+struct cmd*
+backcmd(struct cmd *subcmd)
+{
+     470:	f3 0f 1e fb          	endbr32 
+     474:	55                   	push   %ebp
+     475:	89 e5                	mov    %esp,%ebp
+     477:	53                   	push   %ebx
+     478:	83 ec 10             	sub    $0x10,%esp
+  struct backcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     47b:	6a 08                	push   $0x8
+     47d:	e8 ee 0c 00 00       	call   1170 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     482:	83 c4 0c             	add    $0xc,%esp
+     485:	6a 08                	push   $0x8
+  cmd = malloc(sizeof(*cmd));
+     487:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     489:	6a 00                	push   $0x0
+     48b:	50                   	push   %eax
+     48c:	e8 5f 07 00 00       	call   bf0 <memset>
+  cmd->type = BACK;
+  cmd->cmd = subcmd;
+     491:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = BACK;
+     494:	c7 03 05 00 00 00    	movl   $0x5,(%ebx)
+  cmd->cmd = subcmd;
+     49a:	89 43 04             	mov    %eax,0x4(%ebx)
+  return (struct cmd*)cmd;
+}
+     49d:	89 d8                	mov    %ebx,%eax
+     49f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     4a2:	c9                   	leave  
+     4a3:	c3                   	ret    
+     4a4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     4ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     4af:	90                   	nop
+
+000004b0 <gettoken>:
+char whitespace[] = " \t\r\n\v";
+char symbols[] = "<|>&;()";
+
+int
+gettoken(char **ps, char *es, char **q, char **eq)
+{
+     4b0:	f3 0f 1e fb          	endbr32 
+     4b4:	55                   	push   %ebp
+     4b5:	89 e5                	mov    %esp,%ebp
+     4b7:	57                   	push   %edi
+     4b8:	56                   	push   %esi
+     4b9:	53                   	push   %ebx
+     4ba:	83 ec 0c             	sub    $0xc,%esp
+  char *s;
+  int ret;
+
+  s = *ps;
+     4bd:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+     4c0:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+     4c3:	8b 75 10             	mov    0x10(%ebp),%esi
+  s = *ps;
+     4c6:	8b 38                	mov    (%eax),%edi
+  while(s < es && strchr(whitespace, *s))
+     4c8:	39 df                	cmp    %ebx,%edi
+     4ca:	72 0b                	jb     4d7 <gettoken+0x27>
+     4cc:	eb 21                	jmp    4ef <gettoken+0x3f>
+     4ce:	66 90                	xchg   %ax,%ax
+    s++;
+     4d0:	83 c7 01             	add    $0x1,%edi
+  while(s < es && strchr(whitespace, *s))
+     4d3:	39 fb                	cmp    %edi,%ebx
+     4d5:	74 18                	je     4ef <gettoken+0x3f>
+     4d7:	0f be 07             	movsbl (%edi),%eax
+     4da:	83 ec 08             	sub    $0x8,%esp
+     4dd:	50                   	push   %eax
+     4de:	68 40 19 00 00       	push   $0x1940
+     4e3:	e8 28 07 00 00       	call   c10 <strchr>
+     4e8:	83 c4 10             	add    $0x10,%esp
+     4eb:	85 c0                	test   %eax,%eax
+     4ed:	75 e1                	jne    4d0 <gettoken+0x20>
+  if(q)
+     4ef:	85 f6                	test   %esi,%esi
+     4f1:	74 02                	je     4f5 <gettoken+0x45>
+    *q = s;
+     4f3:	89 3e                	mov    %edi,(%esi)
+  ret = *s;
+     4f5:	0f b6 07             	movzbl (%edi),%eax
+  switch(*s){
+     4f8:	3c 3c                	cmp    $0x3c,%al
+     4fa:	0f 8f d0 00 00 00    	jg     5d0 <gettoken+0x120>
+     500:	3c 3a                	cmp    $0x3a,%al
+     502:	0f 8f b4 00 00 00    	jg     5bc <gettoken+0x10c>
+     508:	84 c0                	test   %al,%al
+     50a:	75 44                	jne    550 <gettoken+0xa0>
+     50c:	31 f6                	xor    %esi,%esi
+    ret = 'a';
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+      s++;
+    break;
+  }
+  if(eq)
+     50e:	8b 55 14             	mov    0x14(%ebp),%edx
+     511:	85 d2                	test   %edx,%edx
+     513:	74 05                	je     51a <gettoken+0x6a>
+    *eq = s;
+     515:	8b 45 14             	mov    0x14(%ebp),%eax
+     518:	89 38                	mov    %edi,(%eax)
+
+  while(s < es && strchr(whitespace, *s))
+     51a:	39 df                	cmp    %ebx,%edi
+     51c:	72 09                	jb     527 <gettoken+0x77>
+     51e:	eb 1f                	jmp    53f <gettoken+0x8f>
+    s++;
+     520:	83 c7 01             	add    $0x1,%edi
+  while(s < es && strchr(whitespace, *s))
+     523:	39 fb                	cmp    %edi,%ebx
+     525:	74 18                	je     53f <gettoken+0x8f>
+     527:	0f be 07             	movsbl (%edi),%eax
+     52a:	83 ec 08             	sub    $0x8,%esp
+     52d:	50                   	push   %eax
+     52e:	68 40 19 00 00       	push   $0x1940
+     533:	e8 d8 06 00 00       	call   c10 <strchr>
+     538:	83 c4 10             	add    $0x10,%esp
+     53b:	85 c0                	test   %eax,%eax
+     53d:	75 e1                	jne    520 <gettoken+0x70>
+  *ps = s;
+     53f:	8b 45 08             	mov    0x8(%ebp),%eax
+     542:	89 38                	mov    %edi,(%eax)
+  return ret;
+}
+     544:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     547:	89 f0                	mov    %esi,%eax
+     549:	5b                   	pop    %ebx
+     54a:	5e                   	pop    %esi
+     54b:	5f                   	pop    %edi
+     54c:	5d                   	pop    %ebp
+     54d:	c3                   	ret    
+     54e:	66 90                	xchg   %ax,%ax
+  switch(*s){
+     550:	79 5e                	jns    5b0 <gettoken+0x100>
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     552:	39 fb                	cmp    %edi,%ebx
+     554:	77 34                	ja     58a <gettoken+0xda>
+  if(eq)
+     556:	8b 45 14             	mov    0x14(%ebp),%eax
+     559:	be 61 00 00 00       	mov    $0x61,%esi
+     55e:	85 c0                	test   %eax,%eax
+     560:	75 b3                	jne    515 <gettoken+0x65>
+     562:	eb db                	jmp    53f <gettoken+0x8f>
+     564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     568:	0f be 07             	movsbl (%edi),%eax
+     56b:	83 ec 08             	sub    $0x8,%esp
+     56e:	50                   	push   %eax
+     56f:	68 38 19 00 00       	push   $0x1938
+     574:	e8 97 06 00 00       	call   c10 <strchr>
+     579:	83 c4 10             	add    $0x10,%esp
+     57c:	85 c0                	test   %eax,%eax
+     57e:	75 22                	jne    5a2 <gettoken+0xf2>
+      s++;
+     580:	83 c7 01             	add    $0x1,%edi
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     583:	39 fb                	cmp    %edi,%ebx
+     585:	74 cf                	je     556 <gettoken+0xa6>
+     587:	0f b6 07             	movzbl (%edi),%eax
+     58a:	83 ec 08             	sub    $0x8,%esp
+     58d:	0f be f0             	movsbl %al,%esi
+     590:	56                   	push   %esi
+     591:	68 40 19 00 00       	push   $0x1940
+     596:	e8 75 06 00 00       	call   c10 <strchr>
+     59b:	83 c4 10             	add    $0x10,%esp
+     59e:	85 c0                	test   %eax,%eax
+     5a0:	74 c6                	je     568 <gettoken+0xb8>
+    ret = 'a';
+     5a2:	be 61 00 00 00       	mov    $0x61,%esi
+     5a7:	e9 62 ff ff ff       	jmp    50e <gettoken+0x5e>
+     5ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  switch(*s){
+     5b0:	3c 26                	cmp    $0x26,%al
+     5b2:	74 08                	je     5bc <gettoken+0x10c>
+     5b4:	8d 48 d8             	lea    -0x28(%eax),%ecx
+     5b7:	80 f9 01             	cmp    $0x1,%cl
+     5ba:	77 96                	ja     552 <gettoken+0xa2>
+  ret = *s;
+     5bc:	0f be f0             	movsbl %al,%esi
+    s++;
+     5bf:	83 c7 01             	add    $0x1,%edi
+    break;
+     5c2:	e9 47 ff ff ff       	jmp    50e <gettoken+0x5e>
+     5c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     5ce:	66 90                	xchg   %ax,%ax
+  switch(*s){
+     5d0:	3c 3e                	cmp    $0x3e,%al
+     5d2:	75 1c                	jne    5f0 <gettoken+0x140>
+    if(*s == '>'){
+     5d4:	80 7f 01 3e          	cmpb   $0x3e,0x1(%edi)
+    s++;
+     5d8:	8d 47 01             	lea    0x1(%edi),%eax
+    if(*s == '>'){
+     5db:	74 1c                	je     5f9 <gettoken+0x149>
+    s++;
+     5dd:	89 c7                	mov    %eax,%edi
+     5df:	be 3e 00 00 00       	mov    $0x3e,%esi
+     5e4:	e9 25 ff ff ff       	jmp    50e <gettoken+0x5e>
+     5e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  switch(*s){
+     5f0:	3c 7c                	cmp    $0x7c,%al
+     5f2:	74 c8                	je     5bc <gettoken+0x10c>
+     5f4:	e9 59 ff ff ff       	jmp    552 <gettoken+0xa2>
+      s++;
+     5f9:	83 c7 02             	add    $0x2,%edi
+      ret = '+';
+     5fc:	be 2b 00 00 00       	mov    $0x2b,%esi
+     601:	e9 08 ff ff ff       	jmp    50e <gettoken+0x5e>
+     606:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     60d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000610 <peek>:
+
+int
+peek(char **ps, char *es, char *toks)
+{
+     610:	f3 0f 1e fb          	endbr32 
+     614:	55                   	push   %ebp
+     615:	89 e5                	mov    %esp,%ebp
+     617:	57                   	push   %edi
+     618:	56                   	push   %esi
+     619:	53                   	push   %ebx
+     61a:	83 ec 0c             	sub    $0xc,%esp
+     61d:	8b 7d 08             	mov    0x8(%ebp),%edi
+     620:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *s;
+
+  s = *ps;
+     623:	8b 1f                	mov    (%edi),%ebx
+  while(s < es && strchr(whitespace, *s))
+     625:	39 f3                	cmp    %esi,%ebx
+     627:	72 0e                	jb     637 <peek+0x27>
+     629:	eb 24                	jmp    64f <peek+0x3f>
+     62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     62f:	90                   	nop
+    s++;
+     630:	83 c3 01             	add    $0x1,%ebx
+  while(s < es && strchr(whitespace, *s))
+     633:	39 de                	cmp    %ebx,%esi
+     635:	74 18                	je     64f <peek+0x3f>
+     637:	0f be 03             	movsbl (%ebx),%eax
+     63a:	83 ec 08             	sub    $0x8,%esp
+     63d:	50                   	push   %eax
+     63e:	68 40 19 00 00       	push   $0x1940
+     643:	e8 c8 05 00 00       	call   c10 <strchr>
+     648:	83 c4 10             	add    $0x10,%esp
+     64b:	85 c0                	test   %eax,%eax
+     64d:	75 e1                	jne    630 <peek+0x20>
+  *ps = s;
+     64f:	89 1f                	mov    %ebx,(%edi)
+  return *s && strchr(toks, *s);
+     651:	0f be 03             	movsbl (%ebx),%eax
+     654:	31 d2                	xor    %edx,%edx
+     656:	84 c0                	test   %al,%al
+     658:	75 0e                	jne    668 <peek+0x58>
+}
+     65a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     65d:	89 d0                	mov    %edx,%eax
+     65f:	5b                   	pop    %ebx
+     660:	5e                   	pop    %esi
+     661:	5f                   	pop    %edi
+     662:	5d                   	pop    %ebp
+     663:	c3                   	ret    
+     664:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  return *s && strchr(toks, *s);
+     668:	83 ec 08             	sub    $0x8,%esp
+     66b:	50                   	push   %eax
+     66c:	ff 75 10             	pushl  0x10(%ebp)
+     66f:	e8 9c 05 00 00       	call   c10 <strchr>
+     674:	83 c4 10             	add    $0x10,%esp
+     677:	31 d2                	xor    %edx,%edx
+     679:	85 c0                	test   %eax,%eax
+     67b:	0f 95 c2             	setne  %dl
+}
+     67e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     681:	5b                   	pop    %ebx
+     682:	89 d0                	mov    %edx,%eax
+     684:	5e                   	pop    %esi
+     685:	5f                   	pop    %edi
+     686:	5d                   	pop    %ebp
+     687:	c3                   	ret    
+     688:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     68f:	90                   	nop
+
+00000690 <parseredirs>:
+  return cmd;
+}
+
+struct cmd*
+parseredirs(struct cmd *cmd, char **ps, char *es)
+{
+     690:	f3 0f 1e fb          	endbr32 
+     694:	55                   	push   %ebp
+     695:	89 e5                	mov    %esp,%ebp
+     697:	57                   	push   %edi
+     698:	56                   	push   %esi
+     699:	53                   	push   %ebx
+     69a:	83 ec 1c             	sub    $0x1c,%esp
+     69d:	8b 75 0c             	mov    0xc(%ebp),%esi
+     6a0:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  int tok;
+  char *q, *eq;
+
+  while(peek(ps, es, "<>")){
+     6a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     6a7:	90                   	nop
+     6a8:	83 ec 04             	sub    $0x4,%esp
+     6ab:	68 c9 12 00 00       	push   $0x12c9
+     6b0:	53                   	push   %ebx
+     6b1:	56                   	push   %esi
+     6b2:	e8 59 ff ff ff       	call   610 <peek>
+     6b7:	83 c4 10             	add    $0x10,%esp
+     6ba:	85 c0                	test   %eax,%eax
+     6bc:	74 6a                	je     728 <parseredirs+0x98>
+    tok = gettoken(ps, es, 0, 0);
+     6be:	6a 00                	push   $0x0
+     6c0:	6a 00                	push   $0x0
+     6c2:	53                   	push   %ebx
+     6c3:	56                   	push   %esi
+     6c4:	e8 e7 fd ff ff       	call   4b0 <gettoken>
+     6c9:	89 c7                	mov    %eax,%edi
+    if(gettoken(ps, es, &q, &eq) != 'a')
+     6cb:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     6ce:	50                   	push   %eax
+     6cf:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     6d2:	50                   	push   %eax
+     6d3:	53                   	push   %ebx
+     6d4:	56                   	push   %esi
+     6d5:	e8 d6 fd ff ff       	call   4b0 <gettoken>
+     6da:	83 c4 20             	add    $0x20,%esp
+     6dd:	83 f8 61             	cmp    $0x61,%eax
+     6e0:	75 51                	jne    733 <parseredirs+0xa3>
+      panic("missing file for redirection");
+    switch(tok){
+     6e2:	83 ff 3c             	cmp    $0x3c,%edi
+     6e5:	74 31                	je     718 <parseredirs+0x88>
+     6e7:	83 ff 3e             	cmp    $0x3e,%edi
+     6ea:	74 05                	je     6f1 <parseredirs+0x61>
+     6ec:	83 ff 2b             	cmp    $0x2b,%edi
+     6ef:	75 b7                	jne    6a8 <parseredirs+0x18>
+      break;
+    case '>':
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+      break;
+    case '+':  // >>
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     6f1:	83 ec 0c             	sub    $0xc,%esp
+     6f4:	6a 01                	push   $0x1
+     6f6:	68 01 02 00 00       	push   $0x201
+     6fb:	ff 75 e4             	pushl  -0x1c(%ebp)
+     6fe:	ff 75 e0             	pushl  -0x20(%ebp)
+     701:	ff 75 08             	pushl  0x8(%ebp)
+     704:	e8 97 fc ff ff       	call   3a0 <redircmd>
+      break;
+     709:	83 c4 20             	add    $0x20,%esp
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     70c:	89 45 08             	mov    %eax,0x8(%ebp)
+      break;
+     70f:	eb 97                	jmp    6a8 <parseredirs+0x18>
+     711:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
+     718:	83 ec 0c             	sub    $0xc,%esp
+     71b:	6a 00                	push   $0x0
+     71d:	6a 00                	push   $0x0
+     71f:	eb da                	jmp    6fb <parseredirs+0x6b>
+     721:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    }
+  }
+  return cmd;
+}
+     728:	8b 45 08             	mov    0x8(%ebp),%eax
+     72b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     72e:	5b                   	pop    %ebx
+     72f:	5e                   	pop    %esi
+     730:	5f                   	pop    %edi
+     731:	5d                   	pop    %ebp
+     732:	c3                   	ret    
+      panic("missing file for redirection");
+     733:	83 ec 0c             	sub    $0xc,%esp
+     736:	68 ac 12 00 00       	push   $0x12ac
+     73b:	e8 20 fa ff ff       	call   160 <panic>
+
+00000740 <parseexec>:
+  return cmd;
+}
+
+struct cmd*
+parseexec(char **ps, char *es)
+{
+     740:	f3 0f 1e fb          	endbr32 
+     744:	55                   	push   %ebp
+     745:	89 e5                	mov    %esp,%ebp
+     747:	57                   	push   %edi
+     748:	56                   	push   %esi
+     749:	53                   	push   %ebx
+     74a:	83 ec 30             	sub    $0x30,%esp
+     74d:	8b 75 08             	mov    0x8(%ebp),%esi
+     750:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  char *q, *eq;
+  int tok, argc;
+  struct execcmd *cmd;
+  struct cmd *ret;
+
+  if(peek(ps, es, "("))
+     753:	68 cc 12 00 00       	push   $0x12cc
+     758:	57                   	push   %edi
+     759:	56                   	push   %esi
+     75a:	e8 b1 fe ff ff       	call   610 <peek>
+     75f:	83 c4 10             	add    $0x10,%esp
+     762:	85 c0                	test   %eax,%eax
+     764:	0f 85 96 00 00 00    	jne    800 <parseexec+0xc0>
+     76a:	89 c3                	mov    %eax,%ebx
+    return parseblock(ps, es);
+
+  ret = execcmd();
+     76c:	e8 ff fb ff ff       	call   370 <execcmd>
+  cmd = (struct execcmd*)ret;
+
+  argc = 0;
+  ret = parseredirs(ret, ps, es);
+     771:	83 ec 04             	sub    $0x4,%esp
+     774:	57                   	push   %edi
+     775:	56                   	push   %esi
+     776:	50                   	push   %eax
+  ret = execcmd();
+     777:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  ret = parseredirs(ret, ps, es);
+     77a:	e8 11 ff ff ff       	call   690 <parseredirs>
+  while(!peek(ps, es, "|)&;")){
+     77f:	83 c4 10             	add    $0x10,%esp
+  ret = parseredirs(ret, ps, es);
+     782:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  while(!peek(ps, es, "|)&;")){
+     785:	eb 1c                	jmp    7a3 <parseexec+0x63>
+     787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     78e:	66 90                	xchg   %ax,%ax
+    cmd->argv[argc] = q;
+    cmd->eargv[argc] = eq;
+    argc++;
+    if(argc >= MAXARGS)
+      panic("too many args");
+    ret = parseredirs(ret, ps, es);
+     790:	83 ec 04             	sub    $0x4,%esp
+     793:	57                   	push   %edi
+     794:	56                   	push   %esi
+     795:	ff 75 d4             	pushl  -0x2c(%ebp)
+     798:	e8 f3 fe ff ff       	call   690 <parseredirs>
+     79d:	83 c4 10             	add    $0x10,%esp
+     7a0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  while(!peek(ps, es, "|)&;")){
+     7a3:	83 ec 04             	sub    $0x4,%esp
+     7a6:	68 e3 12 00 00       	push   $0x12e3
+     7ab:	57                   	push   %edi
+     7ac:	56                   	push   %esi
+     7ad:	e8 5e fe ff ff       	call   610 <peek>
+     7b2:	83 c4 10             	add    $0x10,%esp
+     7b5:	85 c0                	test   %eax,%eax
+     7b7:	75 67                	jne    820 <parseexec+0xe0>
+    if((tok=gettoken(ps, es, &q, &eq)) == 0)
+     7b9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     7bc:	50                   	push   %eax
+     7bd:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     7c0:	50                   	push   %eax
+     7c1:	57                   	push   %edi
+     7c2:	56                   	push   %esi
+     7c3:	e8 e8 fc ff ff       	call   4b0 <gettoken>
+     7c8:	83 c4 10             	add    $0x10,%esp
+     7cb:	85 c0                	test   %eax,%eax
+     7cd:	74 51                	je     820 <parseexec+0xe0>
+    if(tok != 'a')
+     7cf:	83 f8 61             	cmp    $0x61,%eax
+     7d2:	75 6b                	jne    83f <parseexec+0xff>
+    cmd->argv[argc] = q;
+     7d4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     7d7:	8b 55 d0             	mov    -0x30(%ebp),%edx
+     7da:	89 44 9a 04          	mov    %eax,0x4(%edx,%ebx,4)
+    cmd->eargv[argc] = eq;
+     7de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     7e1:	89 44 9a 2c          	mov    %eax,0x2c(%edx,%ebx,4)
+    argc++;
+     7e5:	83 c3 01             	add    $0x1,%ebx
+    if(argc >= MAXARGS)
+     7e8:	83 fb 0a             	cmp    $0xa,%ebx
+     7eb:	75 a3                	jne    790 <parseexec+0x50>
+      panic("too many args");
+     7ed:	83 ec 0c             	sub    $0xc,%esp
+     7f0:	68 d5 12 00 00       	push   $0x12d5
+     7f5:	e8 66 f9 ff ff       	call   160 <panic>
+     7fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return parseblock(ps, es);
+     800:	83 ec 08             	sub    $0x8,%esp
+     803:	57                   	push   %edi
+     804:	56                   	push   %esi
+     805:	e8 66 01 00 00       	call   970 <parseblock>
+     80a:	83 c4 10             	add    $0x10,%esp
+     80d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  }
+  cmd->argv[argc] = 0;
+  cmd->eargv[argc] = 0;
+  return ret;
+}
+     810:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+     813:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     816:	5b                   	pop    %ebx
+     817:	5e                   	pop    %esi
+     818:	5f                   	pop    %edi
+     819:	5d                   	pop    %ebp
+     81a:	c3                   	ret    
+     81b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     81f:	90                   	nop
+  cmd->argv[argc] = 0;
+     820:	8b 45 d0             	mov    -0x30(%ebp),%eax
+     823:	8d 04 98             	lea    (%eax,%ebx,4),%eax
+     826:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+  cmd->eargv[argc] = 0;
+     82d:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
+}
+     834:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+     837:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     83a:	5b                   	pop    %ebx
+     83b:	5e                   	pop    %esi
+     83c:	5f                   	pop    %edi
+     83d:	5d                   	pop    %ebp
+     83e:	c3                   	ret    
+      panic("syntax");
+     83f:	83 ec 0c             	sub    $0xc,%esp
+     842:	68 ce 12 00 00       	push   $0x12ce
+     847:	e8 14 f9 ff ff       	call   160 <panic>
+     84c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000850 <parsepipe>:
+{
+     850:	f3 0f 1e fb          	endbr32 
+     854:	55                   	push   %ebp
+     855:	89 e5                	mov    %esp,%ebp
+     857:	57                   	push   %edi
+     858:	56                   	push   %esi
+     859:	53                   	push   %ebx
+     85a:	83 ec 14             	sub    $0x14,%esp
+     85d:	8b 75 08             	mov    0x8(%ebp),%esi
+     860:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  cmd = parseexec(ps, es);
+     863:	57                   	push   %edi
+     864:	56                   	push   %esi
+     865:	e8 d6 fe ff ff       	call   740 <parseexec>
+  if(peek(ps, es, "|")){
+     86a:	83 c4 0c             	add    $0xc,%esp
+     86d:	68 e8 12 00 00       	push   $0x12e8
+  cmd = parseexec(ps, es);
+     872:	89 c3                	mov    %eax,%ebx
+  if(peek(ps, es, "|")){
+     874:	57                   	push   %edi
+     875:	56                   	push   %esi
+     876:	e8 95 fd ff ff       	call   610 <peek>
+     87b:	83 c4 10             	add    $0x10,%esp
+     87e:	85 c0                	test   %eax,%eax
+     880:	75 0e                	jne    890 <parsepipe+0x40>
+}
+     882:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     885:	89 d8                	mov    %ebx,%eax
+     887:	5b                   	pop    %ebx
+     888:	5e                   	pop    %esi
+     889:	5f                   	pop    %edi
+     88a:	5d                   	pop    %ebp
+     88b:	c3                   	ret    
+     88c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    gettoken(ps, es, 0, 0);
+     890:	6a 00                	push   $0x0
+     892:	6a 00                	push   $0x0
+     894:	57                   	push   %edi
+     895:	56                   	push   %esi
+     896:	e8 15 fc ff ff       	call   4b0 <gettoken>
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     89b:	58                   	pop    %eax
+     89c:	5a                   	pop    %edx
+     89d:	57                   	push   %edi
+     89e:	56                   	push   %esi
+     89f:	e8 ac ff ff ff       	call   850 <parsepipe>
+     8a4:	89 5d 08             	mov    %ebx,0x8(%ebp)
+     8a7:	83 c4 10             	add    $0x10,%esp
+     8aa:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+     8ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     8b0:	5b                   	pop    %ebx
+     8b1:	5e                   	pop    %esi
+     8b2:	5f                   	pop    %edi
+     8b3:	5d                   	pop    %ebp
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     8b4:	e9 37 fb ff ff       	jmp    3f0 <pipecmd>
+     8b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000008c0 <parseline>:
+{
+     8c0:	f3 0f 1e fb          	endbr32 
+     8c4:	55                   	push   %ebp
+     8c5:	89 e5                	mov    %esp,%ebp
+     8c7:	57                   	push   %edi
+     8c8:	56                   	push   %esi
+     8c9:	53                   	push   %ebx
+     8ca:	83 ec 14             	sub    $0x14,%esp
+     8cd:	8b 75 08             	mov    0x8(%ebp),%esi
+     8d0:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  cmd = parsepipe(ps, es);
+     8d3:	57                   	push   %edi
+     8d4:	56                   	push   %esi
+     8d5:	e8 76 ff ff ff       	call   850 <parsepipe>
+  while(peek(ps, es, "&")){
+     8da:	83 c4 10             	add    $0x10,%esp
+  cmd = parsepipe(ps, es);
+     8dd:	89 c3                	mov    %eax,%ebx
+  while(peek(ps, es, "&")){
+     8df:	eb 1f                	jmp    900 <parseline+0x40>
+     8e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    gettoken(ps, es, 0, 0);
+     8e8:	6a 00                	push   $0x0
+     8ea:	6a 00                	push   $0x0
+     8ec:	57                   	push   %edi
+     8ed:	56                   	push   %esi
+     8ee:	e8 bd fb ff ff       	call   4b0 <gettoken>
+    cmd = backcmd(cmd);
+     8f3:	89 1c 24             	mov    %ebx,(%esp)
+     8f6:	e8 75 fb ff ff       	call   470 <backcmd>
+     8fb:	83 c4 10             	add    $0x10,%esp
+     8fe:	89 c3                	mov    %eax,%ebx
+  while(peek(ps, es, "&")){
+     900:	83 ec 04             	sub    $0x4,%esp
+     903:	68 ea 12 00 00       	push   $0x12ea
+     908:	57                   	push   %edi
+     909:	56                   	push   %esi
+     90a:	e8 01 fd ff ff       	call   610 <peek>
+     90f:	83 c4 10             	add    $0x10,%esp
+     912:	85 c0                	test   %eax,%eax
+     914:	75 d2                	jne    8e8 <parseline+0x28>
+  if(peek(ps, es, ";")){
+     916:	83 ec 04             	sub    $0x4,%esp
+     919:	68 e6 12 00 00       	push   $0x12e6
+     91e:	57                   	push   %edi
+     91f:	56                   	push   %esi
+     920:	e8 eb fc ff ff       	call   610 <peek>
+     925:	83 c4 10             	add    $0x10,%esp
+     928:	85 c0                	test   %eax,%eax
+     92a:	75 14                	jne    940 <parseline+0x80>
+}
+     92c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     92f:	89 d8                	mov    %ebx,%eax
+     931:	5b                   	pop    %ebx
+     932:	5e                   	pop    %esi
+     933:	5f                   	pop    %edi
+     934:	5d                   	pop    %ebp
+     935:	c3                   	ret    
+     936:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     93d:	8d 76 00             	lea    0x0(%esi),%esi
+    gettoken(ps, es, 0, 0);
+     940:	6a 00                	push   $0x0
+     942:	6a 00                	push   $0x0
+     944:	57                   	push   %edi
+     945:	56                   	push   %esi
+     946:	e8 65 fb ff ff       	call   4b0 <gettoken>
+    cmd = listcmd(cmd, parseline(ps, es));
+     94b:	58                   	pop    %eax
+     94c:	5a                   	pop    %edx
+     94d:	57                   	push   %edi
+     94e:	56                   	push   %esi
+     94f:	e8 6c ff ff ff       	call   8c0 <parseline>
+     954:	89 5d 08             	mov    %ebx,0x8(%ebp)
+     957:	83 c4 10             	add    $0x10,%esp
+     95a:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+     95d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     960:	5b                   	pop    %ebx
+     961:	5e                   	pop    %esi
+     962:	5f                   	pop    %edi
+     963:	5d                   	pop    %ebp
+    cmd = listcmd(cmd, parseline(ps, es));
+     964:	e9 c7 fa ff ff       	jmp    430 <listcmd>
+     969:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000970 <parseblock>:
+{
+     970:	f3 0f 1e fb          	endbr32 
+     974:	55                   	push   %ebp
+     975:	89 e5                	mov    %esp,%ebp
+     977:	57                   	push   %edi
+     978:	56                   	push   %esi
+     979:	53                   	push   %ebx
+     97a:	83 ec 10             	sub    $0x10,%esp
+     97d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     980:	8b 75 0c             	mov    0xc(%ebp),%esi
+  if(!peek(ps, es, "("))
+     983:	68 cc 12 00 00       	push   $0x12cc
+     988:	56                   	push   %esi
+     989:	53                   	push   %ebx
+     98a:	e8 81 fc ff ff       	call   610 <peek>
+     98f:	83 c4 10             	add    $0x10,%esp
+     992:	85 c0                	test   %eax,%eax
+     994:	74 4a                	je     9e0 <parseblock+0x70>
+  gettoken(ps, es, 0, 0);
+     996:	6a 00                	push   $0x0
+     998:	6a 00                	push   $0x0
+     99a:	56                   	push   %esi
+     99b:	53                   	push   %ebx
+     99c:	e8 0f fb ff ff       	call   4b0 <gettoken>
+  cmd = parseline(ps, es);
+     9a1:	58                   	pop    %eax
+     9a2:	5a                   	pop    %edx
+     9a3:	56                   	push   %esi
+     9a4:	53                   	push   %ebx
+     9a5:	e8 16 ff ff ff       	call   8c0 <parseline>
+  if(!peek(ps, es, ")"))
+     9aa:	83 c4 0c             	add    $0xc,%esp
+     9ad:	68 08 13 00 00       	push   $0x1308
+  cmd = parseline(ps, es);
+     9b2:	89 c7                	mov    %eax,%edi
+  if(!peek(ps, es, ")"))
+     9b4:	56                   	push   %esi
+     9b5:	53                   	push   %ebx
+     9b6:	e8 55 fc ff ff       	call   610 <peek>
+     9bb:	83 c4 10             	add    $0x10,%esp
+     9be:	85 c0                	test   %eax,%eax
+     9c0:	74 2b                	je     9ed <parseblock+0x7d>
+  gettoken(ps, es, 0, 0);
+     9c2:	6a 00                	push   $0x0
+     9c4:	6a 00                	push   $0x0
+     9c6:	56                   	push   %esi
+     9c7:	53                   	push   %ebx
+     9c8:	e8 e3 fa ff ff       	call   4b0 <gettoken>
+  cmd = parseredirs(cmd, ps, es);
+     9cd:	83 c4 0c             	add    $0xc,%esp
+     9d0:	56                   	push   %esi
+     9d1:	53                   	push   %ebx
+     9d2:	57                   	push   %edi
+     9d3:	e8 b8 fc ff ff       	call   690 <parseredirs>
+}
+     9d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     9db:	5b                   	pop    %ebx
+     9dc:	5e                   	pop    %esi
+     9dd:	5f                   	pop    %edi
+     9de:	5d                   	pop    %ebp
+     9df:	c3                   	ret    
+    panic("parseblock");
+     9e0:	83 ec 0c             	sub    $0xc,%esp
+     9e3:	68 ec 12 00 00       	push   $0x12ec
+     9e8:	e8 73 f7 ff ff       	call   160 <panic>
+    panic("syntax - missing )");
+     9ed:	83 ec 0c             	sub    $0xc,%esp
+     9f0:	68 f7 12 00 00       	push   $0x12f7
+     9f5:	e8 66 f7 ff ff       	call   160 <panic>
+     9fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000a00 <nulterminate>:
+
+// NUL-terminate all the counted strings.
+struct cmd*
+nulterminate(struct cmd *cmd)
+{
+     a00:	f3 0f 1e fb          	endbr32 
+     a04:	55                   	push   %ebp
+     a05:	89 e5                	mov    %esp,%ebp
+     a07:	53                   	push   %ebx
+     a08:	83 ec 04             	sub    $0x4,%esp
+     a0b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct execcmd *ecmd;
+  struct listcmd *lcmd;
+  struct pipecmd *pcmd;
+  struct redircmd *rcmd;
+
+  if(cmd == 0)
+     a0e:	85 db                	test   %ebx,%ebx
+     a10:	0f 84 9a 00 00 00    	je     ab0 <nulterminate+0xb0>
+    return 0;
+
+  switch(cmd->type){
+     a16:	83 3b 05             	cmpl   $0x5,(%ebx)
+     a19:	77 6d                	ja     a88 <nulterminate+0x88>
+     a1b:	8b 03                	mov    (%ebx),%eax
+     a1d:	3e ff 24 85 48 13 00 	notrack jmp *0x1348(,%eax,4)
+     a24:	00 
+     a25:	8d 76 00             	lea    0x0(%esi),%esi
+    nulterminate(pcmd->right);
+    break;
+
+  case LIST:
+    lcmd = (struct listcmd*)cmd;
+    nulterminate(lcmd->left);
+     a28:	83 ec 0c             	sub    $0xc,%esp
+     a2b:	ff 73 04             	pushl  0x4(%ebx)
+     a2e:	e8 cd ff ff ff       	call   a00 <nulterminate>
+    nulterminate(lcmd->right);
+     a33:	58                   	pop    %eax
+     a34:	ff 73 08             	pushl  0x8(%ebx)
+     a37:	e8 c4 ff ff ff       	call   a00 <nulterminate>
+    break;
+     a3c:	83 c4 10             	add    $0x10,%esp
+     a3f:	89 d8                	mov    %ebx,%eax
+    bcmd = (struct backcmd*)cmd;
+    nulterminate(bcmd->cmd);
+    break;
+  }
+  return cmd;
+}
+     a41:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     a44:	c9                   	leave  
+     a45:	c3                   	ret    
+     a46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     a4d:	8d 76 00             	lea    0x0(%esi),%esi
+    nulterminate(bcmd->cmd);
+     a50:	83 ec 0c             	sub    $0xc,%esp
+     a53:	ff 73 04             	pushl  0x4(%ebx)
+     a56:	e8 a5 ff ff ff       	call   a00 <nulterminate>
+    break;
+     a5b:	89 d8                	mov    %ebx,%eax
+     a5d:	83 c4 10             	add    $0x10,%esp
+}
+     a60:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     a63:	c9                   	leave  
+     a64:	c3                   	ret    
+     a65:	8d 76 00             	lea    0x0(%esi),%esi
+    for(i=0; ecmd->argv[i]; i++)
+     a68:	8b 4b 04             	mov    0x4(%ebx),%ecx
+     a6b:	8d 43 08             	lea    0x8(%ebx),%eax
+     a6e:	85 c9                	test   %ecx,%ecx
+     a70:	74 16                	je     a88 <nulterminate+0x88>
+     a72:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      *ecmd->eargv[i] = 0;
+     a78:	8b 50 24             	mov    0x24(%eax),%edx
+     a7b:	83 c0 04             	add    $0x4,%eax
+     a7e:	c6 02 00             	movb   $0x0,(%edx)
+    for(i=0; ecmd->argv[i]; i++)
+     a81:	8b 50 fc             	mov    -0x4(%eax),%edx
+     a84:	85 d2                	test   %edx,%edx
+     a86:	75 f0                	jne    a78 <nulterminate+0x78>
+  switch(cmd->type){
+     a88:	89 d8                	mov    %ebx,%eax
+}
+     a8a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     a8d:	c9                   	leave  
+     a8e:	c3                   	ret    
+     a8f:	90                   	nop
+    nulterminate(rcmd->cmd);
+     a90:	83 ec 0c             	sub    $0xc,%esp
+     a93:	ff 73 04             	pushl  0x4(%ebx)
+     a96:	e8 65 ff ff ff       	call   a00 <nulterminate>
+    *rcmd->efile = 0;
+     a9b:	8b 43 0c             	mov    0xc(%ebx),%eax
+    break;
+     a9e:	83 c4 10             	add    $0x10,%esp
+    *rcmd->efile = 0;
+     aa1:	c6 00 00             	movb   $0x0,(%eax)
+    break;
+     aa4:	89 d8                	mov    %ebx,%eax
+}
+     aa6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     aa9:	c9                   	leave  
+     aaa:	c3                   	ret    
+     aab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     aaf:	90                   	nop
+    return 0;
+     ab0:	31 c0                	xor    %eax,%eax
+     ab2:	eb 8d                	jmp    a41 <nulterminate+0x41>
+     ab4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     abb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     abf:	90                   	nop
+
+00000ac0 <parsecmd>:
+{
+     ac0:	f3 0f 1e fb          	endbr32 
+     ac4:	55                   	push   %ebp
+     ac5:	89 e5                	mov    %esp,%ebp
+     ac7:	56                   	push   %esi
+     ac8:	53                   	push   %ebx
+  es = s + strlen(s);
+     ac9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     acc:	83 ec 0c             	sub    $0xc,%esp
+     acf:	53                   	push   %ebx
+     ad0:	e8 db 00 00 00       	call   bb0 <strlen>
+  cmd = parseline(&s, es);
+     ad5:	59                   	pop    %ecx
+     ad6:	5e                   	pop    %esi
+  es = s + strlen(s);
+     ad7:	01 c3                	add    %eax,%ebx
+  cmd = parseline(&s, es);
+     ad9:	8d 45 08             	lea    0x8(%ebp),%eax
+     adc:	53                   	push   %ebx
+     add:	50                   	push   %eax
+     ade:	e8 dd fd ff ff       	call   8c0 <parseline>
+  peek(&s, es, "");
+     ae3:	83 c4 0c             	add    $0xc,%esp
+  cmd = parseline(&s, es);
+     ae6:	89 c6                	mov    %eax,%esi
+  peek(&s, es, "");
+     ae8:	8d 45 08             	lea    0x8(%ebp),%eax
+     aeb:	68 91 12 00 00       	push   $0x1291
+     af0:	53                   	push   %ebx
+     af1:	50                   	push   %eax
+     af2:	e8 19 fb ff ff       	call   610 <peek>
+  if(s != es){
+     af7:	8b 45 08             	mov    0x8(%ebp),%eax
+     afa:	83 c4 10             	add    $0x10,%esp
+     afd:	39 d8                	cmp    %ebx,%eax
+     aff:	75 12                	jne    b13 <parsecmd+0x53>
+  nulterminate(cmd);
+     b01:	83 ec 0c             	sub    $0xc,%esp
+     b04:	56                   	push   %esi
+     b05:	e8 f6 fe ff ff       	call   a00 <nulterminate>
+}
+     b0a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     b0d:	89 f0                	mov    %esi,%eax
+     b0f:	5b                   	pop    %ebx
+     b10:	5e                   	pop    %esi
+     b11:	5d                   	pop    %ebp
+     b12:	c3                   	ret    
+    printf(2, "leftovers: %s\n", s);
+     b13:	52                   	push   %edx
+     b14:	50                   	push   %eax
+     b15:	68 0a 13 00 00       	push   $0x130a
+     b1a:	6a 02                	push   $0x2
+     b1c:	e8 ef 03 00 00       	call   f10 <printf>
+    panic("syntax");
+     b21:	c7 04 24 ce 12 00 00 	movl   $0x12ce,(%esp)
+     b28:	e8 33 f6 ff ff       	call   160 <panic>
+     b2d:	66 90                	xchg   %ax,%ax
+     b2f:	90                   	nop
+
+00000b30 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+     b30:	f3 0f 1e fb          	endbr32 
+     b34:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+     b35:	31 c0                	xor    %eax,%eax
+{
+     b37:	89 e5                	mov    %esp,%ebp
+     b39:	53                   	push   %ebx
+     b3a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+     b3d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+     b40:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+     b44:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+     b47:	83 c0 01             	add    $0x1,%eax
+     b4a:	84 d2                	test   %dl,%dl
+     b4c:	75 f2                	jne    b40 <strcpy+0x10>
+    ;
+  return os;
+}
+     b4e:	89 c8                	mov    %ecx,%eax
+     b50:	5b                   	pop    %ebx
+     b51:	5d                   	pop    %ebp
+     b52:	c3                   	ret    
+     b53:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     b5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000b60 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+     b60:	f3 0f 1e fb          	endbr32 
+     b64:	55                   	push   %ebp
+     b65:	89 e5                	mov    %esp,%ebp
+     b67:	53                   	push   %ebx
+     b68:	8b 4d 08             	mov    0x8(%ebp),%ecx
+     b6b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+     b6e:	0f b6 01             	movzbl (%ecx),%eax
+     b71:	0f b6 1a             	movzbl (%edx),%ebx
+     b74:	84 c0                	test   %al,%al
+     b76:	75 19                	jne    b91 <strcmp+0x31>
+     b78:	eb 26                	jmp    ba0 <strcmp+0x40>
+     b7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     b80:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+     b84:	83 c1 01             	add    $0x1,%ecx
+     b87:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+     b8a:	0f b6 1a             	movzbl (%edx),%ebx
+     b8d:	84 c0                	test   %al,%al
+     b8f:	74 0f                	je     ba0 <strcmp+0x40>
+     b91:	38 d8                	cmp    %bl,%al
+     b93:	74 eb                	je     b80 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+     b95:	29 d8                	sub    %ebx,%eax
+}
+     b97:	5b                   	pop    %ebx
+     b98:	5d                   	pop    %ebp
+     b99:	c3                   	ret    
+     b9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     ba0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+     ba2:	29 d8                	sub    %ebx,%eax
+}
+     ba4:	5b                   	pop    %ebx
+     ba5:	5d                   	pop    %ebp
+     ba6:	c3                   	ret    
+     ba7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bae:	66 90                	xchg   %ax,%ax
+
+00000bb0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+     bb0:	f3 0f 1e fb          	endbr32 
+     bb4:	55                   	push   %ebp
+     bb5:	89 e5                	mov    %esp,%ebp
+     bb7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+     bba:	80 3a 00             	cmpb   $0x0,(%edx)
+     bbd:	74 21                	je     be0 <strlen+0x30>
+     bbf:	31 c0                	xor    %eax,%eax
+     bc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bc8:	83 c0 01             	add    $0x1,%eax
+     bcb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+     bcf:	89 c1                	mov    %eax,%ecx
+     bd1:	75 f5                	jne    bc8 <strlen+0x18>
+    ;
+  return n;
+}
+     bd3:	89 c8                	mov    %ecx,%eax
+     bd5:	5d                   	pop    %ebp
+     bd6:	c3                   	ret    
+     bd7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bde:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+     be0:	31 c9                	xor    %ecx,%ecx
+}
+     be2:	5d                   	pop    %ebp
+     be3:	89 c8                	mov    %ecx,%eax
+     be5:	c3                   	ret    
+     be6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bed:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000bf0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+     bf0:	f3 0f 1e fb          	endbr32 
+     bf4:	55                   	push   %ebp
+     bf5:	89 e5                	mov    %esp,%ebp
+     bf7:	57                   	push   %edi
+     bf8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+     bfb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+     bfe:	8b 45 0c             	mov    0xc(%ebp),%eax
+     c01:	89 d7                	mov    %edx,%edi
+     c03:	fc                   	cld    
+     c04:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+     c06:	89 d0                	mov    %edx,%eax
+     c08:	5f                   	pop    %edi
+     c09:	5d                   	pop    %ebp
+     c0a:	c3                   	ret    
+     c0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     c0f:	90                   	nop
+
+00000c10 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+     c10:	f3 0f 1e fb          	endbr32 
+     c14:	55                   	push   %ebp
+     c15:	89 e5                	mov    %esp,%ebp
+     c17:	8b 45 08             	mov    0x8(%ebp),%eax
+     c1a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+     c1e:	0f b6 10             	movzbl (%eax),%edx
+     c21:	84 d2                	test   %dl,%dl
+     c23:	75 16                	jne    c3b <strchr+0x2b>
+     c25:	eb 21                	jmp    c48 <strchr+0x38>
+     c27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c2e:	66 90                	xchg   %ax,%ax
+     c30:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+     c34:	83 c0 01             	add    $0x1,%eax
+     c37:	84 d2                	test   %dl,%dl
+     c39:	74 0d                	je     c48 <strchr+0x38>
+    if(*s == c)
+     c3b:	38 d1                	cmp    %dl,%cl
+     c3d:	75 f1                	jne    c30 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+     c3f:	5d                   	pop    %ebp
+     c40:	c3                   	ret    
+     c41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+     c48:	31 c0                	xor    %eax,%eax
+}
+     c4a:	5d                   	pop    %ebp
+     c4b:	c3                   	ret    
+     c4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000c50 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+     c50:	f3 0f 1e fb          	endbr32 
+     c54:	55                   	push   %ebp
+     c55:	89 e5                	mov    %esp,%ebp
+     c57:	57                   	push   %edi
+     c58:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+     c59:	31 f6                	xor    %esi,%esi
+{
+     c5b:	53                   	push   %ebx
+     c5c:	89 f3                	mov    %esi,%ebx
+     c5e:	83 ec 1c             	sub    $0x1c,%esp
+     c61:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+     c64:	eb 33                	jmp    c99 <gets+0x49>
+     c66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c6d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+     c70:	83 ec 04             	sub    $0x4,%esp
+     c73:	8d 45 e7             	lea    -0x19(%ebp),%eax
+     c76:	6a 01                	push   $0x1
+     c78:	50                   	push   %eax
+     c79:	6a 00                	push   $0x0
+     c7b:	e8 2b 01 00 00       	call   dab <read>
+    if(cc < 1)
+     c80:	83 c4 10             	add    $0x10,%esp
+     c83:	85 c0                	test   %eax,%eax
+     c85:	7e 1c                	jle    ca3 <gets+0x53>
+      break;
+    buf[i++] = c;
+     c87:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+     c8b:	83 c7 01             	add    $0x1,%edi
+     c8e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+     c91:	3c 0a                	cmp    $0xa,%al
+     c93:	74 23                	je     cb8 <gets+0x68>
+     c95:	3c 0d                	cmp    $0xd,%al
+     c97:	74 1f                	je     cb8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+     c99:	83 c3 01             	add    $0x1,%ebx
+     c9c:	89 fe                	mov    %edi,%esi
+     c9e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+     ca1:	7c cd                	jl     c70 <gets+0x20>
+     ca3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+     ca5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+     ca8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+     cab:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     cae:	5b                   	pop    %ebx
+     caf:	5e                   	pop    %esi
+     cb0:	5f                   	pop    %edi
+     cb1:	5d                   	pop    %ebp
+     cb2:	c3                   	ret    
+     cb3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     cb7:	90                   	nop
+     cb8:	8b 75 08             	mov    0x8(%ebp),%esi
+     cbb:	8b 45 08             	mov    0x8(%ebp),%eax
+     cbe:	01 de                	add    %ebx,%esi
+     cc0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+     cc2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+     cc5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     cc8:	5b                   	pop    %ebx
+     cc9:	5e                   	pop    %esi
+     cca:	5f                   	pop    %edi
+     ccb:	5d                   	pop    %ebp
+     ccc:	c3                   	ret    
+     ccd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000cd0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+     cd0:	f3 0f 1e fb          	endbr32 
+     cd4:	55                   	push   %ebp
+     cd5:	89 e5                	mov    %esp,%ebp
+     cd7:	56                   	push   %esi
+     cd8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+     cd9:	83 ec 08             	sub    $0x8,%esp
+     cdc:	6a 00                	push   $0x0
+     cde:	ff 75 08             	pushl  0x8(%ebp)
+     ce1:	e8 ed 00 00 00       	call   dd3 <open>
+  if(fd < 0)
+     ce6:	83 c4 10             	add    $0x10,%esp
+     ce9:	85 c0                	test   %eax,%eax
+     ceb:	78 2b                	js     d18 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+     ced:	83 ec 08             	sub    $0x8,%esp
+     cf0:	ff 75 0c             	pushl  0xc(%ebp)
+     cf3:	89 c3                	mov    %eax,%ebx
+     cf5:	50                   	push   %eax
+     cf6:	e8 f0 00 00 00       	call   deb <fstat>
+  close(fd);
+     cfb:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+     cfe:	89 c6                	mov    %eax,%esi
+  close(fd);
+     d00:	e8 b6 00 00 00       	call   dbb <close>
+  return r;
+     d05:	83 c4 10             	add    $0x10,%esp
+}
+     d08:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d0b:	89 f0                	mov    %esi,%eax
+     d0d:	5b                   	pop    %ebx
+     d0e:	5e                   	pop    %esi
+     d0f:	5d                   	pop    %ebp
+     d10:	c3                   	ret    
+     d11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+     d18:	be ff ff ff ff       	mov    $0xffffffff,%esi
+     d1d:	eb e9                	jmp    d08 <stat+0x38>
+     d1f:	90                   	nop
+
+00000d20 <atoi>:
+
+int
+atoi(const char *s)
+{
+     d20:	f3 0f 1e fb          	endbr32 
+     d24:	55                   	push   %ebp
+     d25:	89 e5                	mov    %esp,%ebp
+     d27:	53                   	push   %ebx
+     d28:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+     d2b:	0f be 02             	movsbl (%edx),%eax
+     d2e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+     d31:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+     d34:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+     d39:	77 1a                	ja     d55 <atoi+0x35>
+     d3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     d3f:	90                   	nop
+    n = n*10 + *s++ - '0';
+     d40:	83 c2 01             	add    $0x1,%edx
+     d43:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+     d46:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+     d4a:	0f be 02             	movsbl (%edx),%eax
+     d4d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+     d50:	80 fb 09             	cmp    $0x9,%bl
+     d53:	76 eb                	jbe    d40 <atoi+0x20>
+  return n;
+}
+     d55:	89 c8                	mov    %ecx,%eax
+     d57:	5b                   	pop    %ebx
+     d58:	5d                   	pop    %ebp
+     d59:	c3                   	ret    
+     d5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000d60 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+     d60:	f3 0f 1e fb          	endbr32 
+     d64:	55                   	push   %ebp
+     d65:	89 e5                	mov    %esp,%ebp
+     d67:	57                   	push   %edi
+     d68:	8b 45 10             	mov    0x10(%ebp),%eax
+     d6b:	8b 55 08             	mov    0x8(%ebp),%edx
+     d6e:	56                   	push   %esi
+     d6f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+     d72:	85 c0                	test   %eax,%eax
+     d74:	7e 0f                	jle    d85 <memmove+0x25>
+     d76:	01 d0                	add    %edx,%eax
+  dst = vdst;
+     d78:	89 d7                	mov    %edx,%edi
+     d7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+     d80:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+     d81:	39 f8                	cmp    %edi,%eax
+     d83:	75 fb                	jne    d80 <memmove+0x20>
+  return vdst;
+}
+     d85:	5e                   	pop    %esi
+     d86:	89 d0                	mov    %edx,%eax
+     d88:	5f                   	pop    %edi
+     d89:	5d                   	pop    %ebp
+     d8a:	c3                   	ret    
+
+00000d8b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+     d8b:	b8 01 00 00 00       	mov    $0x1,%eax
+     d90:	cd 40                	int    $0x40
+     d92:	c3                   	ret    
+
+00000d93 <exit>:
+SYSCALL(exit)
+     d93:	b8 02 00 00 00       	mov    $0x2,%eax
+     d98:	cd 40                	int    $0x40
+     d9a:	c3                   	ret    
+
+00000d9b <wait>:
+SYSCALL(wait)
+     d9b:	b8 03 00 00 00       	mov    $0x3,%eax
+     da0:	cd 40                	int    $0x40
+     da2:	c3                   	ret    
+
+00000da3 <pipe>:
+SYSCALL(pipe)
+     da3:	b8 04 00 00 00       	mov    $0x4,%eax
+     da8:	cd 40                	int    $0x40
+     daa:	c3                   	ret    
+
+00000dab <read>:
+SYSCALL(read)
+     dab:	b8 05 00 00 00       	mov    $0x5,%eax
+     db0:	cd 40                	int    $0x40
+     db2:	c3                   	ret    
+
+00000db3 <write>:
+SYSCALL(write)
+     db3:	b8 10 00 00 00       	mov    $0x10,%eax
+     db8:	cd 40                	int    $0x40
+     dba:	c3                   	ret    
+
+00000dbb <close>:
+SYSCALL(close)
+     dbb:	b8 15 00 00 00       	mov    $0x15,%eax
+     dc0:	cd 40                	int    $0x40
+     dc2:	c3                   	ret    
+
+00000dc3 <kill>:
+SYSCALL(kill)
+     dc3:	b8 06 00 00 00       	mov    $0x6,%eax
+     dc8:	cd 40                	int    $0x40
+     dca:	c3                   	ret    
+
+00000dcb <exec>:
+SYSCALL(exec)
+     dcb:	b8 07 00 00 00       	mov    $0x7,%eax
+     dd0:	cd 40                	int    $0x40
+     dd2:	c3                   	ret    
+
+00000dd3 <open>:
+SYSCALL(open)
+     dd3:	b8 0f 00 00 00       	mov    $0xf,%eax
+     dd8:	cd 40                	int    $0x40
+     dda:	c3                   	ret    
+
+00000ddb <mknod>:
+SYSCALL(mknod)
+     ddb:	b8 11 00 00 00       	mov    $0x11,%eax
+     de0:	cd 40                	int    $0x40
+     de2:	c3                   	ret    
+
+00000de3 <unlink>:
+SYSCALL(unlink)
+     de3:	b8 12 00 00 00       	mov    $0x12,%eax
+     de8:	cd 40                	int    $0x40
+     dea:	c3                   	ret    
+
+00000deb <fstat>:
+SYSCALL(fstat)
+     deb:	b8 08 00 00 00       	mov    $0x8,%eax
+     df0:	cd 40                	int    $0x40
+     df2:	c3                   	ret    
+
+00000df3 <link>:
+SYSCALL(link)
+     df3:	b8 13 00 00 00       	mov    $0x13,%eax
+     df8:	cd 40                	int    $0x40
+     dfa:	c3                   	ret    
+
+00000dfb <mkdir>:
+SYSCALL(mkdir)
+     dfb:	b8 14 00 00 00       	mov    $0x14,%eax
+     e00:	cd 40                	int    $0x40
+     e02:	c3                   	ret    
+
+00000e03 <chdir>:
+SYSCALL(chdir)
+     e03:	b8 09 00 00 00       	mov    $0x9,%eax
+     e08:	cd 40                	int    $0x40
+     e0a:	c3                   	ret    
+
+00000e0b <dup>:
+SYSCALL(dup)
+     e0b:	b8 0a 00 00 00       	mov    $0xa,%eax
+     e10:	cd 40                	int    $0x40
+     e12:	c3                   	ret    
+
+00000e13 <getpid>:
+SYSCALL(getpid)
+     e13:	b8 0b 00 00 00       	mov    $0xb,%eax
+     e18:	cd 40                	int    $0x40
+     e1a:	c3                   	ret    
+
+00000e1b <sbrk>:
+SYSCALL(sbrk)
+     e1b:	b8 0c 00 00 00       	mov    $0xc,%eax
+     e20:	cd 40                	int    $0x40
+     e22:	c3                   	ret    
+
+00000e23 <sleep>:
+SYSCALL(sleep)
+     e23:	b8 0d 00 00 00       	mov    $0xd,%eax
+     e28:	cd 40                	int    $0x40
+     e2a:	c3                   	ret    
+
+00000e2b <uptime>:
+SYSCALL(uptime)
+     e2b:	b8 0e 00 00 00       	mov    $0xe,%eax
+     e30:	cd 40                	int    $0x40
+     e32:	c3                   	ret    
+
+00000e33 <getNumProc>:
+SYSCALL(getNumProc)
+     e33:	b8 16 00 00 00       	mov    $0x16,%eax
+     e38:	cd 40                	int    $0x40
+     e3a:	c3                   	ret    
+
+00000e3b <getMaxPid>:
+SYSCALL(getMaxPid)
+     e3b:	b8 17 00 00 00       	mov    $0x17,%eax
+     e40:	cd 40                	int    $0x40
+     e42:	c3                   	ret    
+
+00000e43 <getProcInfo>:
+SYSCALL(getProcInfo)
+     e43:	b8 18 00 00 00       	mov    $0x18,%eax
+     e48:	cd 40                	int    $0x40
+     e4a:	c3                   	ret    
+
+00000e4b <set_burst_time>:
+SYSCALL(set_burst_time)
+     e4b:	b8 19 00 00 00       	mov    $0x19,%eax
+     e50:	cd 40                	int    $0x40
+     e52:	c3                   	ret    
+
+00000e53 <get_burst_time>:
+     e53:	b8 1a 00 00 00       	mov    $0x1a,%eax
+     e58:	cd 40                	int    $0x40
+     e5a:	c3                   	ret    
+     e5b:	66 90                	xchg   %ax,%ax
+     e5d:	66 90                	xchg   %ax,%ax
+     e5f:	90                   	nop
+
+00000e60 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+     e60:	55                   	push   %ebp
+     e61:	89 e5                	mov    %esp,%ebp
+     e63:	57                   	push   %edi
+     e64:	56                   	push   %esi
+     e65:	53                   	push   %ebx
+     e66:	83 ec 3c             	sub    $0x3c,%esp
+     e69:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+     e6c:	89 d1                	mov    %edx,%ecx
+{
+     e6e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+     e71:	85 d2                	test   %edx,%edx
+     e73:	0f 89 7f 00 00 00    	jns    ef8 <printint+0x98>
+     e79:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+     e7d:	74 79                	je     ef8 <printint+0x98>
+    neg = 1;
+     e7f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+     e86:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+     e88:	31 db                	xor    %ebx,%ebx
+     e8a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+     e8d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+     e90:	89 c8                	mov    %ecx,%eax
+     e92:	31 d2                	xor    %edx,%edx
+     e94:	89 cf                	mov    %ecx,%edi
+     e96:	f7 75 c4             	divl   -0x3c(%ebp)
+     e99:	0f b6 92 68 13 00 00 	movzbl 0x1368(%edx),%edx
+     ea0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+     ea3:	89 d8                	mov    %ebx,%eax
+     ea5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+     ea8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+     eab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+     eae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+     eb1:	76 dd                	jbe    e90 <printint+0x30>
+  if(neg)
+     eb3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+     eb6:	85 c9                	test   %ecx,%ecx
+     eb8:	74 0c                	je     ec6 <printint+0x66>
+    buf[i++] = '-';
+     eba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+     ebf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+     ec1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+     ec6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+     ec9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+     ecd:	eb 07                	jmp    ed6 <printint+0x76>
+     ecf:	90                   	nop
+     ed0:	0f b6 13             	movzbl (%ebx),%edx
+     ed3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+     ed6:	83 ec 04             	sub    $0x4,%esp
+     ed9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+     edc:	6a 01                	push   $0x1
+     ede:	56                   	push   %esi
+     edf:	57                   	push   %edi
+     ee0:	e8 ce fe ff ff       	call   db3 <write>
+  while(--i >= 0)
+     ee5:	83 c4 10             	add    $0x10,%esp
+     ee8:	39 de                	cmp    %ebx,%esi
+     eea:	75 e4                	jne    ed0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+     eec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     eef:	5b                   	pop    %ebx
+     ef0:	5e                   	pop    %esi
+     ef1:	5f                   	pop    %edi
+     ef2:	5d                   	pop    %ebp
+     ef3:	c3                   	ret    
+     ef4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+     ef8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+     eff:	eb 87                	jmp    e88 <printint+0x28>
+     f01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     f08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     f0f:	90                   	nop
+
+00000f10 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+     f10:	f3 0f 1e fb          	endbr32 
+     f14:	55                   	push   %ebp
+     f15:	89 e5                	mov    %esp,%ebp
+     f17:	57                   	push   %edi
+     f18:	56                   	push   %esi
+     f19:	53                   	push   %ebx
+     f1a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+     f1d:	8b 75 0c             	mov    0xc(%ebp),%esi
+     f20:	0f b6 1e             	movzbl (%esi),%ebx
+     f23:	84 db                	test   %bl,%bl
+     f25:	0f 84 b4 00 00 00    	je     fdf <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+     f2b:	8d 45 10             	lea    0x10(%ebp),%eax
+     f2e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+     f31:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+     f34:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+     f36:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     f39:	eb 33                	jmp    f6e <printf+0x5e>
+     f3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     f3f:	90                   	nop
+     f40:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+     f43:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+     f48:	83 f8 25             	cmp    $0x25,%eax
+     f4b:	74 17                	je     f64 <printf+0x54>
+  write(fd, &c, 1);
+     f4d:	83 ec 04             	sub    $0x4,%esp
+     f50:	88 5d e7             	mov    %bl,-0x19(%ebp)
+     f53:	6a 01                	push   $0x1
+     f55:	57                   	push   %edi
+     f56:	ff 75 08             	pushl  0x8(%ebp)
+     f59:	e8 55 fe ff ff       	call   db3 <write>
+     f5e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+     f61:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+     f64:	0f b6 1e             	movzbl (%esi),%ebx
+     f67:	83 c6 01             	add    $0x1,%esi
+     f6a:	84 db                	test   %bl,%bl
+     f6c:	74 71                	je     fdf <printf+0xcf>
+    c = fmt[i] & 0xff;
+     f6e:	0f be cb             	movsbl %bl,%ecx
+     f71:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+     f74:	85 d2                	test   %edx,%edx
+     f76:	74 c8                	je     f40 <printf+0x30>
+      }
+    } else if(state == '%'){
+     f78:	83 fa 25             	cmp    $0x25,%edx
+     f7b:	75 e7                	jne    f64 <printf+0x54>
+      if(c == 'd'){
+     f7d:	83 f8 64             	cmp    $0x64,%eax
+     f80:	0f 84 9a 00 00 00    	je     1020 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+     f86:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+     f8c:	83 f9 70             	cmp    $0x70,%ecx
+     f8f:	74 5f                	je     ff0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+     f91:	83 f8 73             	cmp    $0x73,%eax
+     f94:	0f 84 d6 00 00 00    	je     1070 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+     f9a:	83 f8 63             	cmp    $0x63,%eax
+     f9d:	0f 84 8d 00 00 00    	je     1030 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+     fa3:	83 f8 25             	cmp    $0x25,%eax
+     fa6:	0f 84 b4 00 00 00    	je     1060 <printf+0x150>
+  write(fd, &c, 1);
+     fac:	83 ec 04             	sub    $0x4,%esp
+     faf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+     fb3:	6a 01                	push   $0x1
+     fb5:	57                   	push   %edi
+     fb6:	ff 75 08             	pushl  0x8(%ebp)
+     fb9:	e8 f5 fd ff ff       	call   db3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+     fbe:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+     fc1:	83 c4 0c             	add    $0xc,%esp
+     fc4:	6a 01                	push   $0x1
+     fc6:	83 c6 01             	add    $0x1,%esi
+     fc9:	57                   	push   %edi
+     fca:	ff 75 08             	pushl  0x8(%ebp)
+     fcd:	e8 e1 fd ff ff       	call   db3 <write>
+  for(i = 0; fmt[i]; i++){
+     fd2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+     fd6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+     fd9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+     fdb:	84 db                	test   %bl,%bl
+     fdd:	75 8f                	jne    f6e <printf+0x5e>
+    }
+  }
+}
+     fdf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     fe2:	5b                   	pop    %ebx
+     fe3:	5e                   	pop    %esi
+     fe4:	5f                   	pop    %edi
+     fe5:	5d                   	pop    %ebp
+     fe6:	c3                   	ret    
+     fe7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     fee:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+     ff0:	83 ec 0c             	sub    $0xc,%esp
+     ff3:	b9 10 00 00 00       	mov    $0x10,%ecx
+     ff8:	6a 00                	push   $0x0
+     ffa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+     ffd:	8b 45 08             	mov    0x8(%ebp),%eax
+    1000:	8b 13                	mov    (%ebx),%edx
+    1002:	e8 59 fe ff ff       	call   e60 <printint>
+        ap++;
+    1007:	89 d8                	mov    %ebx,%eax
+    1009:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    100c:	31 d2                	xor    %edx,%edx
+        ap++;
+    100e:	83 c0 04             	add    $0x4,%eax
+    1011:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    1014:	e9 4b ff ff ff       	jmp    f64 <printf+0x54>
+    1019:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+    1020:	83 ec 0c             	sub    $0xc,%esp
+    1023:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    1028:	6a 01                	push   $0x1
+    102a:	eb ce                	jmp    ffa <printf+0xea>
+    102c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+    1030:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+    1033:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+    1036:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+    1038:	6a 01                	push   $0x1
+        ap++;
+    103a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+    103d:	57                   	push   %edi
+    103e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+    1041:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    1044:	e8 6a fd ff ff       	call   db3 <write>
+        ap++;
+    1049:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+    104c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    104f:	31 d2                	xor    %edx,%edx
+    1051:	e9 0e ff ff ff       	jmp    f64 <printf+0x54>
+    1056:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    105d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+    1060:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+    1063:	83 ec 04             	sub    $0x4,%esp
+    1066:	e9 59 ff ff ff       	jmp    fc4 <printf+0xb4>
+    106b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    106f:	90                   	nop
+        s = (char*)*ap;
+    1070:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    1073:	8b 18                	mov    (%eax),%ebx
+        ap++;
+    1075:	83 c0 04             	add    $0x4,%eax
+    1078:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+    107b:	85 db                	test   %ebx,%ebx
+    107d:	74 17                	je     1096 <printf+0x186>
+        while(*s != 0){
+    107f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+    1082:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+    1084:	84 c0                	test   %al,%al
+    1086:	0f 84 d8 fe ff ff    	je     f64 <printf+0x54>
+    108c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    108f:	89 de                	mov    %ebx,%esi
+    1091:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    1094:	eb 1a                	jmp    10b0 <printf+0x1a0>
+          s = "(null)";
+    1096:	bb 60 13 00 00       	mov    $0x1360,%ebx
+        while(*s != 0){
+    109b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    109e:	b8 28 00 00 00       	mov    $0x28,%eax
+    10a3:	89 de                	mov    %ebx,%esi
+    10a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    10a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    10af:	90                   	nop
+  write(fd, &c, 1);
+    10b0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+    10b3:	83 c6 01             	add    $0x1,%esi
+    10b6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    10b9:	6a 01                	push   $0x1
+    10bb:	57                   	push   %edi
+    10bc:	53                   	push   %ebx
+    10bd:	e8 f1 fc ff ff       	call   db3 <write>
+        while(*s != 0){
+    10c2:	0f b6 06             	movzbl (%esi),%eax
+    10c5:	83 c4 10             	add    $0x10,%esp
+    10c8:	84 c0                	test   %al,%al
+    10ca:	75 e4                	jne    10b0 <printf+0x1a0>
+    10cc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+    10cf:	31 d2                	xor    %edx,%edx
+    10d1:	e9 8e fe ff ff       	jmp    f64 <printf+0x54>
+    10d6:	66 90                	xchg   %ax,%ax
+    10d8:	66 90                	xchg   %ax,%ax
+    10da:	66 90                	xchg   %ax,%ax
+    10dc:	66 90                	xchg   %ax,%ax
+    10de:	66 90                	xchg   %ax,%ax
+
+000010e0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    10e0:	f3 0f 1e fb          	endbr32 
+    10e4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    10e5:	a1 c4 19 00 00       	mov    0x19c4,%eax
+{
+    10ea:	89 e5                	mov    %esp,%ebp
+    10ec:	57                   	push   %edi
+    10ed:	56                   	push   %esi
+    10ee:	53                   	push   %ebx
+    10ef:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    10f2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+    10f4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    10f7:	39 c8                	cmp    %ecx,%eax
+    10f9:	73 15                	jae    1110 <free+0x30>
+    10fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    10ff:	90                   	nop
+    1100:	39 d1                	cmp    %edx,%ecx
+    1102:	72 14                	jb     1118 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    1104:	39 d0                	cmp    %edx,%eax
+    1106:	73 10                	jae    1118 <free+0x38>
+{
+    1108:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    110a:	8b 10                	mov    (%eax),%edx
+    110c:	39 c8                	cmp    %ecx,%eax
+    110e:	72 f0                	jb     1100 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    1110:	39 d0                	cmp    %edx,%eax
+    1112:	72 f4                	jb     1108 <free+0x28>
+    1114:	39 d1                	cmp    %edx,%ecx
+    1116:	73 f0                	jae    1108 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    1118:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    111b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    111e:	39 fa                	cmp    %edi,%edx
+    1120:	74 1e                	je     1140 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+    1122:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    1125:	8b 50 04             	mov    0x4(%eax),%edx
+    1128:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    112b:	39 f1                	cmp    %esi,%ecx
+    112d:	74 28                	je     1157 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+    112f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+    1131:	5b                   	pop    %ebx
+  freep = p;
+    1132:	a3 c4 19 00 00       	mov    %eax,0x19c4
+}
+    1137:	5e                   	pop    %esi
+    1138:	5f                   	pop    %edi
+    1139:	5d                   	pop    %ebp
+    113a:	c3                   	ret    
+    113b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    113f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+    1140:	03 72 04             	add    0x4(%edx),%esi
+    1143:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    1146:	8b 10                	mov    (%eax),%edx
+    1148:	8b 12                	mov    (%edx),%edx
+    114a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    114d:	8b 50 04             	mov    0x4(%eax),%edx
+    1150:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    1153:	39 f1                	cmp    %esi,%ecx
+    1155:	75 d8                	jne    112f <free+0x4f>
+    p->s.size += bp->s.size;
+    1157:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+    115a:	a3 c4 19 00 00       	mov    %eax,0x19c4
+    p->s.size += bp->s.size;
+    115f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+    1162:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    1165:	89 10                	mov    %edx,(%eax)
+}
+    1167:	5b                   	pop    %ebx
+    1168:	5e                   	pop    %esi
+    1169:	5f                   	pop    %edi
+    116a:	5d                   	pop    %ebp
+    116b:	c3                   	ret    
+    116c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00001170 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    1170:	f3 0f 1e fb          	endbr32 
+    1174:	55                   	push   %ebp
+    1175:	89 e5                	mov    %esp,%ebp
+    1177:	57                   	push   %edi
+    1178:	56                   	push   %esi
+    1179:	53                   	push   %ebx
+    117a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    117d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+    1180:	8b 3d c4 19 00 00    	mov    0x19c4,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    1186:	8d 70 07             	lea    0x7(%eax),%esi
+    1189:	c1 ee 03             	shr    $0x3,%esi
+    118c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+    118f:	85 ff                	test   %edi,%edi
+    1191:	0f 84 a9 00 00 00    	je     1240 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    1197:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+    1199:	8b 48 04             	mov    0x4(%eax),%ecx
+    119c:	39 f1                	cmp    %esi,%ecx
+    119e:	73 6d                	jae    120d <malloc+0x9d>
+    11a0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+    11a6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    11ab:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+    11ae:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+    11b5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+    11b8:	eb 17                	jmp    11d1 <malloc+0x61>
+    11ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    11c0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+    11c2:	8b 4a 04             	mov    0x4(%edx),%ecx
+    11c5:	39 f1                	cmp    %esi,%ecx
+    11c7:	73 4f                	jae    1218 <malloc+0xa8>
+    11c9:	8b 3d c4 19 00 00    	mov    0x19c4,%edi
+    11cf:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    11d1:	39 c7                	cmp    %eax,%edi
+    11d3:	75 eb                	jne    11c0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+    11d5:	83 ec 0c             	sub    $0xc,%esp
+    11d8:	ff 75 e4             	pushl  -0x1c(%ebp)
+    11db:	e8 3b fc ff ff       	call   e1b <sbrk>
+  if(p == (char*)-1)
+    11e0:	83 c4 10             	add    $0x10,%esp
+    11e3:	83 f8 ff             	cmp    $0xffffffff,%eax
+    11e6:	74 1b                	je     1203 <malloc+0x93>
+  hp->s.size = nu;
+    11e8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+    11eb:	83 ec 0c             	sub    $0xc,%esp
+    11ee:	83 c0 08             	add    $0x8,%eax
+    11f1:	50                   	push   %eax
+    11f2:	e8 e9 fe ff ff       	call   10e0 <free>
+  return freep;
+    11f7:	a1 c4 19 00 00       	mov    0x19c4,%eax
+      if((p = morecore(nunits)) == 0)
+    11fc:	83 c4 10             	add    $0x10,%esp
+    11ff:	85 c0                	test   %eax,%eax
+    1201:	75 bd                	jne    11c0 <malloc+0x50>
+        return 0;
+  }
+}
+    1203:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+    1206:	31 c0                	xor    %eax,%eax
+}
+    1208:	5b                   	pop    %ebx
+    1209:	5e                   	pop    %esi
+    120a:	5f                   	pop    %edi
+    120b:	5d                   	pop    %ebp
+    120c:	c3                   	ret    
+    if(p->s.size >= nunits){
+    120d:	89 c2                	mov    %eax,%edx
+    120f:	89 f8                	mov    %edi,%eax
+    1211:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+    1218:	39 ce                	cmp    %ecx,%esi
+    121a:	74 54                	je     1270 <malloc+0x100>
+        p->s.size -= nunits;
+    121c:	29 f1                	sub    %esi,%ecx
+    121e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+    1221:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+    1224:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+    1227:	a3 c4 19 00 00       	mov    %eax,0x19c4
+}
+    122c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+    122f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+    1232:	5b                   	pop    %ebx
+    1233:	5e                   	pop    %esi
+    1234:	5f                   	pop    %edi
+    1235:	5d                   	pop    %ebp
+    1236:	c3                   	ret    
+    1237:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    123e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+    1240:	c7 05 c4 19 00 00 c8 	movl   $0x19c8,0x19c4
+    1247:	19 00 00 
+    base.s.size = 0;
+    124a:	bf c8 19 00 00       	mov    $0x19c8,%edi
+    base.s.ptr = freep = prevp = &base;
+    124f:	c7 05 c8 19 00 00 c8 	movl   $0x19c8,0x19c8
+    1256:	19 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    1259:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+    125b:	c7 05 cc 19 00 00 00 	movl   $0x0,0x19cc
+    1262:	00 00 00 
+    if(p->s.size >= nunits){
+    1265:	e9 36 ff ff ff       	jmp    11a0 <malloc+0x30>
+    126a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+    1270:	8b 0a                	mov    (%edx),%ecx
+    1272:	89 08                	mov    %ecx,(%eax)
+    1274:	eb b1                	jmp    1227 <malloc+0xb7>
diff -ruN xv6-public/sh.d xv6-new/sh.d
--- xv6-public/sh.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/sh.d	2022-10-07 22:43:43.831886847 +0530
@@ -0,0 +1 @@
+sh.o: sh.c /usr/include/stdc-predef.h types.h user.h fcntl.h
Binary files xv6-public/sh.o and xv6-new/sh.o differ
diff -ruN xv6-public/sh.sym xv6-new/sh.sym
--- xv6-public/sh.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/sh.sym	2022-10-07 22:43:43.831886847 +0530
@@ -0,0 +1,84 @@
+00000000 .text
+00001278 .rodata
+0000137c .eh_frame
+00001938 .data
+00001960 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 sh.c
+00001960 buf.1134
+00000000 ulib.c
+00000000 printf.c
+00000e60 printint
+00001368 digits.1096
+00000000 umalloc.c
+000019c4 freep
+000019c8 base
+00000b30 strcpy
+00000f10 printf
+00000d60 memmove
+00000ddb mknod
+00000370 execcmd
+00000c50 gets
+00000e13 getpid
+00000850 parsepipe
+00000ac0 parsecmd
+00000470 backcmd
+00000610 peek
+00000690 parseredirs
+000004b0 gettoken
+00001170 malloc
+00000e23 sleep
+00000e53 get_burst_time
+00001940 whitespace
+00000340 fork1
+00000a00 nulterminate
+00000da3 pipe
+00000110 getcmd
+00000db3 write
+00000deb fstat
+00000dc3 kill
+00000e03 chdir
+000008c0 parseline
+00000180 runcmd
+00000970 parseblock
+00000dcb exec
+00000d9b wait
+00001938 symbols
+00000dab read
+00000740 parseexec
+00000de3 unlink
+00000160 panic
+00000d8b fork
+00000e1b sbrk
+00000e2b uptime
+00001946 __bss_start
+00000bf0 memset
+00000000 main
+00000e4b set_burst_time
+00000b60 strcmp
+00000e0b dup
+000003f0 pipecmd
+000003a0 redircmd
+00000e3b getMaxPid
+00000e33 getNumProc
+00000e43 getProcInfo
+00000cd0 stat
+00001946 _edata
+000019d0 _end
+00000df3 link
+00000d93 exit
+00000d20 atoi
+00000bb0 strlen
+00000dd3 open
+00000c10 strchr
+00000dfb mkdir
+00000dbb close
+00000430 listcmd
+000010e0 free
Binary files xv6-public/sleeplock.o and xv6-new/sleeplock.o differ
Binary files xv6-public/spinlock.o and xv6-new/spinlock.o differ
diff -ruN xv6-public/stressfs.asm xv6-new/stressfs.asm
--- xv6-public/stressfs.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/stressfs.asm	2022-10-07 22:43:43.831886847 +0530
@@ -0,0 +1,1317 @@
+
+_stressfs:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "fs.h"
+#include "fcntl.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+  int fd, i;
+  char path[] = "stressfs0";
+   b:	b8 30 00 00 00       	mov    $0x30,%eax
+{
+  10:	ff 71 fc             	pushl  -0x4(%ecx)
+  13:	55                   	push   %ebp
+  14:	89 e5                	mov    %esp,%ebp
+  16:	57                   	push   %edi
+  17:	56                   	push   %esi
+  char data[512];
+
+  printf(1, "stressfs starting\n");
+  memset(data, 'a', sizeof(data));
+  18:	8d b5 e8 fd ff ff    	lea    -0x218(%ebp),%esi
+{
+  1e:	53                   	push   %ebx
+
+  for(i = 0; i < 4; i++)
+  1f:	31 db                	xor    %ebx,%ebx
+{
+  21:	51                   	push   %ecx
+  22:	81 ec 20 02 00 00    	sub    $0x220,%esp
+  char path[] = "stressfs0";
+  28:	66 89 85 e6 fd ff ff 	mov    %ax,-0x21a(%ebp)
+  printf(1, "stressfs starting\n");
+  2f:	68 88 08 00 00       	push   $0x888
+  34:	6a 01                	push   $0x1
+  char path[] = "stressfs0";
+  36:	c7 85 de fd ff ff 73 	movl   $0x65727473,-0x222(%ebp)
+  3d:	74 72 65 
+  40:	c7 85 e2 fd ff ff 73 	movl   $0x73667373,-0x21e(%ebp)
+  47:	73 66 73 
+  printf(1, "stressfs starting\n");
+  4a:	e8 d1 04 00 00       	call   520 <printf>
+  memset(data, 'a', sizeof(data));
+  4f:	83 c4 0c             	add    $0xc,%esp
+  52:	68 00 02 00 00       	push   $0x200
+  57:	6a 61                	push   $0x61
+  59:	56                   	push   %esi
+  5a:	e8 a1 01 00 00       	call   200 <memset>
+  5f:	83 c4 10             	add    $0x10,%esp
+    if(fork() > 0)
+  62:	e8 34 03 00 00       	call   39b <fork>
+  67:	85 c0                	test   %eax,%eax
+  69:	0f 8f bb 00 00 00    	jg     12a <main+0x12a>
+  for(i = 0; i < 4; i++)
+  6f:	83 c3 01             	add    $0x1,%ebx
+  72:	83 fb 04             	cmp    $0x4,%ebx
+  75:	75 eb                	jne    62 <main+0x62>
+  77:	bf 04 00 00 00       	mov    $0x4,%edi
+      break;
+
+  printf(1, "write %d\n", i);
+  7c:	83 ec 04             	sub    $0x4,%esp
+  7f:	53                   	push   %ebx
+
+  path[8] += i;
+  fd = open(path, O_CREATE | O_RDWR);
+  80:	bb 14 00 00 00       	mov    $0x14,%ebx
+  printf(1, "write %d\n", i);
+  85:	68 9b 08 00 00       	push   $0x89b
+  8a:	6a 01                	push   $0x1
+  8c:	e8 8f 04 00 00       	call   520 <printf>
+  path[8] += i;
+  91:	89 f8                	mov    %edi,%eax
+  fd = open(path, O_CREATE | O_RDWR);
+  93:	5f                   	pop    %edi
+  path[8] += i;
+  94:	00 85 e6 fd ff ff    	add    %al,-0x21a(%ebp)
+  fd = open(path, O_CREATE | O_RDWR);
+  9a:	58                   	pop    %eax
+  9b:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
+  a1:	68 02 02 00 00       	push   $0x202
+  a6:	50                   	push   %eax
+  a7:	e8 37 03 00 00       	call   3e3 <open>
+  ac:	83 c4 10             	add    $0x10,%esp
+  af:	89 c7                	mov    %eax,%edi
+  for(i = 0; i < 20; i++)
+  b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+//    printf(fd, "%d\n", i);
+    write(fd, data, sizeof(data));
+  b8:	83 ec 04             	sub    $0x4,%esp
+  bb:	68 00 02 00 00       	push   $0x200
+  c0:	56                   	push   %esi
+  c1:	57                   	push   %edi
+  c2:	e8 fc 02 00 00       	call   3c3 <write>
+  for(i = 0; i < 20; i++)
+  c7:	83 c4 10             	add    $0x10,%esp
+  ca:	83 eb 01             	sub    $0x1,%ebx
+  cd:	75 e9                	jne    b8 <main+0xb8>
+  close(fd);
+  cf:	83 ec 0c             	sub    $0xc,%esp
+  d2:	57                   	push   %edi
+  d3:	e8 f3 02 00 00       	call   3cb <close>
+
+  printf(1, "read\n");
+  d8:	58                   	pop    %eax
+  d9:	5a                   	pop    %edx
+  da:	68 a5 08 00 00       	push   $0x8a5
+  df:	6a 01                	push   $0x1
+  e1:	e8 3a 04 00 00       	call   520 <printf>
+
+  fd = open(path, O_RDONLY);
+  e6:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
+  ec:	59                   	pop    %ecx
+  ed:	5b                   	pop    %ebx
+  ee:	6a 00                	push   $0x0
+  f0:	bb 14 00 00 00       	mov    $0x14,%ebx
+  f5:	50                   	push   %eax
+  f6:	e8 e8 02 00 00       	call   3e3 <open>
+  fb:	83 c4 10             	add    $0x10,%esp
+  fe:	89 c7                	mov    %eax,%edi
+  for (i = 0; i < 20; i++)
+    read(fd, data, sizeof(data));
+ 100:	83 ec 04             	sub    $0x4,%esp
+ 103:	68 00 02 00 00       	push   $0x200
+ 108:	56                   	push   %esi
+ 109:	57                   	push   %edi
+ 10a:	e8 ac 02 00 00       	call   3bb <read>
+  for (i = 0; i < 20; i++)
+ 10f:	83 c4 10             	add    $0x10,%esp
+ 112:	83 eb 01             	sub    $0x1,%ebx
+ 115:	75 e9                	jne    100 <main+0x100>
+  close(fd);
+ 117:	83 ec 0c             	sub    $0xc,%esp
+ 11a:	57                   	push   %edi
+ 11b:	e8 ab 02 00 00       	call   3cb <close>
+
+  wait();
+ 120:	e8 86 02 00 00       	call   3ab <wait>
+
+  exit();
+ 125:	e8 79 02 00 00       	call   3a3 <exit>
+ 12a:	89 df                	mov    %ebx,%edi
+ 12c:	e9 4b ff ff ff       	jmp    7c <main+0x7c>
+ 131:	66 90                	xchg   %ax,%ax
+ 133:	66 90                	xchg   %ax,%ax
+ 135:	66 90                	xchg   %ax,%ax
+ 137:	66 90                	xchg   %ax,%ax
+ 139:	66 90                	xchg   %ax,%ax
+ 13b:	66 90                	xchg   %ax,%ax
+ 13d:	66 90                	xchg   %ax,%ax
+ 13f:	90                   	nop
+
+00000140 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 145:	31 c0                	xor    %eax,%eax
+{
+ 147:	89 e5                	mov    %esp,%ebp
+ 149:	53                   	push   %ebx
+ 14a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 14d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 150:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 154:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 157:	83 c0 01             	add    $0x1,%eax
+ 15a:	84 d2                	test   %dl,%dl
+ 15c:	75 f2                	jne    150 <strcpy+0x10>
+    ;
+  return os;
+}
+ 15e:	89 c8                	mov    %ecx,%eax
+ 160:	5b                   	pop    %ebx
+ 161:	5d                   	pop    %ebp
+ 162:	c3                   	ret    
+ 163:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000170 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 170:	f3 0f 1e fb          	endbr32 
+ 174:	55                   	push   %ebp
+ 175:	89 e5                	mov    %esp,%ebp
+ 177:	53                   	push   %ebx
+ 178:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 17b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 17e:	0f b6 01             	movzbl (%ecx),%eax
+ 181:	0f b6 1a             	movzbl (%edx),%ebx
+ 184:	84 c0                	test   %al,%al
+ 186:	75 19                	jne    1a1 <strcmp+0x31>
+ 188:	eb 26                	jmp    1b0 <strcmp+0x40>
+ 18a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 190:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 194:	83 c1 01             	add    $0x1,%ecx
+ 197:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 19a:	0f b6 1a             	movzbl (%edx),%ebx
+ 19d:	84 c0                	test   %al,%al
+ 19f:	74 0f                	je     1b0 <strcmp+0x40>
+ 1a1:	38 d8                	cmp    %bl,%al
+ 1a3:	74 eb                	je     190 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 1a5:	29 d8                	sub    %ebx,%eax
+}
+ 1a7:	5b                   	pop    %ebx
+ 1a8:	5d                   	pop    %ebp
+ 1a9:	c3                   	ret    
+ 1aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1b0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 1b2:	29 d8                	sub    %ebx,%eax
+}
+ 1b4:	5b                   	pop    %ebx
+ 1b5:	5d                   	pop    %ebp
+ 1b6:	c3                   	ret    
+ 1b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1be:	66 90                	xchg   %ax,%ax
+
+000001c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1c0:	f3 0f 1e fb          	endbr32 
+ 1c4:	55                   	push   %ebp
+ 1c5:	89 e5                	mov    %esp,%ebp
+ 1c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1ca:	80 3a 00             	cmpb   $0x0,(%edx)
+ 1cd:	74 21                	je     1f0 <strlen+0x30>
+ 1cf:	31 c0                	xor    %eax,%eax
+ 1d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1d8:	83 c0 01             	add    $0x1,%eax
+ 1db:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 1df:	89 c1                	mov    %eax,%ecx
+ 1e1:	75 f5                	jne    1d8 <strlen+0x18>
+    ;
+  return n;
+}
+ 1e3:	89 c8                	mov    %ecx,%eax
+ 1e5:	5d                   	pop    %ebp
+ 1e6:	c3                   	ret    
+ 1e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ee:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 1f0:	31 c9                	xor    %ecx,%ecx
+}
+ 1f2:	5d                   	pop    %ebp
+ 1f3:	89 c8                	mov    %ecx,%eax
+ 1f5:	c3                   	ret    
+ 1f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000200 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 200:	f3 0f 1e fb          	endbr32 
+ 204:	55                   	push   %ebp
+ 205:	89 e5                	mov    %esp,%ebp
+ 207:	57                   	push   %edi
+ 208:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 20b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 20e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 211:	89 d7                	mov    %edx,%edi
+ 213:	fc                   	cld    
+ 214:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 216:	89 d0                	mov    %edx,%eax
+ 218:	5f                   	pop    %edi
+ 219:	5d                   	pop    %ebp
+ 21a:	c3                   	ret    
+ 21b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 21f:	90                   	nop
+
+00000220 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	8b 45 08             	mov    0x8(%ebp),%eax
+ 22a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 22e:	0f b6 10             	movzbl (%eax),%edx
+ 231:	84 d2                	test   %dl,%dl
+ 233:	75 16                	jne    24b <strchr+0x2b>
+ 235:	eb 21                	jmp    258 <strchr+0x38>
+ 237:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23e:	66 90                	xchg   %ax,%ax
+ 240:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 244:	83 c0 01             	add    $0x1,%eax
+ 247:	84 d2                	test   %dl,%dl
+ 249:	74 0d                	je     258 <strchr+0x38>
+    if(*s == c)
+ 24b:	38 d1                	cmp    %dl,%cl
+ 24d:	75 f1                	jne    240 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 24f:	5d                   	pop    %ebp
+ 250:	c3                   	ret    
+ 251:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 258:	31 c0                	xor    %eax,%eax
+}
+ 25a:	5d                   	pop    %ebp
+ 25b:	c3                   	ret    
+ 25c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000260 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 260:	f3 0f 1e fb          	endbr32 
+ 264:	55                   	push   %ebp
+ 265:	89 e5                	mov    %esp,%ebp
+ 267:	57                   	push   %edi
+ 268:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 269:	31 f6                	xor    %esi,%esi
+{
+ 26b:	53                   	push   %ebx
+ 26c:	89 f3                	mov    %esi,%ebx
+ 26e:	83 ec 1c             	sub    $0x1c,%esp
+ 271:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 274:	eb 33                	jmp    2a9 <gets+0x49>
+ 276:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 280:	83 ec 04             	sub    $0x4,%esp
+ 283:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 286:	6a 01                	push   $0x1
+ 288:	50                   	push   %eax
+ 289:	6a 00                	push   $0x0
+ 28b:	e8 2b 01 00 00       	call   3bb <read>
+    if(cc < 1)
+ 290:	83 c4 10             	add    $0x10,%esp
+ 293:	85 c0                	test   %eax,%eax
+ 295:	7e 1c                	jle    2b3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 297:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 29b:	83 c7 01             	add    $0x1,%edi
+ 29e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 2a1:	3c 0a                	cmp    $0xa,%al
+ 2a3:	74 23                	je     2c8 <gets+0x68>
+ 2a5:	3c 0d                	cmp    $0xd,%al
+ 2a7:	74 1f                	je     2c8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 2a9:	83 c3 01             	add    $0x1,%ebx
+ 2ac:	89 fe                	mov    %edi,%esi
+ 2ae:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 2b1:	7c cd                	jl     280 <gets+0x20>
+ 2b3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 2b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 2b8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2be:	5b                   	pop    %ebx
+ 2bf:	5e                   	pop    %esi
+ 2c0:	5f                   	pop    %edi
+ 2c1:	5d                   	pop    %ebp
+ 2c2:	c3                   	ret    
+ 2c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2c7:	90                   	nop
+ 2c8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 2cb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2ce:	01 de                	add    %ebx,%esi
+ 2d0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2d2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2d8:	5b                   	pop    %ebx
+ 2d9:	5e                   	pop    %esi
+ 2da:	5f                   	pop    %edi
+ 2db:	5d                   	pop    %ebp
+ 2dc:	c3                   	ret    
+ 2dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000002e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2e0:	f3 0f 1e fb          	endbr32 
+ 2e4:	55                   	push   %ebp
+ 2e5:	89 e5                	mov    %esp,%ebp
+ 2e7:	56                   	push   %esi
+ 2e8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2e9:	83 ec 08             	sub    $0x8,%esp
+ 2ec:	6a 00                	push   $0x0
+ 2ee:	ff 75 08             	pushl  0x8(%ebp)
+ 2f1:	e8 ed 00 00 00       	call   3e3 <open>
+  if(fd < 0)
+ 2f6:	83 c4 10             	add    $0x10,%esp
+ 2f9:	85 c0                	test   %eax,%eax
+ 2fb:	78 2b                	js     328 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 2fd:	83 ec 08             	sub    $0x8,%esp
+ 300:	ff 75 0c             	pushl  0xc(%ebp)
+ 303:	89 c3                	mov    %eax,%ebx
+ 305:	50                   	push   %eax
+ 306:	e8 f0 00 00 00       	call   3fb <fstat>
+  close(fd);
+ 30b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 30e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 310:	e8 b6 00 00 00       	call   3cb <close>
+  return r;
+ 315:	83 c4 10             	add    $0x10,%esp
+}
+ 318:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 31b:	89 f0                	mov    %esi,%eax
+ 31d:	5b                   	pop    %ebx
+ 31e:	5e                   	pop    %esi
+ 31f:	5d                   	pop    %ebp
+ 320:	c3                   	ret    
+ 321:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 328:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 32d:	eb e9                	jmp    318 <stat+0x38>
+ 32f:	90                   	nop
+
+00000330 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 330:	f3 0f 1e fb          	endbr32 
+ 334:	55                   	push   %ebp
+ 335:	89 e5                	mov    %esp,%ebp
+ 337:	53                   	push   %ebx
+ 338:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 33b:	0f be 02             	movsbl (%edx),%eax
+ 33e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 341:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 344:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 349:	77 1a                	ja     365 <atoi+0x35>
+ 34b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 34f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 350:	83 c2 01             	add    $0x1,%edx
+ 353:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 356:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 35a:	0f be 02             	movsbl (%edx),%eax
+ 35d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 360:	80 fb 09             	cmp    $0x9,%bl
+ 363:	76 eb                	jbe    350 <atoi+0x20>
+  return n;
+}
+ 365:	89 c8                	mov    %ecx,%eax
+ 367:	5b                   	pop    %ebx
+ 368:	5d                   	pop    %ebp
+ 369:	c3                   	ret    
+ 36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000370 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 370:	f3 0f 1e fb          	endbr32 
+ 374:	55                   	push   %ebp
+ 375:	89 e5                	mov    %esp,%ebp
+ 377:	57                   	push   %edi
+ 378:	8b 45 10             	mov    0x10(%ebp),%eax
+ 37b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 37e:	56                   	push   %esi
+ 37f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 382:	85 c0                	test   %eax,%eax
+ 384:	7e 0f                	jle    395 <memmove+0x25>
+ 386:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 388:	89 d7                	mov    %edx,%edi
+ 38a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 390:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 391:	39 f8                	cmp    %edi,%eax
+ 393:	75 fb                	jne    390 <memmove+0x20>
+  return vdst;
+}
+ 395:	5e                   	pop    %esi
+ 396:	89 d0                	mov    %edx,%eax
+ 398:	5f                   	pop    %edi
+ 399:	5d                   	pop    %ebp
+ 39a:	c3                   	ret    
+
+0000039b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 39b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <exit>:
+SYSCALL(exit)
+ 3a3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <wait>:
+SYSCALL(wait)
+ 3ab:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <pipe>:
+SYSCALL(pipe)
+ 3b3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <read>:
+SYSCALL(read)
+ 3bb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <write>:
+SYSCALL(write)
+ 3c3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <close>:
+SYSCALL(close)
+ 3cb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <kill>:
+SYSCALL(kill)
+ 3d3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <exec>:
+SYSCALL(exec)
+ 3db:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <open>:
+SYSCALL(open)
+ 3e3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <mknod>:
+SYSCALL(mknod)
+ 3eb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <unlink>:
+SYSCALL(unlink)
+ 3f3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <fstat>:
+SYSCALL(fstat)
+ 3fb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <link>:
+SYSCALL(link)
+ 403:	b8 13 00 00 00       	mov    $0x13,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <mkdir>:
+SYSCALL(mkdir)
+ 40b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <chdir>:
+SYSCALL(chdir)
+ 413:	b8 09 00 00 00       	mov    $0x9,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <dup>:
+SYSCALL(dup)
+ 41b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <getpid>:
+SYSCALL(getpid)
+ 423:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <sbrk>:
+SYSCALL(sbrk)
+ 42b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <sleep>:
+SYSCALL(sleep)
+ 433:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <uptime>:
+SYSCALL(uptime)
+ 43b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <getNumProc>:
+SYSCALL(getNumProc)
+ 443:	b8 16 00 00 00       	mov    $0x16,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 44b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+
+00000453 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 453:	b8 18 00 00 00       	mov    $0x18,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+
+0000045b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 45b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 460:	cd 40                	int    $0x40
+ 462:	c3                   	ret    
+
+00000463 <get_burst_time>:
+ 463:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 468:	cd 40                	int    $0x40
+ 46a:	c3                   	ret    
+ 46b:	66 90                	xchg   %ax,%ax
+ 46d:	66 90                	xchg   %ax,%ax
+ 46f:	90                   	nop
+
+00000470 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 470:	55                   	push   %ebp
+ 471:	89 e5                	mov    %esp,%ebp
+ 473:	57                   	push   %edi
+ 474:	56                   	push   %esi
+ 475:	53                   	push   %ebx
+ 476:	83 ec 3c             	sub    $0x3c,%esp
+ 479:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 47c:	89 d1                	mov    %edx,%ecx
+{
+ 47e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 481:	85 d2                	test   %edx,%edx
+ 483:	0f 89 7f 00 00 00    	jns    508 <printint+0x98>
+ 489:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 48d:	74 79                	je     508 <printint+0x98>
+    neg = 1;
+ 48f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 496:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 498:	31 db                	xor    %ebx,%ebx
+ 49a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 49d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 4a0:	89 c8                	mov    %ecx,%eax
+ 4a2:	31 d2                	xor    %edx,%edx
+ 4a4:	89 cf                	mov    %ecx,%edi
+ 4a6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 4a9:	0f b6 92 b4 08 00 00 	movzbl 0x8b4(%edx),%edx
+ 4b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 4b3:	89 d8                	mov    %ebx,%eax
+ 4b5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 4b8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 4bb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 4be:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 4c1:	76 dd                	jbe    4a0 <printint+0x30>
+  if(neg)
+ 4c3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 4c6:	85 c9                	test   %ecx,%ecx
+ 4c8:	74 0c                	je     4d6 <printint+0x66>
+    buf[i++] = '-';
+ 4ca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 4cf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 4d1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 4d6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 4d9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4dd:	eb 07                	jmp    4e6 <printint+0x76>
+ 4df:	90                   	nop
+ 4e0:	0f b6 13             	movzbl (%ebx),%edx
+ 4e3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 4e6:	83 ec 04             	sub    $0x4,%esp
+ 4e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4ec:	6a 01                	push   $0x1
+ 4ee:	56                   	push   %esi
+ 4ef:	57                   	push   %edi
+ 4f0:	e8 ce fe ff ff       	call   3c3 <write>
+  while(--i >= 0)
+ 4f5:	83 c4 10             	add    $0x10,%esp
+ 4f8:	39 de                	cmp    %ebx,%esi
+ 4fa:	75 e4                	jne    4e0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 4fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ff:	5b                   	pop    %ebx
+ 500:	5e                   	pop    %esi
+ 501:	5f                   	pop    %edi
+ 502:	5d                   	pop    %ebp
+ 503:	c3                   	ret    
+ 504:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 508:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 50f:	eb 87                	jmp    498 <printint+0x28>
+ 511:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 518:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 51f:	90                   	nop
+
+00000520 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 520:	f3 0f 1e fb          	endbr32 
+ 524:	55                   	push   %ebp
+ 525:	89 e5                	mov    %esp,%ebp
+ 527:	57                   	push   %edi
+ 528:	56                   	push   %esi
+ 529:	53                   	push   %ebx
+ 52a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 52d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 530:	0f b6 1e             	movzbl (%esi),%ebx
+ 533:	84 db                	test   %bl,%bl
+ 535:	0f 84 b4 00 00 00    	je     5ef <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 53b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 53e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 541:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 544:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 546:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 549:	eb 33                	jmp    57e <printf+0x5e>
+ 54b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 54f:	90                   	nop
+ 550:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 553:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 558:	83 f8 25             	cmp    $0x25,%eax
+ 55b:	74 17                	je     574 <printf+0x54>
+  write(fd, &c, 1);
+ 55d:	83 ec 04             	sub    $0x4,%esp
+ 560:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 563:	6a 01                	push   $0x1
+ 565:	57                   	push   %edi
+ 566:	ff 75 08             	pushl  0x8(%ebp)
+ 569:	e8 55 fe ff ff       	call   3c3 <write>
+ 56e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 571:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 574:	0f b6 1e             	movzbl (%esi),%ebx
+ 577:	83 c6 01             	add    $0x1,%esi
+ 57a:	84 db                	test   %bl,%bl
+ 57c:	74 71                	je     5ef <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 57e:	0f be cb             	movsbl %bl,%ecx
+ 581:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 584:	85 d2                	test   %edx,%edx
+ 586:	74 c8                	je     550 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 588:	83 fa 25             	cmp    $0x25,%edx
+ 58b:	75 e7                	jne    574 <printf+0x54>
+      if(c == 'd'){
+ 58d:	83 f8 64             	cmp    $0x64,%eax
+ 590:	0f 84 9a 00 00 00    	je     630 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 596:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 59c:	83 f9 70             	cmp    $0x70,%ecx
+ 59f:	74 5f                	je     600 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 5a1:	83 f8 73             	cmp    $0x73,%eax
+ 5a4:	0f 84 d6 00 00 00    	je     680 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 5aa:	83 f8 63             	cmp    $0x63,%eax
+ 5ad:	0f 84 8d 00 00 00    	je     640 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 5b3:	83 f8 25             	cmp    $0x25,%eax
+ 5b6:	0f 84 b4 00 00 00    	je     670 <printf+0x150>
+  write(fd, &c, 1);
+ 5bc:	83 ec 04             	sub    $0x4,%esp
+ 5bf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5c3:	6a 01                	push   $0x1
+ 5c5:	57                   	push   %edi
+ 5c6:	ff 75 08             	pushl  0x8(%ebp)
+ 5c9:	e8 f5 fd ff ff       	call   3c3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 5ce:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5d1:	83 c4 0c             	add    $0xc,%esp
+ 5d4:	6a 01                	push   $0x1
+ 5d6:	83 c6 01             	add    $0x1,%esi
+ 5d9:	57                   	push   %edi
+ 5da:	ff 75 08             	pushl  0x8(%ebp)
+ 5dd:	e8 e1 fd ff ff       	call   3c3 <write>
+  for(i = 0; fmt[i]; i++){
+ 5e2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 5e6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 5e9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 5eb:	84 db                	test   %bl,%bl
+ 5ed:	75 8f                	jne    57e <printf+0x5e>
+    }
+  }
+}
+ 5ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5f2:	5b                   	pop    %ebx
+ 5f3:	5e                   	pop    %esi
+ 5f4:	5f                   	pop    %edi
+ 5f5:	5d                   	pop    %ebp
+ 5f6:	c3                   	ret    
+ 5f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5fe:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 600:	83 ec 0c             	sub    $0xc,%esp
+ 603:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 608:	6a 00                	push   $0x0
+ 60a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 60d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 610:	8b 13                	mov    (%ebx),%edx
+ 612:	e8 59 fe ff ff       	call   470 <printint>
+        ap++;
+ 617:	89 d8                	mov    %ebx,%eax
+ 619:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 61c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 61e:	83 c0 04             	add    $0x4,%eax
+ 621:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 624:	e9 4b ff ff ff       	jmp    574 <printf+0x54>
+ 629:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 630:	83 ec 0c             	sub    $0xc,%esp
+ 633:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 638:	6a 01                	push   $0x1
+ 63a:	eb ce                	jmp    60a <printf+0xea>
+ 63c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 640:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 643:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 646:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 648:	6a 01                	push   $0x1
+        ap++;
+ 64a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 64d:	57                   	push   %edi
+ 64e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 651:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 654:	e8 6a fd ff ff       	call   3c3 <write>
+        ap++;
+ 659:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 65c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 65f:	31 d2                	xor    %edx,%edx
+ 661:	e9 0e ff ff ff       	jmp    574 <printf+0x54>
+ 666:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 66d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 670:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 673:	83 ec 04             	sub    $0x4,%esp
+ 676:	e9 59 ff ff ff       	jmp    5d4 <printf+0xb4>
+ 67b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 67f:	90                   	nop
+        s = (char*)*ap;
+ 680:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 683:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 685:	83 c0 04             	add    $0x4,%eax
+ 688:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 68b:	85 db                	test   %ebx,%ebx
+ 68d:	74 17                	je     6a6 <printf+0x186>
+        while(*s != 0){
+ 68f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 692:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 694:	84 c0                	test   %al,%al
+ 696:	0f 84 d8 fe ff ff    	je     574 <printf+0x54>
+ 69c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 69f:	89 de                	mov    %ebx,%esi
+ 6a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6a4:	eb 1a                	jmp    6c0 <printf+0x1a0>
+          s = "(null)";
+ 6a6:	bb ab 08 00 00       	mov    $0x8ab,%ebx
+        while(*s != 0){
+ 6ab:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 6ae:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6b3:	89 de                	mov    %ebx,%esi
+ 6b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6bf:	90                   	nop
+  write(fd, &c, 1);
+ 6c0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 6c3:	83 c6 01             	add    $0x1,%esi
+ 6c6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6c9:	6a 01                	push   $0x1
+ 6cb:	57                   	push   %edi
+ 6cc:	53                   	push   %ebx
+ 6cd:	e8 f1 fc ff ff       	call   3c3 <write>
+        while(*s != 0){
+ 6d2:	0f b6 06             	movzbl (%esi),%eax
+ 6d5:	83 c4 10             	add    $0x10,%esp
+ 6d8:	84 c0                	test   %al,%al
+ 6da:	75 e4                	jne    6c0 <printf+0x1a0>
+ 6dc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 6df:	31 d2                	xor    %edx,%edx
+ 6e1:	e9 8e fe ff ff       	jmp    574 <printf+0x54>
+ 6e6:	66 90                	xchg   %ax,%ax
+ 6e8:	66 90                	xchg   %ax,%ax
+ 6ea:	66 90                	xchg   %ax,%ax
+ 6ec:	66 90                	xchg   %ax,%ax
+ 6ee:	66 90                	xchg   %ax,%ax
+
+000006f0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6f0:	f3 0f 1e fb          	endbr32 
+ 6f4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6f5:	a1 6c 0b 00 00       	mov    0xb6c,%eax
+{
+ 6fa:	89 e5                	mov    %esp,%ebp
+ 6fc:	57                   	push   %edi
+ 6fd:	56                   	push   %esi
+ 6fe:	53                   	push   %ebx
+ 6ff:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 702:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 704:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 707:	39 c8                	cmp    %ecx,%eax
+ 709:	73 15                	jae    720 <free+0x30>
+ 70b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 70f:	90                   	nop
+ 710:	39 d1                	cmp    %edx,%ecx
+ 712:	72 14                	jb     728 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 714:	39 d0                	cmp    %edx,%eax
+ 716:	73 10                	jae    728 <free+0x38>
+{
+ 718:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 71a:	8b 10                	mov    (%eax),%edx
+ 71c:	39 c8                	cmp    %ecx,%eax
+ 71e:	72 f0                	jb     710 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 720:	39 d0                	cmp    %edx,%eax
+ 722:	72 f4                	jb     718 <free+0x28>
+ 724:	39 d1                	cmp    %edx,%ecx
+ 726:	73 f0                	jae    718 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 728:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 72b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 72e:	39 fa                	cmp    %edi,%edx
+ 730:	74 1e                	je     750 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 732:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 735:	8b 50 04             	mov    0x4(%eax),%edx
+ 738:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 73b:	39 f1                	cmp    %esi,%ecx
+ 73d:	74 28                	je     767 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 73f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 741:	5b                   	pop    %ebx
+  freep = p;
+ 742:	a3 6c 0b 00 00       	mov    %eax,0xb6c
+}
+ 747:	5e                   	pop    %esi
+ 748:	5f                   	pop    %edi
+ 749:	5d                   	pop    %ebp
+ 74a:	c3                   	ret    
+ 74b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 74f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 750:	03 72 04             	add    0x4(%edx),%esi
+ 753:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 756:	8b 10                	mov    (%eax),%edx
+ 758:	8b 12                	mov    (%edx),%edx
+ 75a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 75d:	8b 50 04             	mov    0x4(%eax),%edx
+ 760:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 763:	39 f1                	cmp    %esi,%ecx
+ 765:	75 d8                	jne    73f <free+0x4f>
+    p->s.size += bp->s.size;
+ 767:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 76a:	a3 6c 0b 00 00       	mov    %eax,0xb6c
+    p->s.size += bp->s.size;
+ 76f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 772:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 775:	89 10                	mov    %edx,(%eax)
+}
+ 777:	5b                   	pop    %ebx
+ 778:	5e                   	pop    %esi
+ 779:	5f                   	pop    %edi
+ 77a:	5d                   	pop    %ebp
+ 77b:	c3                   	ret    
+ 77c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000780 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 780:	f3 0f 1e fb          	endbr32 
+ 784:	55                   	push   %ebp
+ 785:	89 e5                	mov    %esp,%ebp
+ 787:	57                   	push   %edi
+ 788:	56                   	push   %esi
+ 789:	53                   	push   %ebx
+ 78a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 78d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 790:	8b 3d 6c 0b 00 00    	mov    0xb6c,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 796:	8d 70 07             	lea    0x7(%eax),%esi
+ 799:	c1 ee 03             	shr    $0x3,%esi
+ 79c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 79f:	85 ff                	test   %edi,%edi
+ 7a1:	0f 84 a9 00 00 00    	je     850 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 7a9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7ac:	39 f1                	cmp    %esi,%ecx
+ 7ae:	73 6d                	jae    81d <malloc+0x9d>
+ 7b0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 7b6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 7bb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 7be:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 7c5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 7c8:	eb 17                	jmp    7e1 <malloc+0x61>
+ 7ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7d0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 7d2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 7d5:	39 f1                	cmp    %esi,%ecx
+ 7d7:	73 4f                	jae    828 <malloc+0xa8>
+ 7d9:	8b 3d 6c 0b 00 00    	mov    0xb6c,%edi
+ 7df:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7e1:	39 c7                	cmp    %eax,%edi
+ 7e3:	75 eb                	jne    7d0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 7e5:	83 ec 0c             	sub    $0xc,%esp
+ 7e8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 7eb:	e8 3b fc ff ff       	call   42b <sbrk>
+  if(p == (char*)-1)
+ 7f0:	83 c4 10             	add    $0x10,%esp
+ 7f3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7f6:	74 1b                	je     813 <malloc+0x93>
+  hp->s.size = nu;
+ 7f8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7fb:	83 ec 0c             	sub    $0xc,%esp
+ 7fe:	83 c0 08             	add    $0x8,%eax
+ 801:	50                   	push   %eax
+ 802:	e8 e9 fe ff ff       	call   6f0 <free>
+  return freep;
+ 807:	a1 6c 0b 00 00       	mov    0xb6c,%eax
+      if((p = morecore(nunits)) == 0)
+ 80c:	83 c4 10             	add    $0x10,%esp
+ 80f:	85 c0                	test   %eax,%eax
+ 811:	75 bd                	jne    7d0 <malloc+0x50>
+        return 0;
+  }
+}
+ 813:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 816:	31 c0                	xor    %eax,%eax
+}
+ 818:	5b                   	pop    %ebx
+ 819:	5e                   	pop    %esi
+ 81a:	5f                   	pop    %edi
+ 81b:	5d                   	pop    %ebp
+ 81c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 81d:	89 c2                	mov    %eax,%edx
+ 81f:	89 f8                	mov    %edi,%eax
+ 821:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 828:	39 ce                	cmp    %ecx,%esi
+ 82a:	74 54                	je     880 <malloc+0x100>
+        p->s.size -= nunits;
+ 82c:	29 f1                	sub    %esi,%ecx
+ 82e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 831:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 834:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 837:	a3 6c 0b 00 00       	mov    %eax,0xb6c
+}
+ 83c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 83f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 842:	5b                   	pop    %ebx
+ 843:	5e                   	pop    %esi
+ 844:	5f                   	pop    %edi
+ 845:	5d                   	pop    %ebp
+ 846:	c3                   	ret    
+ 847:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 84e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 850:	c7 05 6c 0b 00 00 70 	movl   $0xb70,0xb6c
+ 857:	0b 00 00 
+    base.s.size = 0;
+ 85a:	bf 70 0b 00 00       	mov    $0xb70,%edi
+    base.s.ptr = freep = prevp = &base;
+ 85f:	c7 05 70 0b 00 00 70 	movl   $0xb70,0xb70
+ 866:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 869:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 86b:	c7 05 74 0b 00 00 00 	movl   $0x0,0xb74
+ 872:	00 00 00 
+    if(p->s.size >= nunits){
+ 875:	e9 36 ff ff ff       	jmp    7b0 <malloc+0x30>
+ 87a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 880:	8b 0a                	mov    (%edx),%ecx
+ 882:	89 08                	mov    %ecx,(%eax)
+ 884:	eb b1                	jmp    837 <malloc+0xb7>
diff -ruN xv6-public/stressfs.d xv6-new/stressfs.d
--- xv6-public/stressfs.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/stressfs.d	2022-10-07 22:43:43.831886847 +0530
@@ -0,0 +1,2 @@
+stressfs.o: stressfs.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ fs.h fcntl.h
Binary files xv6-public/stressfs.o and xv6-new/stressfs.o differ
diff -ruN xv6-public/stressfs.sym xv6-new/stressfs.sym
--- xv6-public/stressfs.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/stressfs.sym	2022-10-07 22:43:43.831886847 +0530
@@ -0,0 +1,62 @@
+00000000 .text
+00000888 .rodata
+000008c8 .eh_frame
+00000b6c .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 stressfs.c
+00000000 ulib.c
+00000000 printf.c
+00000470 printint
+000008b4 digits.1096
+00000000 umalloc.c
+00000b6c freep
+00000b70 base
+00000140 strcpy
+00000520 printf
+00000370 memmove
+000003eb mknod
+00000260 gets
+00000423 getpid
+00000780 malloc
+00000433 sleep
+00000463 get_burst_time
+000003b3 pipe
+000003c3 write
+000003fb fstat
+000003d3 kill
+00000413 chdir
+000003db exec
+000003ab wait
+000003bb read
+000003f3 unlink
+0000039b fork
+0000042b sbrk
+0000043b uptime
+00000b6c __bss_start
+00000200 memset
+00000000 main
+0000045b set_burst_time
+00000170 strcmp
+0000041b dup
+0000044b getMaxPid
+00000443 getNumProc
+00000453 getProcInfo
+000002e0 stat
+00000b6c _edata
+00000b78 _end
+00000403 link
+000003a3 exit
+00000330 atoi
+000001c0 strlen
+000003e3 open
+00000220 strchr
+0000040b mkdir
+000003cb close
+000006f0 free
diff -ruN xv6-public/syscall.c xv6-new/syscall.c
--- xv6-public/syscall.c	2022-10-07 22:44:57.841887896 +0530
+++ xv6-new/syscall.c	2022-10-05 11:33:30.733733100 +0530
@@ -103,6 +103,11 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_getNumProc(void);
+extern int sys_getMaxPid(void);
+extern int sys_getProcInfo(void);
+extern int sys_set_burst_time(void);
+extern int sys_get_burst_time(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +131,11 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getNumProc] sys_getNumProc,
+[SYS_getMaxPid] sys_getMaxPid,
+[SYS_getProcInfo] sys_getProcInfo,
+[SYS_set_burst_time] sys_set_burst_time,
+[SYS_get_burst_time] sys_get_burst_time,
 };
 
 void
diff -ruN xv6-public/syscall.h xv6-new/syscall.h
--- xv6-public/syscall.h	2022-10-07 22:44:57.841887896 +0530
+++ xv6-new/syscall.h	2022-10-05 11:33:00.463732600 +0530
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getNumProc 22
+#define SYS_getMaxPid 23
+#define SYS_getProcInfo 24 
+#define SYS_set_burst_time 25
+#define SYS_get_burst_time 26
\ No newline at end of file
Binary files xv6-public/syscall.o and xv6-new/syscall.o differ
Binary files xv6-public/sysfile.o and xv6-new/sysfile.o differ
diff -ruN xv6-public/sysproc.c xv6-new/sysproc.c
--- xv6-public/sysproc.c	2022-10-07 22:44:57.841887896 +0530
+++ xv6-new/sysproc.c	2022-10-05 11:32:35.643732300 +0530
@@ -89,3 +89,38 @@
   release(&tickslock);
   return xticks;
 }
+
+
+
+int sys_getNumProc(void){
+  return getNumProc();
+}
+
+int sys_getMaxPid(void){
+  return getMaxPid();
+}
+
+int sys_getProcInfo(void){
+  int pid;
+  struct processInfo *procInfo;
+
+  argint(0,&pid);
+  argptr(1, (char**) &procInfo, sizeof(procInfo));
+
+  return getProcInfo(pid, (struct processInfo *) procInfo);
+}
+
+int sys_set_burst_time(void){
+  int n;
+
+  if(argint(0, &n) < 0){
+    return -1;
+  }
+
+  return set_burst_time(n);
+}
+
+int sys_get_burst_time(void){
+  return get_burst_time();
+}
+
Binary files xv6-public/sysproc.o and xv6-new/sysproc.o differ
diff -ruN xv6-public/test1.asm xv6-new/test1.asm
--- xv6-public/test1.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/test1.asm	2022-10-07 22:43:44.791886860 +0530
@@ -0,0 +1,1571 @@
+
+_test1:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+        data[j % 1000] = 0;
+}
+
+
+int main(int argc, char *argv[])    
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	53                   	push   %ebx
+  14:	51                   	push   %ecx
+  15:	83 ec 28             	sub    $0x28,%esp
+    if (argc < 2)
+  18:	83 39 01             	cmpl   $0x1,(%ecx)
+{
+  1b:	8b 41 04             	mov    0x4(%ecx),%eax
+    if (argc < 2)
+  1e:	7e 3f                	jle    5f <main+0x5f>
+    {
+        printf(1, "Incorrect Format\n\nInput Format : test<test-case-number> <number-of-child-processes>\nE.g. : test1 10\n");
+        exit();
+    }
+    int N = atoi(argv[1]);
+  20:	83 ec 0c             	sub    $0xc,%esp
+  23:	ff 70 04             	pushl  0x4(%eax)
+  26:	e8 35 05 00 00       	call   560 <atoi>
+
+    int pids[N];
+  2b:	83 c4 10             	add    $0x10,%esp
+    int N = atoi(argv[1]);
+  2e:	89 45 cc             	mov    %eax,-0x34(%ebp)
+    int pids[N];
+  31:	8d 04 85 0f 00 00 00 	lea    0xf(,%eax,4),%eax
+  38:	89 e6                	mov    %esp,%esi
+  3a:	89 c1                	mov    %eax,%ecx
+  3c:	89 c2                	mov    %eax,%edx
+  3e:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
+  44:	83 e2 f0             	and    $0xfffffff0,%edx
+  47:	29 ce                	sub    %ecx,%esi
+  49:	89 f1                	mov    %esi,%ecx
+  4b:	39 cc                	cmp    %ecx,%esp
+  4d:	74 23                	je     72 <main+0x72>
+  4f:	81 ec 00 10 00 00    	sub    $0x1000,%esp
+  55:	83 8c 24 fc 0f 00 00 	orl    $0x0,0xffc(%esp)
+  5c:	00 
+  5d:	eb ec                	jmp    4b <main+0x4b>
+        printf(1, "Incorrect Format\n\nInput Format : test<test-case-number> <number-of-child-processes>\nE.g. : test1 10\n");
+  5f:	50                   	push   %eax
+  60:	50                   	push   %eax
+  61:	68 b8 0a 00 00       	push   $0xab8
+  66:	6a 01                	push   $0x1
+  68:	e8 e3 06 00 00       	call   750 <printf>
+        exit();
+  6d:	e8 61 05 00 00       	call   5d3 <exit>
+    int pids[N];
+  72:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
+  78:	29 d4                	sub    %edx,%esp
+  7a:	85 d2                	test   %edx,%edx
+  7c:	74 05                	je     83 <main+0x83>
+  7e:	83 4c 14 fc 00       	orl    $0x0,-0x4(%esp,%edx,1)
+    int return_order_of_procs[N];
+  83:	89 c1                	mov    %eax,%ecx
+  85:	89 e6                	mov    %esp,%esi
+    int pids[N];
+  87:	89 65 d0             	mov    %esp,-0x30(%ebp)
+    int return_order_of_procs[N];
+  8a:	89 c2                	mov    %eax,%edx
+  8c:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
+  92:	83 e2 f0             	and    $0xfffffff0,%edx
+  95:	29 ce                	sub    %ecx,%esi
+  97:	89 f1                	mov    %esi,%ecx
+  99:	39 cc                	cmp    %ecx,%esp
+  9b:	74 10                	je     ad <main+0xad>
+  9d:	81 ec 00 10 00 00    	sub    $0x1000,%esp
+  a3:	83 8c 24 fc 0f 00 00 	orl    $0x0,0xffc(%esp)
+  aa:	00 
+  ab:	eb ec                	jmp    99 <main+0x99>
+  ad:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
+  b3:	29 d4                	sub    %edx,%esp
+  b5:	85 d2                	test   %edx,%edx
+  b7:	75 27                	jne    e0 <main+0xe0>
+    int burstTimes[N];
+  b9:	89 c2                	mov    %eax,%edx
+  bb:	89 e6                	mov    %esp,%esi
+  bd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+    int return_order_of_procs[N];
+  c2:	89 65 c8             	mov    %esp,-0x38(%ebp)
+    int burstTimes[N];
+  c5:	29 c6                	sub    %eax,%esi
+  c7:	83 e2 f0             	and    $0xfffffff0,%edx
+  ca:	89 f0                	mov    %esi,%eax
+  cc:	39 c4                	cmp    %eax,%esp
+  ce:	74 17                	je     e7 <main+0xe7>
+  d0:	81 ec 00 10 00 00    	sub    $0x1000,%esp
+  d6:	83 8c 24 fc 0f 00 00 	orl    $0x0,0xffc(%esp)
+  dd:	00 
+  de:	eb ec                	jmp    cc <main+0xcc>
+    int return_order_of_procs[N];
+  e0:	83 4c 14 fc 00       	orl    $0x0,-0x4(%esp,%edx,1)
+  e5:	eb d2                	jmp    b9 <main+0xb9>
+    int burstTimes[N];
+  e7:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
+  ed:	29 d4                	sub    %edx,%esp
+  ef:	85 d2                	test   %edx,%edx
+  f1:	74 05                	je     f8 <main+0xf8>
+  f3:	83 4c 14 fc 00       	orl    $0x0,-0x4(%esp,%edx,1)
+  f8:	89 65 d4             	mov    %esp,-0x2c(%ebp)
+    set_burst_time(2);
+  fb:	83 ec 0c             	sub    $0xc,%esp
+  fe:	6a 02                	push   $0x2
+ 100:	e8 86 05 00 00       	call   68b <set_burst_time>
+    printf(1,"Test Case #1 : Random burst times of Child Processes\n");
+ 105:	5f                   	pop    %edi
+ 106:	58                   	pop    %eax
+ 107:	68 20 0b 00 00       	push   $0xb20
+ 10c:	6a 01                	push   $0x1
+ 10e:	e8 3d 06 00 00       	call   750 <printf>
+    printf(1, "Burst times of parent process = %d\n\n", get_burst_time());
+ 113:	e8 7b 05 00 00       	call   693 <get_burst_time>
+ 118:	83 c4 0c             	add    $0xc,%esp
+ 11b:	50                   	push   %eax
+ 11c:	68 58 0b 00 00       	push   $0xb58
+ 121:	6a 01                	push   $0x1
+ 123:	e8 28 06 00 00       	call   750 <printf>
+    int x0 = 3,a = 5,b = 4,m = 17;
+    int first_child_process_pid;
+    for (int i = 0; i < N; i++)
+ 128:	83 c4 10             	add    $0x10,%esp
+ 12b:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+ 12f:	0f 8e 89 01 00 00    	jle    2be <main+0x2be>
+    int x0 = 3,a = 5,b = 4,m = 17;
+ 135:	ba 03 00 00 00       	mov    $0x3,%edx
+    for (int i = 0; i < N; i++)
+ 13a:	31 f6                	xor    %esi,%esi
+ 13c:	89 d7                	mov    %edx,%edi
+ 13e:	eb 28                	jmp    168 <main+0x168>
+            delay();
+            getProcInfo(getpid(),&info);
+	        printf(1,"After Execution ends : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches); 
+            exit();
+        }
+        else if (newProcPID > 0)
+ 140:	0f 8e b6 00 00 00    	jle    1fc <main+0x1fc>
+        {
+            if(i == 0){
+                first_child_process_pid = newProcPID;
+            }
+            pids[i] = newProcPID;
+ 146:	8b 4d d0             	mov    -0x30(%ebp),%ecx
+            if(i == 0){
+ 149:	85 f6                	test   %esi,%esi
+ 14b:	0f 44 d8             	cmove  %eax,%ebx
+            pids[i] = newProcPID;
+ 14e:	89 04 b1             	mov    %eax,(%ecx,%esi,4)
+            burstTimes[i] = x0+3;
+ 151:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 154:	8d 47 03             	lea    0x3(%edi),%eax
+ 157:	89 04 b1             	mov    %eax,(%ecx,%esi,4)
+    for (int i = 0; i < N; i++)
+ 15a:	8d 46 01             	lea    0x1(%esi),%eax
+ 15d:	39 45 cc             	cmp    %eax,-0x34(%ebp)
+ 160:	0f 84 a9 00 00 00    	je     20f <main+0x20f>
+ 166:	89 c6                	mov    %eax,%esi
+        x0 = (a*x0+b)%m;
+ 168:	8d 4c bf 04          	lea    0x4(%edi,%edi,4),%ecx
+ 16c:	b8 79 78 78 78       	mov    $0x78787879,%eax
+ 171:	f7 e9                	imul   %ecx
+ 173:	89 c8                	mov    %ecx,%eax
+ 175:	c1 f8 1f             	sar    $0x1f,%eax
+ 178:	c1 fa 03             	sar    $0x3,%edx
+ 17b:	29 c2                	sub    %eax,%edx
+ 17d:	89 d0                	mov    %edx,%eax
+ 17f:	c1 e0 04             	shl    $0x4,%eax
+ 182:	8d 14 10             	lea    (%eax,%edx,1),%edx
+ 185:	29 d1                	sub    %edx,%ecx
+ 187:	89 cf                	mov    %ecx,%edi
+        int newProcPID = fork();
+ 189:	e8 3d 04 00 00       	call   5cb <fork>
+        if (newProcPID == 0)
+ 18e:	85 c0                	test   %eax,%eax
+ 190:	75 ae                	jne    140 <main+0x140>
+	        getProcInfo(getpid(),&info);
+ 192:	8d 5d dc             	lea    -0x24(%ebp),%ebx
+ 195:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 198:	e8 b6 04 00 00       	call   653 <getpid>
+ 19d:	52                   	push   %edx
+ 19e:	52                   	push   %edx
+ 19f:	53                   	push   %ebx
+ 1a0:	50                   	push   %eax
+ 1a1:	e8 dd 04 00 00       	call   683 <getProcInfo>
+	        printf(1,"Before Execution starts : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches);
+ 1a6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+ 1a9:	e8 a5 04 00 00       	call   653 <getpid>
+ 1ae:	56                   	push   %esi
+ 1af:	50                   	push   %eax
+ 1b0:	68 80 0b 00 00       	push   $0xb80
+ 1b5:	6a 01                	push   $0x1
+ 1b7:	e8 94 05 00 00       	call   750 <printf>
+            set_burst_time(x0+3);
+ 1bc:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 1bf:	83 c4 14             	add    $0x14,%esp
+ 1c2:	83 c2 03             	add    $0x3,%edx
+ 1c5:	52                   	push   %edx
+ 1c6:	e8 c0 04 00 00       	call   68b <set_burst_time>
+            delay();
+ 1cb:	e8 10 01 00 00       	call   2e0 <delay>
+            getProcInfo(getpid(),&info);
+ 1d0:	e8 7e 04 00 00       	call   653 <getpid>
+ 1d5:	59                   	pop    %ecx
+ 1d6:	5e                   	pop    %esi
+ 1d7:	53                   	push   %ebx
+ 1d8:	50                   	push   %eax
+ 1d9:	e8 a5 04 00 00       	call   683 <getProcInfo>
+	        printf(1,"After Execution ends : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches); 
+ 1de:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+ 1e1:	e8 6d 04 00 00       	call   653 <getpid>
+ 1e6:	53                   	push   %ebx
+ 1e7:	50                   	push   %eax
+ 1e8:	68 bc 0b 00 00       	push   $0xbbc
+ 1ed:	6a 01                	push   $0x1
+ 1ef:	e8 5c 05 00 00       	call   750 <printf>
+            exit();
+ 1f4:	83 c4 20             	add    $0x20,%esp
+ 1f7:	e8 d7 03 00 00       	call   5d3 <exit>
+        }
+        else
+        {
+            printf(1, "Error occured while forking \n");
+ 1fc:	50                   	push   %eax
+ 1fd:	50                   	push   %eax
+ 1fe:	68 41 0c 00 00       	push   $0xc41
+ 203:	6a 01                	push   $0x1
+ 205:	e8 46 05 00 00       	call   750 <printf>
+            exit();
+ 20a:	e8 c4 03 00 00       	call   5d3 <exit>
+ 20f:	31 ff                	xor    %edi,%edi
+ 211:	89 5d cc             	mov    %ebx,-0x34(%ebp)
+ 214:	89 fb                	mov    %edi,%ebx
+ 216:	8b 7d c8             	mov    -0x38(%ebp),%edi
+ 219:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        }
+    }
+    
+    for (int i = 0; i < N; i++)
+    {
+        return_order_of_procs[i] = wait();
+ 220:	e8 b6 03 00 00       	call   5db <wait>
+ 225:	89 04 9f             	mov    %eax,(%edi,%ebx,4)
+    for (int i = 0; i < N; i++)
+ 228:	89 d8                	mov    %ebx,%eax
+ 22a:	83 c3 01             	add    $0x1,%ebx
+ 22d:	39 f0                	cmp    %esi,%eax
+ 22f:	75 ef                	jne    220 <main+0x220>
+    }
+
+    printf(1, "\nAll children executed successfully\n");
+ 231:	50                   	push   %eax
+ 232:	8b 5d cc             	mov    -0x34(%ebp),%ebx
+ 235:	31 ff                	xor    %edi,%edi
+ 237:	50                   	push   %eax
+ 238:	68 1c 0c 00 00       	push   $0xc1c
+ 23d:	6a 01                	push   $0x1
+ 23f:	e8 0c 05 00 00       	call   750 <printf>
+    for (int i = 0; i < N; i++)
+ 244:	89 5d cc             	mov    %ebx,-0x34(%ebp)
+    printf(1, "\nAll children executed successfully\n");
+ 247:	83 c4 10             	add    $0x10,%esp
+ 24a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printf(1, "Child %d    pid %d    burst time = %d\n", i, pids[i],burstTimes[i]);
+ 250:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 253:	83 ec 0c             	sub    $0xc,%esp
+ 256:	89 fb                	mov    %edi,%ebx
+ 258:	ff 34 b8             	pushl  (%eax,%edi,4)
+ 25b:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 25e:	ff 34 b8             	pushl  (%eax,%edi,4)
+ 261:	57                   	push   %edi
+    for (int i = 0; i < N; i++)
+ 262:	83 c7 01             	add    $0x1,%edi
+        printf(1, "Child %d    pid %d    burst time = %d\n", i, pids[i],burstTimes[i]);
+ 265:	68 f4 0b 00 00       	push   $0xbf4
+ 26a:	6a 01                	push   $0x1
+ 26c:	e8 df 04 00 00       	call   750 <printf>
+    for (int i = 0; i < N; i++)
+ 271:	83 c4 20             	add    $0x20,%esp
+ 274:	39 f3                	cmp    %esi,%ebx
+ 276:	75 d8                	jne    250 <main+0x250>
+
+    
+    printf(1, "\nChild Proceses Exit order \n");
+ 278:	57                   	push   %edi
+ 279:	8b 5d cc             	mov    -0x34(%ebp),%ebx
+ 27c:	57                   	push   %edi
+ 27d:	31 ff                	xor    %edi,%edi
+ 27f:	68 7b 0c 00 00       	push   $0xc7b
+ 284:	6a 01                	push   $0x1
+ 286:	e8 c5 04 00 00       	call   750 <printf>
+ 28b:	83 c4 10             	add    $0x10,%esp
+ 28e:	66 90                	xchg   %ax,%ax
+    for (int i = 0; i < N; i++)
+        printf(1, "pid %d     burst time = %d\n", return_order_of_procs[i], burstTimes[return_order_of_procs[i]-first_child_process_pid]);
+ 290:	8b 45 c8             	mov    -0x38(%ebp),%eax
+ 293:	8b 14 b8             	mov    (%eax,%edi,4),%edx
+ 296:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 299:	89 d1                	mov    %edx,%ecx
+ 29b:	29 d9                	sub    %ebx,%ecx
+ 29d:	ff 34 88             	pushl  (%eax,%ecx,4)
+ 2a0:	52                   	push   %edx
+ 2a1:	68 5f 0c 00 00       	push   $0xc5f
+ 2a6:	6a 01                	push   $0x1
+ 2a8:	e8 a3 04 00 00       	call   750 <printf>
+    for (int i = 0; i < N; i++)
+ 2ad:	89 fa                	mov    %edi,%edx
+ 2af:	83 c4 10             	add    $0x10,%esp
+ 2b2:	83 c7 01             	add    $0x1,%edi
+ 2b5:	39 f2                	cmp    %esi,%edx
+ 2b7:	75 d7                	jne    290 <main+0x290>
+
+    exit();
+ 2b9:	e8 15 03 00 00       	call   5d3 <exit>
+    printf(1, "\nAll children executed successfully\n");
+ 2be:	50                   	push   %eax
+ 2bf:	50                   	push   %eax
+ 2c0:	68 1c 0c 00 00       	push   $0xc1c
+ 2c5:	6a 01                	push   $0x1
+ 2c7:	e8 84 04 00 00       	call   750 <printf>
+    printf(1, "\nChild Proceses Exit order \n");
+ 2cc:	5a                   	pop    %edx
+ 2cd:	59                   	pop    %ecx
+ 2ce:	68 7b 0c 00 00       	push   $0xc7b
+ 2d3:	6a 01                	push   $0x1
+ 2d5:	e8 76 04 00 00       	call   750 <printf>
+ 2da:	83 c4 10             	add    $0x10,%esp
+ 2dd:	eb da                	jmp    2b9 <main+0x2b9>
+ 2df:	90                   	nop
+
+000002e0 <delay>:
+{
+ 2e0:	f3 0f 1e fb          	endbr32 
+ 2e4:	55                   	push   %ebp
+ 2e5:	89 e5                	mov    %esp,%ebp
+ 2e7:	56                   	push   %esi
+        data[i % 1000] = 0;
+ 2e8:	be d3 4d 62 10       	mov    $0x10624dd3,%esi
+{
+ 2ed:	53                   	push   %ebx
+    int* data = (int*)malloc(1000*sizeof(int));
+ 2ee:	83 ec 0c             	sub    $0xc,%esp
+ 2f1:	68 a0 0f 00 00       	push   $0xfa0
+ 2f6:	e8 b5 06 00 00       	call   9b0 <malloc>
+ 2fb:	83 c4 10             	add    $0x10,%esp
+    for(int i=0;i<100000000;++i)
+ 2fe:	31 c9                	xor    %ecx,%ecx
+    int* data = (int*)malloc(1000*sizeof(int));
+ 300:	89 c3                	mov    %eax,%ebx
+    for(int i=0;i<100000000;++i)
+ 302:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        data[i % 1000] = 0;
+ 308:	89 c8                	mov    %ecx,%eax
+ 30a:	f7 e6                	mul    %esi
+ 30c:	89 c8                	mov    %ecx,%eax
+    for(int i=0;i<100000000;++i)
+ 30e:	83 c1 01             	add    $0x1,%ecx
+        data[i % 1000] = 0;
+ 311:	c1 ea 06             	shr    $0x6,%edx
+ 314:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+ 31a:	29 d0                	sub    %edx,%eax
+ 31c:	c7 04 83 00 00 00 00 	movl   $0x0,(%ebx,%eax,4)
+    for(int i=0;i<100000000;++i)
+ 323:	81 f9 00 e1 f5 05    	cmp    $0x5f5e100,%ecx
+ 329:	75 dd                	jne    308 <delay+0x28>
+    for(int j=0;j<100000000;j++)
+ 32b:	31 c9                	xor    %ecx,%ecx
+        data[j % 1000] = 0;
+ 32d:	be d3 4d 62 10       	mov    $0x10624dd3,%esi
+ 332:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 338:	89 c8                	mov    %ecx,%eax
+ 33a:	f7 e6                	mul    %esi
+ 33c:	89 c8                	mov    %ecx,%eax
+    for(int j=0;j<100000000;j++)
+ 33e:	83 c1 01             	add    $0x1,%ecx
+        data[j % 1000] = 0;
+ 341:	c1 ea 06             	shr    $0x6,%edx
+ 344:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+ 34a:	29 d0                	sub    %edx,%eax
+ 34c:	c7 04 83 00 00 00 00 	movl   $0x0,(%ebx,%eax,4)
+    for(int j=0;j<100000000;j++)
+ 353:	81 f9 00 e1 f5 05    	cmp    $0x5f5e100,%ecx
+ 359:	75 dd                	jne    338 <delay+0x58>
+}
+ 35b:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 35e:	5b                   	pop    %ebx
+ 35f:	5e                   	pop    %esi
+ 360:	5d                   	pop    %ebp
+ 361:	c3                   	ret    
+ 362:	66 90                	xchg   %ax,%ax
+ 364:	66 90                	xchg   %ax,%ax
+ 366:	66 90                	xchg   %ax,%ax
+ 368:	66 90                	xchg   %ax,%ax
+ 36a:	66 90                	xchg   %ax,%ax
+ 36c:	66 90                	xchg   %ax,%ax
+ 36e:	66 90                	xchg   %ax,%ax
+
+00000370 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 370:	f3 0f 1e fb          	endbr32 
+ 374:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 375:	31 c0                	xor    %eax,%eax
+{
+ 377:	89 e5                	mov    %esp,%ebp
+ 379:	53                   	push   %ebx
+ 37a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 37d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 380:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 384:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 387:	83 c0 01             	add    $0x1,%eax
+ 38a:	84 d2                	test   %dl,%dl
+ 38c:	75 f2                	jne    380 <strcpy+0x10>
+    ;
+  return os;
+}
+ 38e:	89 c8                	mov    %ecx,%eax
+ 390:	5b                   	pop    %ebx
+ 391:	5d                   	pop    %ebp
+ 392:	c3                   	ret    
+ 393:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 39a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000003a0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 3a0:	f3 0f 1e fb          	endbr32 
+ 3a4:	55                   	push   %ebp
+ 3a5:	89 e5                	mov    %esp,%ebp
+ 3a7:	53                   	push   %ebx
+ 3a8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 3ab:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 3ae:	0f b6 01             	movzbl (%ecx),%eax
+ 3b1:	0f b6 1a             	movzbl (%edx),%ebx
+ 3b4:	84 c0                	test   %al,%al
+ 3b6:	75 19                	jne    3d1 <strcmp+0x31>
+ 3b8:	eb 26                	jmp    3e0 <strcmp+0x40>
+ 3ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 3c0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 3c4:	83 c1 01             	add    $0x1,%ecx
+ 3c7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 3ca:	0f b6 1a             	movzbl (%edx),%ebx
+ 3cd:	84 c0                	test   %al,%al
+ 3cf:	74 0f                	je     3e0 <strcmp+0x40>
+ 3d1:	38 d8                	cmp    %bl,%al
+ 3d3:	74 eb                	je     3c0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 3d5:	29 d8                	sub    %ebx,%eax
+}
+ 3d7:	5b                   	pop    %ebx
+ 3d8:	5d                   	pop    %ebp
+ 3d9:	c3                   	ret    
+ 3da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 3e0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 3e2:	29 d8                	sub    %ebx,%eax
+}
+ 3e4:	5b                   	pop    %ebx
+ 3e5:	5d                   	pop    %ebp
+ 3e6:	c3                   	ret    
+ 3e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ee:	66 90                	xchg   %ax,%ax
+
+000003f0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 3f0:	f3 0f 1e fb          	endbr32 
+ 3f4:	55                   	push   %ebp
+ 3f5:	89 e5                	mov    %esp,%ebp
+ 3f7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3fa:	80 3a 00             	cmpb   $0x0,(%edx)
+ 3fd:	74 21                	je     420 <strlen+0x30>
+ 3ff:	31 c0                	xor    %eax,%eax
+ 401:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 408:	83 c0 01             	add    $0x1,%eax
+ 40b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 40f:	89 c1                	mov    %eax,%ecx
+ 411:	75 f5                	jne    408 <strlen+0x18>
+    ;
+  return n;
+}
+ 413:	89 c8                	mov    %ecx,%eax
+ 415:	5d                   	pop    %ebp
+ 416:	c3                   	ret    
+ 417:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 41e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 420:	31 c9                	xor    %ecx,%ecx
+}
+ 422:	5d                   	pop    %ebp
+ 423:	89 c8                	mov    %ecx,%eax
+ 425:	c3                   	ret    
+ 426:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 42d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000430 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 430:	f3 0f 1e fb          	endbr32 
+ 434:	55                   	push   %ebp
+ 435:	89 e5                	mov    %esp,%ebp
+ 437:	57                   	push   %edi
+ 438:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 43b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 43e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 441:	89 d7                	mov    %edx,%edi
+ 443:	fc                   	cld    
+ 444:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 446:	89 d0                	mov    %edx,%eax
+ 448:	5f                   	pop    %edi
+ 449:	5d                   	pop    %ebp
+ 44a:	c3                   	ret    
+ 44b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 44f:	90                   	nop
+
+00000450 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 450:	f3 0f 1e fb          	endbr32 
+ 454:	55                   	push   %ebp
+ 455:	89 e5                	mov    %esp,%ebp
+ 457:	8b 45 08             	mov    0x8(%ebp),%eax
+ 45a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 45e:	0f b6 10             	movzbl (%eax),%edx
+ 461:	84 d2                	test   %dl,%dl
+ 463:	75 16                	jne    47b <strchr+0x2b>
+ 465:	eb 21                	jmp    488 <strchr+0x38>
+ 467:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 46e:	66 90                	xchg   %ax,%ax
+ 470:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 474:	83 c0 01             	add    $0x1,%eax
+ 477:	84 d2                	test   %dl,%dl
+ 479:	74 0d                	je     488 <strchr+0x38>
+    if(*s == c)
+ 47b:	38 d1                	cmp    %dl,%cl
+ 47d:	75 f1                	jne    470 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 47f:	5d                   	pop    %ebp
+ 480:	c3                   	ret    
+ 481:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 488:	31 c0                	xor    %eax,%eax
+}
+ 48a:	5d                   	pop    %ebp
+ 48b:	c3                   	ret    
+ 48c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000490 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 490:	f3 0f 1e fb          	endbr32 
+ 494:	55                   	push   %ebp
+ 495:	89 e5                	mov    %esp,%ebp
+ 497:	57                   	push   %edi
+ 498:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 499:	31 f6                	xor    %esi,%esi
+{
+ 49b:	53                   	push   %ebx
+ 49c:	89 f3                	mov    %esi,%ebx
+ 49e:	83 ec 1c             	sub    $0x1c,%esp
+ 4a1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 4a4:	eb 33                	jmp    4d9 <gets+0x49>
+ 4a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ad:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 4b0:	83 ec 04             	sub    $0x4,%esp
+ 4b3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4b6:	6a 01                	push   $0x1
+ 4b8:	50                   	push   %eax
+ 4b9:	6a 00                	push   $0x0
+ 4bb:	e8 2b 01 00 00       	call   5eb <read>
+    if(cc < 1)
+ 4c0:	83 c4 10             	add    $0x10,%esp
+ 4c3:	85 c0                	test   %eax,%eax
+ 4c5:	7e 1c                	jle    4e3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 4c7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 4cb:	83 c7 01             	add    $0x1,%edi
+ 4ce:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 4d1:	3c 0a                	cmp    $0xa,%al
+ 4d3:	74 23                	je     4f8 <gets+0x68>
+ 4d5:	3c 0d                	cmp    $0xd,%al
+ 4d7:	74 1f                	je     4f8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 4d9:	83 c3 01             	add    $0x1,%ebx
+ 4dc:	89 fe                	mov    %edi,%esi
+ 4de:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 4e1:	7c cd                	jl     4b0 <gets+0x20>
+ 4e3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 4e5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 4e8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4eb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ee:	5b                   	pop    %ebx
+ 4ef:	5e                   	pop    %esi
+ 4f0:	5f                   	pop    %edi
+ 4f1:	5d                   	pop    %ebp
+ 4f2:	c3                   	ret    
+ 4f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4f7:	90                   	nop
+ 4f8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4fb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4fe:	01 de                	add    %ebx,%esi
+ 500:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 502:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 505:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 508:	5b                   	pop    %ebx
+ 509:	5e                   	pop    %esi
+ 50a:	5f                   	pop    %edi
+ 50b:	5d                   	pop    %ebp
+ 50c:	c3                   	ret    
+ 50d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000510 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 510:	f3 0f 1e fb          	endbr32 
+ 514:	55                   	push   %ebp
+ 515:	89 e5                	mov    %esp,%ebp
+ 517:	56                   	push   %esi
+ 518:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 519:	83 ec 08             	sub    $0x8,%esp
+ 51c:	6a 00                	push   $0x0
+ 51e:	ff 75 08             	pushl  0x8(%ebp)
+ 521:	e8 ed 00 00 00       	call   613 <open>
+  if(fd < 0)
+ 526:	83 c4 10             	add    $0x10,%esp
+ 529:	85 c0                	test   %eax,%eax
+ 52b:	78 2b                	js     558 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 52d:	83 ec 08             	sub    $0x8,%esp
+ 530:	ff 75 0c             	pushl  0xc(%ebp)
+ 533:	89 c3                	mov    %eax,%ebx
+ 535:	50                   	push   %eax
+ 536:	e8 f0 00 00 00       	call   62b <fstat>
+  close(fd);
+ 53b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 53e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 540:	e8 b6 00 00 00       	call   5fb <close>
+  return r;
+ 545:	83 c4 10             	add    $0x10,%esp
+}
+ 548:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 54b:	89 f0                	mov    %esi,%eax
+ 54d:	5b                   	pop    %ebx
+ 54e:	5e                   	pop    %esi
+ 54f:	5d                   	pop    %ebp
+ 550:	c3                   	ret    
+ 551:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 558:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 55d:	eb e9                	jmp    548 <stat+0x38>
+ 55f:	90                   	nop
+
+00000560 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 560:	f3 0f 1e fb          	endbr32 
+ 564:	55                   	push   %ebp
+ 565:	89 e5                	mov    %esp,%ebp
+ 567:	53                   	push   %ebx
+ 568:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 56b:	0f be 02             	movsbl (%edx),%eax
+ 56e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 571:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 574:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 579:	77 1a                	ja     595 <atoi+0x35>
+ 57b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 57f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 580:	83 c2 01             	add    $0x1,%edx
+ 583:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 586:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 58a:	0f be 02             	movsbl (%edx),%eax
+ 58d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 590:	80 fb 09             	cmp    $0x9,%bl
+ 593:	76 eb                	jbe    580 <atoi+0x20>
+  return n;
+}
+ 595:	89 c8                	mov    %ecx,%eax
+ 597:	5b                   	pop    %ebx
+ 598:	5d                   	pop    %ebp
+ 599:	c3                   	ret    
+ 59a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000005a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 5a0:	f3 0f 1e fb          	endbr32 
+ 5a4:	55                   	push   %ebp
+ 5a5:	89 e5                	mov    %esp,%ebp
+ 5a7:	57                   	push   %edi
+ 5a8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 5ab:	8b 55 08             	mov    0x8(%ebp),%edx
+ 5ae:	56                   	push   %esi
+ 5af:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 5b2:	85 c0                	test   %eax,%eax
+ 5b4:	7e 0f                	jle    5c5 <memmove+0x25>
+ 5b6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 5b8:	89 d7                	mov    %edx,%edi
+ 5ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 5c0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 5c1:	39 f8                	cmp    %edi,%eax
+ 5c3:	75 fb                	jne    5c0 <memmove+0x20>
+  return vdst;
+}
+ 5c5:	5e                   	pop    %esi
+ 5c6:	89 d0                	mov    %edx,%eax
+ 5c8:	5f                   	pop    %edi
+ 5c9:	5d                   	pop    %ebp
+ 5ca:	c3                   	ret    
+
+000005cb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 5cb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 5d0:	cd 40                	int    $0x40
+ 5d2:	c3                   	ret    
+
+000005d3 <exit>:
+SYSCALL(exit)
+ 5d3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 5d8:	cd 40                	int    $0x40
+ 5da:	c3                   	ret    
+
+000005db <wait>:
+SYSCALL(wait)
+ 5db:	b8 03 00 00 00       	mov    $0x3,%eax
+ 5e0:	cd 40                	int    $0x40
+ 5e2:	c3                   	ret    
+
+000005e3 <pipe>:
+SYSCALL(pipe)
+ 5e3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 5e8:	cd 40                	int    $0x40
+ 5ea:	c3                   	ret    
+
+000005eb <read>:
+SYSCALL(read)
+ 5eb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 5f0:	cd 40                	int    $0x40
+ 5f2:	c3                   	ret    
+
+000005f3 <write>:
+SYSCALL(write)
+ 5f3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5f8:	cd 40                	int    $0x40
+ 5fa:	c3                   	ret    
+
+000005fb <close>:
+SYSCALL(close)
+ 5fb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 600:	cd 40                	int    $0x40
+ 602:	c3                   	ret    
+
+00000603 <kill>:
+SYSCALL(kill)
+ 603:	b8 06 00 00 00       	mov    $0x6,%eax
+ 608:	cd 40                	int    $0x40
+ 60a:	c3                   	ret    
+
+0000060b <exec>:
+SYSCALL(exec)
+ 60b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 610:	cd 40                	int    $0x40
+ 612:	c3                   	ret    
+
+00000613 <open>:
+SYSCALL(open)
+ 613:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 618:	cd 40                	int    $0x40
+ 61a:	c3                   	ret    
+
+0000061b <mknod>:
+SYSCALL(mknod)
+ 61b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 620:	cd 40                	int    $0x40
+ 622:	c3                   	ret    
+
+00000623 <unlink>:
+SYSCALL(unlink)
+ 623:	b8 12 00 00 00       	mov    $0x12,%eax
+ 628:	cd 40                	int    $0x40
+ 62a:	c3                   	ret    
+
+0000062b <fstat>:
+SYSCALL(fstat)
+ 62b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 630:	cd 40                	int    $0x40
+ 632:	c3                   	ret    
+
+00000633 <link>:
+SYSCALL(link)
+ 633:	b8 13 00 00 00       	mov    $0x13,%eax
+ 638:	cd 40                	int    $0x40
+ 63a:	c3                   	ret    
+
+0000063b <mkdir>:
+SYSCALL(mkdir)
+ 63b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 640:	cd 40                	int    $0x40
+ 642:	c3                   	ret    
+
+00000643 <chdir>:
+SYSCALL(chdir)
+ 643:	b8 09 00 00 00       	mov    $0x9,%eax
+ 648:	cd 40                	int    $0x40
+ 64a:	c3                   	ret    
+
+0000064b <dup>:
+SYSCALL(dup)
+ 64b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 650:	cd 40                	int    $0x40
+ 652:	c3                   	ret    
+
+00000653 <getpid>:
+SYSCALL(getpid)
+ 653:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 658:	cd 40                	int    $0x40
+ 65a:	c3                   	ret    
+
+0000065b <sbrk>:
+SYSCALL(sbrk)
+ 65b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 660:	cd 40                	int    $0x40
+ 662:	c3                   	ret    
+
+00000663 <sleep>:
+SYSCALL(sleep)
+ 663:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 668:	cd 40                	int    $0x40
+ 66a:	c3                   	ret    
+
+0000066b <uptime>:
+SYSCALL(uptime)
+ 66b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 670:	cd 40                	int    $0x40
+ 672:	c3                   	ret    
+
+00000673 <getNumProc>:
+SYSCALL(getNumProc)
+ 673:	b8 16 00 00 00       	mov    $0x16,%eax
+ 678:	cd 40                	int    $0x40
+ 67a:	c3                   	ret    
+
+0000067b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 67b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 680:	cd 40                	int    $0x40
+ 682:	c3                   	ret    
+
+00000683 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 683:	b8 18 00 00 00       	mov    $0x18,%eax
+ 688:	cd 40                	int    $0x40
+ 68a:	c3                   	ret    
+
+0000068b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 68b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 690:	cd 40                	int    $0x40
+ 692:	c3                   	ret    
+
+00000693 <get_burst_time>:
+ 693:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 698:	cd 40                	int    $0x40
+ 69a:	c3                   	ret    
+ 69b:	66 90                	xchg   %ax,%ax
+ 69d:	66 90                	xchg   %ax,%ax
+ 69f:	90                   	nop
+
+000006a0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 6a0:	55                   	push   %ebp
+ 6a1:	89 e5                	mov    %esp,%ebp
+ 6a3:	57                   	push   %edi
+ 6a4:	56                   	push   %esi
+ 6a5:	53                   	push   %ebx
+ 6a6:	83 ec 3c             	sub    $0x3c,%esp
+ 6a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 6ac:	89 d1                	mov    %edx,%ecx
+{
+ 6ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 6b1:	85 d2                	test   %edx,%edx
+ 6b3:	0f 89 7f 00 00 00    	jns    738 <printint+0x98>
+ 6b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 6bd:	74 79                	je     738 <printint+0x98>
+    neg = 1;
+ 6bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 6c6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 6c8:	31 db                	xor    %ebx,%ebx
+ 6ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 6cd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 6d0:	89 c8                	mov    %ecx,%eax
+ 6d2:	31 d2                	xor    %edx,%edx
+ 6d4:	89 cf                	mov    %ecx,%edi
+ 6d6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 6d9:	0f b6 92 a0 0c 00 00 	movzbl 0xca0(%edx),%edx
+ 6e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 6e3:	89 d8                	mov    %ebx,%eax
+ 6e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 6e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 6eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 6ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 6f1:	76 dd                	jbe    6d0 <printint+0x30>
+  if(neg)
+ 6f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 6f6:	85 c9                	test   %ecx,%ecx
+ 6f8:	74 0c                	je     706 <printint+0x66>
+    buf[i++] = '-';
+ 6fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 6ff:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 701:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 706:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 709:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 70d:	eb 07                	jmp    716 <printint+0x76>
+ 70f:	90                   	nop
+ 710:	0f b6 13             	movzbl (%ebx),%edx
+ 713:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 716:	83 ec 04             	sub    $0x4,%esp
+ 719:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 71c:	6a 01                	push   $0x1
+ 71e:	56                   	push   %esi
+ 71f:	57                   	push   %edi
+ 720:	e8 ce fe ff ff       	call   5f3 <write>
+  while(--i >= 0)
+ 725:	83 c4 10             	add    $0x10,%esp
+ 728:	39 de                	cmp    %ebx,%esi
+ 72a:	75 e4                	jne    710 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 72c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 72f:	5b                   	pop    %ebx
+ 730:	5e                   	pop    %esi
+ 731:	5f                   	pop    %edi
+ 732:	5d                   	pop    %ebp
+ 733:	c3                   	ret    
+ 734:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 738:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 73f:	eb 87                	jmp    6c8 <printint+0x28>
+ 741:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 748:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 74f:	90                   	nop
+
+00000750 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 750:	f3 0f 1e fb          	endbr32 
+ 754:	55                   	push   %ebp
+ 755:	89 e5                	mov    %esp,%ebp
+ 757:	57                   	push   %edi
+ 758:	56                   	push   %esi
+ 759:	53                   	push   %ebx
+ 75a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 75d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 760:	0f b6 1e             	movzbl (%esi),%ebx
+ 763:	84 db                	test   %bl,%bl
+ 765:	0f 84 b4 00 00 00    	je     81f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 76b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 76e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 771:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 774:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 776:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 779:	eb 33                	jmp    7ae <printf+0x5e>
+ 77b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 77f:	90                   	nop
+ 780:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 783:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 788:	83 f8 25             	cmp    $0x25,%eax
+ 78b:	74 17                	je     7a4 <printf+0x54>
+  write(fd, &c, 1);
+ 78d:	83 ec 04             	sub    $0x4,%esp
+ 790:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 793:	6a 01                	push   $0x1
+ 795:	57                   	push   %edi
+ 796:	ff 75 08             	pushl  0x8(%ebp)
+ 799:	e8 55 fe ff ff       	call   5f3 <write>
+ 79e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 7a1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 7a4:	0f b6 1e             	movzbl (%esi),%ebx
+ 7a7:	83 c6 01             	add    $0x1,%esi
+ 7aa:	84 db                	test   %bl,%bl
+ 7ac:	74 71                	je     81f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 7ae:	0f be cb             	movsbl %bl,%ecx
+ 7b1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 7b4:	85 d2                	test   %edx,%edx
+ 7b6:	74 c8                	je     780 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 7b8:	83 fa 25             	cmp    $0x25,%edx
+ 7bb:	75 e7                	jne    7a4 <printf+0x54>
+      if(c == 'd'){
+ 7bd:	83 f8 64             	cmp    $0x64,%eax
+ 7c0:	0f 84 9a 00 00 00    	je     860 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 7c6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 7cc:	83 f9 70             	cmp    $0x70,%ecx
+ 7cf:	74 5f                	je     830 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 7d1:	83 f8 73             	cmp    $0x73,%eax
+ 7d4:	0f 84 d6 00 00 00    	je     8b0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 7da:	83 f8 63             	cmp    $0x63,%eax
+ 7dd:	0f 84 8d 00 00 00    	je     870 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 7e3:	83 f8 25             	cmp    $0x25,%eax
+ 7e6:	0f 84 b4 00 00 00    	je     8a0 <printf+0x150>
+  write(fd, &c, 1);
+ 7ec:	83 ec 04             	sub    $0x4,%esp
+ 7ef:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7f3:	6a 01                	push   $0x1
+ 7f5:	57                   	push   %edi
+ 7f6:	ff 75 08             	pushl  0x8(%ebp)
+ 7f9:	e8 f5 fd ff ff       	call   5f3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 7fe:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 801:	83 c4 0c             	add    $0xc,%esp
+ 804:	6a 01                	push   $0x1
+ 806:	83 c6 01             	add    $0x1,%esi
+ 809:	57                   	push   %edi
+ 80a:	ff 75 08             	pushl  0x8(%ebp)
+ 80d:	e8 e1 fd ff ff       	call   5f3 <write>
+  for(i = 0; fmt[i]; i++){
+ 812:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 816:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 819:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 81b:	84 db                	test   %bl,%bl
+ 81d:	75 8f                	jne    7ae <printf+0x5e>
+    }
+  }
+}
+ 81f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 822:	5b                   	pop    %ebx
+ 823:	5e                   	pop    %esi
+ 824:	5f                   	pop    %edi
+ 825:	5d                   	pop    %ebp
+ 826:	c3                   	ret    
+ 827:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 82e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 830:	83 ec 0c             	sub    $0xc,%esp
+ 833:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 838:	6a 00                	push   $0x0
+ 83a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 83d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 840:	8b 13                	mov    (%ebx),%edx
+ 842:	e8 59 fe ff ff       	call   6a0 <printint>
+        ap++;
+ 847:	89 d8                	mov    %ebx,%eax
+ 849:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 84c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 84e:	83 c0 04             	add    $0x4,%eax
+ 851:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 854:	e9 4b ff ff ff       	jmp    7a4 <printf+0x54>
+ 859:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 860:	83 ec 0c             	sub    $0xc,%esp
+ 863:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 868:	6a 01                	push   $0x1
+ 86a:	eb ce                	jmp    83a <printf+0xea>
+ 86c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 870:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 873:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 876:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 878:	6a 01                	push   $0x1
+        ap++;
+ 87a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 87d:	57                   	push   %edi
+ 87e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 881:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 884:	e8 6a fd ff ff       	call   5f3 <write>
+        ap++;
+ 889:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 88c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 88f:	31 d2                	xor    %edx,%edx
+ 891:	e9 0e ff ff ff       	jmp    7a4 <printf+0x54>
+ 896:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 89d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 8a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 8a3:	83 ec 04             	sub    $0x4,%esp
+ 8a6:	e9 59 ff ff ff       	jmp    804 <printf+0xb4>
+ 8ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8af:	90                   	nop
+        s = (char*)*ap;
+ 8b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 8b3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 8b5:	83 c0 04             	add    $0x4,%eax
+ 8b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 8bb:	85 db                	test   %ebx,%ebx
+ 8bd:	74 17                	je     8d6 <printf+0x186>
+        while(*s != 0){
+ 8bf:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 8c2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 8c4:	84 c0                	test   %al,%al
+ 8c6:	0f 84 d8 fe ff ff    	je     7a4 <printf+0x54>
+ 8cc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 8cf:	89 de                	mov    %ebx,%esi
+ 8d1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8d4:	eb 1a                	jmp    8f0 <printf+0x1a0>
+          s = "(null)";
+ 8d6:	bb 98 0c 00 00       	mov    $0xc98,%ebx
+        while(*s != 0){
+ 8db:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 8de:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8e3:	89 de                	mov    %ebx,%esi
+ 8e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8ef:	90                   	nop
+  write(fd, &c, 1);
+ 8f0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 8f3:	83 c6 01             	add    $0x1,%esi
+ 8f6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 8f9:	6a 01                	push   $0x1
+ 8fb:	57                   	push   %edi
+ 8fc:	53                   	push   %ebx
+ 8fd:	e8 f1 fc ff ff       	call   5f3 <write>
+        while(*s != 0){
+ 902:	0f b6 06             	movzbl (%esi),%eax
+ 905:	83 c4 10             	add    $0x10,%esp
+ 908:	84 c0                	test   %al,%al
+ 90a:	75 e4                	jne    8f0 <printf+0x1a0>
+ 90c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 90f:	31 d2                	xor    %edx,%edx
+ 911:	e9 8e fe ff ff       	jmp    7a4 <printf+0x54>
+ 916:	66 90                	xchg   %ax,%ax
+ 918:	66 90                	xchg   %ax,%ax
+ 91a:	66 90                	xchg   %ax,%ax
+ 91c:	66 90                	xchg   %ax,%ax
+ 91e:	66 90                	xchg   %ax,%ax
+
+00000920 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 920:	f3 0f 1e fb          	endbr32 
+ 924:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 925:	a1 80 0f 00 00       	mov    0xf80,%eax
+{
+ 92a:	89 e5                	mov    %esp,%ebp
+ 92c:	57                   	push   %edi
+ 92d:	56                   	push   %esi
+ 92e:	53                   	push   %ebx
+ 92f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 932:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 934:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 937:	39 c8                	cmp    %ecx,%eax
+ 939:	73 15                	jae    950 <free+0x30>
+ 93b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 93f:	90                   	nop
+ 940:	39 d1                	cmp    %edx,%ecx
+ 942:	72 14                	jb     958 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 944:	39 d0                	cmp    %edx,%eax
+ 946:	73 10                	jae    958 <free+0x38>
+{
+ 948:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 94a:	8b 10                	mov    (%eax),%edx
+ 94c:	39 c8                	cmp    %ecx,%eax
+ 94e:	72 f0                	jb     940 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 950:	39 d0                	cmp    %edx,%eax
+ 952:	72 f4                	jb     948 <free+0x28>
+ 954:	39 d1                	cmp    %edx,%ecx
+ 956:	73 f0                	jae    948 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 958:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 95b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 95e:	39 fa                	cmp    %edi,%edx
+ 960:	74 1e                	je     980 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 962:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 965:	8b 50 04             	mov    0x4(%eax),%edx
+ 968:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 96b:	39 f1                	cmp    %esi,%ecx
+ 96d:	74 28                	je     997 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 96f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 971:	5b                   	pop    %ebx
+  freep = p;
+ 972:	a3 80 0f 00 00       	mov    %eax,0xf80
+}
+ 977:	5e                   	pop    %esi
+ 978:	5f                   	pop    %edi
+ 979:	5d                   	pop    %ebp
+ 97a:	c3                   	ret    
+ 97b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 97f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 980:	03 72 04             	add    0x4(%edx),%esi
+ 983:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 986:	8b 10                	mov    (%eax),%edx
+ 988:	8b 12                	mov    (%edx),%edx
+ 98a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 98d:	8b 50 04             	mov    0x4(%eax),%edx
+ 990:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 993:	39 f1                	cmp    %esi,%ecx
+ 995:	75 d8                	jne    96f <free+0x4f>
+    p->s.size += bp->s.size;
+ 997:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 99a:	a3 80 0f 00 00       	mov    %eax,0xf80
+    p->s.size += bp->s.size;
+ 99f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 9a2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 9a5:	89 10                	mov    %edx,(%eax)
+}
+ 9a7:	5b                   	pop    %ebx
+ 9a8:	5e                   	pop    %esi
+ 9a9:	5f                   	pop    %edi
+ 9aa:	5d                   	pop    %ebp
+ 9ab:	c3                   	ret    
+ 9ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000009b0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 9b0:	f3 0f 1e fb          	endbr32 
+ 9b4:	55                   	push   %ebp
+ 9b5:	89 e5                	mov    %esp,%ebp
+ 9b7:	57                   	push   %edi
+ 9b8:	56                   	push   %esi
+ 9b9:	53                   	push   %ebx
+ 9ba:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 9bd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 9c0:	8b 3d 80 0f 00 00    	mov    0xf80,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 9c6:	8d 70 07             	lea    0x7(%eax),%esi
+ 9c9:	c1 ee 03             	shr    $0x3,%esi
+ 9cc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 9cf:	85 ff                	test   %edi,%edi
+ 9d1:	0f 84 a9 00 00 00    	je     a80 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9d7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 9d9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 9dc:	39 f1                	cmp    %esi,%ecx
+ 9de:	73 6d                	jae    a4d <malloc+0x9d>
+ 9e0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 9e6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 9eb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 9ee:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 9f5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 9f8:	eb 17                	jmp    a11 <malloc+0x61>
+ 9fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a00:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ a02:	8b 4a 04             	mov    0x4(%edx),%ecx
+ a05:	39 f1                	cmp    %esi,%ecx
+ a07:	73 4f                	jae    a58 <malloc+0xa8>
+ a09:	8b 3d 80 0f 00 00    	mov    0xf80,%edi
+ a0f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ a11:	39 c7                	cmp    %eax,%edi
+ a13:	75 eb                	jne    a00 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ a15:	83 ec 0c             	sub    $0xc,%esp
+ a18:	ff 75 e4             	pushl  -0x1c(%ebp)
+ a1b:	e8 3b fc ff ff       	call   65b <sbrk>
+  if(p == (char*)-1)
+ a20:	83 c4 10             	add    $0x10,%esp
+ a23:	83 f8 ff             	cmp    $0xffffffff,%eax
+ a26:	74 1b                	je     a43 <malloc+0x93>
+  hp->s.size = nu;
+ a28:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ a2b:	83 ec 0c             	sub    $0xc,%esp
+ a2e:	83 c0 08             	add    $0x8,%eax
+ a31:	50                   	push   %eax
+ a32:	e8 e9 fe ff ff       	call   920 <free>
+  return freep;
+ a37:	a1 80 0f 00 00       	mov    0xf80,%eax
+      if((p = morecore(nunits)) == 0)
+ a3c:	83 c4 10             	add    $0x10,%esp
+ a3f:	85 c0                	test   %eax,%eax
+ a41:	75 bd                	jne    a00 <malloc+0x50>
+        return 0;
+  }
+}
+ a43:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ a46:	31 c0                	xor    %eax,%eax
+}
+ a48:	5b                   	pop    %ebx
+ a49:	5e                   	pop    %esi
+ a4a:	5f                   	pop    %edi
+ a4b:	5d                   	pop    %ebp
+ a4c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ a4d:	89 c2                	mov    %eax,%edx
+ a4f:	89 f8                	mov    %edi,%eax
+ a51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ a58:	39 ce                	cmp    %ecx,%esi
+ a5a:	74 54                	je     ab0 <malloc+0x100>
+        p->s.size -= nunits;
+ a5c:	29 f1                	sub    %esi,%ecx
+ a5e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ a61:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ a64:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ a67:	a3 80 0f 00 00       	mov    %eax,0xf80
+}
+ a6c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ a6f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ a72:	5b                   	pop    %ebx
+ a73:	5e                   	pop    %esi
+ a74:	5f                   	pop    %edi
+ a75:	5d                   	pop    %ebp
+ a76:	c3                   	ret    
+ a77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a7e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ a80:	c7 05 80 0f 00 00 84 	movl   $0xf84,0xf80
+ a87:	0f 00 00 
+    base.s.size = 0;
+ a8a:	bf 84 0f 00 00       	mov    $0xf84,%edi
+    base.s.ptr = freep = prevp = &base;
+ a8f:	c7 05 84 0f 00 00 84 	movl   $0xf84,0xf84
+ a96:	0f 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a99:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ a9b:	c7 05 88 0f 00 00 00 	movl   $0x0,0xf88
+ aa2:	00 00 00 
+    if(p->s.size >= nunits){
+ aa5:	e9 36 ff ff ff       	jmp    9e0 <malloc+0x30>
+ aaa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ ab0:	8b 0a                	mov    (%edx),%ecx
+ ab2:	89 08                	mov    %ecx,(%eax)
+ ab4:	eb b1                	jmp    a67 <malloc+0xb7>
diff -ruN xv6-public/test1.c xv6-new/test1.c
--- xv6-public/test1.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/test1.c	2022-10-07 11:36:50.361319700 +0530
@@ -0,0 +1,83 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "processInfo.h"
+
+// CPU bound
+void delay()
+{
+    int* data = (int*)malloc(1000*sizeof(int));
+
+    for(int i=0;i<100000000;++i)
+        data[i % 1000] = 0;
+
+    for(int j=0;j<100000000;j++)
+        data[j % 1000] = 0;
+}
+
+
+int main(int argc, char *argv[])    
+{
+    if (argc < 2)
+    {
+        printf(1, "Incorrect Format\n\nInput Format : test<test-case-number> <number-of-child-processes>\nE.g. : test1 10\n");
+        exit();
+    }
+    int N = atoi(argv[1]);
+
+    int pids[N];
+    int return_order_of_procs[N];
+    int burstTimes[N];
+    set_burst_time(2);
+    printf(1,"Test Case #1 : Random burst times of Child Processes\n");
+    printf(1, "Burst times of parent process = %d\n\n", get_burst_time());
+    int x0 = 3,a = 5,b = 4,m = 17;
+    int first_child_process_pid;
+    for (int i = 0; i < N; i++)
+    {
+        x0 = (a*x0+b)%m;
+
+        int newProcPID = fork();
+        if (newProcPID == 0)
+        {
+            struct processInfo info;
+	        getProcInfo(getpid(),&info);
+	        printf(1,"Before Execution starts : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches);
+            
+            set_burst_time(x0+3);
+            delay();
+            getProcInfo(getpid(),&info);
+	        printf(1,"After Execution ends : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches); 
+            exit();
+        }
+        else if (newProcPID > 0)
+        {
+            if(i == 0){
+                first_child_process_pid = newProcPID;
+            }
+            pids[i] = newProcPID;
+            burstTimes[i] = x0+3;
+        }
+        else
+        {
+            printf(1, "Error occured while forking \n");
+            exit();
+        }
+    }
+    
+    for (int i = 0; i < N; i++)
+    {
+        return_order_of_procs[i] = wait();
+    }
+
+    printf(1, "\nAll children executed successfully\n");
+    for (int i = 0; i < N; i++)
+        printf(1, "Child %d    pid %d    burst time = %d\n", i, pids[i],burstTimes[i]);
+
+    
+    printf(1, "\nChild Proceses Exit order \n");
+    for (int i = 0; i < N; i++)
+        printf(1, "pid %d     burst time = %d\n", return_order_of_procs[i], burstTimes[return_order_of_procs[i]-first_child_process_pid]);
+
+    exit();
+}
diff -ruN xv6-public/test1.d xv6-new/test1.d
--- xv6-public/test1.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/test1.d	2022-10-07 22:43:44.791886860 +0530
@@ -0,0 +1,2 @@
+test1.o: test1.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/test1.o and xv6-new/test1.o differ
diff -ruN xv6-public/test1.sym xv6-new/test1.sym
--- xv6-public/test1.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/test1.sym	2022-10-07 22:43:44.791886860 +0530
@@ -0,0 +1,63 @@
+00000000 .text
+00000ab8 .rodata
+00000cb4 .eh_frame
+00000f80 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 test1.c
+00000000 ulib.c
+00000000 printf.c
+000006a0 printint
+00000ca0 digits.1096
+00000000 umalloc.c
+00000f80 freep
+00000f84 base
+00000370 strcpy
+00000750 printf
+000005a0 memmove
+0000061b mknod
+00000490 gets
+00000653 getpid
+000009b0 malloc
+00000663 sleep
+00000693 get_burst_time
+000005e3 pipe
+000005f3 write
+0000062b fstat
+00000603 kill
+00000643 chdir
+0000060b exec
+000005db wait
+000005eb read
+00000623 unlink
+000005cb fork
+0000065b sbrk
+0000066b uptime
+00000f80 __bss_start
+00000430 memset
+00000000 main
+0000068b set_burst_time
+000003a0 strcmp
+0000064b dup
+000002e0 delay
+0000067b getMaxPid
+00000673 getNumProc
+00000683 getProcInfo
+00000510 stat
+00000f80 _edata
+00000f8c _end
+00000633 link
+000005d3 exit
+00000560 atoi
+000003f0 strlen
+00000613 open
+00000450 strchr
+0000063b mkdir
+000005fb close
+00000920 free
diff -ruN xv6-public/test2.asm xv6-new/test2.asm
--- xv6-public/test2.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/test2.asm	2022-10-07 22:43:44.791886860 +0530
@@ -0,0 +1,1566 @@
+
+_test2:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+        data[j % 1000] = 0;
+}
+
+
+int main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	53                   	push   %ebx
+  14:	51                   	push   %ecx
+  15:	83 ec 38             	sub    $0x38,%esp
+    if (argc < 2)
+  18:	83 39 01             	cmpl   $0x1,(%ecx)
+{
+  1b:	8b 41 04             	mov    0x4(%ecx),%eax
+    if (argc < 2)
+  1e:	7e 44                	jle    64 <main+0x64>
+    {
+        printf(1, "Incorrect Format\n\nInput Format : test<test-case-number> <number-of-child-processes>\nE.g. : test2 10\n");
+        exit();
+    }
+    int N = atoi(argv[1]);
+  20:	83 ec 0c             	sub    $0xc,%esp
+  23:	ff 70 04             	pushl  0x4(%eax)
+  26:	e8 25 05 00 00       	call   550 <atoi>
+
+    int pids[N];
+  2b:	83 c4 10             	add    $0x10,%esp
+    int N = atoi(argv[1]);
+  2e:	89 c7                	mov    %eax,%edi
+    int pids[N];
+  30:	8d 04 85 00 00 00 00 	lea    0x0(,%eax,4),%eax
+  37:	89 e6                	mov    %esp,%esi
+  39:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+  3c:	83 c0 0f             	add    $0xf,%eax
+  3f:	89 c1                	mov    %eax,%ecx
+  41:	89 c2                	mov    %eax,%edx
+  43:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
+  49:	83 e2 f0             	and    $0xfffffff0,%edx
+  4c:	29 ce                	sub    %ecx,%esi
+  4e:	89 f1                	mov    %esi,%ecx
+  50:	39 cc                	cmp    %ecx,%esp
+  52:	74 23                	je     77 <main+0x77>
+  54:	81 ec 00 10 00 00    	sub    $0x1000,%esp
+  5a:	83 8c 24 fc 0f 00 00 	orl    $0x0,0xffc(%esp)
+  61:	00 
+  62:	eb ec                	jmp    50 <main+0x50>
+        printf(1, "Incorrect Format\n\nInput Format : test<test-case-number> <number-of-child-processes>\nE.g. : test2 10\n");
+  64:	51                   	push   %ecx
+  65:	51                   	push   %ecx
+  66:	68 a8 0a 00 00       	push   $0xaa8
+  6b:	6a 01                	push   $0x1
+  6d:	e8 ce 06 00 00       	call   740 <printf>
+        exit();
+  72:	e8 4c 05 00 00       	call   5c3 <exit>
+    int pids[N];
+  77:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
+  7d:	29 d4                	sub    %edx,%esp
+  7f:	85 d2                	test   %edx,%edx
+  81:	74 05                	je     88 <main+0x88>
+  83:	83 4c 14 fc 00       	orl    $0x0,-0x4(%esp,%edx,1)
+    int return_order_of_procs[N];
+  88:	89 c1                	mov    %eax,%ecx
+  8a:	89 e6                	mov    %esp,%esi
+    int pids[N];
+  8c:	89 65 d0             	mov    %esp,-0x30(%ebp)
+    int return_order_of_procs[N];
+  8f:	89 c2                	mov    %eax,%edx
+  91:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
+  97:	83 e2 f0             	and    $0xfffffff0,%edx
+  9a:	29 ce                	sub    %ecx,%esi
+  9c:	89 f1                	mov    %esi,%ecx
+  9e:	39 cc                	cmp    %ecx,%esp
+  a0:	74 10                	je     b2 <main+0xb2>
+  a2:	81 ec 00 10 00 00    	sub    $0x1000,%esp
+  a8:	83 8c 24 fc 0f 00 00 	orl    $0x0,0xffc(%esp)
+  af:	00 
+  b0:	eb ec                	jmp    9e <main+0x9e>
+  b2:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
+  b8:	29 d4                	sub    %edx,%esp
+  ba:	85 d2                	test   %edx,%edx
+  bc:	75 27                	jne    e5 <main+0xe5>
+    int burstTimes[N];
+  be:	89 c2                	mov    %eax,%edx
+  c0:	89 e6                	mov    %esp,%esi
+  c2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+    int return_order_of_procs[N];
+  c7:	89 65 c0             	mov    %esp,-0x40(%ebp)
+    int burstTimes[N];
+  ca:	29 c6                	sub    %eax,%esi
+  cc:	83 e2 f0             	and    $0xfffffff0,%edx
+  cf:	89 f0                	mov    %esi,%eax
+  d1:	39 c4                	cmp    %eax,%esp
+  d3:	74 17                	je     ec <main+0xec>
+  d5:	81 ec 00 10 00 00    	sub    $0x1000,%esp
+  db:	83 8c 24 fc 0f 00 00 	orl    $0x0,0xffc(%esp)
+  e2:	00 
+  e3:	eb ec                	jmp    d1 <main+0xd1>
+    int return_order_of_procs[N];
+  e5:	83 4c 14 fc 00       	orl    $0x0,-0x4(%esp,%edx,1)
+  ea:	eb d2                	jmp    be <main+0xbe>
+    int burstTimes[N];
+  ec:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
+  f2:	29 d4                	sub    %edx,%esp
+  f4:	85 d2                	test   %edx,%edx
+  f6:	74 05                	je     fd <main+0xfd>
+  f8:	83 4c 14 fc 00       	orl    $0x0,-0x4(%esp,%edx,1)
+  fd:	89 65 d4             	mov    %esp,-0x2c(%ebp)
+    set_burst_time(2);
+ 100:	83 ec 0c             	sub    $0xc,%esp
+ 103:	6a 02                	push   $0x2
+ 105:	e8 71 05 00 00       	call   67b <set_burst_time>
+    printf(1,"Test Case #2 : Increasing burst times of Child Processes\n");
+ 10a:	58                   	pop    %eax
+ 10b:	5a                   	pop    %edx
+ 10c:	68 10 0b 00 00       	push   $0xb10
+ 111:	6a 01                	push   $0x1
+ 113:	e8 28 06 00 00       	call   740 <printf>
+    printf(1, "Burst times of parent process = %d\n\n", get_burst_time());
+ 118:	e8 66 05 00 00       	call   683 <get_burst_time>
+ 11d:	83 c4 0c             	add    $0xc,%esp
+ 120:	50                   	push   %eax
+ 121:	68 4c 0b 00 00       	push   $0xb4c
+ 126:	6a 01                	push   $0x1
+ 128:	e8 13 06 00 00       	call   740 <printf>
+    int first_child_process_pid;
+    for (int i = 0; i < N; i++)
+ 12d:	83 c4 10             	add    $0x10,%esp
+ 130:	85 ff                	test   %edi,%edi
+ 132:	0f 8e 6e 01 00 00    	jle    2a6 <main+0x2a6>
+ 138:	89 7d cc             	mov    %edi,-0x34(%ebp)
+ 13b:	31 db                	xor    %ebx,%ebx
+ 13d:	8b 7d c8             	mov    -0x38(%ebp),%edi
+ 140:	eb 2b                	jmp    16d <main+0x16d>
+ 142:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+            getProcInfo(getpid(),&info);
+	        printf(1,"After Execution ends : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches); 
+            exit();
+        }
+        else if (newProcPID > 0)
+ 148:	0f 8e 8d 00 00 00    	jle    1db <main+0x1db>
+        {
+            if(i == 0){
+                first_child_process_pid = newProcPID;
+            }
+            pids[i] = newProcPID;
+ 14e:	8b 55 d0             	mov    -0x30(%ebp),%edx
+            if(i == 0){
+ 151:	85 db                	test   %ebx,%ebx
+ 153:	0f 44 f8             	cmove  %eax,%edi
+            pids[i] = newProcPID;
+ 156:	89 04 9a             	mov    %eax,(%edx,%ebx,4)
+            burstTimes[i] = burst_time;
+ 159:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 15c:	89 34 98             	mov    %esi,(%eax,%ebx,4)
+    for (int i = 0; i < N; i++)
+ 15f:	8d 43 01             	lea    0x1(%ebx),%eax
+ 162:	39 45 cc             	cmp    %eax,-0x34(%ebp)
+ 165:	0f 84 83 00 00 00    	je     1ee <main+0x1ee>
+ 16b:	89 c3                	mov    %eax,%ebx
+        int burst_time = 5*i+3;
+ 16d:	8d 74 9b 03          	lea    0x3(%ebx,%ebx,4),%esi
+        int newProcPID = fork();
+ 171:	e8 45 04 00 00       	call   5bb <fork>
+        if (newProcPID == 0)
+ 176:	85 c0                	test   %eax,%eax
+ 178:	75 ce                	jne    148 <main+0x148>
+	        getProcInfo(getpid(),&info);
+ 17a:	e8 c4 04 00 00       	call   643 <getpid>
+ 17f:	8d 5d dc             	lea    -0x24(%ebp),%ebx
+ 182:	52                   	push   %edx
+ 183:	52                   	push   %edx
+ 184:	53                   	push   %ebx
+ 185:	50                   	push   %eax
+ 186:	e8 e8 04 00 00       	call   673 <getProcInfo>
+	        printf(1,"Before Execution starts : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches);
+ 18b:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+ 18e:	e8 b0 04 00 00       	call   643 <getpid>
+ 193:	57                   	push   %edi
+ 194:	50                   	push   %eax
+ 195:	68 74 0b 00 00       	push   $0xb74
+ 19a:	6a 01                	push   $0x1
+ 19c:	e8 9f 05 00 00       	call   740 <printf>
+            set_burst_time(burst_time);
+ 1a1:	83 c4 14             	add    $0x14,%esp
+ 1a4:	56                   	push   %esi
+ 1a5:	e8 d1 04 00 00       	call   67b <set_burst_time>
+            delay();
+ 1aa:	e8 21 01 00 00       	call   2d0 <delay>
+            getProcInfo(getpid(),&info);
+ 1af:	e8 8f 04 00 00       	call   643 <getpid>
+ 1b4:	59                   	pop    %ecx
+ 1b5:	5e                   	pop    %esi
+ 1b6:	53                   	push   %ebx
+ 1b7:	50                   	push   %eax
+ 1b8:	e8 b6 04 00 00       	call   673 <getProcInfo>
+	        printf(1,"After Execution ends : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches); 
+ 1bd:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+ 1c0:	e8 7e 04 00 00       	call   643 <getpid>
+ 1c5:	53                   	push   %ebx
+ 1c6:	50                   	push   %eax
+ 1c7:	68 b0 0b 00 00       	push   $0xbb0
+ 1cc:	6a 01                	push   $0x1
+ 1ce:	e8 6d 05 00 00       	call   740 <printf>
+            exit();
+ 1d3:	83 c4 20             	add    $0x20,%esp
+ 1d6:	e8 e8 03 00 00       	call   5c3 <exit>
+        }
+        else
+        {
+            printf(1, "Error occured while forking \n");
+ 1db:	50                   	push   %eax
+ 1dc:	50                   	push   %eax
+ 1dd:	68 35 0c 00 00       	push   $0xc35
+ 1e2:	6a 01                	push   $0x1
+ 1e4:	e8 57 05 00 00       	call   740 <printf>
+            exit();
+ 1e9:	e8 d5 03 00 00       	call   5c3 <exit>
+ 1ee:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 1f1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 1f4:	89 7d c8             	mov    %edi,-0x38(%ebp)
+    for (int i = 0; i < N; i++)
+ 1f7:	89 5d c4             	mov    %ebx,-0x3c(%ebp)
+ 1fa:	01 f0                	add    %esi,%eax
+ 1fc:	89 f3                	mov    %esi,%ebx
+ 1fe:	89 45 cc             	mov    %eax,-0x34(%ebp)
+ 201:	89 c7                	mov    %eax,%edi
+ 203:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 207:	90                   	nop
+        }
+    }
+
+    for (int i = 0; i < N; i++)
+    {
+        return_order_of_procs[i] = wait();
+ 208:	e8 be 03 00 00       	call   5cb <wait>
+ 20d:	83 c3 04             	add    $0x4,%ebx
+ 210:	89 43 fc             	mov    %eax,-0x4(%ebx)
+    for (int i = 0; i < N; i++)
+ 213:	39 df                	cmp    %ebx,%edi
+ 215:	75 f1                	jne    208 <main+0x208>
+    }
+
+    printf(1, "\nAll children executed successfully\n");
+ 217:	57                   	push   %edi
+ 218:	8b 5d c4             	mov    -0x3c(%ebp),%ebx
+ 21b:	57                   	push   %edi
+ 21c:	31 ff                	xor    %edi,%edi
+ 21e:	68 10 0c 00 00       	push   $0xc10
+ 223:	6a 01                	push   $0x1
+ 225:	e8 16 05 00 00       	call   740 <printf>
+    for (int i = 0; i < N; i++)
+ 22a:	89 75 c4             	mov    %esi,-0x3c(%ebp)
+    printf(1, "\nAll children executed successfully\n");
+ 22d:	83 c4 10             	add    $0x10,%esp
+ 230:	89 de                	mov    %ebx,%esi
+ 232:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printf(1, "Child %d    pid %d    burst time = %d\n", i, pids[i],burstTimes[i]);
+ 238:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 23b:	83 ec 0c             	sub    $0xc,%esp
+ 23e:	89 fb                	mov    %edi,%ebx
+ 240:	ff 34 b8             	pushl  (%eax,%edi,4)
+ 243:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 246:	ff 34 b8             	pushl  (%eax,%edi,4)
+ 249:	57                   	push   %edi
+    for (int i = 0; i < N; i++)
+ 24a:	83 c7 01             	add    $0x1,%edi
+        printf(1, "Child %d    pid %d    burst time = %d\n", i, pids[i],burstTimes[i]);
+ 24d:	68 e8 0b 00 00       	push   $0xbe8
+ 252:	6a 01                	push   $0x1
+ 254:	e8 e7 04 00 00       	call   740 <printf>
+    for (int i = 0; i < N; i++)
+ 259:	83 c4 20             	add    $0x20,%esp
+ 25c:	39 f3                	cmp    %esi,%ebx
+ 25e:	75 d8                	jne    238 <main+0x238>
+
+    
+    printf(1, "\nChild Proceses Exit order \n");
+ 260:	53                   	push   %ebx
+ 261:	8b 75 c4             	mov    -0x3c(%ebp),%esi
+ 264:	53                   	push   %ebx
+ 265:	68 6f 0c 00 00       	push   $0xc6f
+ 26a:	89 f3                	mov    %esi,%ebx
+ 26c:	6a 01                	push   $0x1
+ 26e:	e8 cd 04 00 00       	call   740 <printf>
+    for (int i = 0; i < N; i++)
+ 273:	8b 7d cc             	mov    -0x34(%ebp),%edi
+ 276:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+    printf(1, "\nChild Proceses Exit order \n");
+ 279:	83 c4 10             	add    $0x10,%esp
+ 27c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        printf(1, "pid %d     burst time = %d\n", return_order_of_procs[i], burstTimes[return_order_of_procs[i]-first_child_process_pid]);
+ 280:	8b 13                	mov    (%ebx),%edx
+ 282:	83 c3 04             	add    $0x4,%ebx
+ 285:	89 d1                	mov    %edx,%ecx
+ 287:	2b 4d c8             	sub    -0x38(%ebp),%ecx
+ 28a:	ff 34 8e             	pushl  (%esi,%ecx,4)
+ 28d:	52                   	push   %edx
+ 28e:	68 53 0c 00 00       	push   $0xc53
+ 293:	6a 01                	push   $0x1
+ 295:	e8 a6 04 00 00       	call   740 <printf>
+    for (int i = 0; i < N; i++)
+ 29a:	83 c4 10             	add    $0x10,%esp
+ 29d:	39 fb                	cmp    %edi,%ebx
+ 29f:	75 df                	jne    280 <main+0x280>
+
+    exit();
+ 2a1:	e8 1d 03 00 00       	call   5c3 <exit>
+    printf(1, "\nAll children executed successfully\n");
+ 2a6:	50                   	push   %eax
+ 2a7:	50                   	push   %eax
+ 2a8:	68 10 0c 00 00       	push   $0xc10
+ 2ad:	6a 01                	push   $0x1
+ 2af:	e8 8c 04 00 00       	call   740 <printf>
+    printf(1, "\nChild Proceses Exit order \n");
+ 2b4:	5a                   	pop    %edx
+ 2b5:	59                   	pop    %ecx
+ 2b6:	68 6f 0c 00 00       	push   $0xc6f
+ 2bb:	6a 01                	push   $0x1
+ 2bd:	e8 7e 04 00 00       	call   740 <printf>
+ 2c2:	83 c4 10             	add    $0x10,%esp
+ 2c5:	eb da                	jmp    2a1 <main+0x2a1>
+ 2c7:	66 90                	xchg   %ax,%ax
+ 2c9:	66 90                	xchg   %ax,%ax
+ 2cb:	66 90                	xchg   %ax,%ax
+ 2cd:	66 90                	xchg   %ax,%ax
+ 2cf:	90                   	nop
+
+000002d0 <delay>:
+{
+ 2d0:	f3 0f 1e fb          	endbr32 
+ 2d4:	55                   	push   %ebp
+ 2d5:	89 e5                	mov    %esp,%ebp
+ 2d7:	56                   	push   %esi
+        data[i % 1000] = 0;
+ 2d8:	be d3 4d 62 10       	mov    $0x10624dd3,%esi
+{
+ 2dd:	53                   	push   %ebx
+    int* data = (int*)malloc(1000*sizeof(int));
+ 2de:	83 ec 0c             	sub    $0xc,%esp
+ 2e1:	68 a0 0f 00 00       	push   $0xfa0
+ 2e6:	e8 b5 06 00 00       	call   9a0 <malloc>
+ 2eb:	83 c4 10             	add    $0x10,%esp
+    for(int i=0;i<100000000;++i)
+ 2ee:	31 c9                	xor    %ecx,%ecx
+    int* data = (int*)malloc(1000*sizeof(int));
+ 2f0:	89 c3                	mov    %eax,%ebx
+    for(int i=0;i<100000000;++i)
+ 2f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        data[i % 1000] = 0;
+ 2f8:	89 c8                	mov    %ecx,%eax
+ 2fa:	f7 e6                	mul    %esi
+ 2fc:	89 c8                	mov    %ecx,%eax
+    for(int i=0;i<100000000;++i)
+ 2fe:	83 c1 01             	add    $0x1,%ecx
+        data[i % 1000] = 0;
+ 301:	c1 ea 06             	shr    $0x6,%edx
+ 304:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+ 30a:	29 d0                	sub    %edx,%eax
+ 30c:	c7 04 83 00 00 00 00 	movl   $0x0,(%ebx,%eax,4)
+    for(int i=0;i<100000000;++i)
+ 313:	81 f9 00 e1 f5 05    	cmp    $0x5f5e100,%ecx
+ 319:	75 dd                	jne    2f8 <delay+0x28>
+    for(int j=0;j<100000000;j++)
+ 31b:	31 c9                	xor    %ecx,%ecx
+        data[j % 1000] = 0;
+ 31d:	be d3 4d 62 10       	mov    $0x10624dd3,%esi
+ 322:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 328:	89 c8                	mov    %ecx,%eax
+ 32a:	f7 e6                	mul    %esi
+ 32c:	89 c8                	mov    %ecx,%eax
+    for(int j=0;j<100000000;j++)
+ 32e:	83 c1 01             	add    $0x1,%ecx
+        data[j % 1000] = 0;
+ 331:	c1 ea 06             	shr    $0x6,%edx
+ 334:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+ 33a:	29 d0                	sub    %edx,%eax
+ 33c:	c7 04 83 00 00 00 00 	movl   $0x0,(%ebx,%eax,4)
+    for(int j=0;j<100000000;j++)
+ 343:	81 f9 00 e1 f5 05    	cmp    $0x5f5e100,%ecx
+ 349:	75 dd                	jne    328 <delay+0x58>
+}
+ 34b:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 34e:	5b                   	pop    %ebx
+ 34f:	5e                   	pop    %esi
+ 350:	5d                   	pop    %ebp
+ 351:	c3                   	ret    
+ 352:	66 90                	xchg   %ax,%ax
+ 354:	66 90                	xchg   %ax,%ax
+ 356:	66 90                	xchg   %ax,%ax
+ 358:	66 90                	xchg   %ax,%ax
+ 35a:	66 90                	xchg   %ax,%ax
+ 35c:	66 90                	xchg   %ax,%ax
+ 35e:	66 90                	xchg   %ax,%ax
+
+00000360 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 360:	f3 0f 1e fb          	endbr32 
+ 364:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 365:	31 c0                	xor    %eax,%eax
+{
+ 367:	89 e5                	mov    %esp,%ebp
+ 369:	53                   	push   %ebx
+ 36a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 36d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 370:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 374:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 377:	83 c0 01             	add    $0x1,%eax
+ 37a:	84 d2                	test   %dl,%dl
+ 37c:	75 f2                	jne    370 <strcpy+0x10>
+    ;
+  return os;
+}
+ 37e:	89 c8                	mov    %ecx,%eax
+ 380:	5b                   	pop    %ebx
+ 381:	5d                   	pop    %ebp
+ 382:	c3                   	ret    
+ 383:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 38a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000390 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 390:	f3 0f 1e fb          	endbr32 
+ 394:	55                   	push   %ebp
+ 395:	89 e5                	mov    %esp,%ebp
+ 397:	53                   	push   %ebx
+ 398:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 39b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 39e:	0f b6 01             	movzbl (%ecx),%eax
+ 3a1:	0f b6 1a             	movzbl (%edx),%ebx
+ 3a4:	84 c0                	test   %al,%al
+ 3a6:	75 19                	jne    3c1 <strcmp+0x31>
+ 3a8:	eb 26                	jmp    3d0 <strcmp+0x40>
+ 3aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 3b0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 3b4:	83 c1 01             	add    $0x1,%ecx
+ 3b7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 3ba:	0f b6 1a             	movzbl (%edx),%ebx
+ 3bd:	84 c0                	test   %al,%al
+ 3bf:	74 0f                	je     3d0 <strcmp+0x40>
+ 3c1:	38 d8                	cmp    %bl,%al
+ 3c3:	74 eb                	je     3b0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 3c5:	29 d8                	sub    %ebx,%eax
+}
+ 3c7:	5b                   	pop    %ebx
+ 3c8:	5d                   	pop    %ebp
+ 3c9:	c3                   	ret    
+ 3ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 3d0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 3d2:	29 d8                	sub    %ebx,%eax
+}
+ 3d4:	5b                   	pop    %ebx
+ 3d5:	5d                   	pop    %ebp
+ 3d6:	c3                   	ret    
+ 3d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3de:	66 90                	xchg   %ax,%ax
+
+000003e0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 3e0:	f3 0f 1e fb          	endbr32 
+ 3e4:	55                   	push   %ebp
+ 3e5:	89 e5                	mov    %esp,%ebp
+ 3e7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3ea:	80 3a 00             	cmpb   $0x0,(%edx)
+ 3ed:	74 21                	je     410 <strlen+0x30>
+ 3ef:	31 c0                	xor    %eax,%eax
+ 3f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3f8:	83 c0 01             	add    $0x1,%eax
+ 3fb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 3ff:	89 c1                	mov    %eax,%ecx
+ 401:	75 f5                	jne    3f8 <strlen+0x18>
+    ;
+  return n;
+}
+ 403:	89 c8                	mov    %ecx,%eax
+ 405:	5d                   	pop    %ebp
+ 406:	c3                   	ret    
+ 407:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 40e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 410:	31 c9                	xor    %ecx,%ecx
+}
+ 412:	5d                   	pop    %ebp
+ 413:	89 c8                	mov    %ecx,%eax
+ 415:	c3                   	ret    
+ 416:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 41d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000420 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 420:	f3 0f 1e fb          	endbr32 
+ 424:	55                   	push   %ebp
+ 425:	89 e5                	mov    %esp,%ebp
+ 427:	57                   	push   %edi
+ 428:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 42b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 42e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 431:	89 d7                	mov    %edx,%edi
+ 433:	fc                   	cld    
+ 434:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 436:	89 d0                	mov    %edx,%eax
+ 438:	5f                   	pop    %edi
+ 439:	5d                   	pop    %ebp
+ 43a:	c3                   	ret    
+ 43b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 43f:	90                   	nop
+
+00000440 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 440:	f3 0f 1e fb          	endbr32 
+ 444:	55                   	push   %ebp
+ 445:	89 e5                	mov    %esp,%ebp
+ 447:	8b 45 08             	mov    0x8(%ebp),%eax
+ 44a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 44e:	0f b6 10             	movzbl (%eax),%edx
+ 451:	84 d2                	test   %dl,%dl
+ 453:	75 16                	jne    46b <strchr+0x2b>
+ 455:	eb 21                	jmp    478 <strchr+0x38>
+ 457:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45e:	66 90                	xchg   %ax,%ax
+ 460:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 464:	83 c0 01             	add    $0x1,%eax
+ 467:	84 d2                	test   %dl,%dl
+ 469:	74 0d                	je     478 <strchr+0x38>
+    if(*s == c)
+ 46b:	38 d1                	cmp    %dl,%cl
+ 46d:	75 f1                	jne    460 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 46f:	5d                   	pop    %ebp
+ 470:	c3                   	ret    
+ 471:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 478:	31 c0                	xor    %eax,%eax
+}
+ 47a:	5d                   	pop    %ebp
+ 47b:	c3                   	ret    
+ 47c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000480 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 480:	f3 0f 1e fb          	endbr32 
+ 484:	55                   	push   %ebp
+ 485:	89 e5                	mov    %esp,%ebp
+ 487:	57                   	push   %edi
+ 488:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 489:	31 f6                	xor    %esi,%esi
+{
+ 48b:	53                   	push   %ebx
+ 48c:	89 f3                	mov    %esi,%ebx
+ 48e:	83 ec 1c             	sub    $0x1c,%esp
+ 491:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 494:	eb 33                	jmp    4c9 <gets+0x49>
+ 496:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 49d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 4a0:	83 ec 04             	sub    $0x4,%esp
+ 4a3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4a6:	6a 01                	push   $0x1
+ 4a8:	50                   	push   %eax
+ 4a9:	6a 00                	push   $0x0
+ 4ab:	e8 2b 01 00 00       	call   5db <read>
+    if(cc < 1)
+ 4b0:	83 c4 10             	add    $0x10,%esp
+ 4b3:	85 c0                	test   %eax,%eax
+ 4b5:	7e 1c                	jle    4d3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 4b7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 4bb:	83 c7 01             	add    $0x1,%edi
+ 4be:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 4c1:	3c 0a                	cmp    $0xa,%al
+ 4c3:	74 23                	je     4e8 <gets+0x68>
+ 4c5:	3c 0d                	cmp    $0xd,%al
+ 4c7:	74 1f                	je     4e8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 4c9:	83 c3 01             	add    $0x1,%ebx
+ 4cc:	89 fe                	mov    %edi,%esi
+ 4ce:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 4d1:	7c cd                	jl     4a0 <gets+0x20>
+ 4d3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 4d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 4d8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4db:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4de:	5b                   	pop    %ebx
+ 4df:	5e                   	pop    %esi
+ 4e0:	5f                   	pop    %edi
+ 4e1:	5d                   	pop    %ebp
+ 4e2:	c3                   	ret    
+ 4e3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4e7:	90                   	nop
+ 4e8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4eb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4ee:	01 de                	add    %ebx,%esi
+ 4f0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 4f2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4f8:	5b                   	pop    %ebx
+ 4f9:	5e                   	pop    %esi
+ 4fa:	5f                   	pop    %edi
+ 4fb:	5d                   	pop    %ebp
+ 4fc:	c3                   	ret    
+ 4fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000500 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 500:	f3 0f 1e fb          	endbr32 
+ 504:	55                   	push   %ebp
+ 505:	89 e5                	mov    %esp,%ebp
+ 507:	56                   	push   %esi
+ 508:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 509:	83 ec 08             	sub    $0x8,%esp
+ 50c:	6a 00                	push   $0x0
+ 50e:	ff 75 08             	pushl  0x8(%ebp)
+ 511:	e8 ed 00 00 00       	call   603 <open>
+  if(fd < 0)
+ 516:	83 c4 10             	add    $0x10,%esp
+ 519:	85 c0                	test   %eax,%eax
+ 51b:	78 2b                	js     548 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 51d:	83 ec 08             	sub    $0x8,%esp
+ 520:	ff 75 0c             	pushl  0xc(%ebp)
+ 523:	89 c3                	mov    %eax,%ebx
+ 525:	50                   	push   %eax
+ 526:	e8 f0 00 00 00       	call   61b <fstat>
+  close(fd);
+ 52b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 52e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 530:	e8 b6 00 00 00       	call   5eb <close>
+  return r;
+ 535:	83 c4 10             	add    $0x10,%esp
+}
+ 538:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 53b:	89 f0                	mov    %esi,%eax
+ 53d:	5b                   	pop    %ebx
+ 53e:	5e                   	pop    %esi
+ 53f:	5d                   	pop    %ebp
+ 540:	c3                   	ret    
+ 541:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 548:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 54d:	eb e9                	jmp    538 <stat+0x38>
+ 54f:	90                   	nop
+
+00000550 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 550:	f3 0f 1e fb          	endbr32 
+ 554:	55                   	push   %ebp
+ 555:	89 e5                	mov    %esp,%ebp
+ 557:	53                   	push   %ebx
+ 558:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 55b:	0f be 02             	movsbl (%edx),%eax
+ 55e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 561:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 564:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 569:	77 1a                	ja     585 <atoi+0x35>
+ 56b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 56f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 570:	83 c2 01             	add    $0x1,%edx
+ 573:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 576:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 57a:	0f be 02             	movsbl (%edx),%eax
+ 57d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 580:	80 fb 09             	cmp    $0x9,%bl
+ 583:	76 eb                	jbe    570 <atoi+0x20>
+  return n;
+}
+ 585:	89 c8                	mov    %ecx,%eax
+ 587:	5b                   	pop    %ebx
+ 588:	5d                   	pop    %ebp
+ 589:	c3                   	ret    
+ 58a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000590 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 590:	f3 0f 1e fb          	endbr32 
+ 594:	55                   	push   %ebp
+ 595:	89 e5                	mov    %esp,%ebp
+ 597:	57                   	push   %edi
+ 598:	8b 45 10             	mov    0x10(%ebp),%eax
+ 59b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 59e:	56                   	push   %esi
+ 59f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 5a2:	85 c0                	test   %eax,%eax
+ 5a4:	7e 0f                	jle    5b5 <memmove+0x25>
+ 5a6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 5a8:	89 d7                	mov    %edx,%edi
+ 5aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 5b0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 5b1:	39 f8                	cmp    %edi,%eax
+ 5b3:	75 fb                	jne    5b0 <memmove+0x20>
+  return vdst;
+}
+ 5b5:	5e                   	pop    %esi
+ 5b6:	89 d0                	mov    %edx,%eax
+ 5b8:	5f                   	pop    %edi
+ 5b9:	5d                   	pop    %ebp
+ 5ba:	c3                   	ret    
+
+000005bb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 5bb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 5c0:	cd 40                	int    $0x40
+ 5c2:	c3                   	ret    
+
+000005c3 <exit>:
+SYSCALL(exit)
+ 5c3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 5c8:	cd 40                	int    $0x40
+ 5ca:	c3                   	ret    
+
+000005cb <wait>:
+SYSCALL(wait)
+ 5cb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 5d0:	cd 40                	int    $0x40
+ 5d2:	c3                   	ret    
+
+000005d3 <pipe>:
+SYSCALL(pipe)
+ 5d3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 5d8:	cd 40                	int    $0x40
+ 5da:	c3                   	ret    
+
+000005db <read>:
+SYSCALL(read)
+ 5db:	b8 05 00 00 00       	mov    $0x5,%eax
+ 5e0:	cd 40                	int    $0x40
+ 5e2:	c3                   	ret    
+
+000005e3 <write>:
+SYSCALL(write)
+ 5e3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5e8:	cd 40                	int    $0x40
+ 5ea:	c3                   	ret    
+
+000005eb <close>:
+SYSCALL(close)
+ 5eb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5f0:	cd 40                	int    $0x40
+ 5f2:	c3                   	ret    
+
+000005f3 <kill>:
+SYSCALL(kill)
+ 5f3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5f8:	cd 40                	int    $0x40
+ 5fa:	c3                   	ret    
+
+000005fb <exec>:
+SYSCALL(exec)
+ 5fb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 600:	cd 40                	int    $0x40
+ 602:	c3                   	ret    
+
+00000603 <open>:
+SYSCALL(open)
+ 603:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 608:	cd 40                	int    $0x40
+ 60a:	c3                   	ret    
+
+0000060b <mknod>:
+SYSCALL(mknod)
+ 60b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 610:	cd 40                	int    $0x40
+ 612:	c3                   	ret    
+
+00000613 <unlink>:
+SYSCALL(unlink)
+ 613:	b8 12 00 00 00       	mov    $0x12,%eax
+ 618:	cd 40                	int    $0x40
+ 61a:	c3                   	ret    
+
+0000061b <fstat>:
+SYSCALL(fstat)
+ 61b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 620:	cd 40                	int    $0x40
+ 622:	c3                   	ret    
+
+00000623 <link>:
+SYSCALL(link)
+ 623:	b8 13 00 00 00       	mov    $0x13,%eax
+ 628:	cd 40                	int    $0x40
+ 62a:	c3                   	ret    
+
+0000062b <mkdir>:
+SYSCALL(mkdir)
+ 62b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 630:	cd 40                	int    $0x40
+ 632:	c3                   	ret    
+
+00000633 <chdir>:
+SYSCALL(chdir)
+ 633:	b8 09 00 00 00       	mov    $0x9,%eax
+ 638:	cd 40                	int    $0x40
+ 63a:	c3                   	ret    
+
+0000063b <dup>:
+SYSCALL(dup)
+ 63b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 640:	cd 40                	int    $0x40
+ 642:	c3                   	ret    
+
+00000643 <getpid>:
+SYSCALL(getpid)
+ 643:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 648:	cd 40                	int    $0x40
+ 64a:	c3                   	ret    
+
+0000064b <sbrk>:
+SYSCALL(sbrk)
+ 64b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 650:	cd 40                	int    $0x40
+ 652:	c3                   	ret    
+
+00000653 <sleep>:
+SYSCALL(sleep)
+ 653:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 658:	cd 40                	int    $0x40
+ 65a:	c3                   	ret    
+
+0000065b <uptime>:
+SYSCALL(uptime)
+ 65b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 660:	cd 40                	int    $0x40
+ 662:	c3                   	ret    
+
+00000663 <getNumProc>:
+SYSCALL(getNumProc)
+ 663:	b8 16 00 00 00       	mov    $0x16,%eax
+ 668:	cd 40                	int    $0x40
+ 66a:	c3                   	ret    
+
+0000066b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 66b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 670:	cd 40                	int    $0x40
+ 672:	c3                   	ret    
+
+00000673 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 673:	b8 18 00 00 00       	mov    $0x18,%eax
+ 678:	cd 40                	int    $0x40
+ 67a:	c3                   	ret    
+
+0000067b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 67b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 680:	cd 40                	int    $0x40
+ 682:	c3                   	ret    
+
+00000683 <get_burst_time>:
+ 683:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 688:	cd 40                	int    $0x40
+ 68a:	c3                   	ret    
+ 68b:	66 90                	xchg   %ax,%ax
+ 68d:	66 90                	xchg   %ax,%ax
+ 68f:	90                   	nop
+
+00000690 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 690:	55                   	push   %ebp
+ 691:	89 e5                	mov    %esp,%ebp
+ 693:	57                   	push   %edi
+ 694:	56                   	push   %esi
+ 695:	53                   	push   %ebx
+ 696:	83 ec 3c             	sub    $0x3c,%esp
+ 699:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 69c:	89 d1                	mov    %edx,%ecx
+{
+ 69e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 6a1:	85 d2                	test   %edx,%edx
+ 6a3:	0f 89 7f 00 00 00    	jns    728 <printint+0x98>
+ 6a9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 6ad:	74 79                	je     728 <printint+0x98>
+    neg = 1;
+ 6af:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 6b6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 6b8:	31 db                	xor    %ebx,%ebx
+ 6ba:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 6bd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 6c0:	89 c8                	mov    %ecx,%eax
+ 6c2:	31 d2                	xor    %edx,%edx
+ 6c4:	89 cf                	mov    %ecx,%edi
+ 6c6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 6c9:	0f b6 92 94 0c 00 00 	movzbl 0xc94(%edx),%edx
+ 6d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 6d3:	89 d8                	mov    %ebx,%eax
+ 6d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 6d8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 6db:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 6de:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 6e1:	76 dd                	jbe    6c0 <printint+0x30>
+  if(neg)
+ 6e3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 6e6:	85 c9                	test   %ecx,%ecx
+ 6e8:	74 0c                	je     6f6 <printint+0x66>
+    buf[i++] = '-';
+ 6ea:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 6ef:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 6f1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 6f6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 6f9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6fd:	eb 07                	jmp    706 <printint+0x76>
+ 6ff:	90                   	nop
+ 700:	0f b6 13             	movzbl (%ebx),%edx
+ 703:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 706:	83 ec 04             	sub    $0x4,%esp
+ 709:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 70c:	6a 01                	push   $0x1
+ 70e:	56                   	push   %esi
+ 70f:	57                   	push   %edi
+ 710:	e8 ce fe ff ff       	call   5e3 <write>
+  while(--i >= 0)
+ 715:	83 c4 10             	add    $0x10,%esp
+ 718:	39 de                	cmp    %ebx,%esi
+ 71a:	75 e4                	jne    700 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 71c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 71f:	5b                   	pop    %ebx
+ 720:	5e                   	pop    %esi
+ 721:	5f                   	pop    %edi
+ 722:	5d                   	pop    %ebp
+ 723:	c3                   	ret    
+ 724:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 728:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 72f:	eb 87                	jmp    6b8 <printint+0x28>
+ 731:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 738:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 73f:	90                   	nop
+
+00000740 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 740:	f3 0f 1e fb          	endbr32 
+ 744:	55                   	push   %ebp
+ 745:	89 e5                	mov    %esp,%ebp
+ 747:	57                   	push   %edi
+ 748:	56                   	push   %esi
+ 749:	53                   	push   %ebx
+ 74a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 74d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 750:	0f b6 1e             	movzbl (%esi),%ebx
+ 753:	84 db                	test   %bl,%bl
+ 755:	0f 84 b4 00 00 00    	je     80f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 75b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 75e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 761:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 764:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 766:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 769:	eb 33                	jmp    79e <printf+0x5e>
+ 76b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 76f:	90                   	nop
+ 770:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 773:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 778:	83 f8 25             	cmp    $0x25,%eax
+ 77b:	74 17                	je     794 <printf+0x54>
+  write(fd, &c, 1);
+ 77d:	83 ec 04             	sub    $0x4,%esp
+ 780:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 783:	6a 01                	push   $0x1
+ 785:	57                   	push   %edi
+ 786:	ff 75 08             	pushl  0x8(%ebp)
+ 789:	e8 55 fe ff ff       	call   5e3 <write>
+ 78e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 791:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 794:	0f b6 1e             	movzbl (%esi),%ebx
+ 797:	83 c6 01             	add    $0x1,%esi
+ 79a:	84 db                	test   %bl,%bl
+ 79c:	74 71                	je     80f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 79e:	0f be cb             	movsbl %bl,%ecx
+ 7a1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 7a4:	85 d2                	test   %edx,%edx
+ 7a6:	74 c8                	je     770 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 7a8:	83 fa 25             	cmp    $0x25,%edx
+ 7ab:	75 e7                	jne    794 <printf+0x54>
+      if(c == 'd'){
+ 7ad:	83 f8 64             	cmp    $0x64,%eax
+ 7b0:	0f 84 9a 00 00 00    	je     850 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 7b6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 7bc:	83 f9 70             	cmp    $0x70,%ecx
+ 7bf:	74 5f                	je     820 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 7c1:	83 f8 73             	cmp    $0x73,%eax
+ 7c4:	0f 84 d6 00 00 00    	je     8a0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 7ca:	83 f8 63             	cmp    $0x63,%eax
+ 7cd:	0f 84 8d 00 00 00    	je     860 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 7d3:	83 f8 25             	cmp    $0x25,%eax
+ 7d6:	0f 84 b4 00 00 00    	je     890 <printf+0x150>
+  write(fd, &c, 1);
+ 7dc:	83 ec 04             	sub    $0x4,%esp
+ 7df:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7e3:	6a 01                	push   $0x1
+ 7e5:	57                   	push   %edi
+ 7e6:	ff 75 08             	pushl  0x8(%ebp)
+ 7e9:	e8 f5 fd ff ff       	call   5e3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 7ee:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 7f1:	83 c4 0c             	add    $0xc,%esp
+ 7f4:	6a 01                	push   $0x1
+ 7f6:	83 c6 01             	add    $0x1,%esi
+ 7f9:	57                   	push   %edi
+ 7fa:	ff 75 08             	pushl  0x8(%ebp)
+ 7fd:	e8 e1 fd ff ff       	call   5e3 <write>
+  for(i = 0; fmt[i]; i++){
+ 802:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 806:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 809:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 80b:	84 db                	test   %bl,%bl
+ 80d:	75 8f                	jne    79e <printf+0x5e>
+    }
+  }
+}
+ 80f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 812:	5b                   	pop    %ebx
+ 813:	5e                   	pop    %esi
+ 814:	5f                   	pop    %edi
+ 815:	5d                   	pop    %ebp
+ 816:	c3                   	ret    
+ 817:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 81e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 820:	83 ec 0c             	sub    $0xc,%esp
+ 823:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 828:	6a 00                	push   $0x0
+ 82a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 82d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 830:	8b 13                	mov    (%ebx),%edx
+ 832:	e8 59 fe ff ff       	call   690 <printint>
+        ap++;
+ 837:	89 d8                	mov    %ebx,%eax
+ 839:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 83c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 83e:	83 c0 04             	add    $0x4,%eax
+ 841:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 844:	e9 4b ff ff ff       	jmp    794 <printf+0x54>
+ 849:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 850:	83 ec 0c             	sub    $0xc,%esp
+ 853:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 858:	6a 01                	push   $0x1
+ 85a:	eb ce                	jmp    82a <printf+0xea>
+ 85c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 860:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 863:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 866:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 868:	6a 01                	push   $0x1
+        ap++;
+ 86a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 86d:	57                   	push   %edi
+ 86e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 871:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 874:	e8 6a fd ff ff       	call   5e3 <write>
+        ap++;
+ 879:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 87c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 87f:	31 d2                	xor    %edx,%edx
+ 881:	e9 0e ff ff ff       	jmp    794 <printf+0x54>
+ 886:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 88d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 890:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 893:	83 ec 04             	sub    $0x4,%esp
+ 896:	e9 59 ff ff ff       	jmp    7f4 <printf+0xb4>
+ 89b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 89f:	90                   	nop
+        s = (char*)*ap;
+ 8a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 8a3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 8a5:	83 c0 04             	add    $0x4,%eax
+ 8a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 8ab:	85 db                	test   %ebx,%ebx
+ 8ad:	74 17                	je     8c6 <printf+0x186>
+        while(*s != 0){
+ 8af:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 8b2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 8b4:	84 c0                	test   %al,%al
+ 8b6:	0f 84 d8 fe ff ff    	je     794 <printf+0x54>
+ 8bc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 8bf:	89 de                	mov    %ebx,%esi
+ 8c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8c4:	eb 1a                	jmp    8e0 <printf+0x1a0>
+          s = "(null)";
+ 8c6:	bb 8c 0c 00 00       	mov    $0xc8c,%ebx
+        while(*s != 0){
+ 8cb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 8ce:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8d3:	89 de                	mov    %ebx,%esi
+ 8d5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8df:	90                   	nop
+  write(fd, &c, 1);
+ 8e0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 8e3:	83 c6 01             	add    $0x1,%esi
+ 8e6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 8e9:	6a 01                	push   $0x1
+ 8eb:	57                   	push   %edi
+ 8ec:	53                   	push   %ebx
+ 8ed:	e8 f1 fc ff ff       	call   5e3 <write>
+        while(*s != 0){
+ 8f2:	0f b6 06             	movzbl (%esi),%eax
+ 8f5:	83 c4 10             	add    $0x10,%esp
+ 8f8:	84 c0                	test   %al,%al
+ 8fa:	75 e4                	jne    8e0 <printf+0x1a0>
+ 8fc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 8ff:	31 d2                	xor    %edx,%edx
+ 901:	e9 8e fe ff ff       	jmp    794 <printf+0x54>
+ 906:	66 90                	xchg   %ax,%ax
+ 908:	66 90                	xchg   %ax,%ax
+ 90a:	66 90                	xchg   %ax,%ax
+ 90c:	66 90                	xchg   %ax,%ax
+ 90e:	66 90                	xchg   %ax,%ax
+
+00000910 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 910:	f3 0f 1e fb          	endbr32 
+ 914:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 915:	a1 74 0f 00 00       	mov    0xf74,%eax
+{
+ 91a:	89 e5                	mov    %esp,%ebp
+ 91c:	57                   	push   %edi
+ 91d:	56                   	push   %esi
+ 91e:	53                   	push   %ebx
+ 91f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 922:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 924:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 927:	39 c8                	cmp    %ecx,%eax
+ 929:	73 15                	jae    940 <free+0x30>
+ 92b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 92f:	90                   	nop
+ 930:	39 d1                	cmp    %edx,%ecx
+ 932:	72 14                	jb     948 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 934:	39 d0                	cmp    %edx,%eax
+ 936:	73 10                	jae    948 <free+0x38>
+{
+ 938:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 93a:	8b 10                	mov    (%eax),%edx
+ 93c:	39 c8                	cmp    %ecx,%eax
+ 93e:	72 f0                	jb     930 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 940:	39 d0                	cmp    %edx,%eax
+ 942:	72 f4                	jb     938 <free+0x28>
+ 944:	39 d1                	cmp    %edx,%ecx
+ 946:	73 f0                	jae    938 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 948:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 94b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 94e:	39 fa                	cmp    %edi,%edx
+ 950:	74 1e                	je     970 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 952:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 955:	8b 50 04             	mov    0x4(%eax),%edx
+ 958:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 95b:	39 f1                	cmp    %esi,%ecx
+ 95d:	74 28                	je     987 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 95f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 961:	5b                   	pop    %ebx
+  freep = p;
+ 962:	a3 74 0f 00 00       	mov    %eax,0xf74
+}
+ 967:	5e                   	pop    %esi
+ 968:	5f                   	pop    %edi
+ 969:	5d                   	pop    %ebp
+ 96a:	c3                   	ret    
+ 96b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 96f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 970:	03 72 04             	add    0x4(%edx),%esi
+ 973:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 976:	8b 10                	mov    (%eax),%edx
+ 978:	8b 12                	mov    (%edx),%edx
+ 97a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 97d:	8b 50 04             	mov    0x4(%eax),%edx
+ 980:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 983:	39 f1                	cmp    %esi,%ecx
+ 985:	75 d8                	jne    95f <free+0x4f>
+    p->s.size += bp->s.size;
+ 987:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 98a:	a3 74 0f 00 00       	mov    %eax,0xf74
+    p->s.size += bp->s.size;
+ 98f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 992:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 995:	89 10                	mov    %edx,(%eax)
+}
+ 997:	5b                   	pop    %ebx
+ 998:	5e                   	pop    %esi
+ 999:	5f                   	pop    %edi
+ 99a:	5d                   	pop    %ebp
+ 99b:	c3                   	ret    
+ 99c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000009a0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 9a0:	f3 0f 1e fb          	endbr32 
+ 9a4:	55                   	push   %ebp
+ 9a5:	89 e5                	mov    %esp,%ebp
+ 9a7:	57                   	push   %edi
+ 9a8:	56                   	push   %esi
+ 9a9:	53                   	push   %ebx
+ 9aa:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 9ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 9b0:	8b 3d 74 0f 00 00    	mov    0xf74,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 9b6:	8d 70 07             	lea    0x7(%eax),%esi
+ 9b9:	c1 ee 03             	shr    $0x3,%esi
+ 9bc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 9bf:	85 ff                	test   %edi,%edi
+ 9c1:	0f 84 a9 00 00 00    	je     a70 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9c7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 9c9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 9cc:	39 f1                	cmp    %esi,%ecx
+ 9ce:	73 6d                	jae    a3d <malloc+0x9d>
+ 9d0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 9d6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 9db:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 9de:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 9e5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 9e8:	eb 17                	jmp    a01 <malloc+0x61>
+ 9ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9f0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 9f2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 9f5:	39 f1                	cmp    %esi,%ecx
+ 9f7:	73 4f                	jae    a48 <malloc+0xa8>
+ 9f9:	8b 3d 74 0f 00 00    	mov    0xf74,%edi
+ 9ff:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ a01:	39 c7                	cmp    %eax,%edi
+ a03:	75 eb                	jne    9f0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ a05:	83 ec 0c             	sub    $0xc,%esp
+ a08:	ff 75 e4             	pushl  -0x1c(%ebp)
+ a0b:	e8 3b fc ff ff       	call   64b <sbrk>
+  if(p == (char*)-1)
+ a10:	83 c4 10             	add    $0x10,%esp
+ a13:	83 f8 ff             	cmp    $0xffffffff,%eax
+ a16:	74 1b                	je     a33 <malloc+0x93>
+  hp->s.size = nu;
+ a18:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ a1b:	83 ec 0c             	sub    $0xc,%esp
+ a1e:	83 c0 08             	add    $0x8,%eax
+ a21:	50                   	push   %eax
+ a22:	e8 e9 fe ff ff       	call   910 <free>
+  return freep;
+ a27:	a1 74 0f 00 00       	mov    0xf74,%eax
+      if((p = morecore(nunits)) == 0)
+ a2c:	83 c4 10             	add    $0x10,%esp
+ a2f:	85 c0                	test   %eax,%eax
+ a31:	75 bd                	jne    9f0 <malloc+0x50>
+        return 0;
+  }
+}
+ a33:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ a36:	31 c0                	xor    %eax,%eax
+}
+ a38:	5b                   	pop    %ebx
+ a39:	5e                   	pop    %esi
+ a3a:	5f                   	pop    %edi
+ a3b:	5d                   	pop    %ebp
+ a3c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ a3d:	89 c2                	mov    %eax,%edx
+ a3f:	89 f8                	mov    %edi,%eax
+ a41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ a48:	39 ce                	cmp    %ecx,%esi
+ a4a:	74 54                	je     aa0 <malloc+0x100>
+        p->s.size -= nunits;
+ a4c:	29 f1                	sub    %esi,%ecx
+ a4e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ a51:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ a54:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ a57:	a3 74 0f 00 00       	mov    %eax,0xf74
+}
+ a5c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ a5f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ a62:	5b                   	pop    %ebx
+ a63:	5e                   	pop    %esi
+ a64:	5f                   	pop    %edi
+ a65:	5d                   	pop    %ebp
+ a66:	c3                   	ret    
+ a67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a6e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ a70:	c7 05 74 0f 00 00 78 	movl   $0xf78,0xf74
+ a77:	0f 00 00 
+    base.s.size = 0;
+ a7a:	bf 78 0f 00 00       	mov    $0xf78,%edi
+    base.s.ptr = freep = prevp = &base;
+ a7f:	c7 05 78 0f 00 00 78 	movl   $0xf78,0xf78
+ a86:	0f 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a89:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ a8b:	c7 05 7c 0f 00 00 00 	movl   $0x0,0xf7c
+ a92:	00 00 00 
+    if(p->s.size >= nunits){
+ a95:	e9 36 ff ff ff       	jmp    9d0 <malloc+0x30>
+ a9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ aa0:	8b 0a                	mov    (%edx),%ecx
+ aa2:	89 08                	mov    %ecx,(%eax)
+ aa4:	eb b1                	jmp    a57 <malloc+0xb7>
diff -ruN xv6-public/test2.c xv6-new/test2.c
--- xv6-public/test2.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/test2.c	2022-10-07 11:44:15.401326000 +0530
@@ -0,0 +1,83 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "processInfo.h"
+
+// CPU bound
+void delay()
+{
+    int* data = (int*)malloc(1000*sizeof(int));
+
+    for(int i=0;i<100000000;++i)
+        data[i % 1000] = 0;
+
+    for(int j=0;j<100000000;j++)
+        data[j % 1000] = 0;
+}
+
+
+int main(int argc, char *argv[])
+{
+    if (argc < 2)
+    {
+        printf(1, "Incorrect Format\n\nInput Format : test<test-case-number> <number-of-child-processes>\nE.g. : test2 10\n");
+        exit();
+    }
+    int N = atoi(argv[1]);
+
+    int pids[N];
+    int return_order_of_procs[N];
+    int burstTimes[N];
+    set_burst_time(2);
+    printf(1,"Test Case #2 : Increasing burst times of Child Processes\n");
+    printf(1, "Burst times of parent process = %d\n\n", get_burst_time());
+    int first_child_process_pid;
+    for (int i = 0; i < N; i++)
+    {
+        int burst_time = 5*i+3;
+
+        int newProcPID = fork();
+        if (newProcPID == 0)
+        {
+            struct processInfo info;
+	        getProcInfo(getpid(),&info);
+	        printf(1,"Before Execution starts : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches);
+            
+            set_burst_time(burst_time);
+            delay();
+
+            getProcInfo(getpid(),&info);
+	        printf(1,"After Execution ends : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches); 
+            exit();
+        }
+        else if (newProcPID > 0)
+        {
+            if(i == 0){
+                first_child_process_pid = newProcPID;
+            }
+            pids[i] = newProcPID;
+            burstTimes[i] = burst_time;
+        }
+        else
+        {
+            printf(1, "Error occured while forking \n");
+            exit();
+        }
+    }
+
+    for (int i = 0; i < N; i++)
+    {
+        return_order_of_procs[i] = wait();
+    }
+
+    printf(1, "\nAll children executed successfully\n");
+    for (int i = 0; i < N; i++)
+        printf(1, "Child %d    pid %d    burst time = %d\n", i, pids[i],burstTimes[i]);
+
+    
+    printf(1, "\nChild Proceses Exit order \n");
+    for (int i = 0; i < N; i++)
+        printf(1, "pid %d     burst time = %d\n", return_order_of_procs[i], burstTimes[return_order_of_procs[i]-first_child_process_pid]);
+
+    exit();
+}
\ No newline at end of file
diff -ruN xv6-public/test2.d xv6-new/test2.d
--- xv6-public/test2.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/test2.d	2022-10-07 22:43:44.791886860 +0530
@@ -0,0 +1,2 @@
+test2.o: test2.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/test2.o and xv6-new/test2.o differ
diff -ruN xv6-public/test2.sym xv6-new/test2.sym
--- xv6-public/test2.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/test2.sym	2022-10-07 22:43:44.791886860 +0530
@@ -0,0 +1,63 @@
+00000000 .text
+00000aa8 .rodata
+00000ca8 .eh_frame
+00000f74 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 test2.c
+00000000 ulib.c
+00000000 printf.c
+00000690 printint
+00000c94 digits.1096
+00000000 umalloc.c
+00000f74 freep
+00000f78 base
+00000360 strcpy
+00000740 printf
+00000590 memmove
+0000060b mknod
+00000480 gets
+00000643 getpid
+000009a0 malloc
+00000653 sleep
+00000683 get_burst_time
+000005d3 pipe
+000005e3 write
+0000061b fstat
+000005f3 kill
+00000633 chdir
+000005fb exec
+000005cb wait
+000005db read
+00000613 unlink
+000005bb fork
+0000064b sbrk
+0000065b uptime
+00000f74 __bss_start
+00000420 memset
+00000000 main
+0000067b set_burst_time
+00000390 strcmp
+0000063b dup
+000002d0 delay
+0000066b getMaxPid
+00000663 getNumProc
+00000673 getProcInfo
+00000500 stat
+00000f74 _edata
+00000f80 _end
+00000623 link
+000005c3 exit
+00000550 atoi
+000003e0 strlen
+00000603 open
+00000440 strchr
+0000062b mkdir
+000005eb close
+00000910 free
diff -ruN xv6-public/test3.asm xv6-new/test3.asm
--- xv6-public/test3.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/test3.asm	2022-10-07 22:43:45.271886867 +0530
@@ -0,0 +1,1557 @@
+
+_test3:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+}
+
+
+
+int main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	53                   	push   %ebx
+  14:	51                   	push   %ecx
+  15:	83 ec 38             	sub    $0x38,%esp
+    if (argc < 2)
+  18:	83 39 01             	cmpl   $0x1,(%ecx)
+{
+  1b:	8b 41 04             	mov    0x4(%ecx),%eax
+    if (argc < 2)
+  1e:	7e 3e                	jle    5e <main+0x5e>
+    {
+        printf(1, "Incorrect Format\n\nInput Format : test<test-case-number> <number-of-child-processes>\nE.g. : test3 10\n");
+        exit();
+    }
+    int N = atoi(argv[1]);
+  20:	83 ec 0c             	sub    $0xc,%esp
+  23:	ff 70 04             	pushl  0x4(%eax)
+  26:	e8 15 05 00 00       	call   540 <atoi>
+
+    int pids[N];
+  2b:	83 c4 10             	add    $0x10,%esp
+    int N = atoi(argv[1]);
+  2e:	89 c7                	mov    %eax,%edi
+    int pids[N];
+  30:	8d 04 85 0f 00 00 00 	lea    0xf(,%eax,4),%eax
+  37:	89 e6                	mov    %esp,%esi
+  39:	89 c1                	mov    %eax,%ecx
+  3b:	89 c2                	mov    %eax,%edx
+  3d:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
+  43:	83 e2 f0             	and    $0xfffffff0,%edx
+  46:	29 ce                	sub    %ecx,%esi
+  48:	89 f1                	mov    %esi,%ecx
+  4a:	39 cc                	cmp    %ecx,%esp
+  4c:	74 23                	je     71 <main+0x71>
+  4e:	81 ec 00 10 00 00    	sub    $0x1000,%esp
+  54:	83 8c 24 fc 0f 00 00 	orl    $0x0,0xffc(%esp)
+  5b:	00 
+  5c:	eb ec                	jmp    4a <main+0x4a>
+        printf(1, "Incorrect Format\n\nInput Format : test<test-case-number> <number-of-child-processes>\nE.g. : test3 10\n");
+  5e:	51                   	push   %ecx
+  5f:	51                   	push   %ecx
+  60:	68 98 0a 00 00       	push   $0xa98
+  65:	6a 01                	push   $0x1
+  67:	e8 c4 06 00 00       	call   730 <printf>
+        exit();
+  6c:	e8 42 05 00 00       	call   5b3 <exit>
+    int pids[N];
+  71:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
+  77:	29 d4                	sub    %edx,%esp
+  79:	85 d2                	test   %edx,%edx
+  7b:	74 05                	je     82 <main+0x82>
+  7d:	83 4c 14 fc 00       	orl    $0x0,-0x4(%esp,%edx,1)
+    int return_order_of_procs[N];
+  82:	89 c1                	mov    %eax,%ecx
+  84:	89 e3                	mov    %esp,%ebx
+    int pids[N];
+  86:	89 65 d0             	mov    %esp,-0x30(%ebp)
+    int return_order_of_procs[N];
+  89:	89 c2                	mov    %eax,%edx
+  8b:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
+  91:	83 e2 f0             	and    $0xfffffff0,%edx
+  94:	29 cb                	sub    %ecx,%ebx
+  96:	89 d9                	mov    %ebx,%ecx
+  98:	39 cc                	cmp    %ecx,%esp
+  9a:	74 10                	je     ac <main+0xac>
+  9c:	81 ec 00 10 00 00    	sub    $0x1000,%esp
+  a2:	83 8c 24 fc 0f 00 00 	orl    $0x0,0xffc(%esp)
+  a9:	00 
+  aa:	eb ec                	jmp    98 <main+0x98>
+  ac:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
+  b2:	29 d4                	sub    %edx,%esp
+  b4:	85 d2                	test   %edx,%edx
+  b6:	75 27                	jne    df <main+0xdf>
+    int burstTimes[N];
+  b8:	89 c2                	mov    %eax,%edx
+  ba:	89 e1                	mov    %esp,%ecx
+  bc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+    int return_order_of_procs[N];
+  c1:	89 65 c0             	mov    %esp,-0x40(%ebp)
+    int burstTimes[N];
+  c4:	29 c1                	sub    %eax,%ecx
+  c6:	83 e2 f0             	and    $0xfffffff0,%edx
+  c9:	89 c8                	mov    %ecx,%eax
+  cb:	39 c4                	cmp    %eax,%esp
+  cd:	74 17                	je     e6 <main+0xe6>
+  cf:	81 ec 00 10 00 00    	sub    $0x1000,%esp
+  d5:	83 8c 24 fc 0f 00 00 	orl    $0x0,0xffc(%esp)
+  dc:	00 
+  dd:	eb ec                	jmp    cb <main+0xcb>
+    int return_order_of_procs[N];
+  df:	83 4c 14 fc 00       	orl    $0x0,-0x4(%esp,%edx,1)
+  e4:	eb d2                	jmp    b8 <main+0xb8>
+    int burstTimes[N];
+  e6:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
+  ec:	29 d4                	sub    %edx,%esp
+  ee:	85 d2                	test   %edx,%edx
+  f0:	74 05                	je     f7 <main+0xf7>
+  f2:	83 4c 14 fc 00       	orl    $0x0,-0x4(%esp,%edx,1)
+  f7:	89 65 d4             	mov    %esp,-0x2c(%ebp)
+    set_burst_time(2);
+  fa:	83 ec 0c             	sub    $0xc,%esp
+  fd:	6a 02                	push   $0x2
+  ff:	e8 67 05 00 00       	call   66b <set_burst_time>
+    printf(1,"Test Case #2 : Decreasing burst times of Child Processes\n");
+ 104:	58                   	pop    %eax
+ 105:	5a                   	pop    %edx
+ 106:	68 00 0b 00 00       	push   $0xb00
+ 10b:	6a 01                	push   $0x1
+ 10d:	e8 1e 06 00 00       	call   730 <printf>
+    printf(1, "Burst times of parent process = %d\n\n", get_burst_time());
+ 112:	e8 5c 05 00 00       	call   673 <get_burst_time>
+ 117:	83 c4 0c             	add    $0xc,%esp
+ 11a:	50                   	push   %eax
+ 11b:	68 3c 0b 00 00       	push   $0xb3c
+ 120:	6a 01                	push   $0x1
+ 122:	e8 09 06 00 00       	call   730 <printf>
+    int first_child_process_pid;
+    for (int i = 0; i < N; i++)
+ 127:	83 c4 10             	add    $0x10,%esp
+ 12a:	85 ff                	test   %edi,%edi
+ 12c:	0f 8e 6a 01 00 00    	jle    29c <main+0x29c>
+ 132:	8d 47 05             	lea    0x5(%edi),%eax
+ 135:	89 7d c8             	mov    %edi,-0x38(%ebp)
+ 138:	31 db                	xor    %ebx,%ebx
+ 13a:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+ 13d:	89 45 cc             	mov    %eax,-0x34(%ebp)
+ 140:	eb 2b                	jmp    16d <main+0x16d>
+ 142:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+            getProcInfo(getpid(),&info);
+	        printf(1,"After Execution ends : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches); 
+            exit();
+        }
+        else if (newProcPID > 0)
+ 148:	0f 8e 8e 00 00 00    	jle    1dc <main+0x1dc>
+        {
+            if(i == 0){
+                first_child_process_pid = newProcPID;
+            }
+            pids[i] = newProcPID;
+ 14e:	8b 55 d0             	mov    -0x30(%ebp),%edx
+            if(i == 0){
+ 151:	85 db                	test   %ebx,%ebx
+ 153:	0f 44 f8             	cmove  %eax,%edi
+            pids[i] = newProcPID;
+ 156:	89 04 9a             	mov    %eax,(%edx,%ebx,4)
+            burstTimes[i] = burst_time;
+ 159:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 15c:	89 34 98             	mov    %esi,(%eax,%ebx,4)
+    for (int i = 0; i < N; i++)
+ 15f:	8d 43 01             	lea    0x1(%ebx),%eax
+ 162:	39 45 c8             	cmp    %eax,-0x38(%ebp)
+ 165:	0f 84 84 00 00 00    	je     1ef <main+0x1ef>
+ 16b:	89 c3                	mov    %eax,%ebx
+        int burst_time = N - i + 5;
+ 16d:	8b 75 cc             	mov    -0x34(%ebp),%esi
+ 170:	29 de                	sub    %ebx,%esi
+        int newProcPID = fork();
+ 172:	e8 34 04 00 00       	call   5ab <fork>
+        if (newProcPID == 0)
+ 177:	85 c0                	test   %eax,%eax
+ 179:	75 cd                	jne    148 <main+0x148>
+	        getProcInfo(getpid(),&info);
+ 17b:	e8 b3 04 00 00       	call   633 <getpid>
+ 180:	8d 5d dc             	lea    -0x24(%ebp),%ebx
+ 183:	52                   	push   %edx
+ 184:	52                   	push   %edx
+ 185:	53                   	push   %ebx
+ 186:	50                   	push   %eax
+ 187:	e8 d7 04 00 00       	call   663 <getProcInfo>
+	        printf(1,"Before Execution starts : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches);
+ 18c:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+ 18f:	e8 9f 04 00 00       	call   633 <getpid>
+ 194:	57                   	push   %edi
+ 195:	50                   	push   %eax
+ 196:	68 64 0b 00 00       	push   $0xb64
+ 19b:	6a 01                	push   $0x1
+ 19d:	e8 8e 05 00 00       	call   730 <printf>
+            set_burst_time(burst_time);
+ 1a2:	83 c4 14             	add    $0x14,%esp
+ 1a5:	56                   	push   %esi
+ 1a6:	e8 c0 04 00 00       	call   66b <set_burst_time>
+            delay();
+ 1ab:	e8 10 01 00 00       	call   2c0 <delay>
+            getProcInfo(getpid(),&info);
+ 1b0:	e8 7e 04 00 00       	call   633 <getpid>
+ 1b5:	59                   	pop    %ecx
+ 1b6:	5e                   	pop    %esi
+ 1b7:	53                   	push   %ebx
+ 1b8:	50                   	push   %eax
+ 1b9:	e8 a5 04 00 00       	call   663 <getProcInfo>
+	        printf(1,"After Execution ends : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches); 
+ 1be:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+ 1c1:	e8 6d 04 00 00       	call   633 <getpid>
+ 1c6:	53                   	push   %ebx
+ 1c7:	50                   	push   %eax
+ 1c8:	68 a0 0b 00 00       	push   $0xba0
+ 1cd:	6a 01                	push   $0x1
+ 1cf:	e8 5c 05 00 00       	call   730 <printf>
+            exit();
+ 1d4:	83 c4 20             	add    $0x20,%esp
+ 1d7:	e8 d7 03 00 00       	call   5b3 <exit>
+        }
+        else
+        {
+            printf(1, "Error occured while forking \n");
+ 1dc:	50                   	push   %eax
+ 1dd:	50                   	push   %eax
+ 1de:	68 25 0c 00 00       	push   $0xc25
+ 1e3:	6a 01                	push   $0x1
+ 1e5:	e8 46 05 00 00       	call   730 <printf>
+            exit();
+ 1ea:	e8 c4 03 00 00       	call   5b3 <exit>
+ 1ef:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+ 1f2:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 1f5:	31 f6                	xor    %esi,%esi
+ 1f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1fe:	66 90                	xchg   %ax,%ax
+        }
+    }
+
+    for (int i = 0; i < N; i++)
+    {
+        return_order_of_procs[i] = wait();
+ 200:	e8 b6 03 00 00       	call   5bb <wait>
+ 205:	89 04 b7             	mov    %eax,(%edi,%esi,4)
+    for (int i = 0; i < N; i++)
+ 208:	89 f0                	mov    %esi,%eax
+ 20a:	83 c6 01             	add    $0x1,%esi
+ 20d:	39 d8                	cmp    %ebx,%eax
+ 20f:	75 ef                	jne    200 <main+0x200>
+    }
+
+    printf(1, "\nAll children executed successfully\n");
+ 211:	56                   	push   %esi
+ 212:	31 ff                	xor    %edi,%edi
+ 214:	56                   	push   %esi
+ 215:	89 de                	mov    %ebx,%esi
+ 217:	68 00 0c 00 00       	push   $0xc00
+ 21c:	6a 01                	push   $0x1
+ 21e:	e8 0d 05 00 00       	call   730 <printf>
+ 223:	83 c4 10             	add    $0x10,%esp
+ 226:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22d:	8d 76 00             	lea    0x0(%esi),%esi
+    for (int i = 0; i < N; i++)
+        printf(1, "Child %d    pid %d    burst time = %d\n", i, pids[i],burstTimes[i]);
+ 230:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 233:	83 ec 0c             	sub    $0xc,%esp
+ 236:	89 fb                	mov    %edi,%ebx
+ 238:	ff 34 b8             	pushl  (%eax,%edi,4)
+ 23b:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 23e:	ff 34 b8             	pushl  (%eax,%edi,4)
+ 241:	57                   	push   %edi
+    for (int i = 0; i < N; i++)
+ 242:	83 c7 01             	add    $0x1,%edi
+        printf(1, "Child %d    pid %d    burst time = %d\n", i, pids[i],burstTimes[i]);
+ 245:	68 d8 0b 00 00       	push   $0xbd8
+ 24a:	6a 01                	push   $0x1
+ 24c:	e8 df 04 00 00       	call   730 <printf>
+    for (int i = 0; i < N; i++)
+ 251:	83 c4 20             	add    $0x20,%esp
+ 254:	39 f3                	cmp    %esi,%ebx
+ 256:	75 d8                	jne    230 <main+0x230>
+
+    
+    printf(1, "\nChild Proceses Exit order \n");
+ 258:	57                   	push   %edi
+ 259:	89 f3                	mov    %esi,%ebx
+ 25b:	31 f6                	xor    %esi,%esi
+ 25d:	57                   	push   %edi
+ 25e:	68 5f 0c 00 00       	push   $0xc5f
+ 263:	6a 01                	push   $0x1
+ 265:	e8 c6 04 00 00       	call   730 <printf>
+    for (int i = 0; i < N; i++)
+ 26a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+    printf(1, "\nChild Proceses Exit order \n");
+ 26d:	83 c4 10             	add    $0x10,%esp
+        printf(1, "pid %d     burst time = %d\n", return_order_of_procs[i], burstTimes[return_order_of_procs[i]-first_child_process_pid]);
+ 270:	8b 14 b7             	mov    (%edi,%esi,4),%edx
+ 273:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 276:	89 d1                	mov    %edx,%ecx
+ 278:	2b 4d c4             	sub    -0x3c(%ebp),%ecx
+ 27b:	ff 34 88             	pushl  (%eax,%ecx,4)
+ 27e:	52                   	push   %edx
+ 27f:	68 43 0c 00 00       	push   $0xc43
+ 284:	6a 01                	push   $0x1
+ 286:	e8 a5 04 00 00       	call   730 <printf>
+    for (int i = 0; i < N; i++)
+ 28b:	89 f2                	mov    %esi,%edx
+ 28d:	83 c4 10             	add    $0x10,%esp
+ 290:	83 c6 01             	add    $0x1,%esi
+ 293:	39 da                	cmp    %ebx,%edx
+ 295:	75 d9                	jne    270 <main+0x270>
+
+    exit();
+ 297:	e8 17 03 00 00       	call   5b3 <exit>
+    printf(1, "\nAll children executed successfully\n");
+ 29c:	50                   	push   %eax
+ 29d:	50                   	push   %eax
+ 29e:	68 00 0c 00 00       	push   $0xc00
+ 2a3:	6a 01                	push   $0x1
+ 2a5:	e8 86 04 00 00       	call   730 <printf>
+    printf(1, "\nChild Proceses Exit order \n");
+ 2aa:	5a                   	pop    %edx
+ 2ab:	59                   	pop    %ecx
+ 2ac:	68 5f 0c 00 00       	push   $0xc5f
+ 2b1:	6a 01                	push   $0x1
+ 2b3:	e8 78 04 00 00       	call   730 <printf>
+ 2b8:	83 c4 10             	add    $0x10,%esp
+ 2bb:	eb da                	jmp    297 <main+0x297>
+ 2bd:	66 90                	xchg   %ax,%ax
+ 2bf:	90                   	nop
+
+000002c0 <delay>:
+{
+ 2c0:	f3 0f 1e fb          	endbr32 
+ 2c4:	55                   	push   %ebp
+ 2c5:	89 e5                	mov    %esp,%ebp
+ 2c7:	56                   	push   %esi
+        data[i % 1000] = 0;
+ 2c8:	be d3 4d 62 10       	mov    $0x10624dd3,%esi
+{
+ 2cd:	53                   	push   %ebx
+    int* data = (int*)malloc(1000*sizeof(int));
+ 2ce:	83 ec 0c             	sub    $0xc,%esp
+ 2d1:	68 a0 0f 00 00       	push   $0xfa0
+ 2d6:	e8 b5 06 00 00       	call   990 <malloc>
+ 2db:	83 c4 10             	add    $0x10,%esp
+    for(int i=0;i<100000000;++i)
+ 2de:	31 c9                	xor    %ecx,%ecx
+    int* data = (int*)malloc(1000*sizeof(int));
+ 2e0:	89 c3                	mov    %eax,%ebx
+    for(int i=0;i<100000000;++i)
+ 2e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        data[i % 1000] = 0;
+ 2e8:	89 c8                	mov    %ecx,%eax
+ 2ea:	f7 e6                	mul    %esi
+ 2ec:	89 c8                	mov    %ecx,%eax
+    for(int i=0;i<100000000;++i)
+ 2ee:	83 c1 01             	add    $0x1,%ecx
+        data[i % 1000] = 0;
+ 2f1:	c1 ea 06             	shr    $0x6,%edx
+ 2f4:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+ 2fa:	29 d0                	sub    %edx,%eax
+ 2fc:	c7 04 83 00 00 00 00 	movl   $0x0,(%ebx,%eax,4)
+    for(int i=0;i<100000000;++i)
+ 303:	81 f9 00 e1 f5 05    	cmp    $0x5f5e100,%ecx
+ 309:	75 dd                	jne    2e8 <delay+0x28>
+    for(int j=0;j<100000000;j++)
+ 30b:	31 c9                	xor    %ecx,%ecx
+        data[j % 1000] = 0;
+ 30d:	be d3 4d 62 10       	mov    $0x10624dd3,%esi
+ 312:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 318:	89 c8                	mov    %ecx,%eax
+ 31a:	f7 e6                	mul    %esi
+ 31c:	89 c8                	mov    %ecx,%eax
+    for(int j=0;j<100000000;j++)
+ 31e:	83 c1 01             	add    $0x1,%ecx
+        data[j % 1000] = 0;
+ 321:	c1 ea 06             	shr    $0x6,%edx
+ 324:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+ 32a:	29 d0                	sub    %edx,%eax
+ 32c:	c7 04 83 00 00 00 00 	movl   $0x0,(%ebx,%eax,4)
+    for(int j=0;j<100000000;j++)
+ 333:	81 f9 00 e1 f5 05    	cmp    $0x5f5e100,%ecx
+ 339:	75 dd                	jne    318 <delay+0x58>
+}
+ 33b:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 33e:	5b                   	pop    %ebx
+ 33f:	5e                   	pop    %esi
+ 340:	5d                   	pop    %ebp
+ 341:	c3                   	ret    
+ 342:	66 90                	xchg   %ax,%ax
+ 344:	66 90                	xchg   %ax,%ax
+ 346:	66 90                	xchg   %ax,%ax
+ 348:	66 90                	xchg   %ax,%ax
+ 34a:	66 90                	xchg   %ax,%ax
+ 34c:	66 90                	xchg   %ax,%ax
+ 34e:	66 90                	xchg   %ax,%ax
+
+00000350 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 350:	f3 0f 1e fb          	endbr32 
+ 354:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 355:	31 c0                	xor    %eax,%eax
+{
+ 357:	89 e5                	mov    %esp,%ebp
+ 359:	53                   	push   %ebx
+ 35a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 35d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 360:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 364:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 367:	83 c0 01             	add    $0x1,%eax
+ 36a:	84 d2                	test   %dl,%dl
+ 36c:	75 f2                	jne    360 <strcpy+0x10>
+    ;
+  return os;
+}
+ 36e:	89 c8                	mov    %ecx,%eax
+ 370:	5b                   	pop    %ebx
+ 371:	5d                   	pop    %ebp
+ 372:	c3                   	ret    
+ 373:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 37a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000380 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 380:	f3 0f 1e fb          	endbr32 
+ 384:	55                   	push   %ebp
+ 385:	89 e5                	mov    %esp,%ebp
+ 387:	53                   	push   %ebx
+ 388:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 38b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 38e:	0f b6 01             	movzbl (%ecx),%eax
+ 391:	0f b6 1a             	movzbl (%edx),%ebx
+ 394:	84 c0                	test   %al,%al
+ 396:	75 19                	jne    3b1 <strcmp+0x31>
+ 398:	eb 26                	jmp    3c0 <strcmp+0x40>
+ 39a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 3a0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 3a4:	83 c1 01             	add    $0x1,%ecx
+ 3a7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 3aa:	0f b6 1a             	movzbl (%edx),%ebx
+ 3ad:	84 c0                	test   %al,%al
+ 3af:	74 0f                	je     3c0 <strcmp+0x40>
+ 3b1:	38 d8                	cmp    %bl,%al
+ 3b3:	74 eb                	je     3a0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 3b5:	29 d8                	sub    %ebx,%eax
+}
+ 3b7:	5b                   	pop    %ebx
+ 3b8:	5d                   	pop    %ebp
+ 3b9:	c3                   	ret    
+ 3ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 3c0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 3c2:	29 d8                	sub    %ebx,%eax
+}
+ 3c4:	5b                   	pop    %ebx
+ 3c5:	5d                   	pop    %ebp
+ 3c6:	c3                   	ret    
+ 3c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ce:	66 90                	xchg   %ax,%ax
+
+000003d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 3d0:	f3 0f 1e fb          	endbr32 
+ 3d4:	55                   	push   %ebp
+ 3d5:	89 e5                	mov    %esp,%ebp
+ 3d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3da:	80 3a 00             	cmpb   $0x0,(%edx)
+ 3dd:	74 21                	je     400 <strlen+0x30>
+ 3df:	31 c0                	xor    %eax,%eax
+ 3e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3e8:	83 c0 01             	add    $0x1,%eax
+ 3eb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 3ef:	89 c1                	mov    %eax,%ecx
+ 3f1:	75 f5                	jne    3e8 <strlen+0x18>
+    ;
+  return n;
+}
+ 3f3:	89 c8                	mov    %ecx,%eax
+ 3f5:	5d                   	pop    %ebp
+ 3f6:	c3                   	ret    
+ 3f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3fe:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 400:	31 c9                	xor    %ecx,%ecx
+}
+ 402:	5d                   	pop    %ebp
+ 403:	89 c8                	mov    %ecx,%eax
+ 405:	c3                   	ret    
+ 406:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 40d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000410 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 410:	f3 0f 1e fb          	endbr32 
+ 414:	55                   	push   %ebp
+ 415:	89 e5                	mov    %esp,%ebp
+ 417:	57                   	push   %edi
+ 418:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 41b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 41e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 421:	89 d7                	mov    %edx,%edi
+ 423:	fc                   	cld    
+ 424:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 426:	89 d0                	mov    %edx,%eax
+ 428:	5f                   	pop    %edi
+ 429:	5d                   	pop    %ebp
+ 42a:	c3                   	ret    
+ 42b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 42f:	90                   	nop
+
+00000430 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 430:	f3 0f 1e fb          	endbr32 
+ 434:	55                   	push   %ebp
+ 435:	89 e5                	mov    %esp,%ebp
+ 437:	8b 45 08             	mov    0x8(%ebp),%eax
+ 43a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 43e:	0f b6 10             	movzbl (%eax),%edx
+ 441:	84 d2                	test   %dl,%dl
+ 443:	75 16                	jne    45b <strchr+0x2b>
+ 445:	eb 21                	jmp    468 <strchr+0x38>
+ 447:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44e:	66 90                	xchg   %ax,%ax
+ 450:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 454:	83 c0 01             	add    $0x1,%eax
+ 457:	84 d2                	test   %dl,%dl
+ 459:	74 0d                	je     468 <strchr+0x38>
+    if(*s == c)
+ 45b:	38 d1                	cmp    %dl,%cl
+ 45d:	75 f1                	jne    450 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 45f:	5d                   	pop    %ebp
+ 460:	c3                   	ret    
+ 461:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 468:	31 c0                	xor    %eax,%eax
+}
+ 46a:	5d                   	pop    %ebp
+ 46b:	c3                   	ret    
+ 46c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000470 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 470:	f3 0f 1e fb          	endbr32 
+ 474:	55                   	push   %ebp
+ 475:	89 e5                	mov    %esp,%ebp
+ 477:	57                   	push   %edi
+ 478:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 479:	31 f6                	xor    %esi,%esi
+{
+ 47b:	53                   	push   %ebx
+ 47c:	89 f3                	mov    %esi,%ebx
+ 47e:	83 ec 1c             	sub    $0x1c,%esp
+ 481:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 484:	eb 33                	jmp    4b9 <gets+0x49>
+ 486:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 48d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 490:	83 ec 04             	sub    $0x4,%esp
+ 493:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 496:	6a 01                	push   $0x1
+ 498:	50                   	push   %eax
+ 499:	6a 00                	push   $0x0
+ 49b:	e8 2b 01 00 00       	call   5cb <read>
+    if(cc < 1)
+ 4a0:	83 c4 10             	add    $0x10,%esp
+ 4a3:	85 c0                	test   %eax,%eax
+ 4a5:	7e 1c                	jle    4c3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 4a7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 4ab:	83 c7 01             	add    $0x1,%edi
+ 4ae:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 4b1:	3c 0a                	cmp    $0xa,%al
+ 4b3:	74 23                	je     4d8 <gets+0x68>
+ 4b5:	3c 0d                	cmp    $0xd,%al
+ 4b7:	74 1f                	je     4d8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 4b9:	83 c3 01             	add    $0x1,%ebx
+ 4bc:	89 fe                	mov    %edi,%esi
+ 4be:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 4c1:	7c cd                	jl     490 <gets+0x20>
+ 4c3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 4c5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 4c8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4cb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ce:	5b                   	pop    %ebx
+ 4cf:	5e                   	pop    %esi
+ 4d0:	5f                   	pop    %edi
+ 4d1:	5d                   	pop    %ebp
+ 4d2:	c3                   	ret    
+ 4d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4d7:	90                   	nop
+ 4d8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4db:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4de:	01 de                	add    %ebx,%esi
+ 4e0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 4e2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4e5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4e8:	5b                   	pop    %ebx
+ 4e9:	5e                   	pop    %esi
+ 4ea:	5f                   	pop    %edi
+ 4eb:	5d                   	pop    %ebp
+ 4ec:	c3                   	ret    
+ 4ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000004f0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 4f0:	f3 0f 1e fb          	endbr32 
+ 4f4:	55                   	push   %ebp
+ 4f5:	89 e5                	mov    %esp,%ebp
+ 4f7:	56                   	push   %esi
+ 4f8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 4f9:	83 ec 08             	sub    $0x8,%esp
+ 4fc:	6a 00                	push   $0x0
+ 4fe:	ff 75 08             	pushl  0x8(%ebp)
+ 501:	e8 ed 00 00 00       	call   5f3 <open>
+  if(fd < 0)
+ 506:	83 c4 10             	add    $0x10,%esp
+ 509:	85 c0                	test   %eax,%eax
+ 50b:	78 2b                	js     538 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 50d:	83 ec 08             	sub    $0x8,%esp
+ 510:	ff 75 0c             	pushl  0xc(%ebp)
+ 513:	89 c3                	mov    %eax,%ebx
+ 515:	50                   	push   %eax
+ 516:	e8 f0 00 00 00       	call   60b <fstat>
+  close(fd);
+ 51b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 51e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 520:	e8 b6 00 00 00       	call   5db <close>
+  return r;
+ 525:	83 c4 10             	add    $0x10,%esp
+}
+ 528:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 52b:	89 f0                	mov    %esi,%eax
+ 52d:	5b                   	pop    %ebx
+ 52e:	5e                   	pop    %esi
+ 52f:	5d                   	pop    %ebp
+ 530:	c3                   	ret    
+ 531:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 538:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 53d:	eb e9                	jmp    528 <stat+0x38>
+ 53f:	90                   	nop
+
+00000540 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 540:	f3 0f 1e fb          	endbr32 
+ 544:	55                   	push   %ebp
+ 545:	89 e5                	mov    %esp,%ebp
+ 547:	53                   	push   %ebx
+ 548:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 54b:	0f be 02             	movsbl (%edx),%eax
+ 54e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 551:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 554:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 559:	77 1a                	ja     575 <atoi+0x35>
+ 55b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 55f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 560:	83 c2 01             	add    $0x1,%edx
+ 563:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 566:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 56a:	0f be 02             	movsbl (%edx),%eax
+ 56d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 570:	80 fb 09             	cmp    $0x9,%bl
+ 573:	76 eb                	jbe    560 <atoi+0x20>
+  return n;
+}
+ 575:	89 c8                	mov    %ecx,%eax
+ 577:	5b                   	pop    %ebx
+ 578:	5d                   	pop    %ebp
+ 579:	c3                   	ret    
+ 57a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000580 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 580:	f3 0f 1e fb          	endbr32 
+ 584:	55                   	push   %ebp
+ 585:	89 e5                	mov    %esp,%ebp
+ 587:	57                   	push   %edi
+ 588:	8b 45 10             	mov    0x10(%ebp),%eax
+ 58b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 58e:	56                   	push   %esi
+ 58f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 592:	85 c0                	test   %eax,%eax
+ 594:	7e 0f                	jle    5a5 <memmove+0x25>
+ 596:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 598:	89 d7                	mov    %edx,%edi
+ 59a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 5a0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 5a1:	39 f8                	cmp    %edi,%eax
+ 5a3:	75 fb                	jne    5a0 <memmove+0x20>
+  return vdst;
+}
+ 5a5:	5e                   	pop    %esi
+ 5a6:	89 d0                	mov    %edx,%eax
+ 5a8:	5f                   	pop    %edi
+ 5a9:	5d                   	pop    %ebp
+ 5aa:	c3                   	ret    
+
+000005ab <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 5ab:	b8 01 00 00 00       	mov    $0x1,%eax
+ 5b0:	cd 40                	int    $0x40
+ 5b2:	c3                   	ret    
+
+000005b3 <exit>:
+SYSCALL(exit)
+ 5b3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 5b8:	cd 40                	int    $0x40
+ 5ba:	c3                   	ret    
+
+000005bb <wait>:
+SYSCALL(wait)
+ 5bb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 5c0:	cd 40                	int    $0x40
+ 5c2:	c3                   	ret    
+
+000005c3 <pipe>:
+SYSCALL(pipe)
+ 5c3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 5c8:	cd 40                	int    $0x40
+ 5ca:	c3                   	ret    
+
+000005cb <read>:
+SYSCALL(read)
+ 5cb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 5d0:	cd 40                	int    $0x40
+ 5d2:	c3                   	ret    
+
+000005d3 <write>:
+SYSCALL(write)
+ 5d3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5d8:	cd 40                	int    $0x40
+ 5da:	c3                   	ret    
+
+000005db <close>:
+SYSCALL(close)
+ 5db:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5e0:	cd 40                	int    $0x40
+ 5e2:	c3                   	ret    
+
+000005e3 <kill>:
+SYSCALL(kill)
+ 5e3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5e8:	cd 40                	int    $0x40
+ 5ea:	c3                   	ret    
+
+000005eb <exec>:
+SYSCALL(exec)
+ 5eb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 5f0:	cd 40                	int    $0x40
+ 5f2:	c3                   	ret    
+
+000005f3 <open>:
+SYSCALL(open)
+ 5f3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 5f8:	cd 40                	int    $0x40
+ 5fa:	c3                   	ret    
+
+000005fb <mknod>:
+SYSCALL(mknod)
+ 5fb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 600:	cd 40                	int    $0x40
+ 602:	c3                   	ret    
+
+00000603 <unlink>:
+SYSCALL(unlink)
+ 603:	b8 12 00 00 00       	mov    $0x12,%eax
+ 608:	cd 40                	int    $0x40
+ 60a:	c3                   	ret    
+
+0000060b <fstat>:
+SYSCALL(fstat)
+ 60b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 610:	cd 40                	int    $0x40
+ 612:	c3                   	ret    
+
+00000613 <link>:
+SYSCALL(link)
+ 613:	b8 13 00 00 00       	mov    $0x13,%eax
+ 618:	cd 40                	int    $0x40
+ 61a:	c3                   	ret    
+
+0000061b <mkdir>:
+SYSCALL(mkdir)
+ 61b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 620:	cd 40                	int    $0x40
+ 622:	c3                   	ret    
+
+00000623 <chdir>:
+SYSCALL(chdir)
+ 623:	b8 09 00 00 00       	mov    $0x9,%eax
+ 628:	cd 40                	int    $0x40
+ 62a:	c3                   	ret    
+
+0000062b <dup>:
+SYSCALL(dup)
+ 62b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 630:	cd 40                	int    $0x40
+ 632:	c3                   	ret    
+
+00000633 <getpid>:
+SYSCALL(getpid)
+ 633:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 638:	cd 40                	int    $0x40
+ 63a:	c3                   	ret    
+
+0000063b <sbrk>:
+SYSCALL(sbrk)
+ 63b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 640:	cd 40                	int    $0x40
+ 642:	c3                   	ret    
+
+00000643 <sleep>:
+SYSCALL(sleep)
+ 643:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 648:	cd 40                	int    $0x40
+ 64a:	c3                   	ret    
+
+0000064b <uptime>:
+SYSCALL(uptime)
+ 64b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 650:	cd 40                	int    $0x40
+ 652:	c3                   	ret    
+
+00000653 <getNumProc>:
+SYSCALL(getNumProc)
+ 653:	b8 16 00 00 00       	mov    $0x16,%eax
+ 658:	cd 40                	int    $0x40
+ 65a:	c3                   	ret    
+
+0000065b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 65b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 660:	cd 40                	int    $0x40
+ 662:	c3                   	ret    
+
+00000663 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 663:	b8 18 00 00 00       	mov    $0x18,%eax
+ 668:	cd 40                	int    $0x40
+ 66a:	c3                   	ret    
+
+0000066b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 66b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 670:	cd 40                	int    $0x40
+ 672:	c3                   	ret    
+
+00000673 <get_burst_time>:
+ 673:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 678:	cd 40                	int    $0x40
+ 67a:	c3                   	ret    
+ 67b:	66 90                	xchg   %ax,%ax
+ 67d:	66 90                	xchg   %ax,%ax
+ 67f:	90                   	nop
+
+00000680 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	57                   	push   %edi
+ 684:	56                   	push   %esi
+ 685:	53                   	push   %ebx
+ 686:	83 ec 3c             	sub    $0x3c,%esp
+ 689:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 68c:	89 d1                	mov    %edx,%ecx
+{
+ 68e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 691:	85 d2                	test   %edx,%edx
+ 693:	0f 89 7f 00 00 00    	jns    718 <printint+0x98>
+ 699:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 69d:	74 79                	je     718 <printint+0x98>
+    neg = 1;
+ 69f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 6a6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 6a8:	31 db                	xor    %ebx,%ebx
+ 6aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 6ad:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 6b0:	89 c8                	mov    %ecx,%eax
+ 6b2:	31 d2                	xor    %edx,%edx
+ 6b4:	89 cf                	mov    %ecx,%edi
+ 6b6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 6b9:	0f b6 92 84 0c 00 00 	movzbl 0xc84(%edx),%edx
+ 6c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 6c3:	89 d8                	mov    %ebx,%eax
+ 6c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 6c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 6cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 6ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 6d1:	76 dd                	jbe    6b0 <printint+0x30>
+  if(neg)
+ 6d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 6d6:	85 c9                	test   %ecx,%ecx
+ 6d8:	74 0c                	je     6e6 <printint+0x66>
+    buf[i++] = '-';
+ 6da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 6df:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 6e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 6e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 6e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6ed:	eb 07                	jmp    6f6 <printint+0x76>
+ 6ef:	90                   	nop
+ 6f0:	0f b6 13             	movzbl (%ebx),%edx
+ 6f3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 6f6:	83 ec 04             	sub    $0x4,%esp
+ 6f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 6fc:	6a 01                	push   $0x1
+ 6fe:	56                   	push   %esi
+ 6ff:	57                   	push   %edi
+ 700:	e8 ce fe ff ff       	call   5d3 <write>
+  while(--i >= 0)
+ 705:	83 c4 10             	add    $0x10,%esp
+ 708:	39 de                	cmp    %ebx,%esi
+ 70a:	75 e4                	jne    6f0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 70c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 70f:	5b                   	pop    %ebx
+ 710:	5e                   	pop    %esi
+ 711:	5f                   	pop    %edi
+ 712:	5d                   	pop    %ebp
+ 713:	c3                   	ret    
+ 714:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 718:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 71f:	eb 87                	jmp    6a8 <printint+0x28>
+ 721:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 728:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 72f:	90                   	nop
+
+00000730 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 730:	f3 0f 1e fb          	endbr32 
+ 734:	55                   	push   %ebp
+ 735:	89 e5                	mov    %esp,%ebp
+ 737:	57                   	push   %edi
+ 738:	56                   	push   %esi
+ 739:	53                   	push   %ebx
+ 73a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 73d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 740:	0f b6 1e             	movzbl (%esi),%ebx
+ 743:	84 db                	test   %bl,%bl
+ 745:	0f 84 b4 00 00 00    	je     7ff <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 74b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 74e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 751:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 754:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 756:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 759:	eb 33                	jmp    78e <printf+0x5e>
+ 75b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 75f:	90                   	nop
+ 760:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 763:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 768:	83 f8 25             	cmp    $0x25,%eax
+ 76b:	74 17                	je     784 <printf+0x54>
+  write(fd, &c, 1);
+ 76d:	83 ec 04             	sub    $0x4,%esp
+ 770:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 773:	6a 01                	push   $0x1
+ 775:	57                   	push   %edi
+ 776:	ff 75 08             	pushl  0x8(%ebp)
+ 779:	e8 55 fe ff ff       	call   5d3 <write>
+ 77e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 781:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 784:	0f b6 1e             	movzbl (%esi),%ebx
+ 787:	83 c6 01             	add    $0x1,%esi
+ 78a:	84 db                	test   %bl,%bl
+ 78c:	74 71                	je     7ff <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 78e:	0f be cb             	movsbl %bl,%ecx
+ 791:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 794:	85 d2                	test   %edx,%edx
+ 796:	74 c8                	je     760 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 798:	83 fa 25             	cmp    $0x25,%edx
+ 79b:	75 e7                	jne    784 <printf+0x54>
+      if(c == 'd'){
+ 79d:	83 f8 64             	cmp    $0x64,%eax
+ 7a0:	0f 84 9a 00 00 00    	je     840 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 7a6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 7ac:	83 f9 70             	cmp    $0x70,%ecx
+ 7af:	74 5f                	je     810 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 7b1:	83 f8 73             	cmp    $0x73,%eax
+ 7b4:	0f 84 d6 00 00 00    	je     890 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 7ba:	83 f8 63             	cmp    $0x63,%eax
+ 7bd:	0f 84 8d 00 00 00    	je     850 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 7c3:	83 f8 25             	cmp    $0x25,%eax
+ 7c6:	0f 84 b4 00 00 00    	je     880 <printf+0x150>
+  write(fd, &c, 1);
+ 7cc:	83 ec 04             	sub    $0x4,%esp
+ 7cf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7d3:	6a 01                	push   $0x1
+ 7d5:	57                   	push   %edi
+ 7d6:	ff 75 08             	pushl  0x8(%ebp)
+ 7d9:	e8 f5 fd ff ff       	call   5d3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 7de:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 7e1:	83 c4 0c             	add    $0xc,%esp
+ 7e4:	6a 01                	push   $0x1
+ 7e6:	83 c6 01             	add    $0x1,%esi
+ 7e9:	57                   	push   %edi
+ 7ea:	ff 75 08             	pushl  0x8(%ebp)
+ 7ed:	e8 e1 fd ff ff       	call   5d3 <write>
+  for(i = 0; fmt[i]; i++){
+ 7f2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 7f6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 7f9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 7fb:	84 db                	test   %bl,%bl
+ 7fd:	75 8f                	jne    78e <printf+0x5e>
+    }
+  }
+}
+ 7ff:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 802:	5b                   	pop    %ebx
+ 803:	5e                   	pop    %esi
+ 804:	5f                   	pop    %edi
+ 805:	5d                   	pop    %ebp
+ 806:	c3                   	ret    
+ 807:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 80e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 810:	83 ec 0c             	sub    $0xc,%esp
+ 813:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 818:	6a 00                	push   $0x0
+ 81a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 81d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 820:	8b 13                	mov    (%ebx),%edx
+ 822:	e8 59 fe ff ff       	call   680 <printint>
+        ap++;
+ 827:	89 d8                	mov    %ebx,%eax
+ 829:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 82c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 82e:	83 c0 04             	add    $0x4,%eax
+ 831:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 834:	e9 4b ff ff ff       	jmp    784 <printf+0x54>
+ 839:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 840:	83 ec 0c             	sub    $0xc,%esp
+ 843:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 848:	6a 01                	push   $0x1
+ 84a:	eb ce                	jmp    81a <printf+0xea>
+ 84c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 850:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 853:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 856:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 858:	6a 01                	push   $0x1
+        ap++;
+ 85a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 85d:	57                   	push   %edi
+ 85e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 861:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 864:	e8 6a fd ff ff       	call   5d3 <write>
+        ap++;
+ 869:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 86c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 86f:	31 d2                	xor    %edx,%edx
+ 871:	e9 0e ff ff ff       	jmp    784 <printf+0x54>
+ 876:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 87d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 880:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 883:	83 ec 04             	sub    $0x4,%esp
+ 886:	e9 59 ff ff ff       	jmp    7e4 <printf+0xb4>
+ 88b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 88f:	90                   	nop
+        s = (char*)*ap;
+ 890:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 893:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 895:	83 c0 04             	add    $0x4,%eax
+ 898:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 89b:	85 db                	test   %ebx,%ebx
+ 89d:	74 17                	je     8b6 <printf+0x186>
+        while(*s != 0){
+ 89f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 8a2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 8a4:	84 c0                	test   %al,%al
+ 8a6:	0f 84 d8 fe ff ff    	je     784 <printf+0x54>
+ 8ac:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 8af:	89 de                	mov    %ebx,%esi
+ 8b1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8b4:	eb 1a                	jmp    8d0 <printf+0x1a0>
+          s = "(null)";
+ 8b6:	bb 7c 0c 00 00       	mov    $0xc7c,%ebx
+        while(*s != 0){
+ 8bb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 8be:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8c3:	89 de                	mov    %ebx,%esi
+ 8c5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8cf:	90                   	nop
+  write(fd, &c, 1);
+ 8d0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 8d3:	83 c6 01             	add    $0x1,%esi
+ 8d6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 8d9:	6a 01                	push   $0x1
+ 8db:	57                   	push   %edi
+ 8dc:	53                   	push   %ebx
+ 8dd:	e8 f1 fc ff ff       	call   5d3 <write>
+        while(*s != 0){
+ 8e2:	0f b6 06             	movzbl (%esi),%eax
+ 8e5:	83 c4 10             	add    $0x10,%esp
+ 8e8:	84 c0                	test   %al,%al
+ 8ea:	75 e4                	jne    8d0 <printf+0x1a0>
+ 8ec:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 8ef:	31 d2                	xor    %edx,%edx
+ 8f1:	e9 8e fe ff ff       	jmp    784 <printf+0x54>
+ 8f6:	66 90                	xchg   %ax,%ax
+ 8f8:	66 90                	xchg   %ax,%ax
+ 8fa:	66 90                	xchg   %ax,%ax
+ 8fc:	66 90                	xchg   %ax,%ax
+ 8fe:	66 90                	xchg   %ax,%ax
+
+00000900 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 900:	f3 0f 1e fb          	endbr32 
+ 904:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 905:	a1 64 0f 00 00       	mov    0xf64,%eax
+{
+ 90a:	89 e5                	mov    %esp,%ebp
+ 90c:	57                   	push   %edi
+ 90d:	56                   	push   %esi
+ 90e:	53                   	push   %ebx
+ 90f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 912:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 914:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 917:	39 c8                	cmp    %ecx,%eax
+ 919:	73 15                	jae    930 <free+0x30>
+ 91b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 91f:	90                   	nop
+ 920:	39 d1                	cmp    %edx,%ecx
+ 922:	72 14                	jb     938 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 924:	39 d0                	cmp    %edx,%eax
+ 926:	73 10                	jae    938 <free+0x38>
+{
+ 928:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 92a:	8b 10                	mov    (%eax),%edx
+ 92c:	39 c8                	cmp    %ecx,%eax
+ 92e:	72 f0                	jb     920 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 930:	39 d0                	cmp    %edx,%eax
+ 932:	72 f4                	jb     928 <free+0x28>
+ 934:	39 d1                	cmp    %edx,%ecx
+ 936:	73 f0                	jae    928 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 938:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 93b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 93e:	39 fa                	cmp    %edi,%edx
+ 940:	74 1e                	je     960 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 942:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 945:	8b 50 04             	mov    0x4(%eax),%edx
+ 948:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 94b:	39 f1                	cmp    %esi,%ecx
+ 94d:	74 28                	je     977 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 94f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 951:	5b                   	pop    %ebx
+  freep = p;
+ 952:	a3 64 0f 00 00       	mov    %eax,0xf64
+}
+ 957:	5e                   	pop    %esi
+ 958:	5f                   	pop    %edi
+ 959:	5d                   	pop    %ebp
+ 95a:	c3                   	ret    
+ 95b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 95f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 960:	03 72 04             	add    0x4(%edx),%esi
+ 963:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 966:	8b 10                	mov    (%eax),%edx
+ 968:	8b 12                	mov    (%edx),%edx
+ 96a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 96d:	8b 50 04             	mov    0x4(%eax),%edx
+ 970:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 973:	39 f1                	cmp    %esi,%ecx
+ 975:	75 d8                	jne    94f <free+0x4f>
+    p->s.size += bp->s.size;
+ 977:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 97a:	a3 64 0f 00 00       	mov    %eax,0xf64
+    p->s.size += bp->s.size;
+ 97f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 982:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 985:	89 10                	mov    %edx,(%eax)
+}
+ 987:	5b                   	pop    %ebx
+ 988:	5e                   	pop    %esi
+ 989:	5f                   	pop    %edi
+ 98a:	5d                   	pop    %ebp
+ 98b:	c3                   	ret    
+ 98c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000990 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 990:	f3 0f 1e fb          	endbr32 
+ 994:	55                   	push   %ebp
+ 995:	89 e5                	mov    %esp,%ebp
+ 997:	57                   	push   %edi
+ 998:	56                   	push   %esi
+ 999:	53                   	push   %ebx
+ 99a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 99d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 9a0:	8b 3d 64 0f 00 00    	mov    0xf64,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 9a6:	8d 70 07             	lea    0x7(%eax),%esi
+ 9a9:	c1 ee 03             	shr    $0x3,%esi
+ 9ac:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 9af:	85 ff                	test   %edi,%edi
+ 9b1:	0f 84 a9 00 00 00    	je     a60 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9b7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 9b9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 9bc:	39 f1                	cmp    %esi,%ecx
+ 9be:	73 6d                	jae    a2d <malloc+0x9d>
+ 9c0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 9c6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 9cb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 9ce:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 9d5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 9d8:	eb 17                	jmp    9f1 <malloc+0x61>
+ 9da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9e0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 9e2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 9e5:	39 f1                	cmp    %esi,%ecx
+ 9e7:	73 4f                	jae    a38 <malloc+0xa8>
+ 9e9:	8b 3d 64 0f 00 00    	mov    0xf64,%edi
+ 9ef:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 9f1:	39 c7                	cmp    %eax,%edi
+ 9f3:	75 eb                	jne    9e0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 9f5:	83 ec 0c             	sub    $0xc,%esp
+ 9f8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 9fb:	e8 3b fc ff ff       	call   63b <sbrk>
+  if(p == (char*)-1)
+ a00:	83 c4 10             	add    $0x10,%esp
+ a03:	83 f8 ff             	cmp    $0xffffffff,%eax
+ a06:	74 1b                	je     a23 <malloc+0x93>
+  hp->s.size = nu;
+ a08:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ a0b:	83 ec 0c             	sub    $0xc,%esp
+ a0e:	83 c0 08             	add    $0x8,%eax
+ a11:	50                   	push   %eax
+ a12:	e8 e9 fe ff ff       	call   900 <free>
+  return freep;
+ a17:	a1 64 0f 00 00       	mov    0xf64,%eax
+      if((p = morecore(nunits)) == 0)
+ a1c:	83 c4 10             	add    $0x10,%esp
+ a1f:	85 c0                	test   %eax,%eax
+ a21:	75 bd                	jne    9e0 <malloc+0x50>
+        return 0;
+  }
+}
+ a23:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ a26:	31 c0                	xor    %eax,%eax
+}
+ a28:	5b                   	pop    %ebx
+ a29:	5e                   	pop    %esi
+ a2a:	5f                   	pop    %edi
+ a2b:	5d                   	pop    %ebp
+ a2c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ a2d:	89 c2                	mov    %eax,%edx
+ a2f:	89 f8                	mov    %edi,%eax
+ a31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ a38:	39 ce                	cmp    %ecx,%esi
+ a3a:	74 54                	je     a90 <malloc+0x100>
+        p->s.size -= nunits;
+ a3c:	29 f1                	sub    %esi,%ecx
+ a3e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ a41:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ a44:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ a47:	a3 64 0f 00 00       	mov    %eax,0xf64
+}
+ a4c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ a4f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ a52:	5b                   	pop    %ebx
+ a53:	5e                   	pop    %esi
+ a54:	5f                   	pop    %edi
+ a55:	5d                   	pop    %ebp
+ a56:	c3                   	ret    
+ a57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a5e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ a60:	c7 05 64 0f 00 00 68 	movl   $0xf68,0xf64
+ a67:	0f 00 00 
+    base.s.size = 0;
+ a6a:	bf 68 0f 00 00       	mov    $0xf68,%edi
+    base.s.ptr = freep = prevp = &base;
+ a6f:	c7 05 68 0f 00 00 68 	movl   $0xf68,0xf68
+ a76:	0f 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a79:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ a7b:	c7 05 6c 0f 00 00 00 	movl   $0x0,0xf6c
+ a82:	00 00 00 
+    if(p->s.size >= nunits){
+ a85:	e9 36 ff ff ff       	jmp    9c0 <malloc+0x30>
+ a8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ a90:	8b 0a                	mov    (%edx),%ecx
+ a92:	89 08                	mov    %ecx,(%eax)
+ a94:	eb b1                	jmp    a47 <malloc+0xb7>
diff -ruN xv6-public/test3.c xv6-new/test3.c
--- xv6-public/test3.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/test3.c	2022-10-07 11:44:28.781326200 +0530
@@ -0,0 +1,84 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "processInfo.h"
+
+// CPU bound
+void delay()
+{
+    int* data = (int*)malloc(1000*sizeof(int));
+
+    for(int i=0;i<100000000;++i)
+        data[i % 1000] = 0;
+
+    for(int j=0;j<100000000;j++)
+        data[j % 1000] = 0;
+}
+
+
+
+int main(int argc, char *argv[])
+{
+    if (argc < 2)
+    {
+        printf(1, "Incorrect Format\n\nInput Format : test<test-case-number> <number-of-child-processes>\nE.g. : test3 10\n");
+        exit();
+    }
+    int N = atoi(argv[1]);
+
+    int pids[N];
+    int return_order_of_procs[N];
+    int burstTimes[N];
+    set_burst_time(2);
+    printf(1,"Test Case #2 : Decreasing burst times of Child Processes\n");
+    printf(1, "Burst times of parent process = %d\n\n", get_burst_time());
+    int first_child_process_pid;
+    for (int i = 0; i < N; i++)
+    {
+        int burst_time = N - i + 5;
+
+        int newProcPID = fork();
+        if (newProcPID == 0)
+        {
+            struct processInfo info;
+	        getProcInfo(getpid(),&info);
+	        printf(1,"Before Execution starts : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches);
+            
+            set_burst_time(burst_time);
+            delay();
+
+            getProcInfo(getpid(),&info);
+	        printf(1,"After Execution ends : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches); 
+            exit();
+        }
+        else if (newProcPID > 0)
+        {
+            if(i == 0){
+                first_child_process_pid = newProcPID;
+            }
+            pids[i] = newProcPID;
+            burstTimes[i] = burst_time;
+        }
+        else
+        {
+            printf(1, "Error occured while forking \n");
+            exit();
+        }
+    }
+
+    for (int i = 0; i < N; i++)
+    {
+        return_order_of_procs[i] = wait();
+    }
+
+    printf(1, "\nAll children executed successfully\n");
+    for (int i = 0; i < N; i++)
+        printf(1, "Child %d    pid %d    burst time = %d\n", i, pids[i],burstTimes[i]);
+
+    
+    printf(1, "\nChild Proceses Exit order \n");
+    for (int i = 0; i < N; i++)
+        printf(1, "pid %d     burst time = %d\n", return_order_of_procs[i], burstTimes[return_order_of_procs[i]-first_child_process_pid]);
+
+    exit();
+}
\ No newline at end of file
diff -ruN xv6-public/test3.d xv6-new/test3.d
--- xv6-public/test3.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/test3.d	2022-10-07 22:43:45.271886867 +0530
@@ -0,0 +1,2 @@
+test3.o: test3.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/test3.o and xv6-new/test3.o differ
diff -ruN xv6-public/test3.sym xv6-new/test3.sym
--- xv6-public/test3.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/test3.sym	2022-10-07 22:43:45.271886867 +0530
@@ -0,0 +1,63 @@
+00000000 .text
+00000a98 .rodata
+00000c98 .eh_frame
+00000f64 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 test3.c
+00000000 ulib.c
+00000000 printf.c
+00000680 printint
+00000c84 digits.1096
+00000000 umalloc.c
+00000f64 freep
+00000f68 base
+00000350 strcpy
+00000730 printf
+00000580 memmove
+000005fb mknod
+00000470 gets
+00000633 getpid
+00000990 malloc
+00000643 sleep
+00000673 get_burst_time
+000005c3 pipe
+000005d3 write
+0000060b fstat
+000005e3 kill
+00000623 chdir
+000005eb exec
+000005bb wait
+000005cb read
+00000603 unlink
+000005ab fork
+0000063b sbrk
+0000064b uptime
+00000f64 __bss_start
+00000410 memset
+00000000 main
+0000066b set_burst_time
+00000380 strcmp
+0000062b dup
+000002c0 delay
+0000065b getMaxPid
+00000653 getNumProc
+00000663 getProcInfo
+000004f0 stat
+00000f64 _edata
+00000f70 _end
+00000613 link
+000005b3 exit
+00000540 atoi
+000003d0 strlen
+000005f3 open
+00000430 strchr
+0000061b mkdir
+000005db close
+00000900 free
diff -ruN xv6-public/testIO.asm xv6-new/testIO.asm
--- xv6-public/testIO.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/testIO.asm	2022-10-07 22:43:45.271886867 +0530
@@ -0,0 +1,1527 @@
+
+_testIO:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+        sleep(1);
+    }
+}
+
+int main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	53                   	push   %ebx
+  14:	51                   	push   %ecx
+  15:	83 ec 38             	sub    $0x38,%esp
+    if (argc < 2)
+  18:	83 39 01             	cmpl   $0x1,(%ecx)
+{
+  1b:	8b 41 04             	mov    0x4(%ecx),%eax
+    if (argc < 2)
+  1e:	7e 3e                	jle    5e <main+0x5e>
+    {
+        printf(1, "Incorrect Format\n\nInput Format : test<test-case-number> <number-of-child-processes>\nE.g. : testIO 10\n");
+        exit();
+    }
+    int N = atoi(argv[1]);
+  20:	83 ec 0c             	sub    $0xc,%esp
+  23:	ff 70 04             	pushl  0x4(%eax)
+  26:	e8 c5 04 00 00       	call   4f0 <atoi>
+
+    int pids[N];
+  2b:	83 c4 10             	add    $0x10,%esp
+    int N = atoi(argv[1]);
+  2e:	89 c7                	mov    %eax,%edi
+    int pids[N];
+  30:	8d 04 85 0f 00 00 00 	lea    0xf(,%eax,4),%eax
+  37:	89 e6                	mov    %esp,%esi
+  39:	89 c1                	mov    %eax,%ecx
+  3b:	89 c2                	mov    %eax,%edx
+  3d:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
+  43:	83 e2 f0             	and    $0xfffffff0,%edx
+  46:	29 ce                	sub    %ecx,%esi
+  48:	89 f1                	mov    %esi,%ecx
+  4a:	39 cc                	cmp    %ecx,%esp
+  4c:	74 23                	je     71 <main+0x71>
+  4e:	81 ec 00 10 00 00    	sub    $0x1000,%esp
+  54:	83 8c 24 fc 0f 00 00 	orl    $0x0,0xffc(%esp)
+  5b:	00 
+  5c:	eb ec                	jmp    4a <main+0x4a>
+        printf(1, "Incorrect Format\n\nInput Format : test<test-case-number> <number-of-child-processes>\nE.g. : testIO 10\n");
+  5e:	57                   	push   %edi
+  5f:	57                   	push   %edi
+  60:	68 48 0a 00 00       	push   $0xa48
+  65:	6a 01                	push   $0x1
+  67:	e8 74 06 00 00       	call   6e0 <printf>
+        exit();
+  6c:	e8 f2 04 00 00       	call   563 <exit>
+    int pids[N];
+  71:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
+  77:	29 d4                	sub    %edx,%esp
+  79:	85 d2                	test   %edx,%edx
+  7b:	74 05                	je     82 <main+0x82>
+  7d:	83 4c 14 fc 00       	orl    $0x0,-0x4(%esp,%edx,1)
+    int return_order_of_procs[N];
+  82:	89 c1                	mov    %eax,%ecx
+  84:	89 e6                	mov    %esp,%esi
+    int pids[N];
+  86:	89 65 d0             	mov    %esp,-0x30(%ebp)
+    int return_order_of_procs[N];
+  89:	89 c2                	mov    %eax,%edx
+  8b:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
+  91:	83 e2 f0             	and    $0xfffffff0,%edx
+  94:	29 ce                	sub    %ecx,%esi
+  96:	89 f1                	mov    %esi,%ecx
+  98:	39 cc                	cmp    %ecx,%esp
+  9a:	74 10                	je     ac <main+0xac>
+  9c:	81 ec 00 10 00 00    	sub    $0x1000,%esp
+  a2:	83 8c 24 fc 0f 00 00 	orl    $0x0,0xffc(%esp)
+  a9:	00 
+  aa:	eb ec                	jmp    98 <main+0x98>
+  ac:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
+  b2:	29 d4                	sub    %edx,%esp
+  b4:	85 d2                	test   %edx,%edx
+  b6:	75 27                	jne    df <main+0xdf>
+    int burstTimes[N];
+  b8:	89 c2                	mov    %eax,%edx
+  ba:	89 e1                	mov    %esp,%ecx
+  bc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+    int return_order_of_procs[N];
+  c1:	89 65 c0             	mov    %esp,-0x40(%ebp)
+    int burstTimes[N];
+  c4:	29 c1                	sub    %eax,%ecx
+  c6:	83 e2 f0             	and    $0xfffffff0,%edx
+  c9:	89 c8                	mov    %ecx,%eax
+  cb:	39 c4                	cmp    %eax,%esp
+  cd:	74 17                	je     e6 <main+0xe6>
+  cf:	81 ec 00 10 00 00    	sub    $0x1000,%esp
+  d5:	83 8c 24 fc 0f 00 00 	orl    $0x0,0xffc(%esp)
+  dc:	00 
+  dd:	eb ec                	jmp    cb <main+0xcb>
+    int return_order_of_procs[N];
+  df:	83 4c 14 fc 00       	orl    $0x0,-0x4(%esp,%edx,1)
+  e4:	eb d2                	jmp    b8 <main+0xb8>
+    int burstTimes[N];
+  e6:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
+  ec:	29 d4                	sub    %edx,%esp
+  ee:	85 d2                	test   %edx,%edx
+  f0:	74 05                	je     f7 <main+0xf7>
+  f2:	83 4c 14 fc 00       	orl    $0x0,-0x4(%esp,%edx,1)
+  f7:	89 65 d4             	mov    %esp,-0x2c(%ebp)
+    set_burst_time(2);
+  fa:	83 ec 0c             	sub    $0xc,%esp
+  fd:	6a 02                	push   $0x2
+  ff:	e8 17 05 00 00       	call   61b <set_burst_time>
+    printf(1,"Test Case #IO : Decreasing burst times for I/O bound Child Processes\n");
+ 104:	5b                   	pop    %ebx
+ 105:	5e                   	pop    %esi
+ 106:	68 b0 0a 00 00       	push   $0xab0
+ 10b:	6a 01                	push   $0x1
+ 10d:	e8 ce 05 00 00       	call   6e0 <printf>
+    printf(1, "Burst times of parent process = %d\n\n", get_burst_time());
+ 112:	e8 0c 05 00 00       	call   623 <get_burst_time>
+ 117:	83 c4 0c             	add    $0xc,%esp
+ 11a:	50                   	push   %eax
+ 11b:	68 f8 0a 00 00       	push   $0xaf8
+ 120:	6a 01                	push   $0x1
+ 122:	e8 b9 05 00 00       	call   6e0 <printf>
+    int first_child_process_pid;
+    
+    for (int i = 0; i < N; i++)
+ 127:	83 c4 10             	add    $0x10,%esp
+ 12a:	85 ff                	test   %edi,%edi
+ 12c:	0f 8e 7a 01 00 00    	jle    2ac <main+0x2ac>
+ 132:	8d 47 05             	lea    0x5(%edi),%eax
+ 135:	89 7d c8             	mov    %edi,-0x38(%ebp)
+ 138:	31 db                	xor    %ebx,%ebx
+ 13a:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+ 13d:	89 45 cc             	mov    %eax,-0x34(%ebp)
+ 140:	eb 2b                	jmp    16d <main+0x16d>
+ 142:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+            getProcInfo(getpid(),&info);
+	        printf(1,"After Execution ends : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches); 
+            exit();
+        }
+        else if (newProcPID > 0)
+ 148:	0f 8e a8 00 00 00    	jle    1f6 <main+0x1f6>
+        {
+            if(i == 0){
+                first_child_process_pid = newProcPID;
+            }
+            pids[i] = newProcPID;
+ 14e:	8b 55 d0             	mov    -0x30(%ebp),%edx
+            if(i == 0){
+ 151:	85 db                	test   %ebx,%ebx
+ 153:	0f 44 f8             	cmove  %eax,%edi
+            pids[i] = newProcPID;
+ 156:	89 04 9a             	mov    %eax,(%edx,%ebx,4)
+            burstTimes[i] = burst_time;
+ 159:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 15c:	89 34 98             	mov    %esi,(%eax,%ebx,4)
+    for (int i = 0; i < N; i++)
+ 15f:	8d 43 01             	lea    0x1(%ebx),%eax
+ 162:	39 45 c8             	cmp    %eax,-0x38(%ebp)
+ 165:	0f 84 9e 00 00 00    	je     209 <main+0x209>
+ 16b:	89 c3                	mov    %eax,%ebx
+        int burst_time = N - i + 5;
+ 16d:	8b 75 cc             	mov    -0x34(%ebp),%esi
+ 170:	29 de                	sub    %ebx,%esi
+        int newProcPID = fork();
+ 172:	e8 e4 03 00 00       	call   55b <fork>
+        if (newProcPID == 0)
+ 177:	85 c0                	test   %eax,%eax
+ 179:	75 cd                	jne    148 <main+0x148>
+	        getProcInfo(getpid(),&info);
+ 17b:	e8 63 04 00 00       	call   5e3 <getpid>
+ 180:	8d 7d dc             	lea    -0x24(%ebp),%edi
+ 183:	51                   	push   %ecx
+ 184:	51                   	push   %ecx
+ 185:	57                   	push   %edi
+ 186:	50                   	push   %eax
+ 187:	e8 87 04 00 00       	call   613 <getProcInfo>
+	        printf(1,"Before Execution starts : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches);
+ 18c:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+ 18f:	e8 4f 04 00 00       	call   5e3 <getpid>
+ 194:	53                   	push   %ebx
+            set_burst_time(burst_time);
+ 195:	bb 32 00 00 00       	mov    $0x32,%ebx
+	        printf(1,"Before Execution starts : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches);
+ 19a:	50                   	push   %eax
+ 19b:	68 20 0b 00 00       	push   $0xb20
+ 1a0:	6a 01                	push   $0x1
+ 1a2:	e8 39 05 00 00       	call   6e0 <printf>
+            set_burst_time(burst_time);
+ 1a7:	83 c4 14             	add    $0x14,%esp
+ 1aa:	56                   	push   %esi
+ 1ab:	e8 6b 04 00 00       	call   61b <set_burst_time>
+ 1b0:	83 c4 10             	add    $0x10,%esp
+ 1b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1b7:	90                   	nop
+        sleep(1);
+ 1b8:	83 ec 0c             	sub    $0xc,%esp
+ 1bb:	6a 01                	push   $0x1
+ 1bd:	e8 31 04 00 00       	call   5f3 <sleep>
+    for(int i=0;i<50;++i){
+ 1c2:	83 c4 10             	add    $0x10,%esp
+ 1c5:	83 eb 01             	sub    $0x1,%ebx
+ 1c8:	75 ee                	jne    1b8 <main+0x1b8>
+            getProcInfo(getpid(),&info);
+ 1ca:	e8 14 04 00 00       	call   5e3 <getpid>
+ 1cf:	52                   	push   %edx
+ 1d0:	52                   	push   %edx
+ 1d1:	57                   	push   %edi
+ 1d2:	50                   	push   %eax
+ 1d3:	e8 3b 04 00 00       	call   613 <getProcInfo>
+	        printf(1,"After Execution ends : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches); 
+ 1d8:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+ 1db:	e8 03 04 00 00       	call   5e3 <getpid>
+ 1e0:	53                   	push   %ebx
+ 1e1:	50                   	push   %eax
+ 1e2:	68 5c 0b 00 00       	push   $0xb5c
+ 1e7:	6a 01                	push   $0x1
+ 1e9:	e8 f2 04 00 00       	call   6e0 <printf>
+            exit();
+ 1ee:	83 c4 20             	add    $0x20,%esp
+ 1f1:	e8 6d 03 00 00       	call   563 <exit>
+        }
+        else
+        {
+            printf(1, "Error occured while forking \n");
+ 1f6:	50                   	push   %eax
+ 1f7:	50                   	push   %eax
+ 1f8:	68 e1 0b 00 00       	push   $0xbe1
+ 1fd:	6a 01                	push   $0x1
+ 1ff:	e8 dc 04 00 00       	call   6e0 <printf>
+            exit();
+ 204:	e8 5a 03 00 00       	call   563 <exit>
+ 209:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+ 20c:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 20f:	31 f6                	xor    %esi,%esi
+ 211:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        }
+    }
+
+    for (int i = 0; i < N; i++)
+    {
+        return_order_of_procs[i] = wait();
+ 218:	e8 4e 03 00 00       	call   56b <wait>
+ 21d:	89 04 b7             	mov    %eax,(%edi,%esi,4)
+    for (int i = 0; i < N; i++)
+ 220:	89 f0                	mov    %esi,%eax
+ 222:	83 c6 01             	add    $0x1,%esi
+ 225:	39 d8                	cmp    %ebx,%eax
+ 227:	75 ef                	jne    218 <main+0x218>
+    }
+
+    printf(1, "\nAll children executed successfully\n");
+ 229:	56                   	push   %esi
+ 22a:	31 ff                	xor    %edi,%edi
+ 22c:	56                   	push   %esi
+ 22d:	89 de                	mov    %ebx,%esi
+ 22f:	68 bc 0b 00 00       	push   $0xbbc
+ 234:	6a 01                	push   $0x1
+ 236:	e8 a5 04 00 00       	call   6e0 <printf>
+ 23b:	83 c4 10             	add    $0x10,%esp
+ 23e:	66 90                	xchg   %ax,%ax
+    for (int i = 0; i < N; i++)
+        printf(1, "Child %d    pid %d    burst time = %d\n", i, pids[i],burstTimes[i]);
+ 240:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 243:	83 ec 0c             	sub    $0xc,%esp
+ 246:	89 fb                	mov    %edi,%ebx
+ 248:	ff 34 b8             	pushl  (%eax,%edi,4)
+ 24b:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 24e:	ff 34 b8             	pushl  (%eax,%edi,4)
+ 251:	57                   	push   %edi
+    for (int i = 0; i < N; i++)
+ 252:	83 c7 01             	add    $0x1,%edi
+        printf(1, "Child %d    pid %d    burst time = %d\n", i, pids[i],burstTimes[i]);
+ 255:	68 94 0b 00 00       	push   $0xb94
+ 25a:	6a 01                	push   $0x1
+ 25c:	e8 7f 04 00 00       	call   6e0 <printf>
+    for (int i = 0; i < N; i++)
+ 261:	83 c4 20             	add    $0x20,%esp
+ 264:	39 f3                	cmp    %esi,%ebx
+ 266:	75 d8                	jne    240 <main+0x240>
+
+    
+    printf(1, "\nChild Proceses Exit order \n");
+ 268:	57                   	push   %edi
+ 269:	89 f3                	mov    %esi,%ebx
+ 26b:	31 f6                	xor    %esi,%esi
+ 26d:	57                   	push   %edi
+ 26e:	68 1b 0c 00 00       	push   $0xc1b
+ 273:	6a 01                	push   $0x1
+ 275:	e8 66 04 00 00       	call   6e0 <printf>
+    for (int i = 0; i < N; i++)
+ 27a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+    printf(1, "\nChild Proceses Exit order \n");
+ 27d:	83 c4 10             	add    $0x10,%esp
+        printf(1, "pid %d     burst time = %d\n", return_order_of_procs[i], burstTimes[return_order_of_procs[i]-first_child_process_pid]);
+ 280:	8b 14 b7             	mov    (%edi,%esi,4),%edx
+ 283:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 286:	89 d1                	mov    %edx,%ecx
+ 288:	2b 4d c4             	sub    -0x3c(%ebp),%ecx
+ 28b:	ff 34 88             	pushl  (%eax,%ecx,4)
+ 28e:	52                   	push   %edx
+ 28f:	68 ff 0b 00 00       	push   $0xbff
+ 294:	6a 01                	push   $0x1
+ 296:	e8 45 04 00 00       	call   6e0 <printf>
+    for (int i = 0; i < N; i++)
+ 29b:	89 f2                	mov    %esi,%edx
+ 29d:	83 c4 10             	add    $0x10,%esp
+ 2a0:	83 c6 01             	add    $0x1,%esi
+ 2a3:	39 da                	cmp    %ebx,%edx
+ 2a5:	75 d9                	jne    280 <main+0x280>
+
+    exit();
+ 2a7:	e8 b7 02 00 00       	call   563 <exit>
+    printf(1, "\nAll children executed successfully\n");
+ 2ac:	50                   	push   %eax
+ 2ad:	50                   	push   %eax
+ 2ae:	68 bc 0b 00 00       	push   $0xbbc
+ 2b3:	6a 01                	push   $0x1
+ 2b5:	e8 26 04 00 00       	call   6e0 <printf>
+    printf(1, "\nChild Proceses Exit order \n");
+ 2ba:	5a                   	pop    %edx
+ 2bb:	59                   	pop    %ecx
+ 2bc:	68 1b 0c 00 00       	push   $0xc1b
+ 2c1:	6a 01                	push   $0x1
+ 2c3:	e8 18 04 00 00       	call   6e0 <printf>
+ 2c8:	83 c4 10             	add    $0x10,%esp
+ 2cb:	eb da                	jmp    2a7 <main+0x2a7>
+ 2cd:	66 90                	xchg   %ax,%ax
+ 2cf:	90                   	nop
+
+000002d0 <delayIO>:
+void delayIO(){
+ 2d0:	f3 0f 1e fb          	endbr32 
+ 2d4:	55                   	push   %ebp
+ 2d5:	89 e5                	mov    %esp,%ebp
+ 2d7:	53                   	push   %ebx
+ 2d8:	bb 32 00 00 00       	mov    $0x32,%ebx
+ 2dd:	83 ec 04             	sub    $0x4,%esp
+        sleep(1);
+ 2e0:	83 ec 0c             	sub    $0xc,%esp
+ 2e3:	6a 01                	push   $0x1
+ 2e5:	e8 09 03 00 00       	call   5f3 <sleep>
+    for(int i=0;i<50;++i){
+ 2ea:	83 c4 10             	add    $0x10,%esp
+ 2ed:	83 eb 01             	sub    $0x1,%ebx
+ 2f0:	75 ee                	jne    2e0 <delayIO+0x10>
+}
+ 2f2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 2f5:	c9                   	leave  
+ 2f6:	c3                   	ret    
+ 2f7:	66 90                	xchg   %ax,%ax
+ 2f9:	66 90                	xchg   %ax,%ax
+ 2fb:	66 90                	xchg   %ax,%ax
+ 2fd:	66 90                	xchg   %ax,%ax
+ 2ff:	90                   	nop
+
+00000300 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 300:	f3 0f 1e fb          	endbr32 
+ 304:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 305:	31 c0                	xor    %eax,%eax
+{
+ 307:	89 e5                	mov    %esp,%ebp
+ 309:	53                   	push   %ebx
+ 30a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 30d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 310:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 314:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 317:	83 c0 01             	add    $0x1,%eax
+ 31a:	84 d2                	test   %dl,%dl
+ 31c:	75 f2                	jne    310 <strcpy+0x10>
+    ;
+  return os;
+}
+ 31e:	89 c8                	mov    %ecx,%eax
+ 320:	5b                   	pop    %ebx
+ 321:	5d                   	pop    %ebp
+ 322:	c3                   	ret    
+ 323:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 32a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000330 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 330:	f3 0f 1e fb          	endbr32 
+ 334:	55                   	push   %ebp
+ 335:	89 e5                	mov    %esp,%ebp
+ 337:	53                   	push   %ebx
+ 338:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 33b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 33e:	0f b6 01             	movzbl (%ecx),%eax
+ 341:	0f b6 1a             	movzbl (%edx),%ebx
+ 344:	84 c0                	test   %al,%al
+ 346:	75 19                	jne    361 <strcmp+0x31>
+ 348:	eb 26                	jmp    370 <strcmp+0x40>
+ 34a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 350:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 354:	83 c1 01             	add    $0x1,%ecx
+ 357:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 35a:	0f b6 1a             	movzbl (%edx),%ebx
+ 35d:	84 c0                	test   %al,%al
+ 35f:	74 0f                	je     370 <strcmp+0x40>
+ 361:	38 d8                	cmp    %bl,%al
+ 363:	74 eb                	je     350 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 365:	29 d8                	sub    %ebx,%eax
+}
+ 367:	5b                   	pop    %ebx
+ 368:	5d                   	pop    %ebp
+ 369:	c3                   	ret    
+ 36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 370:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 372:	29 d8                	sub    %ebx,%eax
+}
+ 374:	5b                   	pop    %ebx
+ 375:	5d                   	pop    %ebp
+ 376:	c3                   	ret    
+ 377:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 37e:	66 90                	xchg   %ax,%ax
+
+00000380 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 380:	f3 0f 1e fb          	endbr32 
+ 384:	55                   	push   %ebp
+ 385:	89 e5                	mov    %esp,%ebp
+ 387:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 38a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 38d:	74 21                	je     3b0 <strlen+0x30>
+ 38f:	31 c0                	xor    %eax,%eax
+ 391:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 398:	83 c0 01             	add    $0x1,%eax
+ 39b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 39f:	89 c1                	mov    %eax,%ecx
+ 3a1:	75 f5                	jne    398 <strlen+0x18>
+    ;
+  return n;
+}
+ 3a3:	89 c8                	mov    %ecx,%eax
+ 3a5:	5d                   	pop    %ebp
+ 3a6:	c3                   	ret    
+ 3a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ae:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 3b0:	31 c9                	xor    %ecx,%ecx
+}
+ 3b2:	5d                   	pop    %ebp
+ 3b3:	89 c8                	mov    %ecx,%eax
+ 3b5:	c3                   	ret    
+ 3b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000003c0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 3c0:	f3 0f 1e fb          	endbr32 
+ 3c4:	55                   	push   %ebp
+ 3c5:	89 e5                	mov    %esp,%ebp
+ 3c7:	57                   	push   %edi
+ 3c8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 3cb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 3ce:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3d1:	89 d7                	mov    %edx,%edi
+ 3d3:	fc                   	cld    
+ 3d4:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 3d6:	89 d0                	mov    %edx,%eax
+ 3d8:	5f                   	pop    %edi
+ 3d9:	5d                   	pop    %ebp
+ 3da:	c3                   	ret    
+ 3db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3df:	90                   	nop
+
+000003e0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 3e0:	f3 0f 1e fb          	endbr32 
+ 3e4:	55                   	push   %ebp
+ 3e5:	89 e5                	mov    %esp,%ebp
+ 3e7:	8b 45 08             	mov    0x8(%ebp),%eax
+ 3ea:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 3ee:	0f b6 10             	movzbl (%eax),%edx
+ 3f1:	84 d2                	test   %dl,%dl
+ 3f3:	75 16                	jne    40b <strchr+0x2b>
+ 3f5:	eb 21                	jmp    418 <strchr+0x38>
+ 3f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3fe:	66 90                	xchg   %ax,%ax
+ 400:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 404:	83 c0 01             	add    $0x1,%eax
+ 407:	84 d2                	test   %dl,%dl
+ 409:	74 0d                	je     418 <strchr+0x38>
+    if(*s == c)
+ 40b:	38 d1                	cmp    %dl,%cl
+ 40d:	75 f1                	jne    400 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 40f:	5d                   	pop    %ebp
+ 410:	c3                   	ret    
+ 411:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 418:	31 c0                	xor    %eax,%eax
+}
+ 41a:	5d                   	pop    %ebp
+ 41b:	c3                   	ret    
+ 41c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000420 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 420:	f3 0f 1e fb          	endbr32 
+ 424:	55                   	push   %ebp
+ 425:	89 e5                	mov    %esp,%ebp
+ 427:	57                   	push   %edi
+ 428:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 429:	31 f6                	xor    %esi,%esi
+{
+ 42b:	53                   	push   %ebx
+ 42c:	89 f3                	mov    %esi,%ebx
+ 42e:	83 ec 1c             	sub    $0x1c,%esp
+ 431:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 434:	eb 33                	jmp    469 <gets+0x49>
+ 436:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 43d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 440:	83 ec 04             	sub    $0x4,%esp
+ 443:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 446:	6a 01                	push   $0x1
+ 448:	50                   	push   %eax
+ 449:	6a 00                	push   $0x0
+ 44b:	e8 2b 01 00 00       	call   57b <read>
+    if(cc < 1)
+ 450:	83 c4 10             	add    $0x10,%esp
+ 453:	85 c0                	test   %eax,%eax
+ 455:	7e 1c                	jle    473 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 457:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 45b:	83 c7 01             	add    $0x1,%edi
+ 45e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 461:	3c 0a                	cmp    $0xa,%al
+ 463:	74 23                	je     488 <gets+0x68>
+ 465:	3c 0d                	cmp    $0xd,%al
+ 467:	74 1f                	je     488 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 469:	83 c3 01             	add    $0x1,%ebx
+ 46c:	89 fe                	mov    %edi,%esi
+ 46e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 471:	7c cd                	jl     440 <gets+0x20>
+ 473:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 475:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 478:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 47b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 47e:	5b                   	pop    %ebx
+ 47f:	5e                   	pop    %esi
+ 480:	5f                   	pop    %edi
+ 481:	5d                   	pop    %ebp
+ 482:	c3                   	ret    
+ 483:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 487:	90                   	nop
+ 488:	8b 75 08             	mov    0x8(%ebp),%esi
+ 48b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 48e:	01 de                	add    %ebx,%esi
+ 490:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 492:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 495:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 498:	5b                   	pop    %ebx
+ 499:	5e                   	pop    %esi
+ 49a:	5f                   	pop    %edi
+ 49b:	5d                   	pop    %ebp
+ 49c:	c3                   	ret    
+ 49d:	8d 76 00             	lea    0x0(%esi),%esi
+
+000004a0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 4a0:	f3 0f 1e fb          	endbr32 
+ 4a4:	55                   	push   %ebp
+ 4a5:	89 e5                	mov    %esp,%ebp
+ 4a7:	56                   	push   %esi
+ 4a8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 4a9:	83 ec 08             	sub    $0x8,%esp
+ 4ac:	6a 00                	push   $0x0
+ 4ae:	ff 75 08             	pushl  0x8(%ebp)
+ 4b1:	e8 ed 00 00 00       	call   5a3 <open>
+  if(fd < 0)
+ 4b6:	83 c4 10             	add    $0x10,%esp
+ 4b9:	85 c0                	test   %eax,%eax
+ 4bb:	78 2b                	js     4e8 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 4bd:	83 ec 08             	sub    $0x8,%esp
+ 4c0:	ff 75 0c             	pushl  0xc(%ebp)
+ 4c3:	89 c3                	mov    %eax,%ebx
+ 4c5:	50                   	push   %eax
+ 4c6:	e8 f0 00 00 00       	call   5bb <fstat>
+  close(fd);
+ 4cb:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 4ce:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 4d0:	e8 b6 00 00 00       	call   58b <close>
+  return r;
+ 4d5:	83 c4 10             	add    $0x10,%esp
+}
+ 4d8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 4db:	89 f0                	mov    %esi,%eax
+ 4dd:	5b                   	pop    %ebx
+ 4de:	5e                   	pop    %esi
+ 4df:	5d                   	pop    %ebp
+ 4e0:	c3                   	ret    
+ 4e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 4e8:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 4ed:	eb e9                	jmp    4d8 <stat+0x38>
+ 4ef:	90                   	nop
+
+000004f0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 4f0:	f3 0f 1e fb          	endbr32 
+ 4f4:	55                   	push   %ebp
+ 4f5:	89 e5                	mov    %esp,%ebp
+ 4f7:	53                   	push   %ebx
+ 4f8:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 4fb:	0f be 02             	movsbl (%edx),%eax
+ 4fe:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 501:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 504:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 509:	77 1a                	ja     525 <atoi+0x35>
+ 50b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 50f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 510:	83 c2 01             	add    $0x1,%edx
+ 513:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 516:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 51a:	0f be 02             	movsbl (%edx),%eax
+ 51d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 520:	80 fb 09             	cmp    $0x9,%bl
+ 523:	76 eb                	jbe    510 <atoi+0x20>
+  return n;
+}
+ 525:	89 c8                	mov    %ecx,%eax
+ 527:	5b                   	pop    %ebx
+ 528:	5d                   	pop    %ebp
+ 529:	c3                   	ret    
+ 52a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000530 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 530:	f3 0f 1e fb          	endbr32 
+ 534:	55                   	push   %ebp
+ 535:	89 e5                	mov    %esp,%ebp
+ 537:	57                   	push   %edi
+ 538:	8b 45 10             	mov    0x10(%ebp),%eax
+ 53b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 53e:	56                   	push   %esi
+ 53f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 542:	85 c0                	test   %eax,%eax
+ 544:	7e 0f                	jle    555 <memmove+0x25>
+ 546:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 548:	89 d7                	mov    %edx,%edi
+ 54a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 550:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 551:	39 f8                	cmp    %edi,%eax
+ 553:	75 fb                	jne    550 <memmove+0x20>
+  return vdst;
+}
+ 555:	5e                   	pop    %esi
+ 556:	89 d0                	mov    %edx,%eax
+ 558:	5f                   	pop    %edi
+ 559:	5d                   	pop    %ebp
+ 55a:	c3                   	ret    
+
+0000055b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 55b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 560:	cd 40                	int    $0x40
+ 562:	c3                   	ret    
+
+00000563 <exit>:
+SYSCALL(exit)
+ 563:	b8 02 00 00 00       	mov    $0x2,%eax
+ 568:	cd 40                	int    $0x40
+ 56a:	c3                   	ret    
+
+0000056b <wait>:
+SYSCALL(wait)
+ 56b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 570:	cd 40                	int    $0x40
+ 572:	c3                   	ret    
+
+00000573 <pipe>:
+SYSCALL(pipe)
+ 573:	b8 04 00 00 00       	mov    $0x4,%eax
+ 578:	cd 40                	int    $0x40
+ 57a:	c3                   	ret    
+
+0000057b <read>:
+SYSCALL(read)
+ 57b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 580:	cd 40                	int    $0x40
+ 582:	c3                   	ret    
+
+00000583 <write>:
+SYSCALL(write)
+ 583:	b8 10 00 00 00       	mov    $0x10,%eax
+ 588:	cd 40                	int    $0x40
+ 58a:	c3                   	ret    
+
+0000058b <close>:
+SYSCALL(close)
+ 58b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 590:	cd 40                	int    $0x40
+ 592:	c3                   	ret    
+
+00000593 <kill>:
+SYSCALL(kill)
+ 593:	b8 06 00 00 00       	mov    $0x6,%eax
+ 598:	cd 40                	int    $0x40
+ 59a:	c3                   	ret    
+
+0000059b <exec>:
+SYSCALL(exec)
+ 59b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 5a0:	cd 40                	int    $0x40
+ 5a2:	c3                   	ret    
+
+000005a3 <open>:
+SYSCALL(open)
+ 5a3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 5a8:	cd 40                	int    $0x40
+ 5aa:	c3                   	ret    
+
+000005ab <mknod>:
+SYSCALL(mknod)
+ 5ab:	b8 11 00 00 00       	mov    $0x11,%eax
+ 5b0:	cd 40                	int    $0x40
+ 5b2:	c3                   	ret    
+
+000005b3 <unlink>:
+SYSCALL(unlink)
+ 5b3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 5b8:	cd 40                	int    $0x40
+ 5ba:	c3                   	ret    
+
+000005bb <fstat>:
+SYSCALL(fstat)
+ 5bb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 5c0:	cd 40                	int    $0x40
+ 5c2:	c3                   	ret    
+
+000005c3 <link>:
+SYSCALL(link)
+ 5c3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 5c8:	cd 40                	int    $0x40
+ 5ca:	c3                   	ret    
+
+000005cb <mkdir>:
+SYSCALL(mkdir)
+ 5cb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 5d0:	cd 40                	int    $0x40
+ 5d2:	c3                   	ret    
+
+000005d3 <chdir>:
+SYSCALL(chdir)
+ 5d3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 5d8:	cd 40                	int    $0x40
+ 5da:	c3                   	ret    
+
+000005db <dup>:
+SYSCALL(dup)
+ 5db:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 5e0:	cd 40                	int    $0x40
+ 5e2:	c3                   	ret    
+
+000005e3 <getpid>:
+SYSCALL(getpid)
+ 5e3:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 5e8:	cd 40                	int    $0x40
+ 5ea:	c3                   	ret    
+
+000005eb <sbrk>:
+SYSCALL(sbrk)
+ 5eb:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 5f0:	cd 40                	int    $0x40
+ 5f2:	c3                   	ret    
+
+000005f3 <sleep>:
+SYSCALL(sleep)
+ 5f3:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 5f8:	cd 40                	int    $0x40
+ 5fa:	c3                   	ret    
+
+000005fb <uptime>:
+SYSCALL(uptime)
+ 5fb:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 600:	cd 40                	int    $0x40
+ 602:	c3                   	ret    
+
+00000603 <getNumProc>:
+SYSCALL(getNumProc)
+ 603:	b8 16 00 00 00       	mov    $0x16,%eax
+ 608:	cd 40                	int    $0x40
+ 60a:	c3                   	ret    
+
+0000060b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 60b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 610:	cd 40                	int    $0x40
+ 612:	c3                   	ret    
+
+00000613 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 613:	b8 18 00 00 00       	mov    $0x18,%eax
+ 618:	cd 40                	int    $0x40
+ 61a:	c3                   	ret    
+
+0000061b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 61b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 620:	cd 40                	int    $0x40
+ 622:	c3                   	ret    
+
+00000623 <get_burst_time>:
+ 623:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 628:	cd 40                	int    $0x40
+ 62a:	c3                   	ret    
+ 62b:	66 90                	xchg   %ax,%ax
+ 62d:	66 90                	xchg   %ax,%ax
+ 62f:	90                   	nop
+
+00000630 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 630:	55                   	push   %ebp
+ 631:	89 e5                	mov    %esp,%ebp
+ 633:	57                   	push   %edi
+ 634:	56                   	push   %esi
+ 635:	53                   	push   %ebx
+ 636:	83 ec 3c             	sub    $0x3c,%esp
+ 639:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 63c:	89 d1                	mov    %edx,%ecx
+{
+ 63e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 641:	85 d2                	test   %edx,%edx
+ 643:	0f 89 7f 00 00 00    	jns    6c8 <printint+0x98>
+ 649:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 64d:	74 79                	je     6c8 <printint+0x98>
+    neg = 1;
+ 64f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 656:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 658:	31 db                	xor    %ebx,%ebx
+ 65a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 65d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 660:	89 c8                	mov    %ecx,%eax
+ 662:	31 d2                	xor    %edx,%edx
+ 664:	89 cf                	mov    %ecx,%edi
+ 666:	f7 75 c4             	divl   -0x3c(%ebp)
+ 669:	0f b6 92 40 0c 00 00 	movzbl 0xc40(%edx),%edx
+ 670:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 673:	89 d8                	mov    %ebx,%eax
+ 675:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 678:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 67b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 67e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 681:	76 dd                	jbe    660 <printint+0x30>
+  if(neg)
+ 683:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 686:	85 c9                	test   %ecx,%ecx
+ 688:	74 0c                	je     696 <printint+0x66>
+    buf[i++] = '-';
+ 68a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 68f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 691:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 696:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 699:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 69d:	eb 07                	jmp    6a6 <printint+0x76>
+ 69f:	90                   	nop
+ 6a0:	0f b6 13             	movzbl (%ebx),%edx
+ 6a3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 6a6:	83 ec 04             	sub    $0x4,%esp
+ 6a9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 6ac:	6a 01                	push   $0x1
+ 6ae:	56                   	push   %esi
+ 6af:	57                   	push   %edi
+ 6b0:	e8 ce fe ff ff       	call   583 <write>
+  while(--i >= 0)
+ 6b5:	83 c4 10             	add    $0x10,%esp
+ 6b8:	39 de                	cmp    %ebx,%esi
+ 6ba:	75 e4                	jne    6a0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 6bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6bf:	5b                   	pop    %ebx
+ 6c0:	5e                   	pop    %esi
+ 6c1:	5f                   	pop    %edi
+ 6c2:	5d                   	pop    %ebp
+ 6c3:	c3                   	ret    
+ 6c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 6c8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 6cf:	eb 87                	jmp    658 <printint+0x28>
+ 6d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6df:	90                   	nop
+
+000006e0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 6e0:	f3 0f 1e fb          	endbr32 
+ 6e4:	55                   	push   %ebp
+ 6e5:	89 e5                	mov    %esp,%ebp
+ 6e7:	57                   	push   %edi
+ 6e8:	56                   	push   %esi
+ 6e9:	53                   	push   %ebx
+ 6ea:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 6ed:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 6f0:	0f b6 1e             	movzbl (%esi),%ebx
+ 6f3:	84 db                	test   %bl,%bl
+ 6f5:	0f 84 b4 00 00 00    	je     7af <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 6fb:	8d 45 10             	lea    0x10(%ebp),%eax
+ 6fe:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 701:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 704:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 706:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 709:	eb 33                	jmp    73e <printf+0x5e>
+ 70b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 70f:	90                   	nop
+ 710:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 713:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 718:	83 f8 25             	cmp    $0x25,%eax
+ 71b:	74 17                	je     734 <printf+0x54>
+  write(fd, &c, 1);
+ 71d:	83 ec 04             	sub    $0x4,%esp
+ 720:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 723:	6a 01                	push   $0x1
+ 725:	57                   	push   %edi
+ 726:	ff 75 08             	pushl  0x8(%ebp)
+ 729:	e8 55 fe ff ff       	call   583 <write>
+ 72e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 731:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 734:	0f b6 1e             	movzbl (%esi),%ebx
+ 737:	83 c6 01             	add    $0x1,%esi
+ 73a:	84 db                	test   %bl,%bl
+ 73c:	74 71                	je     7af <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 73e:	0f be cb             	movsbl %bl,%ecx
+ 741:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 744:	85 d2                	test   %edx,%edx
+ 746:	74 c8                	je     710 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 748:	83 fa 25             	cmp    $0x25,%edx
+ 74b:	75 e7                	jne    734 <printf+0x54>
+      if(c == 'd'){
+ 74d:	83 f8 64             	cmp    $0x64,%eax
+ 750:	0f 84 9a 00 00 00    	je     7f0 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 756:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 75c:	83 f9 70             	cmp    $0x70,%ecx
+ 75f:	74 5f                	je     7c0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 761:	83 f8 73             	cmp    $0x73,%eax
+ 764:	0f 84 d6 00 00 00    	je     840 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 76a:	83 f8 63             	cmp    $0x63,%eax
+ 76d:	0f 84 8d 00 00 00    	je     800 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 773:	83 f8 25             	cmp    $0x25,%eax
+ 776:	0f 84 b4 00 00 00    	je     830 <printf+0x150>
+  write(fd, &c, 1);
+ 77c:	83 ec 04             	sub    $0x4,%esp
+ 77f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 783:	6a 01                	push   $0x1
+ 785:	57                   	push   %edi
+ 786:	ff 75 08             	pushl  0x8(%ebp)
+ 789:	e8 f5 fd ff ff       	call   583 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 78e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 791:	83 c4 0c             	add    $0xc,%esp
+ 794:	6a 01                	push   $0x1
+ 796:	83 c6 01             	add    $0x1,%esi
+ 799:	57                   	push   %edi
+ 79a:	ff 75 08             	pushl  0x8(%ebp)
+ 79d:	e8 e1 fd ff ff       	call   583 <write>
+  for(i = 0; fmt[i]; i++){
+ 7a2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 7a6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 7a9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 7ab:	84 db                	test   %bl,%bl
+ 7ad:	75 8f                	jne    73e <printf+0x5e>
+    }
+  }
+}
+ 7af:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7b2:	5b                   	pop    %ebx
+ 7b3:	5e                   	pop    %esi
+ 7b4:	5f                   	pop    %edi
+ 7b5:	5d                   	pop    %ebp
+ 7b6:	c3                   	ret    
+ 7b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7be:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 7c0:	83 ec 0c             	sub    $0xc,%esp
+ 7c3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 7c8:	6a 00                	push   $0x0
+ 7ca:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 7cd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 7d0:	8b 13                	mov    (%ebx),%edx
+ 7d2:	e8 59 fe ff ff       	call   630 <printint>
+        ap++;
+ 7d7:	89 d8                	mov    %ebx,%eax
+ 7d9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 7dc:	31 d2                	xor    %edx,%edx
+        ap++;
+ 7de:	83 c0 04             	add    $0x4,%eax
+ 7e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 7e4:	e9 4b ff ff ff       	jmp    734 <printf+0x54>
+ 7e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 7f0:	83 ec 0c             	sub    $0xc,%esp
+ 7f3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 7f8:	6a 01                	push   $0x1
+ 7fa:	eb ce                	jmp    7ca <printf+0xea>
+ 7fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 800:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 803:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 806:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 808:	6a 01                	push   $0x1
+        ap++;
+ 80a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 80d:	57                   	push   %edi
+ 80e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 811:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 814:	e8 6a fd ff ff       	call   583 <write>
+        ap++;
+ 819:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 81c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 81f:	31 d2                	xor    %edx,%edx
+ 821:	e9 0e ff ff ff       	jmp    734 <printf+0x54>
+ 826:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 82d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 830:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 833:	83 ec 04             	sub    $0x4,%esp
+ 836:	e9 59 ff ff ff       	jmp    794 <printf+0xb4>
+ 83b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 83f:	90                   	nop
+        s = (char*)*ap;
+ 840:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 843:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 845:	83 c0 04             	add    $0x4,%eax
+ 848:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 84b:	85 db                	test   %ebx,%ebx
+ 84d:	74 17                	je     866 <printf+0x186>
+        while(*s != 0){
+ 84f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 852:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 854:	84 c0                	test   %al,%al
+ 856:	0f 84 d8 fe ff ff    	je     734 <printf+0x54>
+ 85c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 85f:	89 de                	mov    %ebx,%esi
+ 861:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 864:	eb 1a                	jmp    880 <printf+0x1a0>
+          s = "(null)";
+ 866:	bb 38 0c 00 00       	mov    $0xc38,%ebx
+        while(*s != 0){
+ 86b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 86e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 873:	89 de                	mov    %ebx,%esi
+ 875:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 878:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 87f:	90                   	nop
+  write(fd, &c, 1);
+ 880:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 883:	83 c6 01             	add    $0x1,%esi
+ 886:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 889:	6a 01                	push   $0x1
+ 88b:	57                   	push   %edi
+ 88c:	53                   	push   %ebx
+ 88d:	e8 f1 fc ff ff       	call   583 <write>
+        while(*s != 0){
+ 892:	0f b6 06             	movzbl (%esi),%eax
+ 895:	83 c4 10             	add    $0x10,%esp
+ 898:	84 c0                	test   %al,%al
+ 89a:	75 e4                	jne    880 <printf+0x1a0>
+ 89c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 89f:	31 d2                	xor    %edx,%edx
+ 8a1:	e9 8e fe ff ff       	jmp    734 <printf+0x54>
+ 8a6:	66 90                	xchg   %ax,%ax
+ 8a8:	66 90                	xchg   %ax,%ax
+ 8aa:	66 90                	xchg   %ax,%ax
+ 8ac:	66 90                	xchg   %ax,%ax
+ 8ae:	66 90                	xchg   %ax,%ax
+
+000008b0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 8b0:	f3 0f 1e fb          	endbr32 
+ 8b4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8b5:	a1 18 0f 00 00       	mov    0xf18,%eax
+{
+ 8ba:	89 e5                	mov    %esp,%ebp
+ 8bc:	57                   	push   %edi
+ 8bd:	56                   	push   %esi
+ 8be:	53                   	push   %ebx
+ 8bf:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8c2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 8c4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8c7:	39 c8                	cmp    %ecx,%eax
+ 8c9:	73 15                	jae    8e0 <free+0x30>
+ 8cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8cf:	90                   	nop
+ 8d0:	39 d1                	cmp    %edx,%ecx
+ 8d2:	72 14                	jb     8e8 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 8d4:	39 d0                	cmp    %edx,%eax
+ 8d6:	73 10                	jae    8e8 <free+0x38>
+{
+ 8d8:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8da:	8b 10                	mov    (%eax),%edx
+ 8dc:	39 c8                	cmp    %ecx,%eax
+ 8de:	72 f0                	jb     8d0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 8e0:	39 d0                	cmp    %edx,%eax
+ 8e2:	72 f4                	jb     8d8 <free+0x28>
+ 8e4:	39 d1                	cmp    %edx,%ecx
+ 8e6:	73 f0                	jae    8d8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 8e8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 8eb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 8ee:	39 fa                	cmp    %edi,%edx
+ 8f0:	74 1e                	je     910 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 8f2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 8f5:	8b 50 04             	mov    0x4(%eax),%edx
+ 8f8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 8fb:	39 f1                	cmp    %esi,%ecx
+ 8fd:	74 28                	je     927 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 8ff:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 901:	5b                   	pop    %ebx
+  freep = p;
+ 902:	a3 18 0f 00 00       	mov    %eax,0xf18
+}
+ 907:	5e                   	pop    %esi
+ 908:	5f                   	pop    %edi
+ 909:	5d                   	pop    %ebp
+ 90a:	c3                   	ret    
+ 90b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 90f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 910:	03 72 04             	add    0x4(%edx),%esi
+ 913:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 916:	8b 10                	mov    (%eax),%edx
+ 918:	8b 12                	mov    (%edx),%edx
+ 91a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 91d:	8b 50 04             	mov    0x4(%eax),%edx
+ 920:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 923:	39 f1                	cmp    %esi,%ecx
+ 925:	75 d8                	jne    8ff <free+0x4f>
+    p->s.size += bp->s.size;
+ 927:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 92a:	a3 18 0f 00 00       	mov    %eax,0xf18
+    p->s.size += bp->s.size;
+ 92f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 932:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 935:	89 10                	mov    %edx,(%eax)
+}
+ 937:	5b                   	pop    %ebx
+ 938:	5e                   	pop    %esi
+ 939:	5f                   	pop    %edi
+ 93a:	5d                   	pop    %ebp
+ 93b:	c3                   	ret    
+ 93c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000940 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 940:	f3 0f 1e fb          	endbr32 
+ 944:	55                   	push   %ebp
+ 945:	89 e5                	mov    %esp,%ebp
+ 947:	57                   	push   %edi
+ 948:	56                   	push   %esi
+ 949:	53                   	push   %ebx
+ 94a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 94d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 950:	8b 3d 18 0f 00 00    	mov    0xf18,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 956:	8d 70 07             	lea    0x7(%eax),%esi
+ 959:	c1 ee 03             	shr    $0x3,%esi
+ 95c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 95f:	85 ff                	test   %edi,%edi
+ 961:	0f 84 a9 00 00 00    	je     a10 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 967:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 969:	8b 48 04             	mov    0x4(%eax),%ecx
+ 96c:	39 f1                	cmp    %esi,%ecx
+ 96e:	73 6d                	jae    9dd <malloc+0x9d>
+ 970:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 976:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 97b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 97e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 985:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 988:	eb 17                	jmp    9a1 <malloc+0x61>
+ 98a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 990:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 992:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 995:	39 f1                	cmp    %esi,%ecx
+ 997:	73 4f                	jae    9e8 <malloc+0xa8>
+ 999:	8b 3d 18 0f 00 00    	mov    0xf18,%edi
+ 99f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 9a1:	39 c7                	cmp    %eax,%edi
+ 9a3:	75 eb                	jne    990 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 9a5:	83 ec 0c             	sub    $0xc,%esp
+ 9a8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 9ab:	e8 3b fc ff ff       	call   5eb <sbrk>
+  if(p == (char*)-1)
+ 9b0:	83 c4 10             	add    $0x10,%esp
+ 9b3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 9b6:	74 1b                	je     9d3 <malloc+0x93>
+  hp->s.size = nu;
+ 9b8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 9bb:	83 ec 0c             	sub    $0xc,%esp
+ 9be:	83 c0 08             	add    $0x8,%eax
+ 9c1:	50                   	push   %eax
+ 9c2:	e8 e9 fe ff ff       	call   8b0 <free>
+  return freep;
+ 9c7:	a1 18 0f 00 00       	mov    0xf18,%eax
+      if((p = morecore(nunits)) == 0)
+ 9cc:	83 c4 10             	add    $0x10,%esp
+ 9cf:	85 c0                	test   %eax,%eax
+ 9d1:	75 bd                	jne    990 <malloc+0x50>
+        return 0;
+  }
+}
+ 9d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 9d6:	31 c0                	xor    %eax,%eax
+}
+ 9d8:	5b                   	pop    %ebx
+ 9d9:	5e                   	pop    %esi
+ 9da:	5f                   	pop    %edi
+ 9db:	5d                   	pop    %ebp
+ 9dc:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 9dd:	89 c2                	mov    %eax,%edx
+ 9df:	89 f8                	mov    %edi,%eax
+ 9e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 9e8:	39 ce                	cmp    %ecx,%esi
+ 9ea:	74 54                	je     a40 <malloc+0x100>
+        p->s.size -= nunits;
+ 9ec:	29 f1                	sub    %esi,%ecx
+ 9ee:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 9f1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 9f4:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 9f7:	a3 18 0f 00 00       	mov    %eax,0xf18
+}
+ 9fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 9ff:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ a02:	5b                   	pop    %ebx
+ a03:	5e                   	pop    %esi
+ a04:	5f                   	pop    %edi
+ a05:	5d                   	pop    %ebp
+ a06:	c3                   	ret    
+ a07:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a0e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ a10:	c7 05 18 0f 00 00 1c 	movl   $0xf1c,0xf18
+ a17:	0f 00 00 
+    base.s.size = 0;
+ a1a:	bf 1c 0f 00 00       	mov    $0xf1c,%edi
+    base.s.ptr = freep = prevp = &base;
+ a1f:	c7 05 1c 0f 00 00 1c 	movl   $0xf1c,0xf1c
+ a26:	0f 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a29:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ a2b:	c7 05 20 0f 00 00 00 	movl   $0x0,0xf20
+ a32:	00 00 00 
+    if(p->s.size >= nunits){
+ a35:	e9 36 ff ff ff       	jmp    970 <malloc+0x30>
+ a3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ a40:	8b 0a                	mov    (%edx),%ecx
+ a42:	89 08                	mov    %ecx,(%eax)
+ a44:	eb b1                	jmp    9f7 <malloc+0xb7>
diff -ruN xv6-public/testIO.c xv6-new/testIO.c
--- xv6-public/testIO.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/testIO.c	2022-10-07 11:53:40.071334000 +0530
@@ -0,0 +1,79 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "processInfo.h"
+
+// I/O bound
+void delayIO(){
+    for(int i=0;i<50;++i){
+        // printf(1,"%s\n",str);
+        sleep(1);
+    }
+}
+
+int main(int argc, char *argv[])
+{
+    if (argc < 2)
+    {
+        printf(1, "Incorrect Format\n\nInput Format : test<test-case-number> <number-of-child-processes>\nE.g. : testIO 10\n");
+        exit();
+    }
+    int N = atoi(argv[1]);
+
+    int pids[N];
+    int return_order_of_procs[N];
+    int burstTimes[N];
+    set_burst_time(2);
+    printf(1,"Test Case #IO : Decreasing burst times for I/O bound Child Processes\n");
+    printf(1, "Burst times of parent process = %d\n\n", get_burst_time());
+    int first_child_process_pid;
+    
+    for (int i = 0; i < N; i++)
+    {
+        int burst_time = N - i + 5;
+
+        int newProcPID = fork();
+        if (newProcPID == 0)
+        {
+            struct processInfo info;
+	        getProcInfo(getpid(),&info);
+	        printf(1,"Before Execution starts : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches);
+            
+            set_burst_time(burst_time);
+            delayIO();
+
+            getProcInfo(getpid(),&info);
+	        printf(1,"After Execution ends : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches); 
+            exit();
+        }
+        else if (newProcPID > 0)
+        {
+            if(i == 0){
+                first_child_process_pid = newProcPID;
+            }
+            pids[i] = newProcPID;
+            burstTimes[i] = burst_time;
+        }
+        else
+        {
+            printf(1, "Error occured while forking \n");
+            exit();
+        }
+    }
+
+    for (int i = 0; i < N; i++)
+    {
+        return_order_of_procs[i] = wait();
+    }
+
+    printf(1, "\nAll children executed successfully\n");
+    for (int i = 0; i < N; i++)
+        printf(1, "Child %d    pid %d    burst time = %d\n", i, pids[i],burstTimes[i]);
+
+    
+    printf(1, "\nChild Proceses Exit order \n");
+    for (int i = 0; i < N; i++)
+        printf(1, "pid %d     burst time = %d\n", return_order_of_procs[i], burstTimes[return_order_of_procs[i]-first_child_process_pid]);
+
+    exit();
+}
\ No newline at end of file
diff -ruN xv6-public/testIO.d xv6-new/testIO.d
--- xv6-public/testIO.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/testIO.d	2022-10-07 22:43:45.271886867 +0530
@@ -0,0 +1,2 @@
+testIO.o: testIO.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/testIO.o and xv6-new/testIO.o differ
diff -ruN xv6-public/testIO.sym xv6-new/testIO.sym
--- xv6-public/testIO.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/testIO.sym	2022-10-07 22:43:45.271886867 +0530
@@ -0,0 +1,63 @@
+00000000 .text
+00000a48 .rodata
+00000c54 .eh_frame
+00000f18 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 testIO.c
+00000000 ulib.c
+00000000 printf.c
+00000630 printint
+00000c40 digits.1096
+00000000 umalloc.c
+00000f18 freep
+00000f1c base
+00000300 strcpy
+000006e0 printf
+00000530 memmove
+000005ab mknod
+00000420 gets
+000005e3 getpid
+00000940 malloc
+000005f3 sleep
+00000623 get_burst_time
+00000573 pipe
+00000583 write
+000005bb fstat
+00000593 kill
+000005d3 chdir
+0000059b exec
+0000056b wait
+0000057b read
+000005b3 unlink
+0000055b fork
+000005eb sbrk
+000005fb uptime
+00000f18 __bss_start
+000003c0 memset
+00000000 main
+0000061b set_burst_time
+00000330 strcmp
+000005db dup
+0000060b getMaxPid
+00000603 getNumProc
+00000613 getProcInfo
+000004a0 stat
+00000f18 _edata
+00000f24 _end
+000005c3 link
+00000563 exit
+000004f0 atoi
+00000380 strlen
+000005a3 open
+000003e0 strchr
+000002d0 delayIO
+000005cb mkdir
+0000058b close
+000008b0 free
diff -ruN xv6-public/trap.c xv6-new/trap.c
--- xv6-public/trap.c	2022-10-07 22:44:57.841887896 +0530
+++ xv6-new/trap.c	2022-10-07 10:56:01.141284900 +0530
@@ -102,9 +102,9 @@
 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
-  if(myproc() && myproc()->state == RUNNING &&
-     tf->trapno == T_IRQ0+IRQ_TIMER)
-    yield();
+  // if(myproc() && myproc()->state == RUNNING &&
+  //    tf->trapno == T_IRQ0+IRQ_TIMER)
+  //   yield();
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
Binary files xv6-public/trap.o and xv6-new/trap.o differ
Binary files xv6-public/uart.o and xv6-new/uart.o differ
diff -ruN xv6-public/ulib.d xv6-new/ulib.d
--- xv6-public/ulib.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/ulib.d	2022-10-07 22:43:42.871886833 +0530
@@ -0,0 +1,2 @@
+ulib.o: ulib.c /usr/include/stdc-predef.h types.h stat.h fcntl.h user.h \
+ x86.h
Binary files xv6-public/ulib.o and xv6-new/ulib.o differ
diff -ruN xv6-public/umalloc.d xv6-new/umalloc.d
--- xv6-public/umalloc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/umalloc.d	2022-10-07 22:43:42.871886833 +0530
@@ -0,0 +1,2 @@
+umalloc.o: umalloc.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ param.h
Binary files xv6-public/umalloc.o and xv6-new/umalloc.o differ
diff -ruN xv6-public/user.h xv6-new/user.h
--- xv6-public/user.h	2022-10-07 22:44:57.841887896 +0530
+++ xv6-new/user.h	2022-10-05 11:31:34.223731400 +0530
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct processInfo;
 
 // system calls
 int fork(void);
@@ -23,6 +24,11 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getNumProc(void);
+int getMaxPid(void);
+int getProcInfo(int,struct processInfo*);
+int set_burst_time(int);
+int get_burst_time();
 
 // ulib.c
 int stat(const char*, struct stat*);
diff -ruN xv6-public/usertests.asm xv6-new/usertests.asm
--- xv6-public/usertests.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/usertests.asm	2022-10-07 22:43:44.791886860 +0530
@@ -0,0 +1,6713 @@
+
+_usertests:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return randstate;
+}
+
+int
+main(int argc, char *argv[])
+{
+       0:	f3 0f 1e fb          	endbr32 
+       4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+       8:	83 e4 f0             	and    $0xfffffff0,%esp
+       b:	ff 71 fc             	pushl  -0x4(%ecx)
+       e:	55                   	push   %ebp
+       f:	89 e5                	mov    %esp,%ebp
+      11:	51                   	push   %ecx
+      12:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "usertests starting\n");
+      15:	68 56 4e 00 00       	push   $0x4e56
+      1a:	6a 01                	push   $0x1
+      1c:	e8 df 3a 00 00       	call   3b00 <printf>
+
+  if(open("usertests.ran", 0) >= 0){
+      21:	59                   	pop    %ecx
+      22:	58                   	pop    %eax
+      23:	6a 00                	push   $0x0
+      25:	68 6a 4e 00 00       	push   $0x4e6a
+      2a:	e8 94 39 00 00       	call   39c3 <open>
+      2f:	83 c4 10             	add    $0x10,%esp
+      32:	85 c0                	test   %eax,%eax
+      34:	78 13                	js     49 <main+0x49>
+    printf(1, "already ran user tests -- rebuild fs.img\n");
+      36:	52                   	push   %edx
+      37:	52                   	push   %edx
+      38:	68 d4 55 00 00       	push   $0x55d4
+      3d:	6a 01                	push   $0x1
+      3f:	e8 bc 3a 00 00       	call   3b00 <printf>
+    exit();
+      44:	e8 3a 39 00 00       	call   3983 <exit>
+  }
+  close(open("usertests.ran", O_CREATE));
+      49:	50                   	push   %eax
+      4a:	50                   	push   %eax
+      4b:	68 00 02 00 00       	push   $0x200
+      50:	68 6a 4e 00 00       	push   $0x4e6a
+      55:	e8 69 39 00 00       	call   39c3 <open>
+      5a:	89 04 24             	mov    %eax,(%esp)
+      5d:	e8 49 39 00 00       	call   39ab <close>
+
+  argptest();
+      62:	e8 29 36 00 00       	call   3690 <argptest>
+  createdelete();
+      67:	e8 04 12 00 00       	call   1270 <createdelete>
+  linkunlink();
+      6c:	e8 df 1a 00 00       	call   1b50 <linkunlink>
+  concreate();
+      71:	e8 da 17 00 00       	call   1850 <concreate>
+  fourfiles();
+      76:	e8 f5 0f 00 00       	call   1070 <fourfiles>
+  sharedfd();
+      7b:	e8 30 0e 00 00       	call   eb0 <sharedfd>
+
+  bigargtest();
+      80:	e8 ab 32 00 00       	call   3330 <bigargtest>
+  bigwrite();
+      85:	e8 06 24 00 00       	call   2490 <bigwrite>
+  bigargtest();
+      8a:	e8 a1 32 00 00       	call   3330 <bigargtest>
+  bsstest();
+      8f:	e8 2c 32 00 00       	call   32c0 <bsstest>
+  sbrktest();
+      94:	e8 37 2d 00 00       	call   2dd0 <sbrktest>
+  validatetest();
+      99:	e8 62 31 00 00       	call   3200 <validatetest>
+
+  opentest();
+      9e:	e8 6d 03 00 00       	call   410 <opentest>
+  writetest();
+      a3:	e8 08 04 00 00       	call   4b0 <writetest>
+  writetest1();
+      a8:	e8 e3 05 00 00       	call   690 <writetest1>
+  createtest();
+      ad:	e8 ae 07 00 00       	call   860 <createtest>
+
+  openiputtest();
+      b2:	e8 59 02 00 00       	call   310 <openiputtest>
+  exitiputtest();
+      b7:	e8 54 01 00 00       	call   210 <exitiputtest>
+  iputtest();
+      bc:	e8 5f 00 00 00       	call   120 <iputtest>
+
+  mem();
+      c1:	e8 1a 0d 00 00       	call   de0 <mem>
+  pipe1();
+      c6:	e8 95 09 00 00       	call   a60 <pipe1>
+  preempt();
+      cb:	e8 30 0b 00 00       	call   c00 <preempt>
+  exitwait();
+      d0:	e8 8b 0c 00 00       	call   d60 <exitwait>
+
+  rmdot();
+      d5:	e8 a6 27 00 00       	call   2880 <rmdot>
+  fourteen();
+      da:	e8 61 26 00 00       	call   2740 <fourteen>
+  bigfile();
+      df:	e8 8c 24 00 00       	call   2570 <bigfile>
+  subdir();
+      e4:	e8 b7 1c 00 00       	call   1da0 <subdir>
+  linktest();
+      e9:	e8 42 15 00 00       	call   1630 <linktest>
+  unlinkread();
+      ee:	e8 ad 13 00 00       	call   14a0 <unlinkread>
+  dirfile();
+      f3:	e8 08 29 00 00       	call   2a00 <dirfile>
+  iref();
+      f8:	e8 03 2b 00 00       	call   2c00 <iref>
+  forktest();
+      fd:	e8 1e 2c 00 00       	call   2d20 <forktest>
+  bigdir(); // slow
+     102:	e8 59 1b 00 00       	call   1c60 <bigdir>
+
+  uio();
+     107:	e8 04 35 00 00       	call   3610 <uio>
+
+  exectest();
+     10c:	e8 ff 08 00 00       	call   a10 <exectest>
+
+  exit();
+     111:	e8 6d 38 00 00       	call   3983 <exit>
+     116:	66 90                	xchg   %ax,%ax
+     118:	66 90                	xchg   %ax,%ax
+     11a:	66 90                	xchg   %ax,%ax
+     11c:	66 90                	xchg   %ax,%ax
+     11e:	66 90                	xchg   %ax,%ax
+
+00000120 <iputtest>:
+{
+     120:	f3 0f 1e fb          	endbr32 
+     124:	55                   	push   %ebp
+     125:	89 e5                	mov    %esp,%ebp
+     127:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "iput test\n");
+     12a:	68 fc 3e 00 00       	push   $0x3efc
+     12f:	ff 35 00 5f 00 00    	pushl  0x5f00
+     135:	e8 c6 39 00 00       	call   3b00 <printf>
+  if(mkdir("iputdir") < 0){
+     13a:	c7 04 24 8f 3e 00 00 	movl   $0x3e8f,(%esp)
+     141:	e8 a5 38 00 00       	call   39eb <mkdir>
+     146:	83 c4 10             	add    $0x10,%esp
+     149:	85 c0                	test   %eax,%eax
+     14b:	78 58                	js     1a5 <iputtest+0x85>
+  if(chdir("iputdir") < 0){
+     14d:	83 ec 0c             	sub    $0xc,%esp
+     150:	68 8f 3e 00 00       	push   $0x3e8f
+     155:	e8 99 38 00 00       	call   39f3 <chdir>
+     15a:	83 c4 10             	add    $0x10,%esp
+     15d:	85 c0                	test   %eax,%eax
+     15f:	0f 88 85 00 00 00    	js     1ea <iputtest+0xca>
+  if(unlink("../iputdir") < 0){
+     165:	83 ec 0c             	sub    $0xc,%esp
+     168:	68 8c 3e 00 00       	push   $0x3e8c
+     16d:	e8 61 38 00 00       	call   39d3 <unlink>
+     172:	83 c4 10             	add    $0x10,%esp
+     175:	85 c0                	test   %eax,%eax
+     177:	78 5a                	js     1d3 <iputtest+0xb3>
+  if(chdir("/") < 0){
+     179:	83 ec 0c             	sub    $0xc,%esp
+     17c:	68 b1 3e 00 00       	push   $0x3eb1
+     181:	e8 6d 38 00 00       	call   39f3 <chdir>
+     186:	83 c4 10             	add    $0x10,%esp
+     189:	85 c0                	test   %eax,%eax
+     18b:	78 2f                	js     1bc <iputtest+0x9c>
+  printf(stdout, "iput test ok\n");
+     18d:	83 ec 08             	sub    $0x8,%esp
+     190:	68 34 3f 00 00       	push   $0x3f34
+     195:	ff 35 00 5f 00 00    	pushl  0x5f00
+     19b:	e8 60 39 00 00       	call   3b00 <printf>
+}
+     1a0:	83 c4 10             	add    $0x10,%esp
+     1a3:	c9                   	leave  
+     1a4:	c3                   	ret    
+    printf(stdout, "mkdir failed\n");
+     1a5:	50                   	push   %eax
+     1a6:	50                   	push   %eax
+     1a7:	68 68 3e 00 00       	push   $0x3e68
+     1ac:	ff 35 00 5f 00 00    	pushl  0x5f00
+     1b2:	e8 49 39 00 00       	call   3b00 <printf>
+    exit();
+     1b7:	e8 c7 37 00 00       	call   3983 <exit>
+    printf(stdout, "chdir / failed\n");
+     1bc:	50                   	push   %eax
+     1bd:	50                   	push   %eax
+     1be:	68 b3 3e 00 00       	push   $0x3eb3
+     1c3:	ff 35 00 5f 00 00    	pushl  0x5f00
+     1c9:	e8 32 39 00 00       	call   3b00 <printf>
+    exit();
+     1ce:	e8 b0 37 00 00       	call   3983 <exit>
+    printf(stdout, "unlink ../iputdir failed\n");
+     1d3:	52                   	push   %edx
+     1d4:	52                   	push   %edx
+     1d5:	68 97 3e 00 00       	push   $0x3e97
+     1da:	ff 35 00 5f 00 00    	pushl  0x5f00
+     1e0:	e8 1b 39 00 00       	call   3b00 <printf>
+    exit();
+     1e5:	e8 99 37 00 00       	call   3983 <exit>
+    printf(stdout, "chdir iputdir failed\n");
+     1ea:	51                   	push   %ecx
+     1eb:	51                   	push   %ecx
+     1ec:	68 76 3e 00 00       	push   $0x3e76
+     1f1:	ff 35 00 5f 00 00    	pushl  0x5f00
+     1f7:	e8 04 39 00 00       	call   3b00 <printf>
+    exit();
+     1fc:	e8 82 37 00 00       	call   3983 <exit>
+     201:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     208:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     20f:	90                   	nop
+
+00000210 <exitiputtest>:
+{
+     210:	f3 0f 1e fb          	endbr32 
+     214:	55                   	push   %ebp
+     215:	89 e5                	mov    %esp,%ebp
+     217:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "exitiput test\n");
+     21a:	68 c3 3e 00 00       	push   $0x3ec3
+     21f:	ff 35 00 5f 00 00    	pushl  0x5f00
+     225:	e8 d6 38 00 00       	call   3b00 <printf>
+  pid = fork();
+     22a:	e8 4c 37 00 00       	call   397b <fork>
+  if(pid < 0){
+     22f:	83 c4 10             	add    $0x10,%esp
+     232:	85 c0                	test   %eax,%eax
+     234:	0f 88 86 00 00 00    	js     2c0 <exitiputtest+0xb0>
+  if(pid == 0){
+     23a:	75 4c                	jne    288 <exitiputtest+0x78>
+    if(mkdir("iputdir") < 0){
+     23c:	83 ec 0c             	sub    $0xc,%esp
+     23f:	68 8f 3e 00 00       	push   $0x3e8f
+     244:	e8 a2 37 00 00       	call   39eb <mkdir>
+     249:	83 c4 10             	add    $0x10,%esp
+     24c:	85 c0                	test   %eax,%eax
+     24e:	0f 88 83 00 00 00    	js     2d7 <exitiputtest+0xc7>
+    if(chdir("iputdir") < 0){
+     254:	83 ec 0c             	sub    $0xc,%esp
+     257:	68 8f 3e 00 00       	push   $0x3e8f
+     25c:	e8 92 37 00 00       	call   39f3 <chdir>
+     261:	83 c4 10             	add    $0x10,%esp
+     264:	85 c0                	test   %eax,%eax
+     266:	0f 88 82 00 00 00    	js     2ee <exitiputtest+0xde>
+    if(unlink("../iputdir") < 0){
+     26c:	83 ec 0c             	sub    $0xc,%esp
+     26f:	68 8c 3e 00 00       	push   $0x3e8c
+     274:	e8 5a 37 00 00       	call   39d3 <unlink>
+     279:	83 c4 10             	add    $0x10,%esp
+     27c:	85 c0                	test   %eax,%eax
+     27e:	78 28                	js     2a8 <exitiputtest+0x98>
+    exit();
+     280:	e8 fe 36 00 00       	call   3983 <exit>
+     285:	8d 76 00             	lea    0x0(%esi),%esi
+  wait();
+     288:	e8 fe 36 00 00       	call   398b <wait>
+  printf(stdout, "exitiput test ok\n");
+     28d:	83 ec 08             	sub    $0x8,%esp
+     290:	68 e6 3e 00 00       	push   $0x3ee6
+     295:	ff 35 00 5f 00 00    	pushl  0x5f00
+     29b:	e8 60 38 00 00       	call   3b00 <printf>
+}
+     2a0:	83 c4 10             	add    $0x10,%esp
+     2a3:	c9                   	leave  
+     2a4:	c3                   	ret    
+     2a5:	8d 76 00             	lea    0x0(%esi),%esi
+      printf(stdout, "unlink ../iputdir failed\n");
+     2a8:	83 ec 08             	sub    $0x8,%esp
+     2ab:	68 97 3e 00 00       	push   $0x3e97
+     2b0:	ff 35 00 5f 00 00    	pushl  0x5f00
+     2b6:	e8 45 38 00 00       	call   3b00 <printf>
+      exit();
+     2bb:	e8 c3 36 00 00       	call   3983 <exit>
+    printf(stdout, "fork failed\n");
+     2c0:	51                   	push   %ecx
+     2c1:	51                   	push   %ecx
+     2c2:	68 a9 4d 00 00       	push   $0x4da9
+     2c7:	ff 35 00 5f 00 00    	pushl  0x5f00
+     2cd:	e8 2e 38 00 00       	call   3b00 <printf>
+    exit();
+     2d2:	e8 ac 36 00 00       	call   3983 <exit>
+      printf(stdout, "mkdir failed\n");
+     2d7:	52                   	push   %edx
+     2d8:	52                   	push   %edx
+     2d9:	68 68 3e 00 00       	push   $0x3e68
+     2de:	ff 35 00 5f 00 00    	pushl  0x5f00
+     2e4:	e8 17 38 00 00       	call   3b00 <printf>
+      exit();
+     2e9:	e8 95 36 00 00       	call   3983 <exit>
+      printf(stdout, "child chdir failed\n");
+     2ee:	50                   	push   %eax
+     2ef:	50                   	push   %eax
+     2f0:	68 d2 3e 00 00       	push   $0x3ed2
+     2f5:	ff 35 00 5f 00 00    	pushl  0x5f00
+     2fb:	e8 00 38 00 00       	call   3b00 <printf>
+      exit();
+     300:	e8 7e 36 00 00       	call   3983 <exit>
+     305:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     30c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000310 <openiputtest>:
+{
+     310:	f3 0f 1e fb          	endbr32 
+     314:	55                   	push   %ebp
+     315:	89 e5                	mov    %esp,%ebp
+     317:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "openiput test\n");
+     31a:	68 f8 3e 00 00       	push   $0x3ef8
+     31f:	ff 35 00 5f 00 00    	pushl  0x5f00
+     325:	e8 d6 37 00 00       	call   3b00 <printf>
+  if(mkdir("oidir") < 0){
+     32a:	c7 04 24 07 3f 00 00 	movl   $0x3f07,(%esp)
+     331:	e8 b5 36 00 00       	call   39eb <mkdir>
+     336:	83 c4 10             	add    $0x10,%esp
+     339:	85 c0                	test   %eax,%eax
+     33b:	0f 88 9b 00 00 00    	js     3dc <openiputtest+0xcc>
+  pid = fork();
+     341:	e8 35 36 00 00       	call   397b <fork>
+  if(pid < 0){
+     346:	85 c0                	test   %eax,%eax
+     348:	78 7b                	js     3c5 <openiputtest+0xb5>
+  if(pid == 0){
+     34a:	75 34                	jne    380 <openiputtest+0x70>
+    int fd = open("oidir", O_RDWR);
+     34c:	83 ec 08             	sub    $0x8,%esp
+     34f:	6a 02                	push   $0x2
+     351:	68 07 3f 00 00       	push   $0x3f07
+     356:	e8 68 36 00 00       	call   39c3 <open>
+    if(fd >= 0){
+     35b:	83 c4 10             	add    $0x10,%esp
+     35e:	85 c0                	test   %eax,%eax
+     360:	78 5e                	js     3c0 <openiputtest+0xb0>
+      printf(stdout, "open directory for write succeeded\n");
+     362:	83 ec 08             	sub    $0x8,%esp
+     365:	68 8c 4e 00 00       	push   $0x4e8c
+     36a:	ff 35 00 5f 00 00    	pushl  0x5f00
+     370:	e8 8b 37 00 00       	call   3b00 <printf>
+      exit();
+     375:	e8 09 36 00 00       	call   3983 <exit>
+     37a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  sleep(1);
+     380:	83 ec 0c             	sub    $0xc,%esp
+     383:	6a 01                	push   $0x1
+     385:	e8 89 36 00 00       	call   3a13 <sleep>
+  if(unlink("oidir") != 0){
+     38a:	c7 04 24 07 3f 00 00 	movl   $0x3f07,(%esp)
+     391:	e8 3d 36 00 00       	call   39d3 <unlink>
+     396:	83 c4 10             	add    $0x10,%esp
+     399:	85 c0                	test   %eax,%eax
+     39b:	75 56                	jne    3f3 <openiputtest+0xe3>
+  wait();
+     39d:	e8 e9 35 00 00       	call   398b <wait>
+  printf(stdout, "openiput test ok\n");
+     3a2:	83 ec 08             	sub    $0x8,%esp
+     3a5:	68 30 3f 00 00       	push   $0x3f30
+     3aa:	ff 35 00 5f 00 00    	pushl  0x5f00
+     3b0:	e8 4b 37 00 00       	call   3b00 <printf>
+     3b5:	83 c4 10             	add    $0x10,%esp
+}
+     3b8:	c9                   	leave  
+     3b9:	c3                   	ret    
+     3ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    exit();
+     3c0:	e8 be 35 00 00       	call   3983 <exit>
+    printf(stdout, "fork failed\n");
+     3c5:	52                   	push   %edx
+     3c6:	52                   	push   %edx
+     3c7:	68 a9 4d 00 00       	push   $0x4da9
+     3cc:	ff 35 00 5f 00 00    	pushl  0x5f00
+     3d2:	e8 29 37 00 00       	call   3b00 <printf>
+    exit();
+     3d7:	e8 a7 35 00 00       	call   3983 <exit>
+    printf(stdout, "mkdir oidir failed\n");
+     3dc:	51                   	push   %ecx
+     3dd:	51                   	push   %ecx
+     3de:	68 0d 3f 00 00       	push   $0x3f0d
+     3e3:	ff 35 00 5f 00 00    	pushl  0x5f00
+     3e9:	e8 12 37 00 00       	call   3b00 <printf>
+    exit();
+     3ee:	e8 90 35 00 00       	call   3983 <exit>
+    printf(stdout, "unlink failed\n");
+     3f3:	50                   	push   %eax
+     3f4:	50                   	push   %eax
+     3f5:	68 21 3f 00 00       	push   $0x3f21
+     3fa:	ff 35 00 5f 00 00    	pushl  0x5f00
+     400:	e8 fb 36 00 00       	call   3b00 <printf>
+    exit();
+     405:	e8 79 35 00 00       	call   3983 <exit>
+     40a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000410 <opentest>:
+{
+     410:	f3 0f 1e fb          	endbr32 
+     414:	55                   	push   %ebp
+     415:	89 e5                	mov    %esp,%ebp
+     417:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "open test\n");
+     41a:	68 42 3f 00 00       	push   $0x3f42
+     41f:	ff 35 00 5f 00 00    	pushl  0x5f00
+     425:	e8 d6 36 00 00       	call   3b00 <printf>
+  fd = open("echo", 0);
+     42a:	58                   	pop    %eax
+     42b:	5a                   	pop    %edx
+     42c:	6a 00                	push   $0x0
+     42e:	68 4d 3f 00 00       	push   $0x3f4d
+     433:	e8 8b 35 00 00       	call   39c3 <open>
+  if(fd < 0){
+     438:	83 c4 10             	add    $0x10,%esp
+     43b:	85 c0                	test   %eax,%eax
+     43d:	78 36                	js     475 <opentest+0x65>
+  close(fd);
+     43f:	83 ec 0c             	sub    $0xc,%esp
+     442:	50                   	push   %eax
+     443:	e8 63 35 00 00       	call   39ab <close>
+  fd = open("doesnotexist", 0);
+     448:	5a                   	pop    %edx
+     449:	59                   	pop    %ecx
+     44a:	6a 00                	push   $0x0
+     44c:	68 65 3f 00 00       	push   $0x3f65
+     451:	e8 6d 35 00 00       	call   39c3 <open>
+  if(fd >= 0){
+     456:	83 c4 10             	add    $0x10,%esp
+     459:	85 c0                	test   %eax,%eax
+     45b:	79 2f                	jns    48c <opentest+0x7c>
+  printf(stdout, "open test ok\n");
+     45d:	83 ec 08             	sub    $0x8,%esp
+     460:	68 90 3f 00 00       	push   $0x3f90
+     465:	ff 35 00 5f 00 00    	pushl  0x5f00
+     46b:	e8 90 36 00 00       	call   3b00 <printf>
+}
+     470:	83 c4 10             	add    $0x10,%esp
+     473:	c9                   	leave  
+     474:	c3                   	ret    
+    printf(stdout, "open echo failed!\n");
+     475:	50                   	push   %eax
+     476:	50                   	push   %eax
+     477:	68 52 3f 00 00       	push   $0x3f52
+     47c:	ff 35 00 5f 00 00    	pushl  0x5f00
+     482:	e8 79 36 00 00       	call   3b00 <printf>
+    exit();
+     487:	e8 f7 34 00 00       	call   3983 <exit>
+    printf(stdout, "open doesnotexist succeeded!\n");
+     48c:	50                   	push   %eax
+     48d:	50                   	push   %eax
+     48e:	68 72 3f 00 00       	push   $0x3f72
+     493:	ff 35 00 5f 00 00    	pushl  0x5f00
+     499:	e8 62 36 00 00       	call   3b00 <printf>
+    exit();
+     49e:	e8 e0 34 00 00       	call   3983 <exit>
+     4a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     4aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000004b0 <writetest>:
+{
+     4b0:	f3 0f 1e fb          	endbr32 
+     4b4:	55                   	push   %ebp
+     4b5:	89 e5                	mov    %esp,%ebp
+     4b7:	56                   	push   %esi
+     4b8:	53                   	push   %ebx
+  printf(stdout, "small file test\n");
+     4b9:	83 ec 08             	sub    $0x8,%esp
+     4bc:	68 9e 3f 00 00       	push   $0x3f9e
+     4c1:	ff 35 00 5f 00 00    	pushl  0x5f00
+     4c7:	e8 34 36 00 00       	call   3b00 <printf>
+  fd = open("small", O_CREATE|O_RDWR);
+     4cc:	58                   	pop    %eax
+     4cd:	5a                   	pop    %edx
+     4ce:	68 02 02 00 00       	push   $0x202
+     4d3:	68 af 3f 00 00       	push   $0x3faf
+     4d8:	e8 e6 34 00 00       	call   39c3 <open>
+  if(fd >= 0){
+     4dd:	83 c4 10             	add    $0x10,%esp
+     4e0:	85 c0                	test   %eax,%eax
+     4e2:	0f 88 8c 01 00 00    	js     674 <writetest+0x1c4>
+    printf(stdout, "creat small succeeded; ok\n");
+     4e8:	83 ec 08             	sub    $0x8,%esp
+     4eb:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 100; i++){
+     4ed:	31 db                	xor    %ebx,%ebx
+    printf(stdout, "creat small succeeded; ok\n");
+     4ef:	68 b5 3f 00 00       	push   $0x3fb5
+     4f4:	ff 35 00 5f 00 00    	pushl  0x5f00
+     4fa:	e8 01 36 00 00       	call   3b00 <printf>
+     4ff:	83 c4 10             	add    $0x10,%esp
+     502:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(write(fd, "aaaaaaaaaa", 10) != 10){
+     508:	83 ec 04             	sub    $0x4,%esp
+     50b:	6a 0a                	push   $0xa
+     50d:	68 ec 3f 00 00       	push   $0x3fec
+     512:	56                   	push   %esi
+     513:	e8 8b 34 00 00       	call   39a3 <write>
+     518:	83 c4 10             	add    $0x10,%esp
+     51b:	83 f8 0a             	cmp    $0xa,%eax
+     51e:	0f 85 d9 00 00 00    	jne    5fd <writetest+0x14d>
+    if(write(fd, "bbbbbbbbbb", 10) != 10){
+     524:	83 ec 04             	sub    $0x4,%esp
+     527:	6a 0a                	push   $0xa
+     529:	68 f7 3f 00 00       	push   $0x3ff7
+     52e:	56                   	push   %esi
+     52f:	e8 6f 34 00 00       	call   39a3 <write>
+     534:	83 c4 10             	add    $0x10,%esp
+     537:	83 f8 0a             	cmp    $0xa,%eax
+     53a:	0f 85 d6 00 00 00    	jne    616 <writetest+0x166>
+  for(i = 0; i < 100; i++){
+     540:	83 c3 01             	add    $0x1,%ebx
+     543:	83 fb 64             	cmp    $0x64,%ebx
+     546:	75 c0                	jne    508 <writetest+0x58>
+  printf(stdout, "writes ok\n");
+     548:	83 ec 08             	sub    $0x8,%esp
+     54b:	68 02 40 00 00       	push   $0x4002
+     550:	ff 35 00 5f 00 00    	pushl  0x5f00
+     556:	e8 a5 35 00 00       	call   3b00 <printf>
+  close(fd);
+     55b:	89 34 24             	mov    %esi,(%esp)
+     55e:	e8 48 34 00 00       	call   39ab <close>
+  fd = open("small", O_RDONLY);
+     563:	5b                   	pop    %ebx
+     564:	5e                   	pop    %esi
+     565:	6a 00                	push   $0x0
+     567:	68 af 3f 00 00       	push   $0x3faf
+     56c:	e8 52 34 00 00       	call   39c3 <open>
+  if(fd >= 0){
+     571:	83 c4 10             	add    $0x10,%esp
+  fd = open("small", O_RDONLY);
+     574:	89 c3                	mov    %eax,%ebx
+  if(fd >= 0){
+     576:	85 c0                	test   %eax,%eax
+     578:	0f 88 b1 00 00 00    	js     62f <writetest+0x17f>
+    printf(stdout, "open small succeeded ok\n");
+     57e:	83 ec 08             	sub    $0x8,%esp
+     581:	68 0d 40 00 00       	push   $0x400d
+     586:	ff 35 00 5f 00 00    	pushl  0x5f00
+     58c:	e8 6f 35 00 00       	call   3b00 <printf>
+  i = read(fd, buf, 2000);
+     591:	83 c4 0c             	add    $0xc,%esp
+     594:	68 d0 07 00 00       	push   $0x7d0
+     599:	68 e0 86 00 00       	push   $0x86e0
+     59e:	53                   	push   %ebx
+     59f:	e8 f7 33 00 00       	call   399b <read>
+  if(i == 2000){
+     5a4:	83 c4 10             	add    $0x10,%esp
+     5a7:	3d d0 07 00 00       	cmp    $0x7d0,%eax
+     5ac:	0f 85 94 00 00 00    	jne    646 <writetest+0x196>
+    printf(stdout, "read succeeded ok\n");
+     5b2:	83 ec 08             	sub    $0x8,%esp
+     5b5:	68 41 40 00 00       	push   $0x4041
+     5ba:	ff 35 00 5f 00 00    	pushl  0x5f00
+     5c0:	e8 3b 35 00 00       	call   3b00 <printf>
+  close(fd);
+     5c5:	89 1c 24             	mov    %ebx,(%esp)
+     5c8:	e8 de 33 00 00       	call   39ab <close>
+  if(unlink("small") < 0){
+     5cd:	c7 04 24 af 3f 00 00 	movl   $0x3faf,(%esp)
+     5d4:	e8 fa 33 00 00       	call   39d3 <unlink>
+     5d9:	83 c4 10             	add    $0x10,%esp
+     5dc:	85 c0                	test   %eax,%eax
+     5de:	78 7d                	js     65d <writetest+0x1ad>
+  printf(stdout, "small file test ok\n");
+     5e0:	83 ec 08             	sub    $0x8,%esp
+     5e3:	68 69 40 00 00       	push   $0x4069
+     5e8:	ff 35 00 5f 00 00    	pushl  0x5f00
+     5ee:	e8 0d 35 00 00       	call   3b00 <printf>
+}
+     5f3:	83 c4 10             	add    $0x10,%esp
+     5f6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     5f9:	5b                   	pop    %ebx
+     5fa:	5e                   	pop    %esi
+     5fb:	5d                   	pop    %ebp
+     5fc:	c3                   	ret    
+      printf(stdout, "error: write aa %d new file failed\n", i);
+     5fd:	83 ec 04             	sub    $0x4,%esp
+     600:	53                   	push   %ebx
+     601:	68 b0 4e 00 00       	push   $0x4eb0
+     606:	ff 35 00 5f 00 00    	pushl  0x5f00
+     60c:	e8 ef 34 00 00       	call   3b00 <printf>
+      exit();
+     611:	e8 6d 33 00 00       	call   3983 <exit>
+      printf(stdout, "error: write bb %d new file failed\n", i);
+     616:	83 ec 04             	sub    $0x4,%esp
+     619:	53                   	push   %ebx
+     61a:	68 d4 4e 00 00       	push   $0x4ed4
+     61f:	ff 35 00 5f 00 00    	pushl  0x5f00
+     625:	e8 d6 34 00 00       	call   3b00 <printf>
+      exit();
+     62a:	e8 54 33 00 00       	call   3983 <exit>
+    printf(stdout, "error: open small failed!\n");
+     62f:	51                   	push   %ecx
+     630:	51                   	push   %ecx
+     631:	68 26 40 00 00       	push   $0x4026
+     636:	ff 35 00 5f 00 00    	pushl  0x5f00
+     63c:	e8 bf 34 00 00       	call   3b00 <printf>
+    exit();
+     641:	e8 3d 33 00 00       	call   3983 <exit>
+    printf(stdout, "read failed\n");
+     646:	52                   	push   %edx
+     647:	52                   	push   %edx
+     648:	68 6d 43 00 00       	push   $0x436d
+     64d:	ff 35 00 5f 00 00    	pushl  0x5f00
+     653:	e8 a8 34 00 00       	call   3b00 <printf>
+    exit();
+     658:	e8 26 33 00 00       	call   3983 <exit>
+    printf(stdout, "unlink small failed\n");
+     65d:	50                   	push   %eax
+     65e:	50                   	push   %eax
+     65f:	68 54 40 00 00       	push   $0x4054
+     664:	ff 35 00 5f 00 00    	pushl  0x5f00
+     66a:	e8 91 34 00 00       	call   3b00 <printf>
+    exit();
+     66f:	e8 0f 33 00 00       	call   3983 <exit>
+    printf(stdout, "error: creat small failed!\n");
+     674:	50                   	push   %eax
+     675:	50                   	push   %eax
+     676:	68 d0 3f 00 00       	push   $0x3fd0
+     67b:	ff 35 00 5f 00 00    	pushl  0x5f00
+     681:	e8 7a 34 00 00       	call   3b00 <printf>
+    exit();
+     686:	e8 f8 32 00 00       	call   3983 <exit>
+     68b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     68f:	90                   	nop
+
+00000690 <writetest1>:
+{
+     690:	f3 0f 1e fb          	endbr32 
+     694:	55                   	push   %ebp
+     695:	89 e5                	mov    %esp,%ebp
+     697:	56                   	push   %esi
+     698:	53                   	push   %ebx
+  printf(stdout, "big files test\n");
+     699:	83 ec 08             	sub    $0x8,%esp
+     69c:	68 7d 40 00 00       	push   $0x407d
+     6a1:	ff 35 00 5f 00 00    	pushl  0x5f00
+     6a7:	e8 54 34 00 00       	call   3b00 <printf>
+  fd = open("big", O_CREATE|O_RDWR);
+     6ac:	58                   	pop    %eax
+     6ad:	5a                   	pop    %edx
+     6ae:	68 02 02 00 00       	push   $0x202
+     6b3:	68 f7 40 00 00       	push   $0x40f7
+     6b8:	e8 06 33 00 00       	call   39c3 <open>
+  if(fd < 0){
+     6bd:	83 c4 10             	add    $0x10,%esp
+     6c0:	85 c0                	test   %eax,%eax
+     6c2:	0f 88 5d 01 00 00    	js     825 <writetest1+0x195>
+     6c8:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < MAXFILE; i++){
+     6ca:	31 db                	xor    %ebx,%ebx
+     6cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(write(fd, buf, 512) != 512){
+     6d0:	83 ec 04             	sub    $0x4,%esp
+    ((int*)buf)[0] = i;
+     6d3:	89 1d e0 86 00 00    	mov    %ebx,0x86e0
+    if(write(fd, buf, 512) != 512){
+     6d9:	68 00 02 00 00       	push   $0x200
+     6de:	68 e0 86 00 00       	push   $0x86e0
+     6e3:	56                   	push   %esi
+     6e4:	e8 ba 32 00 00       	call   39a3 <write>
+     6e9:	83 c4 10             	add    $0x10,%esp
+     6ec:	3d 00 02 00 00       	cmp    $0x200,%eax
+     6f1:	0f 85 b3 00 00 00    	jne    7aa <writetest1+0x11a>
+  for(i = 0; i < MAXFILE; i++){
+     6f7:	83 c3 01             	add    $0x1,%ebx
+     6fa:	81 fb 8c 00 00 00    	cmp    $0x8c,%ebx
+     700:	75 ce                	jne    6d0 <writetest1+0x40>
+  close(fd);
+     702:	83 ec 0c             	sub    $0xc,%esp
+     705:	56                   	push   %esi
+     706:	e8 a0 32 00 00       	call   39ab <close>
+  fd = open("big", O_RDONLY);
+     70b:	5b                   	pop    %ebx
+     70c:	5e                   	pop    %esi
+     70d:	6a 00                	push   $0x0
+     70f:	68 f7 40 00 00       	push   $0x40f7
+     714:	e8 aa 32 00 00       	call   39c3 <open>
+  if(fd < 0){
+     719:	83 c4 10             	add    $0x10,%esp
+  fd = open("big", O_RDONLY);
+     71c:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+     71e:	85 c0                	test   %eax,%eax
+     720:	0f 88 e8 00 00 00    	js     80e <writetest1+0x17e>
+  n = 0;
+     726:	31 f6                	xor    %esi,%esi
+     728:	eb 1d                	jmp    747 <writetest1+0xb7>
+     72a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    } else if(i != 512){
+     730:	3d 00 02 00 00       	cmp    $0x200,%eax
+     735:	0f 85 9f 00 00 00    	jne    7da <writetest1+0x14a>
+    if(((int*)buf)[0] != n){
+     73b:	a1 e0 86 00 00       	mov    0x86e0,%eax
+     740:	39 f0                	cmp    %esi,%eax
+     742:	75 7f                	jne    7c3 <writetest1+0x133>
+    n++;
+     744:	83 c6 01             	add    $0x1,%esi
+    i = read(fd, buf, 512);
+     747:	83 ec 04             	sub    $0x4,%esp
+     74a:	68 00 02 00 00       	push   $0x200
+     74f:	68 e0 86 00 00       	push   $0x86e0
+     754:	53                   	push   %ebx
+     755:	e8 41 32 00 00       	call   399b <read>
+    if(i == 0){
+     75a:	83 c4 10             	add    $0x10,%esp
+     75d:	85 c0                	test   %eax,%eax
+     75f:	75 cf                	jne    730 <writetest1+0xa0>
+      if(n == MAXFILE - 1){
+     761:	81 fe 8b 00 00 00    	cmp    $0x8b,%esi
+     767:	0f 84 86 00 00 00    	je     7f3 <writetest1+0x163>
+  close(fd);
+     76d:	83 ec 0c             	sub    $0xc,%esp
+     770:	53                   	push   %ebx
+     771:	e8 35 32 00 00       	call   39ab <close>
+  if(unlink("big") < 0){
+     776:	c7 04 24 f7 40 00 00 	movl   $0x40f7,(%esp)
+     77d:	e8 51 32 00 00       	call   39d3 <unlink>
+     782:	83 c4 10             	add    $0x10,%esp
+     785:	85 c0                	test   %eax,%eax
+     787:	0f 88 af 00 00 00    	js     83c <writetest1+0x1ac>
+  printf(stdout, "big files ok\n");
+     78d:	83 ec 08             	sub    $0x8,%esp
+     790:	68 1e 41 00 00       	push   $0x411e
+     795:	ff 35 00 5f 00 00    	pushl  0x5f00
+     79b:	e8 60 33 00 00       	call   3b00 <printf>
+}
+     7a0:	83 c4 10             	add    $0x10,%esp
+     7a3:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     7a6:	5b                   	pop    %ebx
+     7a7:	5e                   	pop    %esi
+     7a8:	5d                   	pop    %ebp
+     7a9:	c3                   	ret    
+      printf(stdout, "error: write big file failed\n", i);
+     7aa:	83 ec 04             	sub    $0x4,%esp
+     7ad:	53                   	push   %ebx
+     7ae:	68 a7 40 00 00       	push   $0x40a7
+     7b3:	ff 35 00 5f 00 00    	pushl  0x5f00
+     7b9:	e8 42 33 00 00       	call   3b00 <printf>
+      exit();
+     7be:	e8 c0 31 00 00       	call   3983 <exit>
+      printf(stdout, "read content of block %d is %d\n",
+     7c3:	50                   	push   %eax
+     7c4:	56                   	push   %esi
+     7c5:	68 f8 4e 00 00       	push   $0x4ef8
+     7ca:	ff 35 00 5f 00 00    	pushl  0x5f00
+     7d0:	e8 2b 33 00 00       	call   3b00 <printf>
+      exit();
+     7d5:	e8 a9 31 00 00       	call   3983 <exit>
+      printf(stdout, "read failed %d\n", i);
+     7da:	83 ec 04             	sub    $0x4,%esp
+     7dd:	50                   	push   %eax
+     7de:	68 fb 40 00 00       	push   $0x40fb
+     7e3:	ff 35 00 5f 00 00    	pushl  0x5f00
+     7e9:	e8 12 33 00 00       	call   3b00 <printf>
+      exit();
+     7ee:	e8 90 31 00 00       	call   3983 <exit>
+        printf(stdout, "read only %d blocks from big", n);
+     7f3:	52                   	push   %edx
+     7f4:	68 8b 00 00 00       	push   $0x8b
+     7f9:	68 de 40 00 00       	push   $0x40de
+     7fe:	ff 35 00 5f 00 00    	pushl  0x5f00
+     804:	e8 f7 32 00 00       	call   3b00 <printf>
+        exit();
+     809:	e8 75 31 00 00       	call   3983 <exit>
+    printf(stdout, "error: open big failed!\n");
+     80e:	51                   	push   %ecx
+     80f:	51                   	push   %ecx
+     810:	68 c5 40 00 00       	push   $0x40c5
+     815:	ff 35 00 5f 00 00    	pushl  0x5f00
+     81b:	e8 e0 32 00 00       	call   3b00 <printf>
+    exit();
+     820:	e8 5e 31 00 00       	call   3983 <exit>
+    printf(stdout, "error: creat big failed!\n");
+     825:	50                   	push   %eax
+     826:	50                   	push   %eax
+     827:	68 8d 40 00 00       	push   $0x408d
+     82c:	ff 35 00 5f 00 00    	pushl  0x5f00
+     832:	e8 c9 32 00 00       	call   3b00 <printf>
+    exit();
+     837:	e8 47 31 00 00       	call   3983 <exit>
+    printf(stdout, "unlink big failed\n");
+     83c:	50                   	push   %eax
+     83d:	50                   	push   %eax
+     83e:	68 0b 41 00 00       	push   $0x410b
+     843:	ff 35 00 5f 00 00    	pushl  0x5f00
+     849:	e8 b2 32 00 00       	call   3b00 <printf>
+    exit();
+     84e:	e8 30 31 00 00       	call   3983 <exit>
+     853:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     85a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000860 <createtest>:
+{
+     860:	f3 0f 1e fb          	endbr32 
+     864:	55                   	push   %ebp
+     865:	89 e5                	mov    %esp,%ebp
+     867:	53                   	push   %ebx
+  name[2] = '\0';
+     868:	bb 30 00 00 00       	mov    $0x30,%ebx
+{
+     86d:	83 ec 0c             	sub    $0xc,%esp
+  printf(stdout, "many creates, followed by unlink test\n");
+     870:	68 18 4f 00 00       	push   $0x4f18
+     875:	ff 35 00 5f 00 00    	pushl  0x5f00
+     87b:	e8 80 32 00 00       	call   3b00 <printf>
+  name[0] = 'a';
+     880:	c6 05 e0 a6 00 00 61 	movb   $0x61,0xa6e0
+  name[2] = '\0';
+     887:	83 c4 10             	add    $0x10,%esp
+     88a:	c6 05 e2 a6 00 00 00 	movb   $0x0,0xa6e2
+  for(i = 0; i < 52; i++){
+     891:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    fd = open(name, O_CREATE|O_RDWR);
+     898:	83 ec 08             	sub    $0x8,%esp
+    name[1] = '0' + i;
+     89b:	88 1d e1 a6 00 00    	mov    %bl,0xa6e1
+    fd = open(name, O_CREATE|O_RDWR);
+     8a1:	83 c3 01             	add    $0x1,%ebx
+     8a4:	68 02 02 00 00       	push   $0x202
+     8a9:	68 e0 a6 00 00       	push   $0xa6e0
+     8ae:	e8 10 31 00 00       	call   39c3 <open>
+    close(fd);
+     8b3:	89 04 24             	mov    %eax,(%esp)
+     8b6:	e8 f0 30 00 00       	call   39ab <close>
+  for(i = 0; i < 52; i++){
+     8bb:	83 c4 10             	add    $0x10,%esp
+     8be:	80 fb 64             	cmp    $0x64,%bl
+     8c1:	75 d5                	jne    898 <createtest+0x38>
+  name[0] = 'a';
+     8c3:	c6 05 e0 a6 00 00 61 	movb   $0x61,0xa6e0
+  name[2] = '\0';
+     8ca:	bb 30 00 00 00       	mov    $0x30,%ebx
+     8cf:	c6 05 e2 a6 00 00 00 	movb   $0x0,0xa6e2
+  for(i = 0; i < 52; i++){
+     8d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     8dd:	8d 76 00             	lea    0x0(%esi),%esi
+    unlink(name);
+     8e0:	83 ec 0c             	sub    $0xc,%esp
+    name[1] = '0' + i;
+     8e3:	88 1d e1 a6 00 00    	mov    %bl,0xa6e1
+    unlink(name);
+     8e9:	83 c3 01             	add    $0x1,%ebx
+     8ec:	68 e0 a6 00 00       	push   $0xa6e0
+     8f1:	e8 dd 30 00 00       	call   39d3 <unlink>
+  for(i = 0; i < 52; i++){
+     8f6:	83 c4 10             	add    $0x10,%esp
+     8f9:	80 fb 64             	cmp    $0x64,%bl
+     8fc:	75 e2                	jne    8e0 <createtest+0x80>
+  printf(stdout, "many creates, followed by unlink; ok\n");
+     8fe:	83 ec 08             	sub    $0x8,%esp
+     901:	68 40 4f 00 00       	push   $0x4f40
+     906:	ff 35 00 5f 00 00    	pushl  0x5f00
+     90c:	e8 ef 31 00 00       	call   3b00 <printf>
+}
+     911:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     914:	83 c4 10             	add    $0x10,%esp
+     917:	c9                   	leave  
+     918:	c3                   	ret    
+     919:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000920 <dirtest>:
+{
+     920:	f3 0f 1e fb          	endbr32 
+     924:	55                   	push   %ebp
+     925:	89 e5                	mov    %esp,%ebp
+     927:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "mkdir test\n");
+     92a:	68 2c 41 00 00       	push   $0x412c
+     92f:	ff 35 00 5f 00 00    	pushl  0x5f00
+     935:	e8 c6 31 00 00       	call   3b00 <printf>
+  if(mkdir("dir0") < 0){
+     93a:	c7 04 24 38 41 00 00 	movl   $0x4138,(%esp)
+     941:	e8 a5 30 00 00       	call   39eb <mkdir>
+     946:	83 c4 10             	add    $0x10,%esp
+     949:	85 c0                	test   %eax,%eax
+     94b:	78 58                	js     9a5 <dirtest+0x85>
+  if(chdir("dir0") < 0){
+     94d:	83 ec 0c             	sub    $0xc,%esp
+     950:	68 38 41 00 00       	push   $0x4138
+     955:	e8 99 30 00 00       	call   39f3 <chdir>
+     95a:	83 c4 10             	add    $0x10,%esp
+     95d:	85 c0                	test   %eax,%eax
+     95f:	0f 88 85 00 00 00    	js     9ea <dirtest+0xca>
+  if(chdir("..") < 0){
+     965:	83 ec 0c             	sub    $0xc,%esp
+     968:	68 dd 46 00 00       	push   $0x46dd
+     96d:	e8 81 30 00 00       	call   39f3 <chdir>
+     972:	83 c4 10             	add    $0x10,%esp
+     975:	85 c0                	test   %eax,%eax
+     977:	78 5a                	js     9d3 <dirtest+0xb3>
+  if(unlink("dir0") < 0){
+     979:	83 ec 0c             	sub    $0xc,%esp
+     97c:	68 38 41 00 00       	push   $0x4138
+     981:	e8 4d 30 00 00       	call   39d3 <unlink>
+     986:	83 c4 10             	add    $0x10,%esp
+     989:	85 c0                	test   %eax,%eax
+     98b:	78 2f                	js     9bc <dirtest+0x9c>
+  printf(stdout, "mkdir test ok\n");
+     98d:	83 ec 08             	sub    $0x8,%esp
+     990:	68 75 41 00 00       	push   $0x4175
+     995:	ff 35 00 5f 00 00    	pushl  0x5f00
+     99b:	e8 60 31 00 00       	call   3b00 <printf>
+}
+     9a0:	83 c4 10             	add    $0x10,%esp
+     9a3:	c9                   	leave  
+     9a4:	c3                   	ret    
+    printf(stdout, "mkdir failed\n");
+     9a5:	50                   	push   %eax
+     9a6:	50                   	push   %eax
+     9a7:	68 68 3e 00 00       	push   $0x3e68
+     9ac:	ff 35 00 5f 00 00    	pushl  0x5f00
+     9b2:	e8 49 31 00 00       	call   3b00 <printf>
+    exit();
+     9b7:	e8 c7 2f 00 00       	call   3983 <exit>
+    printf(stdout, "unlink dir0 failed\n");
+     9bc:	50                   	push   %eax
+     9bd:	50                   	push   %eax
+     9be:	68 61 41 00 00       	push   $0x4161
+     9c3:	ff 35 00 5f 00 00    	pushl  0x5f00
+     9c9:	e8 32 31 00 00       	call   3b00 <printf>
+    exit();
+     9ce:	e8 b0 2f 00 00       	call   3983 <exit>
+    printf(stdout, "chdir .. failed\n");
+     9d3:	52                   	push   %edx
+     9d4:	52                   	push   %edx
+     9d5:	68 50 41 00 00       	push   $0x4150
+     9da:	ff 35 00 5f 00 00    	pushl  0x5f00
+     9e0:	e8 1b 31 00 00       	call   3b00 <printf>
+    exit();
+     9e5:	e8 99 2f 00 00       	call   3983 <exit>
+    printf(stdout, "chdir dir0 failed\n");
+     9ea:	51                   	push   %ecx
+     9eb:	51                   	push   %ecx
+     9ec:	68 3d 41 00 00       	push   $0x413d
+     9f1:	ff 35 00 5f 00 00    	pushl  0x5f00
+     9f7:	e8 04 31 00 00       	call   3b00 <printf>
+    exit();
+     9fc:	e8 82 2f 00 00       	call   3983 <exit>
+     a01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     a08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     a0f:	90                   	nop
+
+00000a10 <exectest>:
+{
+     a10:	f3 0f 1e fb          	endbr32 
+     a14:	55                   	push   %ebp
+     a15:	89 e5                	mov    %esp,%ebp
+     a17:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "exec test\n");
+     a1a:	68 84 41 00 00       	push   $0x4184
+     a1f:	ff 35 00 5f 00 00    	pushl  0x5f00
+     a25:	e8 d6 30 00 00       	call   3b00 <printf>
+  if(exec("echo", echoargv) < 0){
+     a2a:	5a                   	pop    %edx
+     a2b:	59                   	pop    %ecx
+     a2c:	68 04 5f 00 00       	push   $0x5f04
+     a31:	68 4d 3f 00 00       	push   $0x3f4d
+     a36:	e8 80 2f 00 00       	call   39bb <exec>
+     a3b:	83 c4 10             	add    $0x10,%esp
+     a3e:	85 c0                	test   %eax,%eax
+     a40:	78 02                	js     a44 <exectest+0x34>
+}
+     a42:	c9                   	leave  
+     a43:	c3                   	ret    
+    printf(stdout, "exec echo failed\n");
+     a44:	50                   	push   %eax
+     a45:	50                   	push   %eax
+     a46:	68 8f 41 00 00       	push   $0x418f
+     a4b:	ff 35 00 5f 00 00    	pushl  0x5f00
+     a51:	e8 aa 30 00 00       	call   3b00 <printf>
+    exit();
+     a56:	e8 28 2f 00 00       	call   3983 <exit>
+     a5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     a5f:	90                   	nop
+
+00000a60 <pipe1>:
+{
+     a60:	f3 0f 1e fb          	endbr32 
+     a64:	55                   	push   %ebp
+     a65:	89 e5                	mov    %esp,%ebp
+     a67:	57                   	push   %edi
+     a68:	56                   	push   %esi
+  if(pipe(fds) != 0){
+     a69:	8d 45 e0             	lea    -0x20(%ebp),%eax
+{
+     a6c:	53                   	push   %ebx
+     a6d:	83 ec 38             	sub    $0x38,%esp
+  if(pipe(fds) != 0){
+     a70:	50                   	push   %eax
+     a71:	e8 1d 2f 00 00       	call   3993 <pipe>
+     a76:	83 c4 10             	add    $0x10,%esp
+     a79:	85 c0                	test   %eax,%eax
+     a7b:	0f 85 38 01 00 00    	jne    bb9 <pipe1+0x159>
+  pid = fork();
+     a81:	e8 f5 2e 00 00       	call   397b <fork>
+  if(pid == 0){
+     a86:	85 c0                	test   %eax,%eax
+     a88:	0f 84 8d 00 00 00    	je     b1b <pipe1+0xbb>
+  } else if(pid > 0){
+     a8e:	0f 8e 38 01 00 00    	jle    bcc <pipe1+0x16c>
+    close(fds[1]);
+     a94:	83 ec 0c             	sub    $0xc,%esp
+     a97:	ff 75 e4             	pushl  -0x1c(%ebp)
+  seq = 0;
+     a9a:	31 db                	xor    %ebx,%ebx
+    cc = 1;
+     a9c:	be 01 00 00 00       	mov    $0x1,%esi
+    close(fds[1]);
+     aa1:	e8 05 2f 00 00       	call   39ab <close>
+    total = 0;
+     aa6:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+    while((n = read(fds[0], buf, cc)) > 0){
+     aad:	83 c4 10             	add    $0x10,%esp
+     ab0:	83 ec 04             	sub    $0x4,%esp
+     ab3:	56                   	push   %esi
+     ab4:	68 e0 86 00 00       	push   $0x86e0
+     ab9:	ff 75 e0             	pushl  -0x20(%ebp)
+     abc:	e8 da 2e 00 00       	call   399b <read>
+     ac1:	83 c4 10             	add    $0x10,%esp
+     ac4:	89 c7                	mov    %eax,%edi
+     ac6:	85 c0                	test   %eax,%eax
+     ac8:	0f 8e a7 00 00 00    	jle    b75 <pipe1+0x115>
+     ace:	8d 0c 3b             	lea    (%ebx,%edi,1),%ecx
+      for(i = 0; i < n; i++){
+     ad1:	31 c0                	xor    %eax,%eax
+     ad3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     ad7:	90                   	nop
+        if((buf[i] & 0xff) != (seq++ & 0xff)){
+     ad8:	89 da                	mov    %ebx,%edx
+     ada:	83 c3 01             	add    $0x1,%ebx
+     add:	38 90 e0 86 00 00    	cmp    %dl,0x86e0(%eax)
+     ae3:	75 1c                	jne    b01 <pipe1+0xa1>
+      for(i = 0; i < n; i++){
+     ae5:	83 c0 01             	add    $0x1,%eax
+     ae8:	39 d9                	cmp    %ebx,%ecx
+     aea:	75 ec                	jne    ad8 <pipe1+0x78>
+      cc = cc * 2;
+     aec:	01 f6                	add    %esi,%esi
+      total += n;
+     aee:	01 7d d4             	add    %edi,-0x2c(%ebp)
+     af1:	b8 00 20 00 00       	mov    $0x2000,%eax
+     af6:	81 fe 00 20 00 00    	cmp    $0x2000,%esi
+     afc:	0f 4f f0             	cmovg  %eax,%esi
+     aff:	eb af                	jmp    ab0 <pipe1+0x50>
+          printf(1, "pipe1 oops 2\n");
+     b01:	83 ec 08             	sub    $0x8,%esp
+     b04:	68 be 41 00 00       	push   $0x41be
+     b09:	6a 01                	push   $0x1
+     b0b:	e8 f0 2f 00 00       	call   3b00 <printf>
+          return;
+     b10:	83 c4 10             	add    $0x10,%esp
+}
+     b13:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     b16:	5b                   	pop    %ebx
+     b17:	5e                   	pop    %esi
+     b18:	5f                   	pop    %edi
+     b19:	5d                   	pop    %ebp
+     b1a:	c3                   	ret    
+    close(fds[0]);
+     b1b:	83 ec 0c             	sub    $0xc,%esp
+     b1e:	ff 75 e0             	pushl  -0x20(%ebp)
+  seq = 0;
+     b21:	31 db                	xor    %ebx,%ebx
+    close(fds[0]);
+     b23:	e8 83 2e 00 00       	call   39ab <close>
+     b28:	83 c4 10             	add    $0x10,%esp
+      for(i = 0; i < 1033; i++)
+     b2b:	31 c0                	xor    %eax,%eax
+     b2d:	8d 76 00             	lea    0x0(%esi),%esi
+        buf[i] = seq++;
+     b30:	8d 14 18             	lea    (%eax,%ebx,1),%edx
+      for(i = 0; i < 1033; i++)
+     b33:	83 c0 01             	add    $0x1,%eax
+        buf[i] = seq++;
+     b36:	88 90 df 86 00 00    	mov    %dl,0x86df(%eax)
+      for(i = 0; i < 1033; i++)
+     b3c:	3d 09 04 00 00       	cmp    $0x409,%eax
+     b41:	75 ed                	jne    b30 <pipe1+0xd0>
+      if(write(fds[1], buf, 1033) != 1033){
+     b43:	83 ec 04             	sub    $0x4,%esp
+     b46:	81 c3 09 04 00 00    	add    $0x409,%ebx
+     b4c:	68 09 04 00 00       	push   $0x409
+     b51:	68 e0 86 00 00       	push   $0x86e0
+     b56:	ff 75 e4             	pushl  -0x1c(%ebp)
+     b59:	e8 45 2e 00 00       	call   39a3 <write>
+     b5e:	83 c4 10             	add    $0x10,%esp
+     b61:	3d 09 04 00 00       	cmp    $0x409,%eax
+     b66:	75 77                	jne    bdf <pipe1+0x17f>
+    for(n = 0; n < 5; n++){
+     b68:	81 fb 2d 14 00 00    	cmp    $0x142d,%ebx
+     b6e:	75 bb                	jne    b2b <pipe1+0xcb>
+    exit();
+     b70:	e8 0e 2e 00 00       	call   3983 <exit>
+    if(total != 5 * 1033){
+     b75:	81 7d d4 2d 14 00 00 	cmpl   $0x142d,-0x2c(%ebp)
+     b7c:	75 26                	jne    ba4 <pipe1+0x144>
+    close(fds[0]);
+     b7e:	83 ec 0c             	sub    $0xc,%esp
+     b81:	ff 75 e0             	pushl  -0x20(%ebp)
+     b84:	e8 22 2e 00 00       	call   39ab <close>
+    wait();
+     b89:	e8 fd 2d 00 00       	call   398b <wait>
+  printf(1, "pipe1 ok\n");
+     b8e:	5a                   	pop    %edx
+     b8f:	59                   	pop    %ecx
+     b90:	68 e3 41 00 00       	push   $0x41e3
+     b95:	6a 01                	push   $0x1
+     b97:	e8 64 2f 00 00       	call   3b00 <printf>
+     b9c:	83 c4 10             	add    $0x10,%esp
+     b9f:	e9 6f ff ff ff       	jmp    b13 <pipe1+0xb3>
+      printf(1, "pipe1 oops 3 total %d\n", total);
+     ba4:	53                   	push   %ebx
+     ba5:	ff 75 d4             	pushl  -0x2c(%ebp)
+     ba8:	68 cc 41 00 00       	push   $0x41cc
+     bad:	6a 01                	push   $0x1
+     baf:	e8 4c 2f 00 00       	call   3b00 <printf>
+      exit();
+     bb4:	e8 ca 2d 00 00       	call   3983 <exit>
+    printf(1, "pipe() failed\n");
+     bb9:	57                   	push   %edi
+     bba:	57                   	push   %edi
+     bbb:	68 a1 41 00 00       	push   $0x41a1
+     bc0:	6a 01                	push   $0x1
+     bc2:	e8 39 2f 00 00       	call   3b00 <printf>
+    exit();
+     bc7:	e8 b7 2d 00 00       	call   3983 <exit>
+    printf(1, "fork() failed\n");
+     bcc:	50                   	push   %eax
+     bcd:	50                   	push   %eax
+     bce:	68 ed 41 00 00       	push   $0x41ed
+     bd3:	6a 01                	push   $0x1
+     bd5:	e8 26 2f 00 00       	call   3b00 <printf>
+    exit();
+     bda:	e8 a4 2d 00 00       	call   3983 <exit>
+        printf(1, "pipe1 oops 1\n");
+     bdf:	56                   	push   %esi
+     be0:	56                   	push   %esi
+     be1:	68 b0 41 00 00       	push   $0x41b0
+     be6:	6a 01                	push   $0x1
+     be8:	e8 13 2f 00 00       	call   3b00 <printf>
+        exit();
+     bed:	e8 91 2d 00 00       	call   3983 <exit>
+     bf2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bf9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000c00 <preempt>:
+{
+     c00:	f3 0f 1e fb          	endbr32 
+     c04:	55                   	push   %ebp
+     c05:	89 e5                	mov    %esp,%ebp
+     c07:	57                   	push   %edi
+     c08:	56                   	push   %esi
+     c09:	53                   	push   %ebx
+     c0a:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "preempt: ");
+     c0d:	68 fc 41 00 00       	push   $0x41fc
+     c12:	6a 01                	push   $0x1
+     c14:	e8 e7 2e 00 00       	call   3b00 <printf>
+  pid1 = fork();
+     c19:	e8 5d 2d 00 00       	call   397b <fork>
+  if(pid1 == 0)
+     c1e:	83 c4 10             	add    $0x10,%esp
+     c21:	85 c0                	test   %eax,%eax
+     c23:	75 0b                	jne    c30 <preempt+0x30>
+    for(;;)
+     c25:	eb fe                	jmp    c25 <preempt+0x25>
+     c27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c2e:	66 90                	xchg   %ax,%ax
+     c30:	89 c7                	mov    %eax,%edi
+  pid2 = fork();
+     c32:	e8 44 2d 00 00       	call   397b <fork>
+     c37:	89 c6                	mov    %eax,%esi
+  if(pid2 == 0)
+     c39:	85 c0                	test   %eax,%eax
+     c3b:	75 03                	jne    c40 <preempt+0x40>
+    for(;;)
+     c3d:	eb fe                	jmp    c3d <preempt+0x3d>
+     c3f:	90                   	nop
+  pipe(pfds);
+     c40:	83 ec 0c             	sub    $0xc,%esp
+     c43:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     c46:	50                   	push   %eax
+     c47:	e8 47 2d 00 00       	call   3993 <pipe>
+  pid3 = fork();
+     c4c:	e8 2a 2d 00 00       	call   397b <fork>
+  if(pid3 == 0){
+     c51:	83 c4 10             	add    $0x10,%esp
+  pid3 = fork();
+     c54:	89 c3                	mov    %eax,%ebx
+  if(pid3 == 0){
+     c56:	85 c0                	test   %eax,%eax
+     c58:	75 3e                	jne    c98 <preempt+0x98>
+    close(pfds[0]);
+     c5a:	83 ec 0c             	sub    $0xc,%esp
+     c5d:	ff 75 e0             	pushl  -0x20(%ebp)
+     c60:	e8 46 2d 00 00       	call   39ab <close>
+    if(write(pfds[1], "x", 1) != 1)
+     c65:	83 c4 0c             	add    $0xc,%esp
+     c68:	6a 01                	push   $0x1
+     c6a:	68 c1 47 00 00       	push   $0x47c1
+     c6f:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c72:	e8 2c 2d 00 00       	call   39a3 <write>
+     c77:	83 c4 10             	add    $0x10,%esp
+     c7a:	83 f8 01             	cmp    $0x1,%eax
+     c7d:	0f 85 a4 00 00 00    	jne    d27 <preempt+0x127>
+    close(pfds[1]);
+     c83:	83 ec 0c             	sub    $0xc,%esp
+     c86:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c89:	e8 1d 2d 00 00       	call   39ab <close>
+     c8e:	83 c4 10             	add    $0x10,%esp
+    for(;;)
+     c91:	eb fe                	jmp    c91 <preempt+0x91>
+     c93:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     c97:	90                   	nop
+  close(pfds[1]);
+     c98:	83 ec 0c             	sub    $0xc,%esp
+     c9b:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c9e:	e8 08 2d 00 00       	call   39ab <close>
+  if(read(pfds[0], buf, sizeof(buf)) != 1){
+     ca3:	83 c4 0c             	add    $0xc,%esp
+     ca6:	68 00 20 00 00       	push   $0x2000
+     cab:	68 e0 86 00 00       	push   $0x86e0
+     cb0:	ff 75 e0             	pushl  -0x20(%ebp)
+     cb3:	e8 e3 2c 00 00       	call   399b <read>
+     cb8:	83 c4 10             	add    $0x10,%esp
+     cbb:	83 f8 01             	cmp    $0x1,%eax
+     cbe:	75 7e                	jne    d3e <preempt+0x13e>
+  close(pfds[0]);
+     cc0:	83 ec 0c             	sub    $0xc,%esp
+     cc3:	ff 75 e0             	pushl  -0x20(%ebp)
+     cc6:	e8 e0 2c 00 00       	call   39ab <close>
+  printf(1, "kill... ");
+     ccb:	58                   	pop    %eax
+     ccc:	5a                   	pop    %edx
+     ccd:	68 2d 42 00 00       	push   $0x422d
+     cd2:	6a 01                	push   $0x1
+     cd4:	e8 27 2e 00 00       	call   3b00 <printf>
+  kill(pid1);
+     cd9:	89 3c 24             	mov    %edi,(%esp)
+     cdc:	e8 d2 2c 00 00       	call   39b3 <kill>
+  kill(pid2);
+     ce1:	89 34 24             	mov    %esi,(%esp)
+     ce4:	e8 ca 2c 00 00       	call   39b3 <kill>
+  kill(pid3);
+     ce9:	89 1c 24             	mov    %ebx,(%esp)
+     cec:	e8 c2 2c 00 00       	call   39b3 <kill>
+  printf(1, "wait... ");
+     cf1:	59                   	pop    %ecx
+     cf2:	5b                   	pop    %ebx
+     cf3:	68 36 42 00 00       	push   $0x4236
+     cf8:	6a 01                	push   $0x1
+     cfa:	e8 01 2e 00 00       	call   3b00 <printf>
+  wait();
+     cff:	e8 87 2c 00 00       	call   398b <wait>
+  wait();
+     d04:	e8 82 2c 00 00       	call   398b <wait>
+  wait();
+     d09:	e8 7d 2c 00 00       	call   398b <wait>
+  printf(1, "preempt ok\n");
+     d0e:	5e                   	pop    %esi
+     d0f:	5f                   	pop    %edi
+     d10:	68 3f 42 00 00       	push   $0x423f
+     d15:	6a 01                	push   $0x1
+     d17:	e8 e4 2d 00 00       	call   3b00 <printf>
+     d1c:	83 c4 10             	add    $0x10,%esp
+}
+     d1f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     d22:	5b                   	pop    %ebx
+     d23:	5e                   	pop    %esi
+     d24:	5f                   	pop    %edi
+     d25:	5d                   	pop    %ebp
+     d26:	c3                   	ret    
+      printf(1, "preempt write error");
+     d27:	83 ec 08             	sub    $0x8,%esp
+     d2a:	68 06 42 00 00       	push   $0x4206
+     d2f:	6a 01                	push   $0x1
+     d31:	e8 ca 2d 00 00       	call   3b00 <printf>
+     d36:	83 c4 10             	add    $0x10,%esp
+     d39:	e9 45 ff ff ff       	jmp    c83 <preempt+0x83>
+    printf(1, "preempt read error");
+     d3e:	83 ec 08             	sub    $0x8,%esp
+     d41:	68 1a 42 00 00       	push   $0x421a
+     d46:	6a 01                	push   $0x1
+     d48:	e8 b3 2d 00 00       	call   3b00 <printf>
+    return;
+     d4d:	83 c4 10             	add    $0x10,%esp
+     d50:	eb cd                	jmp    d1f <preempt+0x11f>
+     d52:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     d59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000d60 <exitwait>:
+{
+     d60:	f3 0f 1e fb          	endbr32 
+     d64:	55                   	push   %ebp
+     d65:	89 e5                	mov    %esp,%ebp
+     d67:	56                   	push   %esi
+     d68:	be 64 00 00 00       	mov    $0x64,%esi
+     d6d:	53                   	push   %ebx
+     d6e:	eb 10                	jmp    d80 <exitwait+0x20>
+    if(pid){
+     d70:	74 68                	je     dda <exitwait+0x7a>
+      if(wait() != pid){
+     d72:	e8 14 2c 00 00       	call   398b <wait>
+     d77:	39 d8                	cmp    %ebx,%eax
+     d79:	75 2d                	jne    da8 <exitwait+0x48>
+  for(i = 0; i < 100; i++){
+     d7b:	83 ee 01             	sub    $0x1,%esi
+     d7e:	74 41                	je     dc1 <exitwait+0x61>
+    pid = fork();
+     d80:	e8 f6 2b 00 00       	call   397b <fork>
+     d85:	89 c3                	mov    %eax,%ebx
+    if(pid < 0){
+     d87:	85 c0                	test   %eax,%eax
+     d89:	79 e5                	jns    d70 <exitwait+0x10>
+      printf(1, "fork failed\n");
+     d8b:	83 ec 08             	sub    $0x8,%esp
+     d8e:	68 a9 4d 00 00       	push   $0x4da9
+     d93:	6a 01                	push   $0x1
+     d95:	e8 66 2d 00 00       	call   3b00 <printf>
+      return;
+     d9a:	83 c4 10             	add    $0x10,%esp
+}
+     d9d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     da0:	5b                   	pop    %ebx
+     da1:	5e                   	pop    %esi
+     da2:	5d                   	pop    %ebp
+     da3:	c3                   	ret    
+     da4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        printf(1, "wait wrong pid\n");
+     da8:	83 ec 08             	sub    $0x8,%esp
+     dab:	68 4b 42 00 00       	push   $0x424b
+     db0:	6a 01                	push   $0x1
+     db2:	e8 49 2d 00 00       	call   3b00 <printf>
+        return;
+     db7:	83 c4 10             	add    $0x10,%esp
+}
+     dba:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     dbd:	5b                   	pop    %ebx
+     dbe:	5e                   	pop    %esi
+     dbf:	5d                   	pop    %ebp
+     dc0:	c3                   	ret    
+  printf(1, "exitwait ok\n");
+     dc1:	83 ec 08             	sub    $0x8,%esp
+     dc4:	68 5b 42 00 00       	push   $0x425b
+     dc9:	6a 01                	push   $0x1
+     dcb:	e8 30 2d 00 00       	call   3b00 <printf>
+     dd0:	83 c4 10             	add    $0x10,%esp
+}
+     dd3:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     dd6:	5b                   	pop    %ebx
+     dd7:	5e                   	pop    %esi
+     dd8:	5d                   	pop    %ebp
+     dd9:	c3                   	ret    
+      exit();
+     dda:	e8 a4 2b 00 00       	call   3983 <exit>
+     ddf:	90                   	nop
+
+00000de0 <mem>:
+{
+     de0:	f3 0f 1e fb          	endbr32 
+     de4:	55                   	push   %ebp
+     de5:	89 e5                	mov    %esp,%ebp
+     de7:	56                   	push   %esi
+     de8:	31 f6                	xor    %esi,%esi
+     dea:	53                   	push   %ebx
+  printf(1, "mem test\n");
+     deb:	83 ec 08             	sub    $0x8,%esp
+     dee:	68 68 42 00 00       	push   $0x4268
+     df3:	6a 01                	push   $0x1
+     df5:	e8 06 2d 00 00       	call   3b00 <printf>
+  ppid = getpid();
+     dfa:	e8 04 2c 00 00       	call   3a03 <getpid>
+     dff:	89 c3                	mov    %eax,%ebx
+  if((pid = fork()) == 0){
+     e01:	e8 75 2b 00 00       	call   397b <fork>
+     e06:	83 c4 10             	add    $0x10,%esp
+     e09:	85 c0                	test   %eax,%eax
+     e0b:	74 0f                	je     e1c <mem+0x3c>
+     e0d:	e9 8e 00 00 00       	jmp    ea0 <mem+0xc0>
+     e12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      *(char**)m2 = m1;
+     e18:	89 30                	mov    %esi,(%eax)
+     e1a:	89 c6                	mov    %eax,%esi
+    while((m2 = malloc(10001)) != 0){
+     e1c:	83 ec 0c             	sub    $0xc,%esp
+     e1f:	68 11 27 00 00       	push   $0x2711
+     e24:	e8 37 2f 00 00       	call   3d60 <malloc>
+     e29:	83 c4 10             	add    $0x10,%esp
+     e2c:	85 c0                	test   %eax,%eax
+     e2e:	75 e8                	jne    e18 <mem+0x38>
+    while(m1){
+     e30:	85 f6                	test   %esi,%esi
+     e32:	74 18                	je     e4c <mem+0x6c>
+     e34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      m2 = *(char**)m1;
+     e38:	89 f0                	mov    %esi,%eax
+      free(m1);
+     e3a:	83 ec 0c             	sub    $0xc,%esp
+      m2 = *(char**)m1;
+     e3d:	8b 36                	mov    (%esi),%esi
+      free(m1);
+     e3f:	50                   	push   %eax
+     e40:	e8 8b 2e 00 00       	call   3cd0 <free>
+    while(m1){
+     e45:	83 c4 10             	add    $0x10,%esp
+     e48:	85 f6                	test   %esi,%esi
+     e4a:	75 ec                	jne    e38 <mem+0x58>
+    m1 = malloc(1024*20);
+     e4c:	83 ec 0c             	sub    $0xc,%esp
+     e4f:	68 00 50 00 00       	push   $0x5000
+     e54:	e8 07 2f 00 00       	call   3d60 <malloc>
+    if(m1 == 0){
+     e59:	83 c4 10             	add    $0x10,%esp
+     e5c:	85 c0                	test   %eax,%eax
+     e5e:	74 20                	je     e80 <mem+0xa0>
+    free(m1);
+     e60:	83 ec 0c             	sub    $0xc,%esp
+     e63:	50                   	push   %eax
+     e64:	e8 67 2e 00 00       	call   3cd0 <free>
+    printf(1, "mem ok\n");
+     e69:	58                   	pop    %eax
+     e6a:	5a                   	pop    %edx
+     e6b:	68 8c 42 00 00       	push   $0x428c
+     e70:	6a 01                	push   $0x1
+     e72:	e8 89 2c 00 00       	call   3b00 <printf>
+    exit();
+     e77:	e8 07 2b 00 00       	call   3983 <exit>
+     e7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      printf(1, "couldn't allocate mem?!!\n");
+     e80:	83 ec 08             	sub    $0x8,%esp
+     e83:	68 72 42 00 00       	push   $0x4272
+     e88:	6a 01                	push   $0x1
+     e8a:	e8 71 2c 00 00       	call   3b00 <printf>
+      kill(ppid);
+     e8f:	89 1c 24             	mov    %ebx,(%esp)
+     e92:	e8 1c 2b 00 00       	call   39b3 <kill>
+      exit();
+     e97:	e8 e7 2a 00 00       	call   3983 <exit>
+     e9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+}
+     ea0:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     ea3:	5b                   	pop    %ebx
+     ea4:	5e                   	pop    %esi
+     ea5:	5d                   	pop    %ebp
+    wait();
+     ea6:	e9 e0 2a 00 00       	jmp    398b <wait>
+     eab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     eaf:	90                   	nop
+
+00000eb0 <sharedfd>:
+{
+     eb0:	f3 0f 1e fb          	endbr32 
+     eb4:	55                   	push   %ebp
+     eb5:	89 e5                	mov    %esp,%ebp
+     eb7:	57                   	push   %edi
+     eb8:	56                   	push   %esi
+     eb9:	53                   	push   %ebx
+     eba:	83 ec 34             	sub    $0x34,%esp
+  printf(1, "sharedfd test\n");
+     ebd:	68 94 42 00 00       	push   $0x4294
+     ec2:	6a 01                	push   $0x1
+     ec4:	e8 37 2c 00 00       	call   3b00 <printf>
+  unlink("sharedfd");
+     ec9:	c7 04 24 a3 42 00 00 	movl   $0x42a3,(%esp)
+     ed0:	e8 fe 2a 00 00       	call   39d3 <unlink>
+  fd = open("sharedfd", O_CREATE|O_RDWR);
+     ed5:	5b                   	pop    %ebx
+     ed6:	5e                   	pop    %esi
+     ed7:	68 02 02 00 00       	push   $0x202
+     edc:	68 a3 42 00 00       	push   $0x42a3
+     ee1:	e8 dd 2a 00 00       	call   39c3 <open>
+  if(fd < 0){
+     ee6:	83 c4 10             	add    $0x10,%esp
+     ee9:	85 c0                	test   %eax,%eax
+     eeb:	0f 88 26 01 00 00    	js     1017 <sharedfd+0x167>
+     ef1:	89 c7                	mov    %eax,%edi
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     ef3:	8d 75 de             	lea    -0x22(%ebp),%esi
+     ef6:	bb e8 03 00 00       	mov    $0x3e8,%ebx
+  pid = fork();
+     efb:	e8 7b 2a 00 00       	call   397b <fork>
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     f00:	83 f8 01             	cmp    $0x1,%eax
+  pid = fork();
+     f03:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     f06:	19 c0                	sbb    %eax,%eax
+     f08:	83 ec 04             	sub    $0x4,%esp
+     f0b:	83 e0 f3             	and    $0xfffffff3,%eax
+     f0e:	6a 0a                	push   $0xa
+     f10:	83 c0 70             	add    $0x70,%eax
+     f13:	50                   	push   %eax
+     f14:	56                   	push   %esi
+     f15:	e8 c6 28 00 00       	call   37e0 <memset>
+     f1a:	83 c4 10             	add    $0x10,%esp
+     f1d:	eb 06                	jmp    f25 <sharedfd+0x75>
+     f1f:	90                   	nop
+  for(i = 0; i < 1000; i++){
+     f20:	83 eb 01             	sub    $0x1,%ebx
+     f23:	74 26                	je     f4b <sharedfd+0x9b>
+    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
+     f25:	83 ec 04             	sub    $0x4,%esp
+     f28:	6a 0a                	push   $0xa
+     f2a:	56                   	push   %esi
+     f2b:	57                   	push   %edi
+     f2c:	e8 72 2a 00 00       	call   39a3 <write>
+     f31:	83 c4 10             	add    $0x10,%esp
+     f34:	83 f8 0a             	cmp    $0xa,%eax
+     f37:	74 e7                	je     f20 <sharedfd+0x70>
+      printf(1, "fstests: write sharedfd failed\n");
+     f39:	83 ec 08             	sub    $0x8,%esp
+     f3c:	68 94 4f 00 00       	push   $0x4f94
+     f41:	6a 01                	push   $0x1
+     f43:	e8 b8 2b 00 00       	call   3b00 <printf>
+      break;
+     f48:	83 c4 10             	add    $0x10,%esp
+  if(pid == 0)
+     f4b:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+     f4e:	85 c9                	test   %ecx,%ecx
+     f50:	0f 84 f5 00 00 00    	je     104b <sharedfd+0x19b>
+    wait();
+     f56:	e8 30 2a 00 00       	call   398b <wait>
+  close(fd);
+     f5b:	83 ec 0c             	sub    $0xc,%esp
+  nc = np = 0;
+     f5e:	31 db                	xor    %ebx,%ebx
+  close(fd);
+     f60:	57                   	push   %edi
+     f61:	8d 7d e8             	lea    -0x18(%ebp),%edi
+     f64:	e8 42 2a 00 00       	call   39ab <close>
+  fd = open("sharedfd", 0);
+     f69:	58                   	pop    %eax
+     f6a:	5a                   	pop    %edx
+     f6b:	6a 00                	push   $0x0
+     f6d:	68 a3 42 00 00       	push   $0x42a3
+     f72:	e8 4c 2a 00 00       	call   39c3 <open>
+  if(fd < 0){
+     f77:	83 c4 10             	add    $0x10,%esp
+  nc = np = 0;
+     f7a:	31 d2                	xor    %edx,%edx
+  fd = open("sharedfd", 0);
+     f7c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  if(fd < 0){
+     f7f:	85 c0                	test   %eax,%eax
+     f81:	0f 88 aa 00 00 00    	js     1031 <sharedfd+0x181>
+     f87:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     f8e:	66 90                	xchg   %ax,%ax
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+     f90:	83 ec 04             	sub    $0x4,%esp
+     f93:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+     f96:	6a 0a                	push   $0xa
+     f98:	56                   	push   %esi
+     f99:	ff 75 d0             	pushl  -0x30(%ebp)
+     f9c:	e8 fa 29 00 00       	call   399b <read>
+     fa1:	83 c4 10             	add    $0x10,%esp
+     fa4:	85 c0                	test   %eax,%eax
+     fa6:	7e 28                	jle    fd0 <sharedfd+0x120>
+    for(i = 0; i < sizeof(buf); i++){
+     fa8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     fab:	89 f0                	mov    %esi,%eax
+     fad:	eb 13                	jmp    fc2 <sharedfd+0x112>
+     faf:	90                   	nop
+        np++;
+     fb0:	80 f9 70             	cmp    $0x70,%cl
+     fb3:	0f 94 c1             	sete   %cl
+     fb6:	0f b6 c9             	movzbl %cl,%ecx
+     fb9:	01 cb                	add    %ecx,%ebx
+    for(i = 0; i < sizeof(buf); i++){
+     fbb:	83 c0 01             	add    $0x1,%eax
+     fbe:	39 c7                	cmp    %eax,%edi
+     fc0:	74 ce                	je     f90 <sharedfd+0xe0>
+      if(buf[i] == 'c')
+     fc2:	0f b6 08             	movzbl (%eax),%ecx
+     fc5:	80 f9 63             	cmp    $0x63,%cl
+     fc8:	75 e6                	jne    fb0 <sharedfd+0x100>
+        nc++;
+     fca:	83 c2 01             	add    $0x1,%edx
+      if(buf[i] == 'p')
+     fcd:	eb ec                	jmp    fbb <sharedfd+0x10b>
+     fcf:	90                   	nop
+  close(fd);
+     fd0:	83 ec 0c             	sub    $0xc,%esp
+     fd3:	ff 75 d0             	pushl  -0x30(%ebp)
+     fd6:	e8 d0 29 00 00       	call   39ab <close>
+  unlink("sharedfd");
+     fdb:	c7 04 24 a3 42 00 00 	movl   $0x42a3,(%esp)
+     fe2:	e8 ec 29 00 00       	call   39d3 <unlink>
+  if(nc == 10000 && np == 10000){
+     fe7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     fea:	83 c4 10             	add    $0x10,%esp
+     fed:	81 fa 10 27 00 00    	cmp    $0x2710,%edx
+     ff3:	75 5b                	jne    1050 <sharedfd+0x1a0>
+     ff5:	81 fb 10 27 00 00    	cmp    $0x2710,%ebx
+     ffb:	75 53                	jne    1050 <sharedfd+0x1a0>
+    printf(1, "sharedfd ok\n");
+     ffd:	83 ec 08             	sub    $0x8,%esp
+    1000:	68 ac 42 00 00       	push   $0x42ac
+    1005:	6a 01                	push   $0x1
+    1007:	e8 f4 2a 00 00       	call   3b00 <printf>
+    100c:	83 c4 10             	add    $0x10,%esp
+}
+    100f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1012:	5b                   	pop    %ebx
+    1013:	5e                   	pop    %esi
+    1014:	5f                   	pop    %edi
+    1015:	5d                   	pop    %ebp
+    1016:	c3                   	ret    
+    printf(1, "fstests: cannot open sharedfd for writing");
+    1017:	83 ec 08             	sub    $0x8,%esp
+    101a:	68 68 4f 00 00       	push   $0x4f68
+    101f:	6a 01                	push   $0x1
+    1021:	e8 da 2a 00 00       	call   3b00 <printf>
+    return;
+    1026:	83 c4 10             	add    $0x10,%esp
+}
+    1029:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    102c:	5b                   	pop    %ebx
+    102d:	5e                   	pop    %esi
+    102e:	5f                   	pop    %edi
+    102f:	5d                   	pop    %ebp
+    1030:	c3                   	ret    
+    printf(1, "fstests: cannot open sharedfd for reading\n");
+    1031:	83 ec 08             	sub    $0x8,%esp
+    1034:	68 b4 4f 00 00       	push   $0x4fb4
+    1039:	6a 01                	push   $0x1
+    103b:	e8 c0 2a 00 00       	call   3b00 <printf>
+    return;
+    1040:	83 c4 10             	add    $0x10,%esp
+}
+    1043:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1046:	5b                   	pop    %ebx
+    1047:	5e                   	pop    %esi
+    1048:	5f                   	pop    %edi
+    1049:	5d                   	pop    %ebp
+    104a:	c3                   	ret    
+    exit();
+    104b:	e8 33 29 00 00       	call   3983 <exit>
+    printf(1, "sharedfd oops %d %d\n", nc, np);
+    1050:	53                   	push   %ebx
+    1051:	52                   	push   %edx
+    1052:	68 b9 42 00 00       	push   $0x42b9
+    1057:	6a 01                	push   $0x1
+    1059:	e8 a2 2a 00 00       	call   3b00 <printf>
+    exit();
+    105e:	e8 20 29 00 00       	call   3983 <exit>
+    1063:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    106a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00001070 <fourfiles>:
+{
+    1070:	f3 0f 1e fb          	endbr32 
+    1074:	55                   	push   %ebp
+    1075:	89 e5                	mov    %esp,%ebp
+    1077:	57                   	push   %edi
+    1078:	56                   	push   %esi
+  printf(1, "fourfiles test\n");
+    1079:	be ce 42 00 00       	mov    $0x42ce,%esi
+{
+    107e:	53                   	push   %ebx
+  for(pi = 0; pi < 4; pi++){
+    107f:	31 db                	xor    %ebx,%ebx
+{
+    1081:	83 ec 34             	sub    $0x34,%esp
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    1084:	c7 45 d8 ce 42 00 00 	movl   $0x42ce,-0x28(%ebp)
+  printf(1, "fourfiles test\n");
+    108b:	68 d4 42 00 00       	push   $0x42d4
+    1090:	6a 01                	push   $0x1
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    1092:	c7 45 dc 17 44 00 00 	movl   $0x4417,-0x24(%ebp)
+    1099:	c7 45 e0 1b 44 00 00 	movl   $0x441b,-0x20(%ebp)
+    10a0:	c7 45 e4 d1 42 00 00 	movl   $0x42d1,-0x1c(%ebp)
+  printf(1, "fourfiles test\n");
+    10a7:	e8 54 2a 00 00       	call   3b00 <printf>
+    10ac:	83 c4 10             	add    $0x10,%esp
+    unlink(fname);
+    10af:	83 ec 0c             	sub    $0xc,%esp
+    10b2:	56                   	push   %esi
+    10b3:	e8 1b 29 00 00       	call   39d3 <unlink>
+    pid = fork();
+    10b8:	e8 be 28 00 00       	call   397b <fork>
+    if(pid < 0){
+    10bd:	83 c4 10             	add    $0x10,%esp
+    10c0:	85 c0                	test   %eax,%eax
+    10c2:	0f 88 60 01 00 00    	js     1228 <fourfiles+0x1b8>
+    if(pid == 0){
+    10c8:	0f 84 e5 00 00 00    	je     11b3 <fourfiles+0x143>
+  for(pi = 0; pi < 4; pi++){
+    10ce:	83 c3 01             	add    $0x1,%ebx
+    10d1:	83 fb 04             	cmp    $0x4,%ebx
+    10d4:	74 06                	je     10dc <fourfiles+0x6c>
+    10d6:	8b 74 9d d8          	mov    -0x28(%ebp,%ebx,4),%esi
+    10da:	eb d3                	jmp    10af <fourfiles+0x3f>
+    wait();
+    10dc:	e8 aa 28 00 00       	call   398b <wait>
+  for(i = 0; i < 2; i++){
+    10e1:	31 f6                	xor    %esi,%esi
+    wait();
+    10e3:	e8 a3 28 00 00       	call   398b <wait>
+    10e8:	e8 9e 28 00 00       	call   398b <wait>
+    10ed:	e8 99 28 00 00       	call   398b <wait>
+    fname = names[i];
+    10f2:	8b 44 b5 d8          	mov    -0x28(%ebp,%esi,4),%eax
+    fd = open(fname, 0);
+    10f6:	83 ec 08             	sub    $0x8,%esp
+    total = 0;
+    10f9:	31 db                	xor    %ebx,%ebx
+    fd = open(fname, 0);
+    10fb:	6a 00                	push   $0x0
+    10fd:	50                   	push   %eax
+    fname = names[i];
+    10fe:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    fd = open(fname, 0);
+    1101:	e8 bd 28 00 00       	call   39c3 <open>
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    1106:	83 c4 10             	add    $0x10,%esp
+    fd = open(fname, 0);
+    1109:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    110c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1110:	83 ec 04             	sub    $0x4,%esp
+    1113:	68 00 20 00 00       	push   $0x2000
+    1118:	68 e0 86 00 00       	push   $0x86e0
+    111d:	ff 75 d4             	pushl  -0x2c(%ebp)
+    1120:	e8 76 28 00 00       	call   399b <read>
+    1125:	83 c4 10             	add    $0x10,%esp
+    1128:	85 c0                	test   %eax,%eax
+    112a:	7e 22                	jle    114e <fourfiles+0xde>
+      for(j = 0; j < n; j++){
+    112c:	31 d2                	xor    %edx,%edx
+    112e:	66 90                	xchg   %ax,%ax
+        if(buf[j] != '0'+i){
+    1130:	83 fe 01             	cmp    $0x1,%esi
+    1133:	0f be ba e0 86 00 00 	movsbl 0x86e0(%edx),%edi
+    113a:	19 c9                	sbb    %ecx,%ecx
+    113c:	83 c1 31             	add    $0x31,%ecx
+    113f:	39 cf                	cmp    %ecx,%edi
+    1141:	75 5c                	jne    119f <fourfiles+0x12f>
+      for(j = 0; j < n; j++){
+    1143:	83 c2 01             	add    $0x1,%edx
+    1146:	39 d0                	cmp    %edx,%eax
+    1148:	75 e6                	jne    1130 <fourfiles+0xc0>
+      total += n;
+    114a:	01 c3                	add    %eax,%ebx
+    114c:	eb c2                	jmp    1110 <fourfiles+0xa0>
+    close(fd);
+    114e:	83 ec 0c             	sub    $0xc,%esp
+    1151:	ff 75 d4             	pushl  -0x2c(%ebp)
+    1154:	e8 52 28 00 00       	call   39ab <close>
+    if(total != 12*500){
+    1159:	83 c4 10             	add    $0x10,%esp
+    115c:	81 fb 70 17 00 00    	cmp    $0x1770,%ebx
+    1162:	0f 85 d4 00 00 00    	jne    123c <fourfiles+0x1cc>
+    unlink(fname);
+    1168:	83 ec 0c             	sub    $0xc,%esp
+    116b:	ff 75 d0             	pushl  -0x30(%ebp)
+    116e:	e8 60 28 00 00       	call   39d3 <unlink>
+  for(i = 0; i < 2; i++){
+    1173:	83 c4 10             	add    $0x10,%esp
+    1176:	83 fe 01             	cmp    $0x1,%esi
+    1179:	75 1a                	jne    1195 <fourfiles+0x125>
+  printf(1, "fourfiles ok\n");
+    117b:	83 ec 08             	sub    $0x8,%esp
+    117e:	68 12 43 00 00       	push   $0x4312
+    1183:	6a 01                	push   $0x1
+    1185:	e8 76 29 00 00       	call   3b00 <printf>
+}
+    118a:	83 c4 10             	add    $0x10,%esp
+    118d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1190:	5b                   	pop    %ebx
+    1191:	5e                   	pop    %esi
+    1192:	5f                   	pop    %edi
+    1193:	5d                   	pop    %ebp
+    1194:	c3                   	ret    
+    1195:	be 01 00 00 00       	mov    $0x1,%esi
+    119a:	e9 53 ff ff ff       	jmp    10f2 <fourfiles+0x82>
+          printf(1, "wrong char\n");
+    119f:	83 ec 08             	sub    $0x8,%esp
+    11a2:	68 f5 42 00 00       	push   $0x42f5
+    11a7:	6a 01                	push   $0x1
+    11a9:	e8 52 29 00 00       	call   3b00 <printf>
+          exit();
+    11ae:	e8 d0 27 00 00       	call   3983 <exit>
+      fd = open(fname, O_CREATE | O_RDWR);
+    11b3:	83 ec 08             	sub    $0x8,%esp
+    11b6:	68 02 02 00 00       	push   $0x202
+    11bb:	56                   	push   %esi
+    11bc:	e8 02 28 00 00       	call   39c3 <open>
+      if(fd < 0){
+    11c1:	83 c4 10             	add    $0x10,%esp
+      fd = open(fname, O_CREATE | O_RDWR);
+    11c4:	89 c6                	mov    %eax,%esi
+      if(fd < 0){
+    11c6:	85 c0                	test   %eax,%eax
+    11c8:	78 45                	js     120f <fourfiles+0x19f>
+      memset(buf, '0'+pi, 512);
+    11ca:	83 ec 04             	sub    $0x4,%esp
+    11cd:	83 c3 30             	add    $0x30,%ebx
+    11d0:	68 00 02 00 00       	push   $0x200
+    11d5:	53                   	push   %ebx
+    11d6:	bb 0c 00 00 00       	mov    $0xc,%ebx
+    11db:	68 e0 86 00 00       	push   $0x86e0
+    11e0:	e8 fb 25 00 00       	call   37e0 <memset>
+    11e5:	83 c4 10             	add    $0x10,%esp
+        if((n = write(fd, buf, 500)) != 500){
+    11e8:	83 ec 04             	sub    $0x4,%esp
+    11eb:	68 f4 01 00 00       	push   $0x1f4
+    11f0:	68 e0 86 00 00       	push   $0x86e0
+    11f5:	56                   	push   %esi
+    11f6:	e8 a8 27 00 00       	call   39a3 <write>
+    11fb:	83 c4 10             	add    $0x10,%esp
+    11fe:	3d f4 01 00 00       	cmp    $0x1f4,%eax
+    1203:	75 4a                	jne    124f <fourfiles+0x1df>
+      for(i = 0; i < 12; i++){
+    1205:	83 eb 01             	sub    $0x1,%ebx
+    1208:	75 de                	jne    11e8 <fourfiles+0x178>
+      exit();
+    120a:	e8 74 27 00 00       	call   3983 <exit>
+        printf(1, "create failed\n");
+    120f:	51                   	push   %ecx
+    1210:	51                   	push   %ecx
+    1211:	68 6f 45 00 00       	push   $0x456f
+    1216:	6a 01                	push   $0x1
+    1218:	e8 e3 28 00 00       	call   3b00 <printf>
+        exit();
+    121d:	e8 61 27 00 00       	call   3983 <exit>
+    1222:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      printf(1, "fork failed\n");
+    1228:	83 ec 08             	sub    $0x8,%esp
+    122b:	68 a9 4d 00 00       	push   $0x4da9
+    1230:	6a 01                	push   $0x1
+    1232:	e8 c9 28 00 00       	call   3b00 <printf>
+      exit();
+    1237:	e8 47 27 00 00       	call   3983 <exit>
+      printf(1, "wrong length %d\n", total);
+    123c:	50                   	push   %eax
+    123d:	53                   	push   %ebx
+    123e:	68 01 43 00 00       	push   $0x4301
+    1243:	6a 01                	push   $0x1
+    1245:	e8 b6 28 00 00       	call   3b00 <printf>
+      exit();
+    124a:	e8 34 27 00 00       	call   3983 <exit>
+          printf(1, "write failed %d\n", n);
+    124f:	52                   	push   %edx
+    1250:	50                   	push   %eax
+    1251:	68 e4 42 00 00       	push   $0x42e4
+    1256:	6a 01                	push   $0x1
+    1258:	e8 a3 28 00 00       	call   3b00 <printf>
+          exit();
+    125d:	e8 21 27 00 00       	call   3983 <exit>
+    1262:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1269:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00001270 <createdelete>:
+{
+    1270:	f3 0f 1e fb          	endbr32 
+    1274:	55                   	push   %ebp
+    1275:	89 e5                	mov    %esp,%ebp
+    1277:	57                   	push   %edi
+    1278:	56                   	push   %esi
+    1279:	53                   	push   %ebx
+  for(pi = 0; pi < 4; pi++){
+    127a:	31 db                	xor    %ebx,%ebx
+{
+    127c:	83 ec 44             	sub    $0x44,%esp
+  printf(1, "createdelete test\n");
+    127f:	68 20 43 00 00       	push   $0x4320
+    1284:	6a 01                	push   $0x1
+    1286:	e8 75 28 00 00       	call   3b00 <printf>
+    128b:	83 c4 10             	add    $0x10,%esp
+    pid = fork();
+    128e:	e8 e8 26 00 00       	call   397b <fork>
+    if(pid < 0){
+    1293:	85 c0                	test   %eax,%eax
+    1295:	0f 88 ce 01 00 00    	js     1469 <createdelete+0x1f9>
+    if(pid == 0){
+    129b:	0f 84 17 01 00 00    	je     13b8 <createdelete+0x148>
+  for(pi = 0; pi < 4; pi++){
+    12a1:	83 c3 01             	add    $0x1,%ebx
+    12a4:	83 fb 04             	cmp    $0x4,%ebx
+    12a7:	75 e5                	jne    128e <createdelete+0x1e>
+    wait();
+    12a9:	e8 dd 26 00 00       	call   398b <wait>
+    12ae:	8d 7d c8             	lea    -0x38(%ebp),%edi
+  name[0] = name[1] = name[2] = 0;
+    12b1:	be ff ff ff ff       	mov    $0xffffffff,%esi
+    wait();
+    12b6:	e8 d0 26 00 00       	call   398b <wait>
+    12bb:	e8 cb 26 00 00       	call   398b <wait>
+    12c0:	e8 c6 26 00 00       	call   398b <wait>
+  name[0] = name[1] = name[2] = 0;
+    12c5:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+  for(i = 0; i < N; i++){
+    12c9:	89 7d c0             	mov    %edi,-0x40(%ebp)
+    12cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    for(pi = 0; pi < 4; pi++){
+    12d0:	8d 46 31             	lea    0x31(%esi),%eax
+    12d3:	89 f7                	mov    %esi,%edi
+    12d5:	83 c6 01             	add    $0x1,%esi
+    12d8:	83 fe 09             	cmp    $0x9,%esi
+    12db:	88 45 c7             	mov    %al,-0x39(%ebp)
+    12de:	0f 9f c3             	setg   %bl
+    12e1:	85 f6                	test   %esi,%esi
+    12e3:	0f 94 c0             	sete   %al
+    12e6:	09 c3                	or     %eax,%ebx
+    12e8:	88 5d c6             	mov    %bl,-0x3a(%ebp)
+      name[2] = '\0';
+    12eb:	bb 70 00 00 00       	mov    $0x70,%ebx
+      fd = open(name, 0);
+    12f0:	83 ec 08             	sub    $0x8,%esp
+      name[1] = '0' + i;
+    12f3:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+      name[0] = 'p' + pi;
+    12f7:	88 5d c8             	mov    %bl,-0x38(%ebp)
+      fd = open(name, 0);
+    12fa:	6a 00                	push   $0x0
+    12fc:	ff 75 c0             	pushl  -0x40(%ebp)
+      name[1] = '0' + i;
+    12ff:	88 45 c9             	mov    %al,-0x37(%ebp)
+      fd = open(name, 0);
+    1302:	e8 bc 26 00 00       	call   39c3 <open>
+      if((i == 0 || i >= N/2) && fd < 0){
+    1307:	83 c4 10             	add    $0x10,%esp
+    130a:	80 7d c6 00          	cmpb   $0x0,-0x3a(%ebp)
+    130e:	0f 84 8c 00 00 00    	je     13a0 <createdelete+0x130>
+    1314:	85 c0                	test   %eax,%eax
+    1316:	0f 88 21 01 00 00    	js     143d <createdelete+0x1cd>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    131c:	83 ff 08             	cmp    $0x8,%edi
+    131f:	0f 86 60 01 00 00    	jbe    1485 <createdelete+0x215>
+        close(fd);
+    1325:	83 ec 0c             	sub    $0xc,%esp
+    1328:	50                   	push   %eax
+    1329:	e8 7d 26 00 00       	call   39ab <close>
+    132e:	83 c4 10             	add    $0x10,%esp
+    for(pi = 0; pi < 4; pi++){
+    1331:	83 c3 01             	add    $0x1,%ebx
+    1334:	80 fb 74             	cmp    $0x74,%bl
+    1337:	75 b7                	jne    12f0 <createdelete+0x80>
+  for(i = 0; i < N; i++){
+    1339:	83 fe 13             	cmp    $0x13,%esi
+    133c:	75 92                	jne    12d0 <createdelete+0x60>
+    133e:	8b 7d c0             	mov    -0x40(%ebp),%edi
+    1341:	be 70 00 00 00       	mov    $0x70,%esi
+    1346:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    134d:	8d 76 00             	lea    0x0(%esi),%esi
+    for(pi = 0; pi < 4; pi++){
+    1350:	8d 46 c0             	lea    -0x40(%esi),%eax
+  name[0] = name[1] = name[2] = 0;
+    1353:	bb 04 00 00 00       	mov    $0x4,%ebx
+    1358:	88 45 c7             	mov    %al,-0x39(%ebp)
+      unlink(name);
+    135b:	83 ec 0c             	sub    $0xc,%esp
+      name[0] = 'p' + i;
+    135e:	89 f0                	mov    %esi,%eax
+      unlink(name);
+    1360:	57                   	push   %edi
+      name[0] = 'p' + i;
+    1361:	88 45 c8             	mov    %al,-0x38(%ebp)
+      name[1] = '0' + i;
+    1364:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+    1368:	88 45 c9             	mov    %al,-0x37(%ebp)
+      unlink(name);
+    136b:	e8 63 26 00 00       	call   39d3 <unlink>
+    for(pi = 0; pi < 4; pi++){
+    1370:	83 c4 10             	add    $0x10,%esp
+    1373:	83 eb 01             	sub    $0x1,%ebx
+    1376:	75 e3                	jne    135b <createdelete+0xeb>
+  for(i = 0; i < N; i++){
+    1378:	83 c6 01             	add    $0x1,%esi
+    137b:	89 f0                	mov    %esi,%eax
+    137d:	3c 84                	cmp    $0x84,%al
+    137f:	75 cf                	jne    1350 <createdelete+0xe0>
+  printf(1, "createdelete ok\n");
+    1381:	83 ec 08             	sub    $0x8,%esp
+    1384:	68 33 43 00 00       	push   $0x4333
+    1389:	6a 01                	push   $0x1
+    138b:	e8 70 27 00 00       	call   3b00 <printf>
+}
+    1390:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1393:	5b                   	pop    %ebx
+    1394:	5e                   	pop    %esi
+    1395:	5f                   	pop    %edi
+    1396:	5d                   	pop    %ebp
+    1397:	c3                   	ret    
+    1398:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    139f:	90                   	nop
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    13a0:	83 ff 08             	cmp    $0x8,%edi
+    13a3:	0f 86 d4 00 00 00    	jbe    147d <createdelete+0x20d>
+      if(fd >= 0)
+    13a9:	85 c0                	test   %eax,%eax
+    13ab:	78 84                	js     1331 <createdelete+0xc1>
+    13ad:	e9 73 ff ff ff       	jmp    1325 <createdelete+0xb5>
+    13b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      name[0] = 'p' + pi;
+    13b8:	83 c3 70             	add    $0x70,%ebx
+      name[2] = '\0';
+    13bb:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+    13bf:	8d 7d c8             	lea    -0x38(%ebp),%edi
+      name[0] = 'p' + pi;
+    13c2:	88 5d c8             	mov    %bl,-0x38(%ebp)
+      name[2] = '\0';
+    13c5:	31 db                	xor    %ebx,%ebx
+    13c7:	eb 0f                	jmp    13d8 <createdelete+0x168>
+    13c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      for(i = 0; i < N; i++){
+    13d0:	83 fb 13             	cmp    $0x13,%ebx
+    13d3:	74 63                	je     1438 <createdelete+0x1c8>
+    13d5:	83 c3 01             	add    $0x1,%ebx
+        fd = open(name, O_CREATE | O_RDWR);
+    13d8:	83 ec 08             	sub    $0x8,%esp
+        name[1] = '0' + i;
+    13db:	8d 43 30             	lea    0x30(%ebx),%eax
+        fd = open(name, O_CREATE | O_RDWR);
+    13de:	68 02 02 00 00       	push   $0x202
+    13e3:	57                   	push   %edi
+        name[1] = '0' + i;
+    13e4:	88 45 c9             	mov    %al,-0x37(%ebp)
+        fd = open(name, O_CREATE | O_RDWR);
+    13e7:	e8 d7 25 00 00       	call   39c3 <open>
+        if(fd < 0){
+    13ec:	83 c4 10             	add    $0x10,%esp
+    13ef:	85 c0                	test   %eax,%eax
+    13f1:	78 62                	js     1455 <createdelete+0x1e5>
+        close(fd);
+    13f3:	83 ec 0c             	sub    $0xc,%esp
+    13f6:	50                   	push   %eax
+    13f7:	e8 af 25 00 00       	call   39ab <close>
+        if(i > 0 && (i % 2 ) == 0){
+    13fc:	83 c4 10             	add    $0x10,%esp
+    13ff:	85 db                	test   %ebx,%ebx
+    1401:	74 d2                	je     13d5 <createdelete+0x165>
+    1403:	f6 c3 01             	test   $0x1,%bl
+    1406:	75 c8                	jne    13d0 <createdelete+0x160>
+          if(unlink(name) < 0){
+    1408:	83 ec 0c             	sub    $0xc,%esp
+          name[1] = '0' + (i / 2);
+    140b:	89 d8                	mov    %ebx,%eax
+          if(unlink(name) < 0){
+    140d:	57                   	push   %edi
+          name[1] = '0' + (i / 2);
+    140e:	d1 f8                	sar    %eax
+    1410:	83 c0 30             	add    $0x30,%eax
+    1413:	88 45 c9             	mov    %al,-0x37(%ebp)
+          if(unlink(name) < 0){
+    1416:	e8 b8 25 00 00       	call   39d3 <unlink>
+    141b:	83 c4 10             	add    $0x10,%esp
+    141e:	85 c0                	test   %eax,%eax
+    1420:	79 ae                	jns    13d0 <createdelete+0x160>
+            printf(1, "unlink failed\n");
+    1422:	52                   	push   %edx
+    1423:	52                   	push   %edx
+    1424:	68 21 3f 00 00       	push   $0x3f21
+    1429:	6a 01                	push   $0x1
+    142b:	e8 d0 26 00 00       	call   3b00 <printf>
+            exit();
+    1430:	e8 4e 25 00 00       	call   3983 <exit>
+    1435:	8d 76 00             	lea    0x0(%esi),%esi
+      exit();
+    1438:	e8 46 25 00 00       	call   3983 <exit>
+    143d:	8b 7d c0             	mov    -0x40(%ebp),%edi
+        printf(1, "oops createdelete %s didn't exist\n", name);
+    1440:	83 ec 04             	sub    $0x4,%esp
+    1443:	57                   	push   %edi
+    1444:	68 e0 4f 00 00       	push   $0x4fe0
+    1449:	6a 01                	push   $0x1
+    144b:	e8 b0 26 00 00       	call   3b00 <printf>
+        exit();
+    1450:	e8 2e 25 00 00       	call   3983 <exit>
+          printf(1, "create failed\n");
+    1455:	83 ec 08             	sub    $0x8,%esp
+    1458:	68 6f 45 00 00       	push   $0x456f
+    145d:	6a 01                	push   $0x1
+    145f:	e8 9c 26 00 00       	call   3b00 <printf>
+          exit();
+    1464:	e8 1a 25 00 00       	call   3983 <exit>
+      printf(1, "fork failed\n");
+    1469:	83 ec 08             	sub    $0x8,%esp
+    146c:	68 a9 4d 00 00       	push   $0x4da9
+    1471:	6a 01                	push   $0x1
+    1473:	e8 88 26 00 00       	call   3b00 <printf>
+      exit();
+    1478:	e8 06 25 00 00       	call   3983 <exit>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    147d:	85 c0                	test   %eax,%eax
+    147f:	0f 88 ac fe ff ff    	js     1331 <createdelete+0xc1>
+    1485:	8b 7d c0             	mov    -0x40(%ebp),%edi
+        printf(1, "oops createdelete %s did exist\n", name);
+    1488:	50                   	push   %eax
+    1489:	57                   	push   %edi
+    148a:	68 04 50 00 00       	push   $0x5004
+    148f:	6a 01                	push   $0x1
+    1491:	e8 6a 26 00 00       	call   3b00 <printf>
+        exit();
+    1496:	e8 e8 24 00 00       	call   3983 <exit>
+    149b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    149f:	90                   	nop
+
+000014a0 <unlinkread>:
+{
+    14a0:	f3 0f 1e fb          	endbr32 
+    14a4:	55                   	push   %ebp
+    14a5:	89 e5                	mov    %esp,%ebp
+    14a7:	56                   	push   %esi
+    14a8:	53                   	push   %ebx
+  printf(1, "unlinkread test\n");
+    14a9:	83 ec 08             	sub    $0x8,%esp
+    14ac:	68 44 43 00 00       	push   $0x4344
+    14b1:	6a 01                	push   $0x1
+    14b3:	e8 48 26 00 00       	call   3b00 <printf>
+  fd = open("unlinkread", O_CREATE | O_RDWR);
+    14b8:	5b                   	pop    %ebx
+    14b9:	5e                   	pop    %esi
+    14ba:	68 02 02 00 00       	push   $0x202
+    14bf:	68 55 43 00 00       	push   $0x4355
+    14c4:	e8 fa 24 00 00       	call   39c3 <open>
+  if(fd < 0){
+    14c9:	83 c4 10             	add    $0x10,%esp
+    14cc:	85 c0                	test   %eax,%eax
+    14ce:	0f 88 e6 00 00 00    	js     15ba <unlinkread+0x11a>
+  write(fd, "hello", 5);
+    14d4:	83 ec 04             	sub    $0x4,%esp
+    14d7:	89 c3                	mov    %eax,%ebx
+    14d9:	6a 05                	push   $0x5
+    14db:	68 7a 43 00 00       	push   $0x437a
+    14e0:	50                   	push   %eax
+    14e1:	e8 bd 24 00 00       	call   39a3 <write>
+  close(fd);
+    14e6:	89 1c 24             	mov    %ebx,(%esp)
+    14e9:	e8 bd 24 00 00       	call   39ab <close>
+  fd = open("unlinkread", O_RDWR);
+    14ee:	58                   	pop    %eax
+    14ef:	5a                   	pop    %edx
+    14f0:	6a 02                	push   $0x2
+    14f2:	68 55 43 00 00       	push   $0x4355
+    14f7:	e8 c7 24 00 00       	call   39c3 <open>
+  if(fd < 0){
+    14fc:	83 c4 10             	add    $0x10,%esp
+  fd = open("unlinkread", O_RDWR);
+    14ff:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1501:	85 c0                	test   %eax,%eax
+    1503:	0f 88 10 01 00 00    	js     1619 <unlinkread+0x179>
+  if(unlink("unlinkread") != 0){
+    1509:	83 ec 0c             	sub    $0xc,%esp
+    150c:	68 55 43 00 00       	push   $0x4355
+    1511:	e8 bd 24 00 00       	call   39d3 <unlink>
+    1516:	83 c4 10             	add    $0x10,%esp
+    1519:	85 c0                	test   %eax,%eax
+    151b:	0f 85 e5 00 00 00    	jne    1606 <unlinkread+0x166>
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    1521:	83 ec 08             	sub    $0x8,%esp
+    1524:	68 02 02 00 00       	push   $0x202
+    1529:	68 55 43 00 00       	push   $0x4355
+    152e:	e8 90 24 00 00       	call   39c3 <open>
+  write(fd1, "yyy", 3);
+    1533:	83 c4 0c             	add    $0xc,%esp
+    1536:	6a 03                	push   $0x3
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    1538:	89 c6                	mov    %eax,%esi
+  write(fd1, "yyy", 3);
+    153a:	68 b2 43 00 00       	push   $0x43b2
+    153f:	50                   	push   %eax
+    1540:	e8 5e 24 00 00       	call   39a3 <write>
+  close(fd1);
+    1545:	89 34 24             	mov    %esi,(%esp)
+    1548:	e8 5e 24 00 00       	call   39ab <close>
+  if(read(fd, buf, sizeof(buf)) != 5){
+    154d:	83 c4 0c             	add    $0xc,%esp
+    1550:	68 00 20 00 00       	push   $0x2000
+    1555:	68 e0 86 00 00       	push   $0x86e0
+    155a:	53                   	push   %ebx
+    155b:	e8 3b 24 00 00       	call   399b <read>
+    1560:	83 c4 10             	add    $0x10,%esp
+    1563:	83 f8 05             	cmp    $0x5,%eax
+    1566:	0f 85 87 00 00 00    	jne    15f3 <unlinkread+0x153>
+  if(buf[0] != 'h'){
+    156c:	80 3d e0 86 00 00 68 	cmpb   $0x68,0x86e0
+    1573:	75 6b                	jne    15e0 <unlinkread+0x140>
+  if(write(fd, buf, 10) != 10){
+    1575:	83 ec 04             	sub    $0x4,%esp
+    1578:	6a 0a                	push   $0xa
+    157a:	68 e0 86 00 00       	push   $0x86e0
+    157f:	53                   	push   %ebx
+    1580:	e8 1e 24 00 00       	call   39a3 <write>
+    1585:	83 c4 10             	add    $0x10,%esp
+    1588:	83 f8 0a             	cmp    $0xa,%eax
+    158b:	75 40                	jne    15cd <unlinkread+0x12d>
+  close(fd);
+    158d:	83 ec 0c             	sub    $0xc,%esp
+    1590:	53                   	push   %ebx
+    1591:	e8 15 24 00 00       	call   39ab <close>
+  unlink("unlinkread");
+    1596:	c7 04 24 55 43 00 00 	movl   $0x4355,(%esp)
+    159d:	e8 31 24 00 00       	call   39d3 <unlink>
+  printf(1, "unlinkread ok\n");
+    15a2:	58                   	pop    %eax
+    15a3:	5a                   	pop    %edx
+    15a4:	68 fd 43 00 00       	push   $0x43fd
+    15a9:	6a 01                	push   $0x1
+    15ab:	e8 50 25 00 00       	call   3b00 <printf>
+}
+    15b0:	83 c4 10             	add    $0x10,%esp
+    15b3:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    15b6:	5b                   	pop    %ebx
+    15b7:	5e                   	pop    %esi
+    15b8:	5d                   	pop    %ebp
+    15b9:	c3                   	ret    
+    printf(1, "create unlinkread failed\n");
+    15ba:	51                   	push   %ecx
+    15bb:	51                   	push   %ecx
+    15bc:	68 60 43 00 00       	push   $0x4360
+    15c1:	6a 01                	push   $0x1
+    15c3:	e8 38 25 00 00       	call   3b00 <printf>
+    exit();
+    15c8:	e8 b6 23 00 00       	call   3983 <exit>
+    printf(1, "unlinkread write failed\n");
+    15cd:	51                   	push   %ecx
+    15ce:	51                   	push   %ecx
+    15cf:	68 e4 43 00 00       	push   $0x43e4
+    15d4:	6a 01                	push   $0x1
+    15d6:	e8 25 25 00 00       	call   3b00 <printf>
+    exit();
+    15db:	e8 a3 23 00 00       	call   3983 <exit>
+    printf(1, "unlinkread wrong data\n");
+    15e0:	53                   	push   %ebx
+    15e1:	53                   	push   %ebx
+    15e2:	68 cd 43 00 00       	push   $0x43cd
+    15e7:	6a 01                	push   $0x1
+    15e9:	e8 12 25 00 00       	call   3b00 <printf>
+    exit();
+    15ee:	e8 90 23 00 00       	call   3983 <exit>
+    printf(1, "unlinkread read failed");
+    15f3:	56                   	push   %esi
+    15f4:	56                   	push   %esi
+    15f5:	68 b6 43 00 00       	push   $0x43b6
+    15fa:	6a 01                	push   $0x1
+    15fc:	e8 ff 24 00 00       	call   3b00 <printf>
+    exit();
+    1601:	e8 7d 23 00 00       	call   3983 <exit>
+    printf(1, "unlink unlinkread failed\n");
+    1606:	50                   	push   %eax
+    1607:	50                   	push   %eax
+    1608:	68 98 43 00 00       	push   $0x4398
+    160d:	6a 01                	push   $0x1
+    160f:	e8 ec 24 00 00       	call   3b00 <printf>
+    exit();
+    1614:	e8 6a 23 00 00       	call   3983 <exit>
+    printf(1, "open unlinkread failed\n");
+    1619:	50                   	push   %eax
+    161a:	50                   	push   %eax
+    161b:	68 80 43 00 00       	push   $0x4380
+    1620:	6a 01                	push   $0x1
+    1622:	e8 d9 24 00 00       	call   3b00 <printf>
+    exit();
+    1627:	e8 57 23 00 00       	call   3983 <exit>
+    162c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00001630 <linktest>:
+{
+    1630:	f3 0f 1e fb          	endbr32 
+    1634:	55                   	push   %ebp
+    1635:	89 e5                	mov    %esp,%ebp
+    1637:	53                   	push   %ebx
+    1638:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "linktest\n");
+    163b:	68 0c 44 00 00       	push   $0x440c
+    1640:	6a 01                	push   $0x1
+    1642:	e8 b9 24 00 00       	call   3b00 <printf>
+  unlink("lf1");
+    1647:	c7 04 24 16 44 00 00 	movl   $0x4416,(%esp)
+    164e:	e8 80 23 00 00       	call   39d3 <unlink>
+  unlink("lf2");
+    1653:	c7 04 24 1a 44 00 00 	movl   $0x441a,(%esp)
+    165a:	e8 74 23 00 00       	call   39d3 <unlink>
+  fd = open("lf1", O_CREATE|O_RDWR);
+    165f:	58                   	pop    %eax
+    1660:	5a                   	pop    %edx
+    1661:	68 02 02 00 00       	push   $0x202
+    1666:	68 16 44 00 00       	push   $0x4416
+    166b:	e8 53 23 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1670:	83 c4 10             	add    $0x10,%esp
+    1673:	85 c0                	test   %eax,%eax
+    1675:	0f 88 1e 01 00 00    	js     1799 <linktest+0x169>
+  if(write(fd, "hello", 5) != 5){
+    167b:	83 ec 04             	sub    $0x4,%esp
+    167e:	89 c3                	mov    %eax,%ebx
+    1680:	6a 05                	push   $0x5
+    1682:	68 7a 43 00 00       	push   $0x437a
+    1687:	50                   	push   %eax
+    1688:	e8 16 23 00 00       	call   39a3 <write>
+    168d:	83 c4 10             	add    $0x10,%esp
+    1690:	83 f8 05             	cmp    $0x5,%eax
+    1693:	0f 85 98 01 00 00    	jne    1831 <linktest+0x201>
+  close(fd);
+    1699:	83 ec 0c             	sub    $0xc,%esp
+    169c:	53                   	push   %ebx
+    169d:	e8 09 23 00 00       	call   39ab <close>
+  if(link("lf1", "lf2") < 0){
+    16a2:	5b                   	pop    %ebx
+    16a3:	58                   	pop    %eax
+    16a4:	68 1a 44 00 00       	push   $0x441a
+    16a9:	68 16 44 00 00       	push   $0x4416
+    16ae:	e8 30 23 00 00       	call   39e3 <link>
+    16b3:	83 c4 10             	add    $0x10,%esp
+    16b6:	85 c0                	test   %eax,%eax
+    16b8:	0f 88 60 01 00 00    	js     181e <linktest+0x1ee>
+  unlink("lf1");
+    16be:	83 ec 0c             	sub    $0xc,%esp
+    16c1:	68 16 44 00 00       	push   $0x4416
+    16c6:	e8 08 23 00 00       	call   39d3 <unlink>
+  if(open("lf1", 0) >= 0){
+    16cb:	58                   	pop    %eax
+    16cc:	5a                   	pop    %edx
+    16cd:	6a 00                	push   $0x0
+    16cf:	68 16 44 00 00       	push   $0x4416
+    16d4:	e8 ea 22 00 00       	call   39c3 <open>
+    16d9:	83 c4 10             	add    $0x10,%esp
+    16dc:	85 c0                	test   %eax,%eax
+    16de:	0f 89 27 01 00 00    	jns    180b <linktest+0x1db>
+  fd = open("lf2", 0);
+    16e4:	83 ec 08             	sub    $0x8,%esp
+    16e7:	6a 00                	push   $0x0
+    16e9:	68 1a 44 00 00       	push   $0x441a
+    16ee:	e8 d0 22 00 00       	call   39c3 <open>
+  if(fd < 0){
+    16f3:	83 c4 10             	add    $0x10,%esp
+  fd = open("lf2", 0);
+    16f6:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    16f8:	85 c0                	test   %eax,%eax
+    16fa:	0f 88 f8 00 00 00    	js     17f8 <linktest+0x1c8>
+  if(read(fd, buf, sizeof(buf)) != 5){
+    1700:	83 ec 04             	sub    $0x4,%esp
+    1703:	68 00 20 00 00       	push   $0x2000
+    1708:	68 e0 86 00 00       	push   $0x86e0
+    170d:	50                   	push   %eax
+    170e:	e8 88 22 00 00       	call   399b <read>
+    1713:	83 c4 10             	add    $0x10,%esp
+    1716:	83 f8 05             	cmp    $0x5,%eax
+    1719:	0f 85 c6 00 00 00    	jne    17e5 <linktest+0x1b5>
+  close(fd);
+    171f:	83 ec 0c             	sub    $0xc,%esp
+    1722:	53                   	push   %ebx
+    1723:	e8 83 22 00 00       	call   39ab <close>
+  if(link("lf2", "lf2") >= 0){
+    1728:	58                   	pop    %eax
+    1729:	5a                   	pop    %edx
+    172a:	68 1a 44 00 00       	push   $0x441a
+    172f:	68 1a 44 00 00       	push   $0x441a
+    1734:	e8 aa 22 00 00       	call   39e3 <link>
+    1739:	83 c4 10             	add    $0x10,%esp
+    173c:	85 c0                	test   %eax,%eax
+    173e:	0f 89 8e 00 00 00    	jns    17d2 <linktest+0x1a2>
+  unlink("lf2");
+    1744:	83 ec 0c             	sub    $0xc,%esp
+    1747:	68 1a 44 00 00       	push   $0x441a
+    174c:	e8 82 22 00 00       	call   39d3 <unlink>
+  if(link("lf2", "lf1") >= 0){
+    1751:	59                   	pop    %ecx
+    1752:	5b                   	pop    %ebx
+    1753:	68 16 44 00 00       	push   $0x4416
+    1758:	68 1a 44 00 00       	push   $0x441a
+    175d:	e8 81 22 00 00       	call   39e3 <link>
+    1762:	83 c4 10             	add    $0x10,%esp
+    1765:	85 c0                	test   %eax,%eax
+    1767:	79 56                	jns    17bf <linktest+0x18f>
+  if(link(".", "lf1") >= 0){
+    1769:	83 ec 08             	sub    $0x8,%esp
+    176c:	68 16 44 00 00       	push   $0x4416
+    1771:	68 de 46 00 00       	push   $0x46de
+    1776:	e8 68 22 00 00       	call   39e3 <link>
+    177b:	83 c4 10             	add    $0x10,%esp
+    177e:	85 c0                	test   %eax,%eax
+    1780:	79 2a                	jns    17ac <linktest+0x17c>
+  printf(1, "linktest ok\n");
+    1782:	83 ec 08             	sub    $0x8,%esp
+    1785:	68 b4 44 00 00       	push   $0x44b4
+    178a:	6a 01                	push   $0x1
+    178c:	e8 6f 23 00 00       	call   3b00 <printf>
+}
+    1791:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    1794:	83 c4 10             	add    $0x10,%esp
+    1797:	c9                   	leave  
+    1798:	c3                   	ret    
+    printf(1, "create lf1 failed\n");
+    1799:	50                   	push   %eax
+    179a:	50                   	push   %eax
+    179b:	68 1e 44 00 00       	push   $0x441e
+    17a0:	6a 01                	push   $0x1
+    17a2:	e8 59 23 00 00       	call   3b00 <printf>
+    exit();
+    17a7:	e8 d7 21 00 00       	call   3983 <exit>
+    printf(1, "link . lf1 succeeded! oops\n");
+    17ac:	50                   	push   %eax
+    17ad:	50                   	push   %eax
+    17ae:	68 98 44 00 00       	push   $0x4498
+    17b3:	6a 01                	push   $0x1
+    17b5:	e8 46 23 00 00       	call   3b00 <printf>
+    exit();
+    17ba:	e8 c4 21 00 00       	call   3983 <exit>
+    printf(1, "link non-existant succeeded! oops\n");
+    17bf:	52                   	push   %edx
+    17c0:	52                   	push   %edx
+    17c1:	68 4c 50 00 00       	push   $0x504c
+    17c6:	6a 01                	push   $0x1
+    17c8:	e8 33 23 00 00       	call   3b00 <printf>
+    exit();
+    17cd:	e8 b1 21 00 00       	call   3983 <exit>
+    printf(1, "link lf2 lf2 succeeded! oops\n");
+    17d2:	50                   	push   %eax
+    17d3:	50                   	push   %eax
+    17d4:	68 7a 44 00 00       	push   $0x447a
+    17d9:	6a 01                	push   $0x1
+    17db:	e8 20 23 00 00       	call   3b00 <printf>
+    exit();
+    17e0:	e8 9e 21 00 00       	call   3983 <exit>
+    printf(1, "read lf2 failed\n");
+    17e5:	51                   	push   %ecx
+    17e6:	51                   	push   %ecx
+    17e7:	68 69 44 00 00       	push   $0x4469
+    17ec:	6a 01                	push   $0x1
+    17ee:	e8 0d 23 00 00       	call   3b00 <printf>
+    exit();
+    17f3:	e8 8b 21 00 00       	call   3983 <exit>
+    printf(1, "open lf2 failed\n");
+    17f8:	53                   	push   %ebx
+    17f9:	53                   	push   %ebx
+    17fa:	68 58 44 00 00       	push   $0x4458
+    17ff:	6a 01                	push   $0x1
+    1801:	e8 fa 22 00 00       	call   3b00 <printf>
+    exit();
+    1806:	e8 78 21 00 00       	call   3983 <exit>
+    printf(1, "unlinked lf1 but it is still there!\n");
+    180b:	50                   	push   %eax
+    180c:	50                   	push   %eax
+    180d:	68 24 50 00 00       	push   $0x5024
+    1812:	6a 01                	push   $0x1
+    1814:	e8 e7 22 00 00       	call   3b00 <printf>
+    exit();
+    1819:	e8 65 21 00 00       	call   3983 <exit>
+    printf(1, "link lf1 lf2 failed\n");
+    181e:	51                   	push   %ecx
+    181f:	51                   	push   %ecx
+    1820:	68 43 44 00 00       	push   $0x4443
+    1825:	6a 01                	push   $0x1
+    1827:	e8 d4 22 00 00       	call   3b00 <printf>
+    exit();
+    182c:	e8 52 21 00 00       	call   3983 <exit>
+    printf(1, "write lf1 failed\n");
+    1831:	50                   	push   %eax
+    1832:	50                   	push   %eax
+    1833:	68 31 44 00 00       	push   $0x4431
+    1838:	6a 01                	push   $0x1
+    183a:	e8 c1 22 00 00       	call   3b00 <printf>
+    exit();
+    183f:	e8 3f 21 00 00       	call   3983 <exit>
+    1844:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    184b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    184f:	90                   	nop
+
+00001850 <concreate>:
+{
+    1850:	f3 0f 1e fb          	endbr32 
+    1854:	55                   	push   %ebp
+    1855:	89 e5                	mov    %esp,%ebp
+    1857:	57                   	push   %edi
+    1858:	56                   	push   %esi
+  for(i = 0; i < 40; i++){
+    1859:	31 f6                	xor    %esi,%esi
+{
+    185b:	53                   	push   %ebx
+    185c:	8d 5d ad             	lea    -0x53(%ebp),%ebx
+    185f:	83 ec 64             	sub    $0x64,%esp
+  printf(1, "concreate test\n");
+    1862:	68 c1 44 00 00       	push   $0x44c1
+    1867:	6a 01                	push   $0x1
+    1869:	e8 92 22 00 00       	call   3b00 <printf>
+  file[0] = 'C';
+    186e:	c6 45 ad 43          	movb   $0x43,-0x53(%ebp)
+  file[2] = '\0';
+    1872:	83 c4 10             	add    $0x10,%esp
+    1875:	c6 45 af 00          	movb   $0x0,-0x51(%ebp)
+  for(i = 0; i < 40; i++){
+    1879:	eb 48                	jmp    18c3 <concreate+0x73>
+    187b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    187f:	90                   	nop
+    1880:	69 c6 ab aa aa aa    	imul   $0xaaaaaaab,%esi,%eax
+    if(pid && (i % 3) == 1){
+    1886:	3d ab aa aa aa       	cmp    $0xaaaaaaab,%eax
+    188b:	0f 83 af 00 00 00    	jae    1940 <concreate+0xf0>
+      fd = open(file, O_CREATE | O_RDWR);
+    1891:	83 ec 08             	sub    $0x8,%esp
+    1894:	68 02 02 00 00       	push   $0x202
+    1899:	53                   	push   %ebx
+    189a:	e8 24 21 00 00       	call   39c3 <open>
+      if(fd < 0){
+    189f:	83 c4 10             	add    $0x10,%esp
+    18a2:	85 c0                	test   %eax,%eax
+    18a4:	78 5f                	js     1905 <concreate+0xb5>
+      close(fd);
+    18a6:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 0; i < 40; i++){
+    18a9:	83 c6 01             	add    $0x1,%esi
+      close(fd);
+    18ac:	50                   	push   %eax
+    18ad:	e8 f9 20 00 00       	call   39ab <close>
+    18b2:	83 c4 10             	add    $0x10,%esp
+      wait();
+    18b5:	e8 d1 20 00 00       	call   398b <wait>
+  for(i = 0; i < 40; i++){
+    18ba:	83 fe 28             	cmp    $0x28,%esi
+    18bd:	0f 84 9f 00 00 00    	je     1962 <concreate+0x112>
+    unlink(file);
+    18c3:	83 ec 0c             	sub    $0xc,%esp
+    file[1] = '0' + i;
+    18c6:	8d 46 30             	lea    0x30(%esi),%eax
+    unlink(file);
+    18c9:	53                   	push   %ebx
+    file[1] = '0' + i;
+    18ca:	88 45 ae             	mov    %al,-0x52(%ebp)
+    unlink(file);
+    18cd:	e8 01 21 00 00       	call   39d3 <unlink>
+    pid = fork();
+    18d2:	e8 a4 20 00 00       	call   397b <fork>
+    if(pid && (i % 3) == 1){
+    18d7:	83 c4 10             	add    $0x10,%esp
+    18da:	85 c0                	test   %eax,%eax
+    18dc:	75 a2                	jne    1880 <concreate+0x30>
+      link("C0", file);
+    18de:	69 f6 cd cc cc cc    	imul   $0xcccccccd,%esi,%esi
+    } else if(pid == 0 && (i % 5) == 1){
+    18e4:	81 fe cd cc cc cc    	cmp    $0xcccccccd,%esi
+    18ea:	73 34                	jae    1920 <concreate+0xd0>
+      fd = open(file, O_CREATE | O_RDWR);
+    18ec:	83 ec 08             	sub    $0x8,%esp
+    18ef:	68 02 02 00 00       	push   $0x202
+    18f4:	53                   	push   %ebx
+    18f5:	e8 c9 20 00 00       	call   39c3 <open>
+      if(fd < 0){
+    18fa:	83 c4 10             	add    $0x10,%esp
+    18fd:	85 c0                	test   %eax,%eax
+    18ff:	0f 89 39 02 00 00    	jns    1b3e <concreate+0x2ee>
+        printf(1, "concreate create %s failed\n", file);
+    1905:	83 ec 04             	sub    $0x4,%esp
+    1908:	53                   	push   %ebx
+    1909:	68 d4 44 00 00       	push   $0x44d4
+    190e:	6a 01                	push   $0x1
+    1910:	e8 eb 21 00 00       	call   3b00 <printf>
+        exit();
+    1915:	e8 69 20 00 00       	call   3983 <exit>
+    191a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      link("C0", file);
+    1920:	83 ec 08             	sub    $0x8,%esp
+    1923:	53                   	push   %ebx
+    1924:	68 d1 44 00 00       	push   $0x44d1
+    1929:	e8 b5 20 00 00       	call   39e3 <link>
+    192e:	83 c4 10             	add    $0x10,%esp
+      exit();
+    1931:	e8 4d 20 00 00       	call   3983 <exit>
+    1936:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    193d:	8d 76 00             	lea    0x0(%esi),%esi
+      link("C0", file);
+    1940:	83 ec 08             	sub    $0x8,%esp
+  for(i = 0; i < 40; i++){
+    1943:	83 c6 01             	add    $0x1,%esi
+      link("C0", file);
+    1946:	53                   	push   %ebx
+    1947:	68 d1 44 00 00       	push   $0x44d1
+    194c:	e8 92 20 00 00       	call   39e3 <link>
+    1951:	83 c4 10             	add    $0x10,%esp
+      wait();
+    1954:	e8 32 20 00 00       	call   398b <wait>
+  for(i = 0; i < 40; i++){
+    1959:	83 fe 28             	cmp    $0x28,%esi
+    195c:	0f 85 61 ff ff ff    	jne    18c3 <concreate+0x73>
+  memset(fa, 0, sizeof(fa));
+    1962:	83 ec 04             	sub    $0x4,%esp
+    1965:	8d 45 c0             	lea    -0x40(%ebp),%eax
+    1968:	6a 28                	push   $0x28
+    196a:	6a 00                	push   $0x0
+    196c:	50                   	push   %eax
+    196d:	e8 6e 1e 00 00       	call   37e0 <memset>
+  fd = open(".", 0);
+    1972:	5e                   	pop    %esi
+    1973:	5f                   	pop    %edi
+    1974:	6a 00                	push   $0x0
+    1976:	68 de 46 00 00       	push   $0x46de
+    197b:	8d 7d b0             	lea    -0x50(%ebp),%edi
+    197e:	e8 40 20 00 00       	call   39c3 <open>
+  n = 0;
+    1983:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
+  while(read(fd, &de, sizeof(de)) > 0){
+    198a:	83 c4 10             	add    $0x10,%esp
+  fd = open(".", 0);
+    198d:	89 c6                	mov    %eax,%esi
+  while(read(fd, &de, sizeof(de)) > 0){
+    198f:	90                   	nop
+    1990:	83 ec 04             	sub    $0x4,%esp
+    1993:	6a 10                	push   $0x10
+    1995:	57                   	push   %edi
+    1996:	56                   	push   %esi
+    1997:	e8 ff 1f 00 00       	call   399b <read>
+    199c:	83 c4 10             	add    $0x10,%esp
+    199f:	85 c0                	test   %eax,%eax
+    19a1:	7e 3d                	jle    19e0 <concreate+0x190>
+    if(de.inum == 0)
+    19a3:	66 83 7d b0 00       	cmpw   $0x0,-0x50(%ebp)
+    19a8:	74 e6                	je     1990 <concreate+0x140>
+    if(de.name[0] == 'C' && de.name[2] == '\0'){
+    19aa:	80 7d b2 43          	cmpb   $0x43,-0x4e(%ebp)
+    19ae:	75 e0                	jne    1990 <concreate+0x140>
+    19b0:	80 7d b4 00          	cmpb   $0x0,-0x4c(%ebp)
+    19b4:	75 da                	jne    1990 <concreate+0x140>
+      i = de.name[1] - '0';
+    19b6:	0f be 45 b3          	movsbl -0x4d(%ebp),%eax
+    19ba:	83 e8 30             	sub    $0x30,%eax
+      if(i < 0 || i >= sizeof(fa)){
+    19bd:	83 f8 27             	cmp    $0x27,%eax
+    19c0:	0f 87 60 01 00 00    	ja     1b26 <concreate+0x2d6>
+      if(fa[i]){
+    19c6:	80 7c 05 c0 00       	cmpb   $0x0,-0x40(%ebp,%eax,1)
+    19cb:	0f 85 3d 01 00 00    	jne    1b0e <concreate+0x2be>
+      n++;
+    19d1:	83 45 a4 01          	addl   $0x1,-0x5c(%ebp)
+      fa[i] = 1;
+    19d5:	c6 44 05 c0 01       	movb   $0x1,-0x40(%ebp,%eax,1)
+      n++;
+    19da:	eb b4                	jmp    1990 <concreate+0x140>
+    19dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  close(fd);
+    19e0:	83 ec 0c             	sub    $0xc,%esp
+    19e3:	56                   	push   %esi
+    19e4:	e8 c2 1f 00 00       	call   39ab <close>
+  if(n != 40){
+    19e9:	83 c4 10             	add    $0x10,%esp
+    19ec:	83 7d a4 28          	cmpl   $0x28,-0x5c(%ebp)
+    19f0:	0f 85 05 01 00 00    	jne    1afb <concreate+0x2ab>
+  for(i = 0; i < 40; i++){
+    19f6:	31 f6                	xor    %esi,%esi
+    19f8:	eb 4c                	jmp    1a46 <concreate+0x1f6>
+    19fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+       ((i % 3) == 1 && pid != 0)){
+    1a00:	85 ff                	test   %edi,%edi
+    1a02:	74 05                	je     1a09 <concreate+0x1b9>
+    1a04:	83 f8 01             	cmp    $0x1,%eax
+    1a07:	74 6c                	je     1a75 <concreate+0x225>
+      unlink(file);
+    1a09:	83 ec 0c             	sub    $0xc,%esp
+    1a0c:	53                   	push   %ebx
+    1a0d:	e8 c1 1f 00 00       	call   39d3 <unlink>
+      unlink(file);
+    1a12:	89 1c 24             	mov    %ebx,(%esp)
+    1a15:	e8 b9 1f 00 00       	call   39d3 <unlink>
+      unlink(file);
+    1a1a:	89 1c 24             	mov    %ebx,(%esp)
+    1a1d:	e8 b1 1f 00 00       	call   39d3 <unlink>
+      unlink(file);
+    1a22:	89 1c 24             	mov    %ebx,(%esp)
+    1a25:	e8 a9 1f 00 00       	call   39d3 <unlink>
+    1a2a:	83 c4 10             	add    $0x10,%esp
+    if(pid == 0)
+    1a2d:	85 ff                	test   %edi,%edi
+    1a2f:	0f 84 fc fe ff ff    	je     1931 <concreate+0xe1>
+      wait();
+    1a35:	e8 51 1f 00 00       	call   398b <wait>
+  for(i = 0; i < 40; i++){
+    1a3a:	83 c6 01             	add    $0x1,%esi
+    1a3d:	83 fe 28             	cmp    $0x28,%esi
+    1a40:	0f 84 8a 00 00 00    	je     1ad0 <concreate+0x280>
+    file[1] = '0' + i;
+    1a46:	8d 46 30             	lea    0x30(%esi),%eax
+    1a49:	88 45 ae             	mov    %al,-0x52(%ebp)
+    pid = fork();
+    1a4c:	e8 2a 1f 00 00       	call   397b <fork>
+    1a51:	89 c7                	mov    %eax,%edi
+    if(pid < 0){
+    1a53:	85 c0                	test   %eax,%eax
+    1a55:	0f 88 8c 00 00 00    	js     1ae7 <concreate+0x297>
+    if(((i % 3) == 0 && pid == 0) ||
+    1a5b:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
+    1a60:	f7 e6                	mul    %esi
+    1a62:	89 d0                	mov    %edx,%eax
+    1a64:	83 e2 fe             	and    $0xfffffffe,%edx
+    1a67:	d1 e8                	shr    %eax
+    1a69:	01 c2                	add    %eax,%edx
+    1a6b:	89 f0                	mov    %esi,%eax
+    1a6d:	29 d0                	sub    %edx,%eax
+    1a6f:	89 c1                	mov    %eax,%ecx
+    1a71:	09 f9                	or     %edi,%ecx
+    1a73:	75 8b                	jne    1a00 <concreate+0x1b0>
+      close(open(file, 0));
+    1a75:	83 ec 08             	sub    $0x8,%esp
+    1a78:	6a 00                	push   $0x0
+    1a7a:	53                   	push   %ebx
+    1a7b:	e8 43 1f 00 00       	call   39c3 <open>
+    1a80:	89 04 24             	mov    %eax,(%esp)
+    1a83:	e8 23 1f 00 00       	call   39ab <close>
+      close(open(file, 0));
+    1a88:	58                   	pop    %eax
+    1a89:	5a                   	pop    %edx
+    1a8a:	6a 00                	push   $0x0
+    1a8c:	53                   	push   %ebx
+    1a8d:	e8 31 1f 00 00       	call   39c3 <open>
+    1a92:	89 04 24             	mov    %eax,(%esp)
+    1a95:	e8 11 1f 00 00       	call   39ab <close>
+      close(open(file, 0));
+    1a9a:	59                   	pop    %ecx
+    1a9b:	58                   	pop    %eax
+    1a9c:	6a 00                	push   $0x0
+    1a9e:	53                   	push   %ebx
+    1a9f:	e8 1f 1f 00 00       	call   39c3 <open>
+    1aa4:	89 04 24             	mov    %eax,(%esp)
+    1aa7:	e8 ff 1e 00 00       	call   39ab <close>
+      close(open(file, 0));
+    1aac:	58                   	pop    %eax
+    1aad:	5a                   	pop    %edx
+    1aae:	6a 00                	push   $0x0
+    1ab0:	53                   	push   %ebx
+    1ab1:	e8 0d 1f 00 00       	call   39c3 <open>
+    1ab6:	89 04 24             	mov    %eax,(%esp)
+    1ab9:	e8 ed 1e 00 00       	call   39ab <close>
+    1abe:	83 c4 10             	add    $0x10,%esp
+    1ac1:	e9 67 ff ff ff       	jmp    1a2d <concreate+0x1dd>
+    1ac6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1acd:	8d 76 00             	lea    0x0(%esi),%esi
+  printf(1, "concreate ok\n");
+    1ad0:	83 ec 08             	sub    $0x8,%esp
+    1ad3:	68 26 45 00 00       	push   $0x4526
+    1ad8:	6a 01                	push   $0x1
+    1ada:	e8 21 20 00 00       	call   3b00 <printf>
+}
+    1adf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1ae2:	5b                   	pop    %ebx
+    1ae3:	5e                   	pop    %esi
+    1ae4:	5f                   	pop    %edi
+    1ae5:	5d                   	pop    %ebp
+    1ae6:	c3                   	ret    
+      printf(1, "fork failed\n");
+    1ae7:	83 ec 08             	sub    $0x8,%esp
+    1aea:	68 a9 4d 00 00       	push   $0x4da9
+    1aef:	6a 01                	push   $0x1
+    1af1:	e8 0a 20 00 00       	call   3b00 <printf>
+      exit();
+    1af6:	e8 88 1e 00 00       	call   3983 <exit>
+    printf(1, "concreate not enough files in directory listing\n");
+    1afb:	51                   	push   %ecx
+    1afc:	51                   	push   %ecx
+    1afd:	68 70 50 00 00       	push   $0x5070
+    1b02:	6a 01                	push   $0x1
+    1b04:	e8 f7 1f 00 00       	call   3b00 <printf>
+    exit();
+    1b09:	e8 75 1e 00 00       	call   3983 <exit>
+        printf(1, "concreate duplicate file %s\n", de.name);
+    1b0e:	83 ec 04             	sub    $0x4,%esp
+    1b11:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1b14:	50                   	push   %eax
+    1b15:	68 09 45 00 00       	push   $0x4509
+    1b1a:	6a 01                	push   $0x1
+    1b1c:	e8 df 1f 00 00       	call   3b00 <printf>
+        exit();
+    1b21:	e8 5d 1e 00 00       	call   3983 <exit>
+        printf(1, "concreate weird file %s\n", de.name);
+    1b26:	83 ec 04             	sub    $0x4,%esp
+    1b29:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1b2c:	50                   	push   %eax
+    1b2d:	68 f0 44 00 00       	push   $0x44f0
+    1b32:	6a 01                	push   $0x1
+    1b34:	e8 c7 1f 00 00       	call   3b00 <printf>
+        exit();
+    1b39:	e8 45 1e 00 00       	call   3983 <exit>
+      close(fd);
+    1b3e:	83 ec 0c             	sub    $0xc,%esp
+    1b41:	50                   	push   %eax
+    1b42:	e8 64 1e 00 00       	call   39ab <close>
+    1b47:	83 c4 10             	add    $0x10,%esp
+    1b4a:	e9 e2 fd ff ff       	jmp    1931 <concreate+0xe1>
+    1b4f:	90                   	nop
+
+00001b50 <linkunlink>:
+{
+    1b50:	f3 0f 1e fb          	endbr32 
+    1b54:	55                   	push   %ebp
+    1b55:	89 e5                	mov    %esp,%ebp
+    1b57:	57                   	push   %edi
+    1b58:	56                   	push   %esi
+    1b59:	53                   	push   %ebx
+    1b5a:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "linkunlink test\n");
+    1b5d:	68 34 45 00 00       	push   $0x4534
+    1b62:	6a 01                	push   $0x1
+    1b64:	e8 97 1f 00 00       	call   3b00 <printf>
+  unlink("x");
+    1b69:	c7 04 24 c1 47 00 00 	movl   $0x47c1,(%esp)
+    1b70:	e8 5e 1e 00 00       	call   39d3 <unlink>
+  pid = fork();
+    1b75:	e8 01 1e 00 00       	call   397b <fork>
+  if(pid < 0){
+    1b7a:	83 c4 10             	add    $0x10,%esp
+  pid = fork();
+    1b7d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(pid < 0){
+    1b80:	85 c0                	test   %eax,%eax
+    1b82:	0f 88 b2 00 00 00    	js     1c3a <linkunlink+0xea>
+  unsigned int x = (pid ? 1 : 97);
+    1b88:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
+    1b8c:	bb 64 00 00 00       	mov    $0x64,%ebx
+    if((x % 3) == 0){
+    1b91:	be ab aa aa aa       	mov    $0xaaaaaaab,%esi
+  unsigned int x = (pid ? 1 : 97);
+    1b96:	19 ff                	sbb    %edi,%edi
+    1b98:	83 e7 60             	and    $0x60,%edi
+    1b9b:	83 c7 01             	add    $0x1,%edi
+    1b9e:	eb 1a                	jmp    1bba <linkunlink+0x6a>
+    } else if((x % 3) == 1){
+    1ba0:	83 f8 01             	cmp    $0x1,%eax
+    1ba3:	74 7b                	je     1c20 <linkunlink+0xd0>
+      unlink("x");
+    1ba5:	83 ec 0c             	sub    $0xc,%esp
+    1ba8:	68 c1 47 00 00       	push   $0x47c1
+    1bad:	e8 21 1e 00 00       	call   39d3 <unlink>
+    1bb2:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 100; i++){
+    1bb5:	83 eb 01             	sub    $0x1,%ebx
+    1bb8:	74 41                	je     1bfb <linkunlink+0xab>
+    x = x * 1103515245 + 12345;
+    1bba:	69 cf 6d 4e c6 41    	imul   $0x41c64e6d,%edi,%ecx
+    1bc0:	8d b9 39 30 00 00    	lea    0x3039(%ecx),%edi
+    if((x % 3) == 0){
+    1bc6:	89 f8                	mov    %edi,%eax
+    1bc8:	f7 e6                	mul    %esi
+    1bca:	89 d0                	mov    %edx,%eax
+    1bcc:	83 e2 fe             	and    $0xfffffffe,%edx
+    1bcf:	d1 e8                	shr    %eax
+    1bd1:	01 c2                	add    %eax,%edx
+    1bd3:	89 f8                	mov    %edi,%eax
+    1bd5:	29 d0                	sub    %edx,%eax
+    1bd7:	75 c7                	jne    1ba0 <linkunlink+0x50>
+      close(open("x", O_RDWR | O_CREATE));
+    1bd9:	83 ec 08             	sub    $0x8,%esp
+    1bdc:	68 02 02 00 00       	push   $0x202
+    1be1:	68 c1 47 00 00       	push   $0x47c1
+    1be6:	e8 d8 1d 00 00       	call   39c3 <open>
+    1beb:	89 04 24             	mov    %eax,(%esp)
+    1bee:	e8 b8 1d 00 00       	call   39ab <close>
+    1bf3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 100; i++){
+    1bf6:	83 eb 01             	sub    $0x1,%ebx
+    1bf9:	75 bf                	jne    1bba <linkunlink+0x6a>
+  if(pid)
+    1bfb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    1bfe:	85 c0                	test   %eax,%eax
+    1c00:	74 4b                	je     1c4d <linkunlink+0xfd>
+    wait();
+    1c02:	e8 84 1d 00 00       	call   398b <wait>
+  printf(1, "linkunlink ok\n");
+    1c07:	83 ec 08             	sub    $0x8,%esp
+    1c0a:	68 49 45 00 00       	push   $0x4549
+    1c0f:	6a 01                	push   $0x1
+    1c11:	e8 ea 1e 00 00       	call   3b00 <printf>
+}
+    1c16:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1c19:	5b                   	pop    %ebx
+    1c1a:	5e                   	pop    %esi
+    1c1b:	5f                   	pop    %edi
+    1c1c:	5d                   	pop    %ebp
+    1c1d:	c3                   	ret    
+    1c1e:	66 90                	xchg   %ax,%ax
+      link("cat", "x");
+    1c20:	83 ec 08             	sub    $0x8,%esp
+    1c23:	68 c1 47 00 00       	push   $0x47c1
+    1c28:	68 45 45 00 00       	push   $0x4545
+    1c2d:	e8 b1 1d 00 00       	call   39e3 <link>
+    1c32:	83 c4 10             	add    $0x10,%esp
+    1c35:	e9 7b ff ff ff       	jmp    1bb5 <linkunlink+0x65>
+    printf(1, "fork failed\n");
+    1c3a:	52                   	push   %edx
+    1c3b:	52                   	push   %edx
+    1c3c:	68 a9 4d 00 00       	push   $0x4da9
+    1c41:	6a 01                	push   $0x1
+    1c43:	e8 b8 1e 00 00       	call   3b00 <printf>
+    exit();
+    1c48:	e8 36 1d 00 00       	call   3983 <exit>
+    exit();
+    1c4d:	e8 31 1d 00 00       	call   3983 <exit>
+    1c52:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1c59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00001c60 <bigdir>:
+{
+    1c60:	f3 0f 1e fb          	endbr32 
+    1c64:	55                   	push   %ebp
+    1c65:	89 e5                	mov    %esp,%ebp
+    1c67:	57                   	push   %edi
+    1c68:	56                   	push   %esi
+    1c69:	53                   	push   %ebx
+    1c6a:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "bigdir test\n");
+    1c6d:	68 58 45 00 00       	push   $0x4558
+    1c72:	6a 01                	push   $0x1
+    1c74:	e8 87 1e 00 00       	call   3b00 <printf>
+  unlink("bd");
+    1c79:	c7 04 24 65 45 00 00 	movl   $0x4565,(%esp)
+    1c80:	e8 4e 1d 00 00       	call   39d3 <unlink>
+  fd = open("bd", O_CREATE);
+    1c85:	5a                   	pop    %edx
+    1c86:	59                   	pop    %ecx
+    1c87:	68 00 02 00 00       	push   $0x200
+    1c8c:	68 65 45 00 00       	push   $0x4565
+    1c91:	e8 2d 1d 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1c96:	83 c4 10             	add    $0x10,%esp
+    1c99:	85 c0                	test   %eax,%eax
+    1c9b:	0f 88 ea 00 00 00    	js     1d8b <bigdir+0x12b>
+  close(fd);
+    1ca1:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 0; i < 500; i++){
+    1ca4:	31 f6                	xor    %esi,%esi
+    1ca6:	8d 7d de             	lea    -0x22(%ebp),%edi
+  close(fd);
+    1ca9:	50                   	push   %eax
+    1caa:	e8 fc 1c 00 00       	call   39ab <close>
+    1caf:	83 c4 10             	add    $0x10,%esp
+    1cb2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    name[1] = '0' + (i / 64);
+    1cb8:	89 f0                	mov    %esi,%eax
+    if(link("bd", name) != 0){
+    1cba:	83 ec 08             	sub    $0x8,%esp
+    name[0] = 'x';
+    1cbd:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
+    name[1] = '0' + (i / 64);
+    1cc1:	c1 f8 06             	sar    $0x6,%eax
+    if(link("bd", name) != 0){
+    1cc4:	57                   	push   %edi
+    name[1] = '0' + (i / 64);
+    1cc5:	83 c0 30             	add    $0x30,%eax
+    if(link("bd", name) != 0){
+    1cc8:	68 65 45 00 00       	push   $0x4565
+    name[1] = '0' + (i / 64);
+    1ccd:	88 45 df             	mov    %al,-0x21(%ebp)
+    name[2] = '0' + (i % 64);
+    1cd0:	89 f0                	mov    %esi,%eax
+    1cd2:	83 e0 3f             	and    $0x3f,%eax
+    name[3] = '\0';
+    1cd5:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+    name[2] = '0' + (i % 64);
+    1cd9:	83 c0 30             	add    $0x30,%eax
+    1cdc:	88 45 e0             	mov    %al,-0x20(%ebp)
+    if(link("bd", name) != 0){
+    1cdf:	e8 ff 1c 00 00       	call   39e3 <link>
+    1ce4:	83 c4 10             	add    $0x10,%esp
+    1ce7:	89 c3                	mov    %eax,%ebx
+    1ce9:	85 c0                	test   %eax,%eax
+    1ceb:	75 76                	jne    1d63 <bigdir+0x103>
+  for(i = 0; i < 500; i++){
+    1ced:	83 c6 01             	add    $0x1,%esi
+    1cf0:	81 fe f4 01 00 00    	cmp    $0x1f4,%esi
+    1cf6:	75 c0                	jne    1cb8 <bigdir+0x58>
+  unlink("bd");
+    1cf8:	83 ec 0c             	sub    $0xc,%esp
+    1cfb:	68 65 45 00 00       	push   $0x4565
+    1d00:	e8 ce 1c 00 00       	call   39d3 <unlink>
+    1d05:	83 c4 10             	add    $0x10,%esp
+    1d08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1d0f:	90                   	nop
+    name[1] = '0' + (i / 64);
+    1d10:	89 d8                	mov    %ebx,%eax
+    if(unlink(name) != 0){
+    1d12:	83 ec 0c             	sub    $0xc,%esp
+    name[0] = 'x';
+    1d15:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
+    name[1] = '0' + (i / 64);
+    1d19:	c1 f8 06             	sar    $0x6,%eax
+    if(unlink(name) != 0){
+    1d1c:	57                   	push   %edi
+    name[1] = '0' + (i / 64);
+    1d1d:	83 c0 30             	add    $0x30,%eax
+    name[3] = '\0';
+    1d20:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+    name[1] = '0' + (i / 64);
+    1d24:	88 45 df             	mov    %al,-0x21(%ebp)
+    name[2] = '0' + (i % 64);
+    1d27:	89 d8                	mov    %ebx,%eax
+    1d29:	83 e0 3f             	and    $0x3f,%eax
+    1d2c:	83 c0 30             	add    $0x30,%eax
+    1d2f:	88 45 e0             	mov    %al,-0x20(%ebp)
+    if(unlink(name) != 0){
+    1d32:	e8 9c 1c 00 00       	call   39d3 <unlink>
+    1d37:	83 c4 10             	add    $0x10,%esp
+    1d3a:	85 c0                	test   %eax,%eax
+    1d3c:	75 39                	jne    1d77 <bigdir+0x117>
+  for(i = 0; i < 500; i++){
+    1d3e:	83 c3 01             	add    $0x1,%ebx
+    1d41:	81 fb f4 01 00 00    	cmp    $0x1f4,%ebx
+    1d47:	75 c7                	jne    1d10 <bigdir+0xb0>
+  printf(1, "bigdir ok\n");
+    1d49:	83 ec 08             	sub    $0x8,%esp
+    1d4c:	68 a7 45 00 00       	push   $0x45a7
+    1d51:	6a 01                	push   $0x1
+    1d53:	e8 a8 1d 00 00       	call   3b00 <printf>
+    1d58:	83 c4 10             	add    $0x10,%esp
+}
+    1d5b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1d5e:	5b                   	pop    %ebx
+    1d5f:	5e                   	pop    %esi
+    1d60:	5f                   	pop    %edi
+    1d61:	5d                   	pop    %ebp
+    1d62:	c3                   	ret    
+      printf(1, "bigdir link failed\n");
+    1d63:	83 ec 08             	sub    $0x8,%esp
+    1d66:	68 7e 45 00 00       	push   $0x457e
+    1d6b:	6a 01                	push   $0x1
+    1d6d:	e8 8e 1d 00 00       	call   3b00 <printf>
+      exit();
+    1d72:	e8 0c 1c 00 00       	call   3983 <exit>
+      printf(1, "bigdir unlink failed");
+    1d77:	83 ec 08             	sub    $0x8,%esp
+    1d7a:	68 92 45 00 00       	push   $0x4592
+    1d7f:	6a 01                	push   $0x1
+    1d81:	e8 7a 1d 00 00       	call   3b00 <printf>
+      exit();
+    1d86:	e8 f8 1b 00 00       	call   3983 <exit>
+    printf(1, "bigdir create failed\n");
+    1d8b:	50                   	push   %eax
+    1d8c:	50                   	push   %eax
+    1d8d:	68 68 45 00 00       	push   $0x4568
+    1d92:	6a 01                	push   $0x1
+    1d94:	e8 67 1d 00 00       	call   3b00 <printf>
+    exit();
+    1d99:	e8 e5 1b 00 00       	call   3983 <exit>
+    1d9e:	66 90                	xchg   %ax,%ax
+
+00001da0 <subdir>:
+{
+    1da0:	f3 0f 1e fb          	endbr32 
+    1da4:	55                   	push   %ebp
+    1da5:	89 e5                	mov    %esp,%ebp
+    1da7:	53                   	push   %ebx
+    1da8:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "subdir test\n");
+    1dab:	68 b2 45 00 00       	push   $0x45b2
+    1db0:	6a 01                	push   $0x1
+    1db2:	e8 49 1d 00 00       	call   3b00 <printf>
+  unlink("ff");
+    1db7:	c7 04 24 3b 46 00 00 	movl   $0x463b,(%esp)
+    1dbe:	e8 10 1c 00 00       	call   39d3 <unlink>
+  if(mkdir("dd") != 0){
+    1dc3:	c7 04 24 d8 46 00 00 	movl   $0x46d8,(%esp)
+    1dca:	e8 1c 1c 00 00       	call   39eb <mkdir>
+    1dcf:	83 c4 10             	add    $0x10,%esp
+    1dd2:	85 c0                	test   %eax,%eax
+    1dd4:	0f 85 b3 05 00 00    	jne    238d <subdir+0x5ed>
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1dda:	83 ec 08             	sub    $0x8,%esp
+    1ddd:	68 02 02 00 00       	push   $0x202
+    1de2:	68 11 46 00 00       	push   $0x4611
+    1de7:	e8 d7 1b 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1dec:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1def:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1df1:	85 c0                	test   %eax,%eax
+    1df3:	0f 88 81 05 00 00    	js     237a <subdir+0x5da>
+  write(fd, "ff", 2);
+    1df9:	83 ec 04             	sub    $0x4,%esp
+    1dfc:	6a 02                	push   $0x2
+    1dfe:	68 3b 46 00 00       	push   $0x463b
+    1e03:	50                   	push   %eax
+    1e04:	e8 9a 1b 00 00       	call   39a3 <write>
+  close(fd);
+    1e09:	89 1c 24             	mov    %ebx,(%esp)
+    1e0c:	e8 9a 1b 00 00       	call   39ab <close>
+  if(unlink("dd") >= 0){
+    1e11:	c7 04 24 d8 46 00 00 	movl   $0x46d8,(%esp)
+    1e18:	e8 b6 1b 00 00       	call   39d3 <unlink>
+    1e1d:	83 c4 10             	add    $0x10,%esp
+    1e20:	85 c0                	test   %eax,%eax
+    1e22:	0f 89 3f 05 00 00    	jns    2367 <subdir+0x5c7>
+  if(mkdir("/dd/dd") != 0){
+    1e28:	83 ec 0c             	sub    $0xc,%esp
+    1e2b:	68 ec 45 00 00       	push   $0x45ec
+    1e30:	e8 b6 1b 00 00       	call   39eb <mkdir>
+    1e35:	83 c4 10             	add    $0x10,%esp
+    1e38:	85 c0                	test   %eax,%eax
+    1e3a:	0f 85 14 05 00 00    	jne    2354 <subdir+0x5b4>
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    1e40:	83 ec 08             	sub    $0x8,%esp
+    1e43:	68 02 02 00 00       	push   $0x202
+    1e48:	68 0e 46 00 00       	push   $0x460e
+    1e4d:	e8 71 1b 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1e52:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    1e55:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1e57:	85 c0                	test   %eax,%eax
+    1e59:	0f 88 24 04 00 00    	js     2283 <subdir+0x4e3>
+  write(fd, "FF", 2);
+    1e5f:	83 ec 04             	sub    $0x4,%esp
+    1e62:	6a 02                	push   $0x2
+    1e64:	68 2f 46 00 00       	push   $0x462f
+    1e69:	50                   	push   %eax
+    1e6a:	e8 34 1b 00 00       	call   39a3 <write>
+  close(fd);
+    1e6f:	89 1c 24             	mov    %ebx,(%esp)
+    1e72:	e8 34 1b 00 00       	call   39ab <close>
+  fd = open("dd/dd/../ff", 0);
+    1e77:	58                   	pop    %eax
+    1e78:	5a                   	pop    %edx
+    1e79:	6a 00                	push   $0x0
+    1e7b:	68 32 46 00 00       	push   $0x4632
+    1e80:	e8 3e 1b 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1e85:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/dd/../ff", 0);
+    1e88:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1e8a:	85 c0                	test   %eax,%eax
+    1e8c:	0f 88 de 03 00 00    	js     2270 <subdir+0x4d0>
+  cc = read(fd, buf, sizeof(buf));
+    1e92:	83 ec 04             	sub    $0x4,%esp
+    1e95:	68 00 20 00 00       	push   $0x2000
+    1e9a:	68 e0 86 00 00       	push   $0x86e0
+    1e9f:	50                   	push   %eax
+    1ea0:	e8 f6 1a 00 00       	call   399b <read>
+  if(cc != 2 || buf[0] != 'f'){
+    1ea5:	83 c4 10             	add    $0x10,%esp
+    1ea8:	83 f8 02             	cmp    $0x2,%eax
+    1eab:	0f 85 3a 03 00 00    	jne    21eb <subdir+0x44b>
+    1eb1:	80 3d e0 86 00 00 66 	cmpb   $0x66,0x86e0
+    1eb8:	0f 85 2d 03 00 00    	jne    21eb <subdir+0x44b>
+  close(fd);
+    1ebe:	83 ec 0c             	sub    $0xc,%esp
+    1ec1:	53                   	push   %ebx
+    1ec2:	e8 e4 1a 00 00       	call   39ab <close>
+  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
+    1ec7:	59                   	pop    %ecx
+    1ec8:	5b                   	pop    %ebx
+    1ec9:	68 72 46 00 00       	push   $0x4672
+    1ece:	68 0e 46 00 00       	push   $0x460e
+    1ed3:	e8 0b 1b 00 00       	call   39e3 <link>
+    1ed8:	83 c4 10             	add    $0x10,%esp
+    1edb:	85 c0                	test   %eax,%eax
+    1edd:	0f 85 c6 03 00 00    	jne    22a9 <subdir+0x509>
+  if(unlink("dd/dd/ff") != 0){
+    1ee3:	83 ec 0c             	sub    $0xc,%esp
+    1ee6:	68 0e 46 00 00       	push   $0x460e
+    1eeb:	e8 e3 1a 00 00       	call   39d3 <unlink>
+    1ef0:	83 c4 10             	add    $0x10,%esp
+    1ef3:	85 c0                	test   %eax,%eax
+    1ef5:	0f 85 16 03 00 00    	jne    2211 <subdir+0x471>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    1efb:	83 ec 08             	sub    $0x8,%esp
+    1efe:	6a 00                	push   $0x0
+    1f00:	68 0e 46 00 00       	push   $0x460e
+    1f05:	e8 b9 1a 00 00       	call   39c3 <open>
+    1f0a:	83 c4 10             	add    $0x10,%esp
+    1f0d:	85 c0                	test   %eax,%eax
+    1f0f:	0f 89 2c 04 00 00    	jns    2341 <subdir+0x5a1>
+  if(chdir("dd") != 0){
+    1f15:	83 ec 0c             	sub    $0xc,%esp
+    1f18:	68 d8 46 00 00       	push   $0x46d8
+    1f1d:	e8 d1 1a 00 00       	call   39f3 <chdir>
+    1f22:	83 c4 10             	add    $0x10,%esp
+    1f25:	85 c0                	test   %eax,%eax
+    1f27:	0f 85 01 04 00 00    	jne    232e <subdir+0x58e>
+  if(chdir("dd/../../dd") != 0){
+    1f2d:	83 ec 0c             	sub    $0xc,%esp
+    1f30:	68 a6 46 00 00       	push   $0x46a6
+    1f35:	e8 b9 1a 00 00       	call   39f3 <chdir>
+    1f3a:	83 c4 10             	add    $0x10,%esp
+    1f3d:	85 c0                	test   %eax,%eax
+    1f3f:	0f 85 b9 02 00 00    	jne    21fe <subdir+0x45e>
+  if(chdir("dd/../../../dd") != 0){
+    1f45:	83 ec 0c             	sub    $0xc,%esp
+    1f48:	68 cc 46 00 00       	push   $0x46cc
+    1f4d:	e8 a1 1a 00 00       	call   39f3 <chdir>
+    1f52:	83 c4 10             	add    $0x10,%esp
+    1f55:	85 c0                	test   %eax,%eax
+    1f57:	0f 85 a1 02 00 00    	jne    21fe <subdir+0x45e>
+  if(chdir("./..") != 0){
+    1f5d:	83 ec 0c             	sub    $0xc,%esp
+    1f60:	68 db 46 00 00       	push   $0x46db
+    1f65:	e8 89 1a 00 00       	call   39f3 <chdir>
+    1f6a:	83 c4 10             	add    $0x10,%esp
+    1f6d:	85 c0                	test   %eax,%eax
+    1f6f:	0f 85 21 03 00 00    	jne    2296 <subdir+0x4f6>
+  fd = open("dd/dd/ffff", 0);
+    1f75:	83 ec 08             	sub    $0x8,%esp
+    1f78:	6a 00                	push   $0x0
+    1f7a:	68 72 46 00 00       	push   $0x4672
+    1f7f:	e8 3f 1a 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1f84:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/dd/ffff", 0);
+    1f87:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1f89:	85 c0                	test   %eax,%eax
+    1f8b:	0f 88 e0 04 00 00    	js     2471 <subdir+0x6d1>
+  if(read(fd, buf, sizeof(buf)) != 2){
+    1f91:	83 ec 04             	sub    $0x4,%esp
+    1f94:	68 00 20 00 00       	push   $0x2000
+    1f99:	68 e0 86 00 00       	push   $0x86e0
+    1f9e:	50                   	push   %eax
+    1f9f:	e8 f7 19 00 00       	call   399b <read>
+    1fa4:	83 c4 10             	add    $0x10,%esp
+    1fa7:	83 f8 02             	cmp    $0x2,%eax
+    1faa:	0f 85 ae 04 00 00    	jne    245e <subdir+0x6be>
+  close(fd);
+    1fb0:	83 ec 0c             	sub    $0xc,%esp
+    1fb3:	53                   	push   %ebx
+    1fb4:	e8 f2 19 00 00       	call   39ab <close>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    1fb9:	58                   	pop    %eax
+    1fba:	5a                   	pop    %edx
+    1fbb:	6a 00                	push   $0x0
+    1fbd:	68 0e 46 00 00       	push   $0x460e
+    1fc2:	e8 fc 19 00 00       	call   39c3 <open>
+    1fc7:	83 c4 10             	add    $0x10,%esp
+    1fca:	85 c0                	test   %eax,%eax
+    1fcc:	0f 89 65 02 00 00    	jns    2237 <subdir+0x497>
+  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
+    1fd2:	83 ec 08             	sub    $0x8,%esp
+    1fd5:	68 02 02 00 00       	push   $0x202
+    1fda:	68 26 47 00 00       	push   $0x4726
+    1fdf:	e8 df 19 00 00       	call   39c3 <open>
+    1fe4:	83 c4 10             	add    $0x10,%esp
+    1fe7:	85 c0                	test   %eax,%eax
+    1fe9:	0f 89 35 02 00 00    	jns    2224 <subdir+0x484>
+  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
+    1fef:	83 ec 08             	sub    $0x8,%esp
+    1ff2:	68 02 02 00 00       	push   $0x202
+    1ff7:	68 4b 47 00 00       	push   $0x474b
+    1ffc:	e8 c2 19 00 00       	call   39c3 <open>
+    2001:	83 c4 10             	add    $0x10,%esp
+    2004:	85 c0                	test   %eax,%eax
+    2006:	0f 89 0f 03 00 00    	jns    231b <subdir+0x57b>
+  if(open("dd", O_CREATE) >= 0){
+    200c:	83 ec 08             	sub    $0x8,%esp
+    200f:	68 00 02 00 00       	push   $0x200
+    2014:	68 d8 46 00 00       	push   $0x46d8
+    2019:	e8 a5 19 00 00       	call   39c3 <open>
+    201e:	83 c4 10             	add    $0x10,%esp
+    2021:	85 c0                	test   %eax,%eax
+    2023:	0f 89 df 02 00 00    	jns    2308 <subdir+0x568>
+  if(open("dd", O_RDWR) >= 0){
+    2029:	83 ec 08             	sub    $0x8,%esp
+    202c:	6a 02                	push   $0x2
+    202e:	68 d8 46 00 00       	push   $0x46d8
+    2033:	e8 8b 19 00 00       	call   39c3 <open>
+    2038:	83 c4 10             	add    $0x10,%esp
+    203b:	85 c0                	test   %eax,%eax
+    203d:	0f 89 b2 02 00 00    	jns    22f5 <subdir+0x555>
+  if(open("dd", O_WRONLY) >= 0){
+    2043:	83 ec 08             	sub    $0x8,%esp
+    2046:	6a 01                	push   $0x1
+    2048:	68 d8 46 00 00       	push   $0x46d8
+    204d:	e8 71 19 00 00       	call   39c3 <open>
+    2052:	83 c4 10             	add    $0x10,%esp
+    2055:	85 c0                	test   %eax,%eax
+    2057:	0f 89 85 02 00 00    	jns    22e2 <subdir+0x542>
+  if(link("dd/ff/ff", "dd/dd/xx") == 0){
+    205d:	83 ec 08             	sub    $0x8,%esp
+    2060:	68 ba 47 00 00       	push   $0x47ba
+    2065:	68 26 47 00 00       	push   $0x4726
+    206a:	e8 74 19 00 00       	call   39e3 <link>
+    206f:	83 c4 10             	add    $0x10,%esp
+    2072:	85 c0                	test   %eax,%eax
+    2074:	0f 84 55 02 00 00    	je     22cf <subdir+0x52f>
+  if(link("dd/xx/ff", "dd/dd/xx") == 0){
+    207a:	83 ec 08             	sub    $0x8,%esp
+    207d:	68 ba 47 00 00       	push   $0x47ba
+    2082:	68 4b 47 00 00       	push   $0x474b
+    2087:	e8 57 19 00 00       	call   39e3 <link>
+    208c:	83 c4 10             	add    $0x10,%esp
+    208f:	85 c0                	test   %eax,%eax
+    2091:	0f 84 25 02 00 00    	je     22bc <subdir+0x51c>
+  if(link("dd/ff", "dd/dd/ffff") == 0){
+    2097:	83 ec 08             	sub    $0x8,%esp
+    209a:	68 72 46 00 00       	push   $0x4672
+    209f:	68 11 46 00 00       	push   $0x4611
+    20a4:	e8 3a 19 00 00       	call   39e3 <link>
+    20a9:	83 c4 10             	add    $0x10,%esp
+    20ac:	85 c0                	test   %eax,%eax
+    20ae:	0f 84 a9 01 00 00    	je     225d <subdir+0x4bd>
+  if(mkdir("dd/ff/ff") == 0){
+    20b4:	83 ec 0c             	sub    $0xc,%esp
+    20b7:	68 26 47 00 00       	push   $0x4726
+    20bc:	e8 2a 19 00 00       	call   39eb <mkdir>
+    20c1:	83 c4 10             	add    $0x10,%esp
+    20c4:	85 c0                	test   %eax,%eax
+    20c6:	0f 84 7e 01 00 00    	je     224a <subdir+0x4aa>
+  if(mkdir("dd/xx/ff") == 0){
+    20cc:	83 ec 0c             	sub    $0xc,%esp
+    20cf:	68 4b 47 00 00       	push   $0x474b
+    20d4:	e8 12 19 00 00       	call   39eb <mkdir>
+    20d9:	83 c4 10             	add    $0x10,%esp
+    20dc:	85 c0                	test   %eax,%eax
+    20de:	0f 84 67 03 00 00    	je     244b <subdir+0x6ab>
+  if(mkdir("dd/dd/ffff") == 0){
+    20e4:	83 ec 0c             	sub    $0xc,%esp
+    20e7:	68 72 46 00 00       	push   $0x4672
+    20ec:	e8 fa 18 00 00       	call   39eb <mkdir>
+    20f1:	83 c4 10             	add    $0x10,%esp
+    20f4:	85 c0                	test   %eax,%eax
+    20f6:	0f 84 3c 03 00 00    	je     2438 <subdir+0x698>
+  if(unlink("dd/xx/ff") == 0){
+    20fc:	83 ec 0c             	sub    $0xc,%esp
+    20ff:	68 4b 47 00 00       	push   $0x474b
+    2104:	e8 ca 18 00 00       	call   39d3 <unlink>
+    2109:	83 c4 10             	add    $0x10,%esp
+    210c:	85 c0                	test   %eax,%eax
+    210e:	0f 84 11 03 00 00    	je     2425 <subdir+0x685>
+  if(unlink("dd/ff/ff") == 0){
+    2114:	83 ec 0c             	sub    $0xc,%esp
+    2117:	68 26 47 00 00       	push   $0x4726
+    211c:	e8 b2 18 00 00       	call   39d3 <unlink>
+    2121:	83 c4 10             	add    $0x10,%esp
+    2124:	85 c0                	test   %eax,%eax
+    2126:	0f 84 e6 02 00 00    	je     2412 <subdir+0x672>
+  if(chdir("dd/ff") == 0){
+    212c:	83 ec 0c             	sub    $0xc,%esp
+    212f:	68 11 46 00 00       	push   $0x4611
+    2134:	e8 ba 18 00 00       	call   39f3 <chdir>
+    2139:	83 c4 10             	add    $0x10,%esp
+    213c:	85 c0                	test   %eax,%eax
+    213e:	0f 84 bb 02 00 00    	je     23ff <subdir+0x65f>
+  if(chdir("dd/xx") == 0){
+    2144:	83 ec 0c             	sub    $0xc,%esp
+    2147:	68 bd 47 00 00       	push   $0x47bd
+    214c:	e8 a2 18 00 00       	call   39f3 <chdir>
+    2151:	83 c4 10             	add    $0x10,%esp
+    2154:	85 c0                	test   %eax,%eax
+    2156:	0f 84 90 02 00 00    	je     23ec <subdir+0x64c>
+  if(unlink("dd/dd/ffff") != 0){
+    215c:	83 ec 0c             	sub    $0xc,%esp
+    215f:	68 72 46 00 00       	push   $0x4672
+    2164:	e8 6a 18 00 00       	call   39d3 <unlink>
+    2169:	83 c4 10             	add    $0x10,%esp
+    216c:	85 c0                	test   %eax,%eax
+    216e:	0f 85 9d 00 00 00    	jne    2211 <subdir+0x471>
+  if(unlink("dd/ff") != 0){
+    2174:	83 ec 0c             	sub    $0xc,%esp
+    2177:	68 11 46 00 00       	push   $0x4611
+    217c:	e8 52 18 00 00       	call   39d3 <unlink>
+    2181:	83 c4 10             	add    $0x10,%esp
+    2184:	85 c0                	test   %eax,%eax
+    2186:	0f 85 4d 02 00 00    	jne    23d9 <subdir+0x639>
+  if(unlink("dd") == 0){
+    218c:	83 ec 0c             	sub    $0xc,%esp
+    218f:	68 d8 46 00 00       	push   $0x46d8
+    2194:	e8 3a 18 00 00       	call   39d3 <unlink>
+    2199:	83 c4 10             	add    $0x10,%esp
+    219c:	85 c0                	test   %eax,%eax
+    219e:	0f 84 22 02 00 00    	je     23c6 <subdir+0x626>
+  if(unlink("dd/dd") < 0){
+    21a4:	83 ec 0c             	sub    $0xc,%esp
+    21a7:	68 ed 45 00 00       	push   $0x45ed
+    21ac:	e8 22 18 00 00       	call   39d3 <unlink>
+    21b1:	83 c4 10             	add    $0x10,%esp
+    21b4:	85 c0                	test   %eax,%eax
+    21b6:	0f 88 f7 01 00 00    	js     23b3 <subdir+0x613>
+  if(unlink("dd") < 0){
+    21bc:	83 ec 0c             	sub    $0xc,%esp
+    21bf:	68 d8 46 00 00       	push   $0x46d8
+    21c4:	e8 0a 18 00 00       	call   39d3 <unlink>
+    21c9:	83 c4 10             	add    $0x10,%esp
+    21cc:	85 c0                	test   %eax,%eax
+    21ce:	0f 88 cc 01 00 00    	js     23a0 <subdir+0x600>
+  printf(1, "subdir ok\n");
+    21d4:	83 ec 08             	sub    $0x8,%esp
+    21d7:	68 ba 48 00 00       	push   $0x48ba
+    21dc:	6a 01                	push   $0x1
+    21de:	e8 1d 19 00 00       	call   3b00 <printf>
+}
+    21e3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    21e6:	83 c4 10             	add    $0x10,%esp
+    21e9:	c9                   	leave  
+    21ea:	c3                   	ret    
+    printf(1, "dd/dd/../ff wrong content\n");
+    21eb:	50                   	push   %eax
+    21ec:	50                   	push   %eax
+    21ed:	68 57 46 00 00       	push   $0x4657
+    21f2:	6a 01                	push   $0x1
+    21f4:	e8 07 19 00 00       	call   3b00 <printf>
+    exit();
+    21f9:	e8 85 17 00 00       	call   3983 <exit>
+    printf(1, "chdir dd/../../dd failed\n");
+    21fe:	50                   	push   %eax
+    21ff:	50                   	push   %eax
+    2200:	68 b2 46 00 00       	push   $0x46b2
+    2205:	6a 01                	push   $0x1
+    2207:	e8 f4 18 00 00       	call   3b00 <printf>
+    exit();
+    220c:	e8 72 17 00 00       	call   3983 <exit>
+    printf(1, "unlink dd/dd/ff failed\n");
+    2211:	50                   	push   %eax
+    2212:	50                   	push   %eax
+    2213:	68 7d 46 00 00       	push   $0x467d
+    2218:	6a 01                	push   $0x1
+    221a:	e8 e1 18 00 00       	call   3b00 <printf>
+    exit();
+    221f:	e8 5f 17 00 00       	call   3983 <exit>
+    printf(1, "create dd/ff/ff succeeded!\n");
+    2224:	51                   	push   %ecx
+    2225:	51                   	push   %ecx
+    2226:	68 2f 47 00 00       	push   $0x472f
+    222b:	6a 01                	push   $0x1
+    222d:	e8 ce 18 00 00       	call   3b00 <printf>
+    exit();
+    2232:	e8 4c 17 00 00       	call   3983 <exit>
+    printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
+    2237:	53                   	push   %ebx
+    2238:	53                   	push   %ebx
+    2239:	68 14 51 00 00       	push   $0x5114
+    223e:	6a 01                	push   $0x1
+    2240:	e8 bb 18 00 00       	call   3b00 <printf>
+    exit();
+    2245:	e8 39 17 00 00       	call   3983 <exit>
+    printf(1, "mkdir dd/ff/ff succeeded!\n");
+    224a:	51                   	push   %ecx
+    224b:	51                   	push   %ecx
+    224c:	68 c3 47 00 00       	push   $0x47c3
+    2251:	6a 01                	push   $0x1
+    2253:	e8 a8 18 00 00       	call   3b00 <printf>
+    exit();
+    2258:	e8 26 17 00 00       	call   3983 <exit>
+    printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
+    225d:	53                   	push   %ebx
+    225e:	53                   	push   %ebx
+    225f:	68 84 51 00 00       	push   $0x5184
+    2264:	6a 01                	push   $0x1
+    2266:	e8 95 18 00 00       	call   3b00 <printf>
+    exit();
+    226b:	e8 13 17 00 00       	call   3983 <exit>
+    printf(1, "open dd/dd/../ff failed\n");
+    2270:	50                   	push   %eax
+    2271:	50                   	push   %eax
+    2272:	68 3e 46 00 00       	push   $0x463e
+    2277:	6a 01                	push   $0x1
+    2279:	e8 82 18 00 00       	call   3b00 <printf>
+    exit();
+    227e:	e8 00 17 00 00       	call   3983 <exit>
+    printf(1, "create dd/dd/ff failed\n");
+    2283:	51                   	push   %ecx
+    2284:	51                   	push   %ecx
+    2285:	68 17 46 00 00       	push   $0x4617
+    228a:	6a 01                	push   $0x1
+    228c:	e8 6f 18 00 00       	call   3b00 <printf>
+    exit();
+    2291:	e8 ed 16 00 00       	call   3983 <exit>
+    printf(1, "chdir ./.. failed\n");
+    2296:	50                   	push   %eax
+    2297:	50                   	push   %eax
+    2298:	68 e0 46 00 00       	push   $0x46e0
+    229d:	6a 01                	push   $0x1
+    229f:	e8 5c 18 00 00       	call   3b00 <printf>
+    exit();
+    22a4:	e8 da 16 00 00       	call   3983 <exit>
+    printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
+    22a9:	52                   	push   %edx
+    22aa:	52                   	push   %edx
+    22ab:	68 cc 50 00 00       	push   $0x50cc
+    22b0:	6a 01                	push   $0x1
+    22b2:	e8 49 18 00 00       	call   3b00 <printf>
+    exit();
+    22b7:	e8 c7 16 00 00       	call   3983 <exit>
+    printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
+    22bc:	50                   	push   %eax
+    22bd:	50                   	push   %eax
+    22be:	68 60 51 00 00       	push   $0x5160
+    22c3:	6a 01                	push   $0x1
+    22c5:	e8 36 18 00 00       	call   3b00 <printf>
+    exit();
+    22ca:	e8 b4 16 00 00       	call   3983 <exit>
+    printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
+    22cf:	50                   	push   %eax
+    22d0:	50                   	push   %eax
+    22d1:	68 3c 51 00 00       	push   $0x513c
+    22d6:	6a 01                	push   $0x1
+    22d8:	e8 23 18 00 00       	call   3b00 <printf>
+    exit();
+    22dd:	e8 a1 16 00 00       	call   3983 <exit>
+    printf(1, "open dd wronly succeeded!\n");
+    22e2:	50                   	push   %eax
+    22e3:	50                   	push   %eax
+    22e4:	68 9f 47 00 00       	push   $0x479f
+    22e9:	6a 01                	push   $0x1
+    22eb:	e8 10 18 00 00       	call   3b00 <printf>
+    exit();
+    22f0:	e8 8e 16 00 00       	call   3983 <exit>
+    printf(1, "open dd rdwr succeeded!\n");
+    22f5:	50                   	push   %eax
+    22f6:	50                   	push   %eax
+    22f7:	68 86 47 00 00       	push   $0x4786
+    22fc:	6a 01                	push   $0x1
+    22fe:	e8 fd 17 00 00       	call   3b00 <printf>
+    exit();
+    2303:	e8 7b 16 00 00       	call   3983 <exit>
+    printf(1, "create dd succeeded!\n");
+    2308:	50                   	push   %eax
+    2309:	50                   	push   %eax
+    230a:	68 70 47 00 00       	push   $0x4770
+    230f:	6a 01                	push   $0x1
+    2311:	e8 ea 17 00 00       	call   3b00 <printf>
+    exit();
+    2316:	e8 68 16 00 00       	call   3983 <exit>
+    printf(1, "create dd/xx/ff succeeded!\n");
+    231b:	52                   	push   %edx
+    231c:	52                   	push   %edx
+    231d:	68 54 47 00 00       	push   $0x4754
+    2322:	6a 01                	push   $0x1
+    2324:	e8 d7 17 00 00       	call   3b00 <printf>
+    exit();
+    2329:	e8 55 16 00 00       	call   3983 <exit>
+    printf(1, "chdir dd failed\n");
+    232e:	50                   	push   %eax
+    232f:	50                   	push   %eax
+    2330:	68 95 46 00 00       	push   $0x4695
+    2335:	6a 01                	push   $0x1
+    2337:	e8 c4 17 00 00       	call   3b00 <printf>
+    exit();
+    233c:	e8 42 16 00 00       	call   3983 <exit>
+    printf(1, "open (unlinked) dd/dd/ff succeeded\n");
+    2341:	50                   	push   %eax
+    2342:	50                   	push   %eax
+    2343:	68 f0 50 00 00       	push   $0x50f0
+    2348:	6a 01                	push   $0x1
+    234a:	e8 b1 17 00 00       	call   3b00 <printf>
+    exit();
+    234f:	e8 2f 16 00 00       	call   3983 <exit>
+    printf(1, "subdir mkdir dd/dd failed\n");
+    2354:	53                   	push   %ebx
+    2355:	53                   	push   %ebx
+    2356:	68 f3 45 00 00       	push   $0x45f3
+    235b:	6a 01                	push   $0x1
+    235d:	e8 9e 17 00 00       	call   3b00 <printf>
+    exit();
+    2362:	e8 1c 16 00 00       	call   3983 <exit>
+    printf(1, "unlink dd (non-empty dir) succeeded!\n");
+    2367:	50                   	push   %eax
+    2368:	50                   	push   %eax
+    2369:	68 a4 50 00 00       	push   $0x50a4
+    236e:	6a 01                	push   $0x1
+    2370:	e8 8b 17 00 00       	call   3b00 <printf>
+    exit();
+    2375:	e8 09 16 00 00       	call   3983 <exit>
+    printf(1, "create dd/ff failed\n");
+    237a:	50                   	push   %eax
+    237b:	50                   	push   %eax
+    237c:	68 d7 45 00 00       	push   $0x45d7
+    2381:	6a 01                	push   $0x1
+    2383:	e8 78 17 00 00       	call   3b00 <printf>
+    exit();
+    2388:	e8 f6 15 00 00       	call   3983 <exit>
+    printf(1, "subdir mkdir dd failed\n");
+    238d:	50                   	push   %eax
+    238e:	50                   	push   %eax
+    238f:	68 bf 45 00 00       	push   $0x45bf
+    2394:	6a 01                	push   $0x1
+    2396:	e8 65 17 00 00       	call   3b00 <printf>
+    exit();
+    239b:	e8 e3 15 00 00       	call   3983 <exit>
+    printf(1, "unlink dd failed\n");
+    23a0:	50                   	push   %eax
+    23a1:	50                   	push   %eax
+    23a2:	68 a8 48 00 00       	push   $0x48a8
+    23a7:	6a 01                	push   $0x1
+    23a9:	e8 52 17 00 00       	call   3b00 <printf>
+    exit();
+    23ae:	e8 d0 15 00 00       	call   3983 <exit>
+    printf(1, "unlink dd/dd failed\n");
+    23b3:	52                   	push   %edx
+    23b4:	52                   	push   %edx
+    23b5:	68 93 48 00 00       	push   $0x4893
+    23ba:	6a 01                	push   $0x1
+    23bc:	e8 3f 17 00 00       	call   3b00 <printf>
+    exit();
+    23c1:	e8 bd 15 00 00       	call   3983 <exit>
+    printf(1, "unlink non-empty dd succeeded!\n");
+    23c6:	51                   	push   %ecx
+    23c7:	51                   	push   %ecx
+    23c8:	68 a8 51 00 00       	push   $0x51a8
+    23cd:	6a 01                	push   $0x1
+    23cf:	e8 2c 17 00 00       	call   3b00 <printf>
+    exit();
+    23d4:	e8 aa 15 00 00       	call   3983 <exit>
+    printf(1, "unlink dd/ff failed\n");
+    23d9:	53                   	push   %ebx
+    23da:	53                   	push   %ebx
+    23db:	68 7e 48 00 00       	push   $0x487e
+    23e0:	6a 01                	push   $0x1
+    23e2:	e8 19 17 00 00       	call   3b00 <printf>
+    exit();
+    23e7:	e8 97 15 00 00       	call   3983 <exit>
+    printf(1, "chdir dd/xx succeeded!\n");
+    23ec:	50                   	push   %eax
+    23ed:	50                   	push   %eax
+    23ee:	68 66 48 00 00       	push   $0x4866
+    23f3:	6a 01                	push   $0x1
+    23f5:	e8 06 17 00 00       	call   3b00 <printf>
+    exit();
+    23fa:	e8 84 15 00 00       	call   3983 <exit>
+    printf(1, "chdir dd/ff succeeded!\n");
+    23ff:	50                   	push   %eax
+    2400:	50                   	push   %eax
+    2401:	68 4e 48 00 00       	push   $0x484e
+    2406:	6a 01                	push   $0x1
+    2408:	e8 f3 16 00 00       	call   3b00 <printf>
+    exit();
+    240d:	e8 71 15 00 00       	call   3983 <exit>
+    printf(1, "unlink dd/ff/ff succeeded!\n");
+    2412:	50                   	push   %eax
+    2413:	50                   	push   %eax
+    2414:	68 32 48 00 00       	push   $0x4832
+    2419:	6a 01                	push   $0x1
+    241b:	e8 e0 16 00 00       	call   3b00 <printf>
+    exit();
+    2420:	e8 5e 15 00 00       	call   3983 <exit>
+    printf(1, "unlink dd/xx/ff succeeded!\n");
+    2425:	50                   	push   %eax
+    2426:	50                   	push   %eax
+    2427:	68 16 48 00 00       	push   $0x4816
+    242c:	6a 01                	push   $0x1
+    242e:	e8 cd 16 00 00       	call   3b00 <printf>
+    exit();
+    2433:	e8 4b 15 00 00       	call   3983 <exit>
+    printf(1, "mkdir dd/dd/ffff succeeded!\n");
+    2438:	50                   	push   %eax
+    2439:	50                   	push   %eax
+    243a:	68 f9 47 00 00       	push   $0x47f9
+    243f:	6a 01                	push   $0x1
+    2441:	e8 ba 16 00 00       	call   3b00 <printf>
+    exit();
+    2446:	e8 38 15 00 00       	call   3983 <exit>
+    printf(1, "mkdir dd/xx/ff succeeded!\n");
+    244b:	52                   	push   %edx
+    244c:	52                   	push   %edx
+    244d:	68 de 47 00 00       	push   $0x47de
+    2452:	6a 01                	push   $0x1
+    2454:	e8 a7 16 00 00       	call   3b00 <printf>
+    exit();
+    2459:	e8 25 15 00 00       	call   3983 <exit>
+    printf(1, "read dd/dd/ffff wrong len\n");
+    245e:	51                   	push   %ecx
+    245f:	51                   	push   %ecx
+    2460:	68 0b 47 00 00       	push   $0x470b
+    2465:	6a 01                	push   $0x1
+    2467:	e8 94 16 00 00       	call   3b00 <printf>
+    exit();
+    246c:	e8 12 15 00 00       	call   3983 <exit>
+    printf(1, "open dd/dd/ffff failed\n");
+    2471:	53                   	push   %ebx
+    2472:	53                   	push   %ebx
+    2473:	68 f3 46 00 00       	push   $0x46f3
+    2478:	6a 01                	push   $0x1
+    247a:	e8 81 16 00 00       	call   3b00 <printf>
+    exit();
+    247f:	e8 ff 14 00 00       	call   3983 <exit>
+    2484:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    248b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    248f:	90                   	nop
+
+00002490 <bigwrite>:
+{
+    2490:	f3 0f 1e fb          	endbr32 
+    2494:	55                   	push   %ebp
+    2495:	89 e5                	mov    %esp,%ebp
+    2497:	56                   	push   %esi
+    2498:	53                   	push   %ebx
+  for(sz = 499; sz < 12*512; sz += 471){
+    2499:	bb f3 01 00 00       	mov    $0x1f3,%ebx
+  printf(1, "bigwrite test\n");
+    249e:	83 ec 08             	sub    $0x8,%esp
+    24a1:	68 c5 48 00 00       	push   $0x48c5
+    24a6:	6a 01                	push   $0x1
+    24a8:	e8 53 16 00 00       	call   3b00 <printf>
+  unlink("bigwrite");
+    24ad:	c7 04 24 d4 48 00 00 	movl   $0x48d4,(%esp)
+    24b4:	e8 1a 15 00 00       	call   39d3 <unlink>
+    24b9:	83 c4 10             	add    $0x10,%esp
+    24bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    24c0:	83 ec 08             	sub    $0x8,%esp
+    24c3:	68 02 02 00 00       	push   $0x202
+    24c8:	68 d4 48 00 00       	push   $0x48d4
+    24cd:	e8 f1 14 00 00       	call   39c3 <open>
+    if(fd < 0){
+    24d2:	83 c4 10             	add    $0x10,%esp
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    24d5:	89 c6                	mov    %eax,%esi
+    if(fd < 0){
+    24d7:	85 c0                	test   %eax,%eax
+    24d9:	78 7e                	js     2559 <bigwrite+0xc9>
+      int cc = write(fd, buf, sz);
+    24db:	83 ec 04             	sub    $0x4,%esp
+    24de:	53                   	push   %ebx
+    24df:	68 e0 86 00 00       	push   $0x86e0
+    24e4:	50                   	push   %eax
+    24e5:	e8 b9 14 00 00       	call   39a3 <write>
+      if(cc != sz){
+    24ea:	83 c4 10             	add    $0x10,%esp
+    24ed:	39 d8                	cmp    %ebx,%eax
+    24ef:	75 55                	jne    2546 <bigwrite+0xb6>
+      int cc = write(fd, buf, sz);
+    24f1:	83 ec 04             	sub    $0x4,%esp
+    24f4:	53                   	push   %ebx
+    24f5:	68 e0 86 00 00       	push   $0x86e0
+    24fa:	56                   	push   %esi
+    24fb:	e8 a3 14 00 00       	call   39a3 <write>
+      if(cc != sz){
+    2500:	83 c4 10             	add    $0x10,%esp
+    2503:	39 d8                	cmp    %ebx,%eax
+    2505:	75 3f                	jne    2546 <bigwrite+0xb6>
+    close(fd);
+    2507:	83 ec 0c             	sub    $0xc,%esp
+  for(sz = 499; sz < 12*512; sz += 471){
+    250a:	81 c3 d7 01 00 00    	add    $0x1d7,%ebx
+    close(fd);
+    2510:	56                   	push   %esi
+    2511:	e8 95 14 00 00       	call   39ab <close>
+    unlink("bigwrite");
+    2516:	c7 04 24 d4 48 00 00 	movl   $0x48d4,(%esp)
+    251d:	e8 b1 14 00 00       	call   39d3 <unlink>
+  for(sz = 499; sz < 12*512; sz += 471){
+    2522:	83 c4 10             	add    $0x10,%esp
+    2525:	81 fb 07 18 00 00    	cmp    $0x1807,%ebx
+    252b:	75 93                	jne    24c0 <bigwrite+0x30>
+  printf(1, "bigwrite ok\n");
+    252d:	83 ec 08             	sub    $0x8,%esp
+    2530:	68 07 49 00 00       	push   $0x4907
+    2535:	6a 01                	push   $0x1
+    2537:	e8 c4 15 00 00       	call   3b00 <printf>
+}
+    253c:	83 c4 10             	add    $0x10,%esp
+    253f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    2542:	5b                   	pop    %ebx
+    2543:	5e                   	pop    %esi
+    2544:	5d                   	pop    %ebp
+    2545:	c3                   	ret    
+        printf(1, "write(%d) ret %d\n", sz, cc);
+    2546:	50                   	push   %eax
+    2547:	53                   	push   %ebx
+    2548:	68 f5 48 00 00       	push   $0x48f5
+    254d:	6a 01                	push   $0x1
+    254f:	e8 ac 15 00 00       	call   3b00 <printf>
+        exit();
+    2554:	e8 2a 14 00 00       	call   3983 <exit>
+      printf(1, "cannot create bigwrite\n");
+    2559:	83 ec 08             	sub    $0x8,%esp
+    255c:	68 dd 48 00 00       	push   $0x48dd
+    2561:	6a 01                	push   $0x1
+    2563:	e8 98 15 00 00       	call   3b00 <printf>
+      exit();
+    2568:	e8 16 14 00 00       	call   3983 <exit>
+    256d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00002570 <bigfile>:
+{
+    2570:	f3 0f 1e fb          	endbr32 
+    2574:	55                   	push   %ebp
+    2575:	89 e5                	mov    %esp,%ebp
+    2577:	57                   	push   %edi
+    2578:	56                   	push   %esi
+    2579:	53                   	push   %ebx
+    257a:	83 ec 14             	sub    $0x14,%esp
+  printf(1, "bigfile test\n");
+    257d:	68 14 49 00 00       	push   $0x4914
+    2582:	6a 01                	push   $0x1
+    2584:	e8 77 15 00 00       	call   3b00 <printf>
+  unlink("bigfile");
+    2589:	c7 04 24 30 49 00 00 	movl   $0x4930,(%esp)
+    2590:	e8 3e 14 00 00       	call   39d3 <unlink>
+  fd = open("bigfile", O_CREATE | O_RDWR);
+    2595:	58                   	pop    %eax
+    2596:	5a                   	pop    %edx
+    2597:	68 02 02 00 00       	push   $0x202
+    259c:	68 30 49 00 00       	push   $0x4930
+    25a1:	e8 1d 14 00 00       	call   39c3 <open>
+  if(fd < 0){
+    25a6:	83 c4 10             	add    $0x10,%esp
+    25a9:	85 c0                	test   %eax,%eax
+    25ab:	0f 88 5a 01 00 00    	js     270b <bigfile+0x19b>
+    25b1:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 20; i++){
+    25b3:	31 db                	xor    %ebx,%ebx
+    25b5:	8d 76 00             	lea    0x0(%esi),%esi
+    memset(buf, i, 600);
+    25b8:	83 ec 04             	sub    $0x4,%esp
+    25bb:	68 58 02 00 00       	push   $0x258
+    25c0:	53                   	push   %ebx
+    25c1:	68 e0 86 00 00       	push   $0x86e0
+    25c6:	e8 15 12 00 00       	call   37e0 <memset>
+    if(write(fd, buf, 600) != 600){
+    25cb:	83 c4 0c             	add    $0xc,%esp
+    25ce:	68 58 02 00 00       	push   $0x258
+    25d3:	68 e0 86 00 00       	push   $0x86e0
+    25d8:	56                   	push   %esi
+    25d9:	e8 c5 13 00 00       	call   39a3 <write>
+    25de:	83 c4 10             	add    $0x10,%esp
+    25e1:	3d 58 02 00 00       	cmp    $0x258,%eax
+    25e6:	0f 85 f8 00 00 00    	jne    26e4 <bigfile+0x174>
+  for(i = 0; i < 20; i++){
+    25ec:	83 c3 01             	add    $0x1,%ebx
+    25ef:	83 fb 14             	cmp    $0x14,%ebx
+    25f2:	75 c4                	jne    25b8 <bigfile+0x48>
+  close(fd);
+    25f4:	83 ec 0c             	sub    $0xc,%esp
+    25f7:	56                   	push   %esi
+    25f8:	e8 ae 13 00 00       	call   39ab <close>
+  fd = open("bigfile", 0);
+    25fd:	5e                   	pop    %esi
+    25fe:	5f                   	pop    %edi
+    25ff:	6a 00                	push   $0x0
+    2601:	68 30 49 00 00       	push   $0x4930
+    2606:	e8 b8 13 00 00       	call   39c3 <open>
+  if(fd < 0){
+    260b:	83 c4 10             	add    $0x10,%esp
+  fd = open("bigfile", 0);
+    260e:	89 c6                	mov    %eax,%esi
+  if(fd < 0){
+    2610:	85 c0                	test   %eax,%eax
+    2612:	0f 88 e0 00 00 00    	js     26f8 <bigfile+0x188>
+  total = 0;
+    2618:	31 db                	xor    %ebx,%ebx
+  for(i = 0; ; i++){
+    261a:	31 ff                	xor    %edi,%edi
+    261c:	eb 30                	jmp    264e <bigfile+0xde>
+    261e:	66 90                	xchg   %ax,%ax
+    if(cc != 300){
+    2620:	3d 2c 01 00 00       	cmp    $0x12c,%eax
+    2625:	0f 85 91 00 00 00    	jne    26bc <bigfile+0x14c>
+    if(buf[0] != i/2 || buf[299] != i/2){
+    262b:	89 fa                	mov    %edi,%edx
+    262d:	0f be 05 e0 86 00 00 	movsbl 0x86e0,%eax
+    2634:	d1 fa                	sar    %edx
+    2636:	39 d0                	cmp    %edx,%eax
+    2638:	75 6e                	jne    26a8 <bigfile+0x138>
+    263a:	0f be 15 0b 88 00 00 	movsbl 0x880b,%edx
+    2641:	39 d0                	cmp    %edx,%eax
+    2643:	75 63                	jne    26a8 <bigfile+0x138>
+    total += cc;
+    2645:	81 c3 2c 01 00 00    	add    $0x12c,%ebx
+  for(i = 0; ; i++){
+    264b:	83 c7 01             	add    $0x1,%edi
+    cc = read(fd, buf, 300);
+    264e:	83 ec 04             	sub    $0x4,%esp
+    2651:	68 2c 01 00 00       	push   $0x12c
+    2656:	68 e0 86 00 00       	push   $0x86e0
+    265b:	56                   	push   %esi
+    265c:	e8 3a 13 00 00       	call   399b <read>
+    if(cc < 0){
+    2661:	83 c4 10             	add    $0x10,%esp
+    2664:	85 c0                	test   %eax,%eax
+    2666:	78 68                	js     26d0 <bigfile+0x160>
+    if(cc == 0)
+    2668:	75 b6                	jne    2620 <bigfile+0xb0>
+  close(fd);
+    266a:	83 ec 0c             	sub    $0xc,%esp
+    266d:	56                   	push   %esi
+    266e:	e8 38 13 00 00       	call   39ab <close>
+  if(total != 20*600){
+    2673:	83 c4 10             	add    $0x10,%esp
+    2676:	81 fb e0 2e 00 00    	cmp    $0x2ee0,%ebx
+    267c:	0f 85 9c 00 00 00    	jne    271e <bigfile+0x1ae>
+  unlink("bigfile");
+    2682:	83 ec 0c             	sub    $0xc,%esp
+    2685:	68 30 49 00 00       	push   $0x4930
+    268a:	e8 44 13 00 00       	call   39d3 <unlink>
+  printf(1, "bigfile test ok\n");
+    268f:	58                   	pop    %eax
+    2690:	5a                   	pop    %edx
+    2691:	68 bf 49 00 00       	push   $0x49bf
+    2696:	6a 01                	push   $0x1
+    2698:	e8 63 14 00 00       	call   3b00 <printf>
+}
+    269d:	83 c4 10             	add    $0x10,%esp
+    26a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    26a3:	5b                   	pop    %ebx
+    26a4:	5e                   	pop    %esi
+    26a5:	5f                   	pop    %edi
+    26a6:	5d                   	pop    %ebp
+    26a7:	c3                   	ret    
+      printf(1, "read bigfile wrong data\n");
+    26a8:	83 ec 08             	sub    $0x8,%esp
+    26ab:	68 8c 49 00 00       	push   $0x498c
+    26b0:	6a 01                	push   $0x1
+    26b2:	e8 49 14 00 00       	call   3b00 <printf>
+      exit();
+    26b7:	e8 c7 12 00 00       	call   3983 <exit>
+      printf(1, "short read bigfile\n");
+    26bc:	83 ec 08             	sub    $0x8,%esp
+    26bf:	68 78 49 00 00       	push   $0x4978
+    26c4:	6a 01                	push   $0x1
+    26c6:	e8 35 14 00 00       	call   3b00 <printf>
+      exit();
+    26cb:	e8 b3 12 00 00       	call   3983 <exit>
+      printf(1, "read bigfile failed\n");
+    26d0:	83 ec 08             	sub    $0x8,%esp
+    26d3:	68 63 49 00 00       	push   $0x4963
+    26d8:	6a 01                	push   $0x1
+    26da:	e8 21 14 00 00       	call   3b00 <printf>
+      exit();
+    26df:	e8 9f 12 00 00       	call   3983 <exit>
+      printf(1, "write bigfile failed\n");
+    26e4:	83 ec 08             	sub    $0x8,%esp
+    26e7:	68 38 49 00 00       	push   $0x4938
+    26ec:	6a 01                	push   $0x1
+    26ee:	e8 0d 14 00 00       	call   3b00 <printf>
+      exit();
+    26f3:	e8 8b 12 00 00       	call   3983 <exit>
+    printf(1, "cannot open bigfile\n");
+    26f8:	53                   	push   %ebx
+    26f9:	53                   	push   %ebx
+    26fa:	68 4e 49 00 00       	push   $0x494e
+    26ff:	6a 01                	push   $0x1
+    2701:	e8 fa 13 00 00       	call   3b00 <printf>
+    exit();
+    2706:	e8 78 12 00 00       	call   3983 <exit>
+    printf(1, "cannot create bigfile");
+    270b:	50                   	push   %eax
+    270c:	50                   	push   %eax
+    270d:	68 22 49 00 00       	push   $0x4922
+    2712:	6a 01                	push   $0x1
+    2714:	e8 e7 13 00 00       	call   3b00 <printf>
+    exit();
+    2719:	e8 65 12 00 00       	call   3983 <exit>
+    printf(1, "read bigfile wrong total\n");
+    271e:	51                   	push   %ecx
+    271f:	51                   	push   %ecx
+    2720:	68 a5 49 00 00       	push   $0x49a5
+    2725:	6a 01                	push   $0x1
+    2727:	e8 d4 13 00 00       	call   3b00 <printf>
+    exit();
+    272c:	e8 52 12 00 00       	call   3983 <exit>
+    2731:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    2738:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    273f:	90                   	nop
+
+00002740 <fourteen>:
+{
+    2740:	f3 0f 1e fb          	endbr32 
+    2744:	55                   	push   %ebp
+    2745:	89 e5                	mov    %esp,%ebp
+    2747:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "fourteen test\n");
+    274a:	68 d0 49 00 00       	push   $0x49d0
+    274f:	6a 01                	push   $0x1
+    2751:	e8 aa 13 00 00       	call   3b00 <printf>
+  if(mkdir("12345678901234") != 0){
+    2756:	c7 04 24 0b 4a 00 00 	movl   $0x4a0b,(%esp)
+    275d:	e8 89 12 00 00       	call   39eb <mkdir>
+    2762:	83 c4 10             	add    $0x10,%esp
+    2765:	85 c0                	test   %eax,%eax
+    2767:	0f 85 97 00 00 00    	jne    2804 <fourteen+0xc4>
+  if(mkdir("12345678901234/123456789012345") != 0){
+    276d:	83 ec 0c             	sub    $0xc,%esp
+    2770:	68 c8 51 00 00       	push   $0x51c8
+    2775:	e8 71 12 00 00       	call   39eb <mkdir>
+    277a:	83 c4 10             	add    $0x10,%esp
+    277d:	85 c0                	test   %eax,%eax
+    277f:	0f 85 de 00 00 00    	jne    2863 <fourteen+0x123>
+  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
+    2785:	83 ec 08             	sub    $0x8,%esp
+    2788:	68 00 02 00 00       	push   $0x200
+    278d:	68 18 52 00 00       	push   $0x5218
+    2792:	e8 2c 12 00 00       	call   39c3 <open>
+  if(fd < 0){
+    2797:	83 c4 10             	add    $0x10,%esp
+    279a:	85 c0                	test   %eax,%eax
+    279c:	0f 88 ae 00 00 00    	js     2850 <fourteen+0x110>
+  close(fd);
+    27a2:	83 ec 0c             	sub    $0xc,%esp
+    27a5:	50                   	push   %eax
+    27a6:	e8 00 12 00 00       	call   39ab <close>
+  fd = open("12345678901234/12345678901234/12345678901234", 0);
+    27ab:	58                   	pop    %eax
+    27ac:	5a                   	pop    %edx
+    27ad:	6a 00                	push   $0x0
+    27af:	68 88 52 00 00       	push   $0x5288
+    27b4:	e8 0a 12 00 00       	call   39c3 <open>
+  if(fd < 0){
+    27b9:	83 c4 10             	add    $0x10,%esp
+    27bc:	85 c0                	test   %eax,%eax
+    27be:	78 7d                	js     283d <fourteen+0xfd>
+  close(fd);
+    27c0:	83 ec 0c             	sub    $0xc,%esp
+    27c3:	50                   	push   %eax
+    27c4:	e8 e2 11 00 00       	call   39ab <close>
+  if(mkdir("12345678901234/12345678901234") == 0){
+    27c9:	c7 04 24 fc 49 00 00 	movl   $0x49fc,(%esp)
+    27d0:	e8 16 12 00 00       	call   39eb <mkdir>
+    27d5:	83 c4 10             	add    $0x10,%esp
+    27d8:	85 c0                	test   %eax,%eax
+    27da:	74 4e                	je     282a <fourteen+0xea>
+  if(mkdir("123456789012345/12345678901234") == 0){
+    27dc:	83 ec 0c             	sub    $0xc,%esp
+    27df:	68 24 53 00 00       	push   $0x5324
+    27e4:	e8 02 12 00 00       	call   39eb <mkdir>
+    27e9:	83 c4 10             	add    $0x10,%esp
+    27ec:	85 c0                	test   %eax,%eax
+    27ee:	74 27                	je     2817 <fourteen+0xd7>
+  printf(1, "fourteen ok\n");
+    27f0:	83 ec 08             	sub    $0x8,%esp
+    27f3:	68 1a 4a 00 00       	push   $0x4a1a
+    27f8:	6a 01                	push   $0x1
+    27fa:	e8 01 13 00 00       	call   3b00 <printf>
+}
+    27ff:	83 c4 10             	add    $0x10,%esp
+    2802:	c9                   	leave  
+    2803:	c3                   	ret    
+    printf(1, "mkdir 12345678901234 failed\n");
+    2804:	50                   	push   %eax
+    2805:	50                   	push   %eax
+    2806:	68 df 49 00 00       	push   $0x49df
+    280b:	6a 01                	push   $0x1
+    280d:	e8 ee 12 00 00       	call   3b00 <printf>
+    exit();
+    2812:	e8 6c 11 00 00       	call   3983 <exit>
+    printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
+    2817:	50                   	push   %eax
+    2818:	50                   	push   %eax
+    2819:	68 44 53 00 00       	push   $0x5344
+    281e:	6a 01                	push   $0x1
+    2820:	e8 db 12 00 00       	call   3b00 <printf>
+    exit();
+    2825:	e8 59 11 00 00       	call   3983 <exit>
+    printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
+    282a:	52                   	push   %edx
+    282b:	52                   	push   %edx
+    282c:	68 f4 52 00 00       	push   $0x52f4
+    2831:	6a 01                	push   $0x1
+    2833:	e8 c8 12 00 00       	call   3b00 <printf>
+    exit();
+    2838:	e8 46 11 00 00       	call   3983 <exit>
+    printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
+    283d:	51                   	push   %ecx
+    283e:	51                   	push   %ecx
+    283f:	68 b8 52 00 00       	push   $0x52b8
+    2844:	6a 01                	push   $0x1
+    2846:	e8 b5 12 00 00       	call   3b00 <printf>
+    exit();
+    284b:	e8 33 11 00 00       	call   3983 <exit>
+    printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
+    2850:	51                   	push   %ecx
+    2851:	51                   	push   %ecx
+    2852:	68 48 52 00 00       	push   $0x5248
+    2857:	6a 01                	push   $0x1
+    2859:	e8 a2 12 00 00       	call   3b00 <printf>
+    exit();
+    285e:	e8 20 11 00 00       	call   3983 <exit>
+    printf(1, "mkdir 12345678901234/123456789012345 failed\n");
+    2863:	50                   	push   %eax
+    2864:	50                   	push   %eax
+    2865:	68 e8 51 00 00       	push   $0x51e8
+    286a:	6a 01                	push   $0x1
+    286c:	e8 8f 12 00 00       	call   3b00 <printf>
+    exit();
+    2871:	e8 0d 11 00 00       	call   3983 <exit>
+    2876:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    287d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00002880 <rmdot>:
+{
+    2880:	f3 0f 1e fb          	endbr32 
+    2884:	55                   	push   %ebp
+    2885:	89 e5                	mov    %esp,%ebp
+    2887:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "rmdot test\n");
+    288a:	68 27 4a 00 00       	push   $0x4a27
+    288f:	6a 01                	push   $0x1
+    2891:	e8 6a 12 00 00       	call   3b00 <printf>
+  if(mkdir("dots") != 0){
+    2896:	c7 04 24 33 4a 00 00 	movl   $0x4a33,(%esp)
+    289d:	e8 49 11 00 00       	call   39eb <mkdir>
+    28a2:	83 c4 10             	add    $0x10,%esp
+    28a5:	85 c0                	test   %eax,%eax
+    28a7:	0f 85 b0 00 00 00    	jne    295d <rmdot+0xdd>
+  if(chdir("dots") != 0){
+    28ad:	83 ec 0c             	sub    $0xc,%esp
+    28b0:	68 33 4a 00 00       	push   $0x4a33
+    28b5:	e8 39 11 00 00       	call   39f3 <chdir>
+    28ba:	83 c4 10             	add    $0x10,%esp
+    28bd:	85 c0                	test   %eax,%eax
+    28bf:	0f 85 1d 01 00 00    	jne    29e2 <rmdot+0x162>
+  if(unlink(".") == 0){
+    28c5:	83 ec 0c             	sub    $0xc,%esp
+    28c8:	68 de 46 00 00       	push   $0x46de
+    28cd:	e8 01 11 00 00       	call   39d3 <unlink>
+    28d2:	83 c4 10             	add    $0x10,%esp
+    28d5:	85 c0                	test   %eax,%eax
+    28d7:	0f 84 f2 00 00 00    	je     29cf <rmdot+0x14f>
+  if(unlink("..") == 0){
+    28dd:	83 ec 0c             	sub    $0xc,%esp
+    28e0:	68 dd 46 00 00       	push   $0x46dd
+    28e5:	e8 e9 10 00 00       	call   39d3 <unlink>
+    28ea:	83 c4 10             	add    $0x10,%esp
+    28ed:	85 c0                	test   %eax,%eax
+    28ef:	0f 84 c7 00 00 00    	je     29bc <rmdot+0x13c>
+  if(chdir("/") != 0){
+    28f5:	83 ec 0c             	sub    $0xc,%esp
+    28f8:	68 b1 3e 00 00       	push   $0x3eb1
+    28fd:	e8 f1 10 00 00       	call   39f3 <chdir>
+    2902:	83 c4 10             	add    $0x10,%esp
+    2905:	85 c0                	test   %eax,%eax
+    2907:	0f 85 9c 00 00 00    	jne    29a9 <rmdot+0x129>
+  if(unlink("dots/.") == 0){
+    290d:	83 ec 0c             	sub    $0xc,%esp
+    2910:	68 7b 4a 00 00       	push   $0x4a7b
+    2915:	e8 b9 10 00 00       	call   39d3 <unlink>
+    291a:	83 c4 10             	add    $0x10,%esp
+    291d:	85 c0                	test   %eax,%eax
+    291f:	74 75                	je     2996 <rmdot+0x116>
+  if(unlink("dots/..") == 0){
+    2921:	83 ec 0c             	sub    $0xc,%esp
+    2924:	68 99 4a 00 00       	push   $0x4a99
+    2929:	e8 a5 10 00 00       	call   39d3 <unlink>
+    292e:	83 c4 10             	add    $0x10,%esp
+    2931:	85 c0                	test   %eax,%eax
+    2933:	74 4e                	je     2983 <rmdot+0x103>
+  if(unlink("dots") != 0){
+    2935:	83 ec 0c             	sub    $0xc,%esp
+    2938:	68 33 4a 00 00       	push   $0x4a33
+    293d:	e8 91 10 00 00       	call   39d3 <unlink>
+    2942:	83 c4 10             	add    $0x10,%esp
+    2945:	85 c0                	test   %eax,%eax
+    2947:	75 27                	jne    2970 <rmdot+0xf0>
+  printf(1, "rmdot ok\n");
+    2949:	83 ec 08             	sub    $0x8,%esp
+    294c:	68 ce 4a 00 00       	push   $0x4ace
+    2951:	6a 01                	push   $0x1
+    2953:	e8 a8 11 00 00       	call   3b00 <printf>
+}
+    2958:	83 c4 10             	add    $0x10,%esp
+    295b:	c9                   	leave  
+    295c:	c3                   	ret    
+    printf(1, "mkdir dots failed\n");
+    295d:	50                   	push   %eax
+    295e:	50                   	push   %eax
+    295f:	68 38 4a 00 00       	push   $0x4a38
+    2964:	6a 01                	push   $0x1
+    2966:	e8 95 11 00 00       	call   3b00 <printf>
+    exit();
+    296b:	e8 13 10 00 00       	call   3983 <exit>
+    printf(1, "unlink dots failed!\n");
+    2970:	50                   	push   %eax
+    2971:	50                   	push   %eax
+    2972:	68 b9 4a 00 00       	push   $0x4ab9
+    2977:	6a 01                	push   $0x1
+    2979:	e8 82 11 00 00       	call   3b00 <printf>
+    exit();
+    297e:	e8 00 10 00 00       	call   3983 <exit>
+    printf(1, "unlink dots/.. worked!\n");
+    2983:	52                   	push   %edx
+    2984:	52                   	push   %edx
+    2985:	68 a1 4a 00 00       	push   $0x4aa1
+    298a:	6a 01                	push   $0x1
+    298c:	e8 6f 11 00 00       	call   3b00 <printf>
+    exit();
+    2991:	e8 ed 0f 00 00       	call   3983 <exit>
+    printf(1, "unlink dots/. worked!\n");
+    2996:	51                   	push   %ecx
+    2997:	51                   	push   %ecx
+    2998:	68 82 4a 00 00       	push   $0x4a82
+    299d:	6a 01                	push   $0x1
+    299f:	e8 5c 11 00 00       	call   3b00 <printf>
+    exit();
+    29a4:	e8 da 0f 00 00       	call   3983 <exit>
+    printf(1, "chdir / failed\n");
+    29a9:	50                   	push   %eax
+    29aa:	50                   	push   %eax
+    29ab:	68 b3 3e 00 00       	push   $0x3eb3
+    29b0:	6a 01                	push   $0x1
+    29b2:	e8 49 11 00 00       	call   3b00 <printf>
+    exit();
+    29b7:	e8 c7 0f 00 00       	call   3983 <exit>
+    printf(1, "rm .. worked!\n");
+    29bc:	50                   	push   %eax
+    29bd:	50                   	push   %eax
+    29be:	68 6c 4a 00 00       	push   $0x4a6c
+    29c3:	6a 01                	push   $0x1
+    29c5:	e8 36 11 00 00       	call   3b00 <printf>
+    exit();
+    29ca:	e8 b4 0f 00 00       	call   3983 <exit>
+    printf(1, "rm . worked!\n");
+    29cf:	50                   	push   %eax
+    29d0:	50                   	push   %eax
+    29d1:	68 5e 4a 00 00       	push   $0x4a5e
+    29d6:	6a 01                	push   $0x1
+    29d8:	e8 23 11 00 00       	call   3b00 <printf>
+    exit();
+    29dd:	e8 a1 0f 00 00       	call   3983 <exit>
+    printf(1, "chdir dots failed\n");
+    29e2:	50                   	push   %eax
+    29e3:	50                   	push   %eax
+    29e4:	68 4b 4a 00 00       	push   $0x4a4b
+    29e9:	6a 01                	push   $0x1
+    29eb:	e8 10 11 00 00       	call   3b00 <printf>
+    exit();
+    29f0:	e8 8e 0f 00 00       	call   3983 <exit>
+    29f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    29fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00002a00 <dirfile>:
+{
+    2a00:	f3 0f 1e fb          	endbr32 
+    2a04:	55                   	push   %ebp
+    2a05:	89 e5                	mov    %esp,%ebp
+    2a07:	53                   	push   %ebx
+    2a08:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "dir vs file\n");
+    2a0b:	68 d8 4a 00 00       	push   $0x4ad8
+    2a10:	6a 01                	push   $0x1
+    2a12:	e8 e9 10 00 00       	call   3b00 <printf>
+  fd = open("dirfile", O_CREATE);
+    2a17:	5b                   	pop    %ebx
+    2a18:	58                   	pop    %eax
+    2a19:	68 00 02 00 00       	push   $0x200
+    2a1e:	68 e5 4a 00 00       	push   $0x4ae5
+    2a23:	e8 9b 0f 00 00       	call   39c3 <open>
+  if(fd < 0){
+    2a28:	83 c4 10             	add    $0x10,%esp
+    2a2b:	85 c0                	test   %eax,%eax
+    2a2d:	0f 88 43 01 00 00    	js     2b76 <dirfile+0x176>
+  close(fd);
+    2a33:	83 ec 0c             	sub    $0xc,%esp
+    2a36:	50                   	push   %eax
+    2a37:	e8 6f 0f 00 00       	call   39ab <close>
+  if(chdir("dirfile") == 0){
+    2a3c:	c7 04 24 e5 4a 00 00 	movl   $0x4ae5,(%esp)
+    2a43:	e8 ab 0f 00 00       	call   39f3 <chdir>
+    2a48:	83 c4 10             	add    $0x10,%esp
+    2a4b:	85 c0                	test   %eax,%eax
+    2a4d:	0f 84 10 01 00 00    	je     2b63 <dirfile+0x163>
+  fd = open("dirfile/xx", 0);
+    2a53:	83 ec 08             	sub    $0x8,%esp
+    2a56:	6a 00                	push   $0x0
+    2a58:	68 1e 4b 00 00       	push   $0x4b1e
+    2a5d:	e8 61 0f 00 00       	call   39c3 <open>
+  if(fd >= 0){
+    2a62:	83 c4 10             	add    $0x10,%esp
+    2a65:	85 c0                	test   %eax,%eax
+    2a67:	0f 89 e3 00 00 00    	jns    2b50 <dirfile+0x150>
+  fd = open("dirfile/xx", O_CREATE);
+    2a6d:	83 ec 08             	sub    $0x8,%esp
+    2a70:	68 00 02 00 00       	push   $0x200
+    2a75:	68 1e 4b 00 00       	push   $0x4b1e
+    2a7a:	e8 44 0f 00 00       	call   39c3 <open>
+  if(fd >= 0){
+    2a7f:	83 c4 10             	add    $0x10,%esp
+    2a82:	85 c0                	test   %eax,%eax
+    2a84:	0f 89 c6 00 00 00    	jns    2b50 <dirfile+0x150>
+  if(mkdir("dirfile/xx") == 0){
+    2a8a:	83 ec 0c             	sub    $0xc,%esp
+    2a8d:	68 1e 4b 00 00       	push   $0x4b1e
+    2a92:	e8 54 0f 00 00       	call   39eb <mkdir>
+    2a97:	83 c4 10             	add    $0x10,%esp
+    2a9a:	85 c0                	test   %eax,%eax
+    2a9c:	0f 84 46 01 00 00    	je     2be8 <dirfile+0x1e8>
+  if(unlink("dirfile/xx") == 0){
+    2aa2:	83 ec 0c             	sub    $0xc,%esp
+    2aa5:	68 1e 4b 00 00       	push   $0x4b1e
+    2aaa:	e8 24 0f 00 00       	call   39d3 <unlink>
+    2aaf:	83 c4 10             	add    $0x10,%esp
+    2ab2:	85 c0                	test   %eax,%eax
+    2ab4:	0f 84 1b 01 00 00    	je     2bd5 <dirfile+0x1d5>
+  if(link("README", "dirfile/xx") == 0){
+    2aba:	83 ec 08             	sub    $0x8,%esp
+    2abd:	68 1e 4b 00 00       	push   $0x4b1e
+    2ac2:	68 82 4b 00 00       	push   $0x4b82
+    2ac7:	e8 17 0f 00 00       	call   39e3 <link>
+    2acc:	83 c4 10             	add    $0x10,%esp
+    2acf:	85 c0                	test   %eax,%eax
+    2ad1:	0f 84 eb 00 00 00    	je     2bc2 <dirfile+0x1c2>
+  if(unlink("dirfile") != 0){
+    2ad7:	83 ec 0c             	sub    $0xc,%esp
+    2ada:	68 e5 4a 00 00       	push   $0x4ae5
+    2adf:	e8 ef 0e 00 00       	call   39d3 <unlink>
+    2ae4:	83 c4 10             	add    $0x10,%esp
+    2ae7:	85 c0                	test   %eax,%eax
+    2ae9:	0f 85 c0 00 00 00    	jne    2baf <dirfile+0x1af>
+  fd = open(".", O_RDWR);
+    2aef:	83 ec 08             	sub    $0x8,%esp
+    2af2:	6a 02                	push   $0x2
+    2af4:	68 de 46 00 00       	push   $0x46de
+    2af9:	e8 c5 0e 00 00       	call   39c3 <open>
+  if(fd >= 0){
+    2afe:	83 c4 10             	add    $0x10,%esp
+    2b01:	85 c0                	test   %eax,%eax
+    2b03:	0f 89 93 00 00 00    	jns    2b9c <dirfile+0x19c>
+  fd = open(".", 0);
+    2b09:	83 ec 08             	sub    $0x8,%esp
+    2b0c:	6a 00                	push   $0x0
+    2b0e:	68 de 46 00 00       	push   $0x46de
+    2b13:	e8 ab 0e 00 00       	call   39c3 <open>
+  if(write(fd, "x", 1) > 0){
+    2b18:	83 c4 0c             	add    $0xc,%esp
+    2b1b:	6a 01                	push   $0x1
+  fd = open(".", 0);
+    2b1d:	89 c3                	mov    %eax,%ebx
+  if(write(fd, "x", 1) > 0){
+    2b1f:	68 c1 47 00 00       	push   $0x47c1
+    2b24:	50                   	push   %eax
+    2b25:	e8 79 0e 00 00       	call   39a3 <write>
+    2b2a:	83 c4 10             	add    $0x10,%esp
+    2b2d:	85 c0                	test   %eax,%eax
+    2b2f:	7f 58                	jg     2b89 <dirfile+0x189>
+  close(fd);
+    2b31:	83 ec 0c             	sub    $0xc,%esp
+    2b34:	53                   	push   %ebx
+    2b35:	e8 71 0e 00 00       	call   39ab <close>
+  printf(1, "dir vs file OK\n");
+    2b3a:	58                   	pop    %eax
+    2b3b:	5a                   	pop    %edx
+    2b3c:	68 b5 4b 00 00       	push   $0x4bb5
+    2b41:	6a 01                	push   $0x1
+    2b43:	e8 b8 0f 00 00       	call   3b00 <printf>
+}
+    2b48:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2b4b:	83 c4 10             	add    $0x10,%esp
+    2b4e:	c9                   	leave  
+    2b4f:	c3                   	ret    
+    printf(1, "create dirfile/xx succeeded!\n");
+    2b50:	50                   	push   %eax
+    2b51:	50                   	push   %eax
+    2b52:	68 29 4b 00 00       	push   $0x4b29
+    2b57:	6a 01                	push   $0x1
+    2b59:	e8 a2 0f 00 00       	call   3b00 <printf>
+    exit();
+    2b5e:	e8 20 0e 00 00       	call   3983 <exit>
+    printf(1, "chdir dirfile succeeded!\n");
+    2b63:	52                   	push   %edx
+    2b64:	52                   	push   %edx
+    2b65:	68 04 4b 00 00       	push   $0x4b04
+    2b6a:	6a 01                	push   $0x1
+    2b6c:	e8 8f 0f 00 00       	call   3b00 <printf>
+    exit();
+    2b71:	e8 0d 0e 00 00       	call   3983 <exit>
+    printf(1, "create dirfile failed\n");
+    2b76:	51                   	push   %ecx
+    2b77:	51                   	push   %ecx
+    2b78:	68 ed 4a 00 00       	push   $0x4aed
+    2b7d:	6a 01                	push   $0x1
+    2b7f:	e8 7c 0f 00 00       	call   3b00 <printf>
+    exit();
+    2b84:	e8 fa 0d 00 00       	call   3983 <exit>
+    printf(1, "write . succeeded!\n");
+    2b89:	51                   	push   %ecx
+    2b8a:	51                   	push   %ecx
+    2b8b:	68 a1 4b 00 00       	push   $0x4ba1
+    2b90:	6a 01                	push   $0x1
+    2b92:	e8 69 0f 00 00       	call   3b00 <printf>
+    exit();
+    2b97:	e8 e7 0d 00 00       	call   3983 <exit>
+    printf(1, "open . for writing succeeded!\n");
+    2b9c:	53                   	push   %ebx
+    2b9d:	53                   	push   %ebx
+    2b9e:	68 98 53 00 00       	push   $0x5398
+    2ba3:	6a 01                	push   $0x1
+    2ba5:	e8 56 0f 00 00       	call   3b00 <printf>
+    exit();
+    2baa:	e8 d4 0d 00 00       	call   3983 <exit>
+    printf(1, "unlink dirfile failed!\n");
+    2baf:	50                   	push   %eax
+    2bb0:	50                   	push   %eax
+    2bb1:	68 89 4b 00 00       	push   $0x4b89
+    2bb6:	6a 01                	push   $0x1
+    2bb8:	e8 43 0f 00 00       	call   3b00 <printf>
+    exit();
+    2bbd:	e8 c1 0d 00 00       	call   3983 <exit>
+    printf(1, "link to dirfile/xx succeeded!\n");
+    2bc2:	50                   	push   %eax
+    2bc3:	50                   	push   %eax
+    2bc4:	68 78 53 00 00       	push   $0x5378
+    2bc9:	6a 01                	push   $0x1
+    2bcb:	e8 30 0f 00 00       	call   3b00 <printf>
+    exit();
+    2bd0:	e8 ae 0d 00 00       	call   3983 <exit>
+    printf(1, "unlink dirfile/xx succeeded!\n");
+    2bd5:	50                   	push   %eax
+    2bd6:	50                   	push   %eax
+    2bd7:	68 64 4b 00 00       	push   $0x4b64
+    2bdc:	6a 01                	push   $0x1
+    2bde:	e8 1d 0f 00 00       	call   3b00 <printf>
+    exit();
+    2be3:	e8 9b 0d 00 00       	call   3983 <exit>
+    printf(1, "mkdir dirfile/xx succeeded!\n");
+    2be8:	50                   	push   %eax
+    2be9:	50                   	push   %eax
+    2bea:	68 47 4b 00 00       	push   $0x4b47
+    2bef:	6a 01                	push   $0x1
+    2bf1:	e8 0a 0f 00 00       	call   3b00 <printf>
+    exit();
+    2bf6:	e8 88 0d 00 00       	call   3983 <exit>
+    2bfb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    2bff:	90                   	nop
+
+00002c00 <iref>:
+{
+    2c00:	f3 0f 1e fb          	endbr32 
+    2c04:	55                   	push   %ebp
+    2c05:	89 e5                	mov    %esp,%ebp
+    2c07:	53                   	push   %ebx
+  printf(1, "empty file name\n");
+    2c08:	bb 33 00 00 00       	mov    $0x33,%ebx
+{
+    2c0d:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "empty file name\n");
+    2c10:	68 c5 4b 00 00       	push   $0x4bc5
+    2c15:	6a 01                	push   $0x1
+    2c17:	e8 e4 0e 00 00       	call   3b00 <printf>
+    2c1c:	83 c4 10             	add    $0x10,%esp
+    2c1f:	90                   	nop
+    if(mkdir("irefd") != 0){
+    2c20:	83 ec 0c             	sub    $0xc,%esp
+    2c23:	68 d6 4b 00 00       	push   $0x4bd6
+    2c28:	e8 be 0d 00 00       	call   39eb <mkdir>
+    2c2d:	83 c4 10             	add    $0x10,%esp
+    2c30:	85 c0                	test   %eax,%eax
+    2c32:	0f 85 bb 00 00 00    	jne    2cf3 <iref+0xf3>
+    if(chdir("irefd") != 0){
+    2c38:	83 ec 0c             	sub    $0xc,%esp
+    2c3b:	68 d6 4b 00 00       	push   $0x4bd6
+    2c40:	e8 ae 0d 00 00       	call   39f3 <chdir>
+    2c45:	83 c4 10             	add    $0x10,%esp
+    2c48:	85 c0                	test   %eax,%eax
+    2c4a:	0f 85 b7 00 00 00    	jne    2d07 <iref+0x107>
+    mkdir("");
+    2c50:	83 ec 0c             	sub    $0xc,%esp
+    2c53:	68 8b 42 00 00       	push   $0x428b
+    2c58:	e8 8e 0d 00 00       	call   39eb <mkdir>
+    link("README", "");
+    2c5d:	59                   	pop    %ecx
+    2c5e:	58                   	pop    %eax
+    2c5f:	68 8b 42 00 00       	push   $0x428b
+    2c64:	68 82 4b 00 00       	push   $0x4b82
+    2c69:	e8 75 0d 00 00       	call   39e3 <link>
+    fd = open("", O_CREATE);
+    2c6e:	58                   	pop    %eax
+    2c6f:	5a                   	pop    %edx
+    2c70:	68 00 02 00 00       	push   $0x200
+    2c75:	68 8b 42 00 00       	push   $0x428b
+    2c7a:	e8 44 0d 00 00       	call   39c3 <open>
+    if(fd >= 0)
+    2c7f:	83 c4 10             	add    $0x10,%esp
+    2c82:	85 c0                	test   %eax,%eax
+    2c84:	78 0c                	js     2c92 <iref+0x92>
+      close(fd);
+    2c86:	83 ec 0c             	sub    $0xc,%esp
+    2c89:	50                   	push   %eax
+    2c8a:	e8 1c 0d 00 00       	call   39ab <close>
+    2c8f:	83 c4 10             	add    $0x10,%esp
+    fd = open("xx", O_CREATE);
+    2c92:	83 ec 08             	sub    $0x8,%esp
+    2c95:	68 00 02 00 00       	push   $0x200
+    2c9a:	68 c0 47 00 00       	push   $0x47c0
+    2c9f:	e8 1f 0d 00 00       	call   39c3 <open>
+    if(fd >= 0)
+    2ca4:	83 c4 10             	add    $0x10,%esp
+    2ca7:	85 c0                	test   %eax,%eax
+    2ca9:	78 0c                	js     2cb7 <iref+0xb7>
+      close(fd);
+    2cab:	83 ec 0c             	sub    $0xc,%esp
+    2cae:	50                   	push   %eax
+    2caf:	e8 f7 0c 00 00       	call   39ab <close>
+    2cb4:	83 c4 10             	add    $0x10,%esp
+    unlink("xx");
+    2cb7:	83 ec 0c             	sub    $0xc,%esp
+    2cba:	68 c0 47 00 00       	push   $0x47c0
+    2cbf:	e8 0f 0d 00 00       	call   39d3 <unlink>
+  for(i = 0; i < 50 + 1; i++){
+    2cc4:	83 c4 10             	add    $0x10,%esp
+    2cc7:	83 eb 01             	sub    $0x1,%ebx
+    2cca:	0f 85 50 ff ff ff    	jne    2c20 <iref+0x20>
+  chdir("/");
+    2cd0:	83 ec 0c             	sub    $0xc,%esp
+    2cd3:	68 b1 3e 00 00       	push   $0x3eb1
+    2cd8:	e8 16 0d 00 00       	call   39f3 <chdir>
+  printf(1, "empty file name OK\n");
+    2cdd:	58                   	pop    %eax
+    2cde:	5a                   	pop    %edx
+    2cdf:	68 04 4c 00 00       	push   $0x4c04
+    2ce4:	6a 01                	push   $0x1
+    2ce6:	e8 15 0e 00 00       	call   3b00 <printf>
+}
+    2ceb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2cee:	83 c4 10             	add    $0x10,%esp
+    2cf1:	c9                   	leave  
+    2cf2:	c3                   	ret    
+      printf(1, "mkdir irefd failed\n");
+    2cf3:	83 ec 08             	sub    $0x8,%esp
+    2cf6:	68 dc 4b 00 00       	push   $0x4bdc
+    2cfb:	6a 01                	push   $0x1
+    2cfd:	e8 fe 0d 00 00       	call   3b00 <printf>
+      exit();
+    2d02:	e8 7c 0c 00 00       	call   3983 <exit>
+      printf(1, "chdir irefd failed\n");
+    2d07:	83 ec 08             	sub    $0x8,%esp
+    2d0a:	68 f0 4b 00 00       	push   $0x4bf0
+    2d0f:	6a 01                	push   $0x1
+    2d11:	e8 ea 0d 00 00       	call   3b00 <printf>
+      exit();
+    2d16:	e8 68 0c 00 00       	call   3983 <exit>
+    2d1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    2d1f:	90                   	nop
+
+00002d20 <forktest>:
+{
+    2d20:	f3 0f 1e fb          	endbr32 
+    2d24:	55                   	push   %ebp
+    2d25:	89 e5                	mov    %esp,%ebp
+    2d27:	53                   	push   %ebx
+  for(n=0; n<1000; n++){
+    2d28:	31 db                	xor    %ebx,%ebx
+{
+    2d2a:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "fork test\n");
+    2d2d:	68 18 4c 00 00       	push   $0x4c18
+    2d32:	6a 01                	push   $0x1
+    2d34:	e8 c7 0d 00 00       	call   3b00 <printf>
+    2d39:	83 c4 10             	add    $0x10,%esp
+    2d3c:	eb 0f                	jmp    2d4d <forktest+0x2d>
+    2d3e:	66 90                	xchg   %ax,%ax
+    if(pid == 0)
+    2d40:	74 4a                	je     2d8c <forktest+0x6c>
+  for(n=0; n<1000; n++){
+    2d42:	83 c3 01             	add    $0x1,%ebx
+    2d45:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
+    2d4b:	74 6b                	je     2db8 <forktest+0x98>
+    pid = fork();
+    2d4d:	e8 29 0c 00 00       	call   397b <fork>
+    if(pid < 0)
+    2d52:	85 c0                	test   %eax,%eax
+    2d54:	79 ea                	jns    2d40 <forktest+0x20>
+  for(; n > 0; n--){
+    2d56:	85 db                	test   %ebx,%ebx
+    2d58:	74 14                	je     2d6e <forktest+0x4e>
+    2d5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(wait() < 0){
+    2d60:	e8 26 0c 00 00       	call   398b <wait>
+    2d65:	85 c0                	test   %eax,%eax
+    2d67:	78 28                	js     2d91 <forktest+0x71>
+  for(; n > 0; n--){
+    2d69:	83 eb 01             	sub    $0x1,%ebx
+    2d6c:	75 f2                	jne    2d60 <forktest+0x40>
+  if(wait() != -1){
+    2d6e:	e8 18 0c 00 00       	call   398b <wait>
+    2d73:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2d76:	75 2d                	jne    2da5 <forktest+0x85>
+  printf(1, "fork test OK\n");
+    2d78:	83 ec 08             	sub    $0x8,%esp
+    2d7b:	68 4a 4c 00 00       	push   $0x4c4a
+    2d80:	6a 01                	push   $0x1
+    2d82:	e8 79 0d 00 00       	call   3b00 <printf>
+}
+    2d87:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2d8a:	c9                   	leave  
+    2d8b:	c3                   	ret    
+      exit();
+    2d8c:	e8 f2 0b 00 00       	call   3983 <exit>
+      printf(1, "wait stopped early\n");
+    2d91:	83 ec 08             	sub    $0x8,%esp
+    2d94:	68 23 4c 00 00       	push   $0x4c23
+    2d99:	6a 01                	push   $0x1
+    2d9b:	e8 60 0d 00 00       	call   3b00 <printf>
+      exit();
+    2da0:	e8 de 0b 00 00       	call   3983 <exit>
+    printf(1, "wait got too many\n");
+    2da5:	52                   	push   %edx
+    2da6:	52                   	push   %edx
+    2da7:	68 37 4c 00 00       	push   $0x4c37
+    2dac:	6a 01                	push   $0x1
+    2dae:	e8 4d 0d 00 00       	call   3b00 <printf>
+    exit();
+    2db3:	e8 cb 0b 00 00       	call   3983 <exit>
+    printf(1, "fork claimed to work 1000 times!\n");
+    2db8:	50                   	push   %eax
+    2db9:	50                   	push   %eax
+    2dba:	68 b8 53 00 00       	push   $0x53b8
+    2dbf:	6a 01                	push   $0x1
+    2dc1:	e8 3a 0d 00 00       	call   3b00 <printf>
+    exit();
+    2dc6:	e8 b8 0b 00 00       	call   3983 <exit>
+    2dcb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    2dcf:	90                   	nop
+
+00002dd0 <sbrktest>:
+{
+    2dd0:	f3 0f 1e fb          	endbr32 
+    2dd4:	55                   	push   %ebp
+    2dd5:	89 e5                	mov    %esp,%ebp
+    2dd7:	57                   	push   %edi
+  for(i = 0; i < 5000; i++){
+    2dd8:	31 ff                	xor    %edi,%edi
+{
+    2dda:	56                   	push   %esi
+    2ddb:	53                   	push   %ebx
+    2ddc:	83 ec 54             	sub    $0x54,%esp
+  printf(stdout, "sbrk test\n");
+    2ddf:	68 58 4c 00 00       	push   $0x4c58
+    2de4:	ff 35 00 5f 00 00    	pushl  0x5f00
+    2dea:	e8 11 0d 00 00       	call   3b00 <printf>
+  oldbrk = sbrk(0);
+    2def:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2df6:	e8 10 0c 00 00       	call   3a0b <sbrk>
+  a = sbrk(0);
+    2dfb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  oldbrk = sbrk(0);
+    2e02:	89 c3                	mov    %eax,%ebx
+  a = sbrk(0);
+    2e04:	e8 02 0c 00 00       	call   3a0b <sbrk>
+    2e09:	83 c4 10             	add    $0x10,%esp
+    2e0c:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 5000; i++){
+    2e0e:	eb 02                	jmp    2e12 <sbrktest+0x42>
+    a = b + 1;
+    2e10:	89 c6                	mov    %eax,%esi
+    b = sbrk(1);
+    2e12:	83 ec 0c             	sub    $0xc,%esp
+    2e15:	6a 01                	push   $0x1
+    2e17:	e8 ef 0b 00 00       	call   3a0b <sbrk>
+    if(b != a){
+    2e1c:	83 c4 10             	add    $0x10,%esp
+    2e1f:	39 f0                	cmp    %esi,%eax
+    2e21:	0f 85 84 02 00 00    	jne    30ab <sbrktest+0x2db>
+  for(i = 0; i < 5000; i++){
+    2e27:	83 c7 01             	add    $0x1,%edi
+    *b = 1;
+    2e2a:	c6 06 01             	movb   $0x1,(%esi)
+    a = b + 1;
+    2e2d:	8d 46 01             	lea    0x1(%esi),%eax
+  for(i = 0; i < 5000; i++){
+    2e30:	81 ff 88 13 00 00    	cmp    $0x1388,%edi
+    2e36:	75 d8                	jne    2e10 <sbrktest+0x40>
+  pid = fork();
+    2e38:	e8 3e 0b 00 00       	call   397b <fork>
+    2e3d:	89 c7                	mov    %eax,%edi
+  if(pid < 0){
+    2e3f:	85 c0                	test   %eax,%eax
+    2e41:	0f 88 91 03 00 00    	js     31d8 <sbrktest+0x408>
+  c = sbrk(1);
+    2e47:	83 ec 0c             	sub    $0xc,%esp
+  if(c != a + 1){
+    2e4a:	83 c6 02             	add    $0x2,%esi
+  c = sbrk(1);
+    2e4d:	6a 01                	push   $0x1
+    2e4f:	e8 b7 0b 00 00       	call   3a0b <sbrk>
+  c = sbrk(1);
+    2e54:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2e5b:	e8 ab 0b 00 00       	call   3a0b <sbrk>
+  if(c != a + 1){
+    2e60:	83 c4 10             	add    $0x10,%esp
+    2e63:	39 c6                	cmp    %eax,%esi
+    2e65:	0f 85 56 03 00 00    	jne    31c1 <sbrktest+0x3f1>
+  if(pid == 0)
+    2e6b:	85 ff                	test   %edi,%edi
+    2e6d:	0f 84 49 03 00 00    	je     31bc <sbrktest+0x3ec>
+  wait();
+    2e73:	e8 13 0b 00 00       	call   398b <wait>
+  a = sbrk(0);
+    2e78:	83 ec 0c             	sub    $0xc,%esp
+    2e7b:	6a 00                	push   $0x0
+    2e7d:	e8 89 0b 00 00       	call   3a0b <sbrk>
+    2e82:	89 c6                	mov    %eax,%esi
+  amt = (BIG) - (uint)a;
+    2e84:	b8 00 00 40 06       	mov    $0x6400000,%eax
+    2e89:	29 f0                	sub    %esi,%eax
+  p = sbrk(amt);
+    2e8b:	89 04 24             	mov    %eax,(%esp)
+    2e8e:	e8 78 0b 00 00       	call   3a0b <sbrk>
+  if (p != a) {
+    2e93:	83 c4 10             	add    $0x10,%esp
+    2e96:	39 c6                	cmp    %eax,%esi
+    2e98:	0f 85 07 03 00 00    	jne    31a5 <sbrktest+0x3d5>
+  a = sbrk(0);
+    2e9e:	83 ec 0c             	sub    $0xc,%esp
+  *lastaddr = 99;
+    2ea1:	c6 05 ff ff 3f 06 63 	movb   $0x63,0x63fffff
+  a = sbrk(0);
+    2ea8:	6a 00                	push   $0x0
+    2eaa:	e8 5c 0b 00 00       	call   3a0b <sbrk>
+  c = sbrk(-4096);
+    2eaf:	c7 04 24 00 f0 ff ff 	movl   $0xfffff000,(%esp)
+  a = sbrk(0);
+    2eb6:	89 c6                	mov    %eax,%esi
+  c = sbrk(-4096);
+    2eb8:	e8 4e 0b 00 00       	call   3a0b <sbrk>
+  if(c == (char*)0xffffffff){
+    2ebd:	83 c4 10             	add    $0x10,%esp
+    2ec0:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2ec3:	0f 84 c5 02 00 00    	je     318e <sbrktest+0x3be>
+  c = sbrk(0);
+    2ec9:	83 ec 0c             	sub    $0xc,%esp
+    2ecc:	6a 00                	push   $0x0
+    2ece:	e8 38 0b 00 00       	call   3a0b <sbrk>
+  if(c != a - 4096){
+    2ed3:	8d 96 00 f0 ff ff    	lea    -0x1000(%esi),%edx
+    2ed9:	83 c4 10             	add    $0x10,%esp
+    2edc:	39 d0                	cmp    %edx,%eax
+    2ede:	0f 85 93 02 00 00    	jne    3177 <sbrktest+0x3a7>
+  a = sbrk(0);
+    2ee4:	83 ec 0c             	sub    $0xc,%esp
+    2ee7:	6a 00                	push   $0x0
+    2ee9:	e8 1d 0b 00 00       	call   3a0b <sbrk>
+  c = sbrk(4096);
+    2eee:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
+  a = sbrk(0);
+    2ef5:	89 c6                	mov    %eax,%esi
+  c = sbrk(4096);
+    2ef7:	e8 0f 0b 00 00       	call   3a0b <sbrk>
+  if(c != a || sbrk(0) != a + 4096){
+    2efc:	83 c4 10             	add    $0x10,%esp
+  c = sbrk(4096);
+    2eff:	89 c7                	mov    %eax,%edi
+  if(c != a || sbrk(0) != a + 4096){
+    2f01:	39 c6                	cmp    %eax,%esi
+    2f03:	0f 85 57 02 00 00    	jne    3160 <sbrktest+0x390>
+    2f09:	83 ec 0c             	sub    $0xc,%esp
+    2f0c:	6a 00                	push   $0x0
+    2f0e:	e8 f8 0a 00 00       	call   3a0b <sbrk>
+    2f13:	8d 96 00 10 00 00    	lea    0x1000(%esi),%edx
+    2f19:	83 c4 10             	add    $0x10,%esp
+    2f1c:	39 c2                	cmp    %eax,%edx
+    2f1e:	0f 85 3c 02 00 00    	jne    3160 <sbrktest+0x390>
+  if(*lastaddr == 99){
+    2f24:	80 3d ff ff 3f 06 63 	cmpb   $0x63,0x63fffff
+    2f2b:	0f 84 18 02 00 00    	je     3149 <sbrktest+0x379>
+  a = sbrk(0);
+    2f31:	83 ec 0c             	sub    $0xc,%esp
+    2f34:	6a 00                	push   $0x0
+    2f36:	e8 d0 0a 00 00       	call   3a0b <sbrk>
+  c = sbrk(-(sbrk(0) - oldbrk));
+    2f3b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  a = sbrk(0);
+    2f42:	89 c6                	mov    %eax,%esi
+  c = sbrk(-(sbrk(0) - oldbrk));
+    2f44:	e8 c2 0a 00 00       	call   3a0b <sbrk>
+    2f49:	89 d9                	mov    %ebx,%ecx
+    2f4b:	29 c1                	sub    %eax,%ecx
+    2f4d:	89 0c 24             	mov    %ecx,(%esp)
+    2f50:	e8 b6 0a 00 00       	call   3a0b <sbrk>
+  if(c != a){
+    2f55:	83 c4 10             	add    $0x10,%esp
+    2f58:	39 c6                	cmp    %eax,%esi
+    2f5a:	0f 85 d2 01 00 00    	jne    3132 <sbrktest+0x362>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2f60:	be 00 00 00 80       	mov    $0x80000000,%esi
+    2f65:	8d 76 00             	lea    0x0(%esi),%esi
+    ppid = getpid();
+    2f68:	e8 96 0a 00 00       	call   3a03 <getpid>
+    2f6d:	89 c7                	mov    %eax,%edi
+    pid = fork();
+    2f6f:	e8 07 0a 00 00       	call   397b <fork>
+    if(pid < 0){
+    2f74:	85 c0                	test   %eax,%eax
+    2f76:	0f 88 9e 01 00 00    	js     311a <sbrktest+0x34a>
+    if(pid == 0){
+    2f7c:	0f 84 76 01 00 00    	je     30f8 <sbrktest+0x328>
+    wait();
+    2f82:	e8 04 0a 00 00       	call   398b <wait>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2f87:	81 c6 50 c3 00 00    	add    $0xc350,%esi
+    2f8d:	81 fe 80 84 1e 80    	cmp    $0x801e8480,%esi
+    2f93:	75 d3                	jne    2f68 <sbrktest+0x198>
+  if(pipe(fds) != 0){
+    2f95:	83 ec 0c             	sub    $0xc,%esp
+    2f98:	8d 45 b8             	lea    -0x48(%ebp),%eax
+    2f9b:	50                   	push   %eax
+    2f9c:	e8 f2 09 00 00       	call   3993 <pipe>
+    2fa1:	83 c4 10             	add    $0x10,%esp
+    2fa4:	85 c0                	test   %eax,%eax
+    2fa6:	0f 85 34 01 00 00    	jne    30e0 <sbrktest+0x310>
+    2fac:	8d 75 c0             	lea    -0x40(%ebp),%esi
+    2faf:	89 f7                	mov    %esi,%edi
+    if((pids[i] = fork()) == 0){
+    2fb1:	e8 c5 09 00 00       	call   397b <fork>
+    2fb6:	89 07                	mov    %eax,(%edi)
+    2fb8:	85 c0                	test   %eax,%eax
+    2fba:	0f 84 8f 00 00 00    	je     304f <sbrktest+0x27f>
+    if(pids[i] != -1)
+    2fc0:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2fc3:	74 14                	je     2fd9 <sbrktest+0x209>
+      read(fds[0], &scratch, 1);
+    2fc5:	83 ec 04             	sub    $0x4,%esp
+    2fc8:	8d 45 b7             	lea    -0x49(%ebp),%eax
+    2fcb:	6a 01                	push   $0x1
+    2fcd:	50                   	push   %eax
+    2fce:	ff 75 b8             	pushl  -0x48(%ebp)
+    2fd1:	e8 c5 09 00 00       	call   399b <read>
+    2fd6:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    2fd9:	83 c7 04             	add    $0x4,%edi
+    2fdc:	8d 45 e8             	lea    -0x18(%ebp),%eax
+    2fdf:	39 c7                	cmp    %eax,%edi
+    2fe1:	75 ce                	jne    2fb1 <sbrktest+0x1e1>
+  c = sbrk(4096);
+    2fe3:	83 ec 0c             	sub    $0xc,%esp
+    2fe6:	68 00 10 00 00       	push   $0x1000
+    2feb:	e8 1b 0a 00 00       	call   3a0b <sbrk>
+    2ff0:	83 c4 10             	add    $0x10,%esp
+    2ff3:	89 c7                	mov    %eax,%edi
+    if(pids[i] == -1)
+    2ff5:	8b 06                	mov    (%esi),%eax
+    2ff7:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2ffa:	74 11                	je     300d <sbrktest+0x23d>
+    kill(pids[i]);
+    2ffc:	83 ec 0c             	sub    $0xc,%esp
+    2fff:	50                   	push   %eax
+    3000:	e8 ae 09 00 00       	call   39b3 <kill>
+    wait();
+    3005:	e8 81 09 00 00       	call   398b <wait>
+    300a:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    300d:	83 c6 04             	add    $0x4,%esi
+    3010:	8d 45 e8             	lea    -0x18(%ebp),%eax
+    3013:	39 f0                	cmp    %esi,%eax
+    3015:	75 de                	jne    2ff5 <sbrktest+0x225>
+  if(c == (char*)0xffffffff){
+    3017:	83 ff ff             	cmp    $0xffffffff,%edi
+    301a:	0f 84 a9 00 00 00    	je     30c9 <sbrktest+0x2f9>
+  if(sbrk(0) > oldbrk)
+    3020:	83 ec 0c             	sub    $0xc,%esp
+    3023:	6a 00                	push   $0x0
+    3025:	e8 e1 09 00 00       	call   3a0b <sbrk>
+    302a:	83 c4 10             	add    $0x10,%esp
+    302d:	39 c3                	cmp    %eax,%ebx
+    302f:	72 61                	jb     3092 <sbrktest+0x2c2>
+  printf(stdout, "sbrk test OK\n");
+    3031:	83 ec 08             	sub    $0x8,%esp
+    3034:	68 00 4d 00 00       	push   $0x4d00
+    3039:	ff 35 00 5f 00 00    	pushl  0x5f00
+    303f:	e8 bc 0a 00 00       	call   3b00 <printf>
+}
+    3044:	83 c4 10             	add    $0x10,%esp
+    3047:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    304a:	5b                   	pop    %ebx
+    304b:	5e                   	pop    %esi
+    304c:	5f                   	pop    %edi
+    304d:	5d                   	pop    %ebp
+    304e:	c3                   	ret    
+      sbrk(BIG - (uint)sbrk(0));
+    304f:	83 ec 0c             	sub    $0xc,%esp
+    3052:	6a 00                	push   $0x0
+    3054:	e8 b2 09 00 00       	call   3a0b <sbrk>
+    3059:	89 c2                	mov    %eax,%edx
+    305b:	b8 00 00 40 06       	mov    $0x6400000,%eax
+    3060:	29 d0                	sub    %edx,%eax
+    3062:	89 04 24             	mov    %eax,(%esp)
+    3065:	e8 a1 09 00 00       	call   3a0b <sbrk>
+      write(fds[1], "x", 1);
+    306a:	83 c4 0c             	add    $0xc,%esp
+    306d:	6a 01                	push   $0x1
+    306f:	68 c1 47 00 00       	push   $0x47c1
+    3074:	ff 75 bc             	pushl  -0x44(%ebp)
+    3077:	e8 27 09 00 00       	call   39a3 <write>
+    307c:	83 c4 10             	add    $0x10,%esp
+    307f:	90                   	nop
+      for(;;) sleep(1000);
+    3080:	83 ec 0c             	sub    $0xc,%esp
+    3083:	68 e8 03 00 00       	push   $0x3e8
+    3088:	e8 86 09 00 00       	call   3a13 <sleep>
+    308d:	83 c4 10             	add    $0x10,%esp
+    3090:	eb ee                	jmp    3080 <sbrktest+0x2b0>
+    sbrk(-(sbrk(0) - oldbrk));
+    3092:	83 ec 0c             	sub    $0xc,%esp
+    3095:	6a 00                	push   $0x0
+    3097:	e8 6f 09 00 00       	call   3a0b <sbrk>
+    309c:	29 c3                	sub    %eax,%ebx
+    309e:	89 1c 24             	mov    %ebx,(%esp)
+    30a1:	e8 65 09 00 00       	call   3a0b <sbrk>
+    30a6:	83 c4 10             	add    $0x10,%esp
+    30a9:	eb 86                	jmp    3031 <sbrktest+0x261>
+      printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
+    30ab:	83 ec 0c             	sub    $0xc,%esp
+    30ae:	50                   	push   %eax
+    30af:	56                   	push   %esi
+    30b0:	57                   	push   %edi
+    30b1:	68 63 4c 00 00       	push   $0x4c63
+    30b6:	ff 35 00 5f 00 00    	pushl  0x5f00
+    30bc:	e8 3f 0a 00 00       	call   3b00 <printf>
+      exit();
+    30c1:	83 c4 20             	add    $0x20,%esp
+    30c4:	e8 ba 08 00 00       	call   3983 <exit>
+    printf(stdout, "failed sbrk leaked memory\n");
+    30c9:	50                   	push   %eax
+    30ca:	50                   	push   %eax
+    30cb:	68 e5 4c 00 00       	push   $0x4ce5
+    30d0:	ff 35 00 5f 00 00    	pushl  0x5f00
+    30d6:	e8 25 0a 00 00       	call   3b00 <printf>
+    exit();
+    30db:	e8 a3 08 00 00       	call   3983 <exit>
+    printf(1, "pipe() failed\n");
+    30e0:	52                   	push   %edx
+    30e1:	52                   	push   %edx
+    30e2:	68 a1 41 00 00       	push   $0x41a1
+    30e7:	6a 01                	push   $0x1
+    30e9:	e8 12 0a 00 00       	call   3b00 <printf>
+    exit();
+    30ee:	e8 90 08 00 00       	call   3983 <exit>
+    30f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    30f7:	90                   	nop
+      printf(stdout, "oops could read %x = %x\n", a, *a);
+    30f8:	0f be 06             	movsbl (%esi),%eax
+    30fb:	50                   	push   %eax
+    30fc:	56                   	push   %esi
+    30fd:	68 cc 4c 00 00       	push   $0x4ccc
+    3102:	ff 35 00 5f 00 00    	pushl  0x5f00
+    3108:	e8 f3 09 00 00       	call   3b00 <printf>
+      kill(ppid);
+    310d:	89 3c 24             	mov    %edi,(%esp)
+    3110:	e8 9e 08 00 00       	call   39b3 <kill>
+      exit();
+    3115:	e8 69 08 00 00       	call   3983 <exit>
+      printf(stdout, "fork failed\n");
+    311a:	83 ec 08             	sub    $0x8,%esp
+    311d:	68 a9 4d 00 00       	push   $0x4da9
+    3122:	ff 35 00 5f 00 00    	pushl  0x5f00
+    3128:	e8 d3 09 00 00       	call   3b00 <printf>
+      exit();
+    312d:	e8 51 08 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
+    3132:	50                   	push   %eax
+    3133:	56                   	push   %esi
+    3134:	68 ac 54 00 00       	push   $0x54ac
+    3139:	ff 35 00 5f 00 00    	pushl  0x5f00
+    313f:	e8 bc 09 00 00       	call   3b00 <printf>
+    exit();
+    3144:	e8 3a 08 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk de-allocation didn't really deallocate\n");
+    3149:	51                   	push   %ecx
+    314a:	51                   	push   %ecx
+    314b:	68 7c 54 00 00       	push   $0x547c
+    3150:	ff 35 00 5f 00 00    	pushl  0x5f00
+    3156:	e8 a5 09 00 00       	call   3b00 <printf>
+    exit();
+    315b:	e8 23 08 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
+    3160:	57                   	push   %edi
+    3161:	56                   	push   %esi
+    3162:	68 54 54 00 00       	push   $0x5454
+    3167:	ff 35 00 5f 00 00    	pushl  0x5f00
+    316d:	e8 8e 09 00 00       	call   3b00 <printf>
+    exit();
+    3172:	e8 0c 08 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
+    3177:	50                   	push   %eax
+    3178:	56                   	push   %esi
+    3179:	68 1c 54 00 00       	push   $0x541c
+    317e:	ff 35 00 5f 00 00    	pushl  0x5f00
+    3184:	e8 77 09 00 00       	call   3b00 <printf>
+    exit();
+    3189:	e8 f5 07 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk could not deallocate\n");
+    318e:	53                   	push   %ebx
+    318f:	53                   	push   %ebx
+    3190:	68 b1 4c 00 00       	push   $0x4cb1
+    3195:	ff 35 00 5f 00 00    	pushl  0x5f00
+    319b:	e8 60 09 00 00       	call   3b00 <printf>
+    exit();
+    31a0:	e8 de 07 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
+    31a5:	56                   	push   %esi
+    31a6:	56                   	push   %esi
+    31a7:	68 dc 53 00 00       	push   $0x53dc
+    31ac:	ff 35 00 5f 00 00    	pushl  0x5f00
+    31b2:	e8 49 09 00 00       	call   3b00 <printf>
+    exit();
+    31b7:	e8 c7 07 00 00       	call   3983 <exit>
+    exit();
+    31bc:	e8 c2 07 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk test failed post-fork\n");
+    31c1:	57                   	push   %edi
+    31c2:	57                   	push   %edi
+    31c3:	68 95 4c 00 00       	push   $0x4c95
+    31c8:	ff 35 00 5f 00 00    	pushl  0x5f00
+    31ce:	e8 2d 09 00 00       	call   3b00 <printf>
+    exit();
+    31d3:	e8 ab 07 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk test fork failed\n");
+    31d8:	50                   	push   %eax
+    31d9:	50                   	push   %eax
+    31da:	68 7e 4c 00 00       	push   $0x4c7e
+    31df:	ff 35 00 5f 00 00    	pushl  0x5f00
+    31e5:	e8 16 09 00 00       	call   3b00 <printf>
+    exit();
+    31ea:	e8 94 07 00 00       	call   3983 <exit>
+    31ef:	90                   	nop
+
+000031f0 <validateint>:
+{
+    31f0:	f3 0f 1e fb          	endbr32 
+}
+    31f4:	c3                   	ret    
+    31f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    31fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003200 <validatetest>:
+{
+    3200:	f3 0f 1e fb          	endbr32 
+    3204:	55                   	push   %ebp
+    3205:	89 e5                	mov    %esp,%ebp
+    3207:	56                   	push   %esi
+  for(p = 0; p <= (uint)hi; p += 4096){
+    3208:	31 f6                	xor    %esi,%esi
+{
+    320a:	53                   	push   %ebx
+  printf(stdout, "validate test\n");
+    320b:	83 ec 08             	sub    $0x8,%esp
+    320e:	68 0e 4d 00 00       	push   $0x4d0e
+    3213:	ff 35 00 5f 00 00    	pushl  0x5f00
+    3219:	e8 e2 08 00 00       	call   3b00 <printf>
+    321e:	83 c4 10             	add    $0x10,%esp
+    3221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if((pid = fork()) == 0){
+    3228:	e8 4e 07 00 00       	call   397b <fork>
+    322d:	89 c3                	mov    %eax,%ebx
+    322f:	85 c0                	test   %eax,%eax
+    3231:	74 63                	je     3296 <validatetest+0x96>
+    sleep(0);
+    3233:	83 ec 0c             	sub    $0xc,%esp
+    3236:	6a 00                	push   $0x0
+    3238:	e8 d6 07 00 00       	call   3a13 <sleep>
+    sleep(0);
+    323d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3244:	e8 ca 07 00 00       	call   3a13 <sleep>
+    kill(pid);
+    3249:	89 1c 24             	mov    %ebx,(%esp)
+    324c:	e8 62 07 00 00       	call   39b3 <kill>
+    wait();
+    3251:	e8 35 07 00 00       	call   398b <wait>
+    if(link("nosuchfile", (char*)p) != -1){
+    3256:	58                   	pop    %eax
+    3257:	5a                   	pop    %edx
+    3258:	56                   	push   %esi
+    3259:	68 1d 4d 00 00       	push   $0x4d1d
+    325e:	e8 80 07 00 00       	call   39e3 <link>
+    3263:	83 c4 10             	add    $0x10,%esp
+    3266:	83 f8 ff             	cmp    $0xffffffff,%eax
+    3269:	75 30                	jne    329b <validatetest+0x9b>
+  for(p = 0; p <= (uint)hi; p += 4096){
+    326b:	81 c6 00 10 00 00    	add    $0x1000,%esi
+    3271:	81 fe 00 40 11 00    	cmp    $0x114000,%esi
+    3277:	75 af                	jne    3228 <validatetest+0x28>
+  printf(stdout, "validate ok\n");
+    3279:	83 ec 08             	sub    $0x8,%esp
+    327c:	68 41 4d 00 00       	push   $0x4d41
+    3281:	ff 35 00 5f 00 00    	pushl  0x5f00
+    3287:	e8 74 08 00 00       	call   3b00 <printf>
+}
+    328c:	83 c4 10             	add    $0x10,%esp
+    328f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    3292:	5b                   	pop    %ebx
+    3293:	5e                   	pop    %esi
+    3294:	5d                   	pop    %ebp
+    3295:	c3                   	ret    
+      exit();
+    3296:	e8 e8 06 00 00       	call   3983 <exit>
+      printf(stdout, "link should not succeed\n");
+    329b:	83 ec 08             	sub    $0x8,%esp
+    329e:	68 28 4d 00 00       	push   $0x4d28
+    32a3:	ff 35 00 5f 00 00    	pushl  0x5f00
+    32a9:	e8 52 08 00 00       	call   3b00 <printf>
+      exit();
+    32ae:	e8 d0 06 00 00       	call   3983 <exit>
+    32b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    32ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000032c0 <bsstest>:
+{
+    32c0:	f3 0f 1e fb          	endbr32 
+    32c4:	55                   	push   %ebp
+    32c5:	89 e5                	mov    %esp,%ebp
+    32c7:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "bss test\n");
+    32ca:	68 4e 4d 00 00       	push   $0x4d4e
+    32cf:	ff 35 00 5f 00 00    	pushl  0x5f00
+    32d5:	e8 26 08 00 00       	call   3b00 <printf>
+    32da:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < sizeof(uninit); i++){
+    32dd:	31 c0                	xor    %eax,%eax
+    32df:	90                   	nop
+    if(uninit[i] != '\0'){
+    32e0:	80 b8 c0 5f 00 00 00 	cmpb   $0x0,0x5fc0(%eax)
+    32e7:	75 22                	jne    330b <bsstest+0x4b>
+  for(i = 0; i < sizeof(uninit); i++){
+    32e9:	83 c0 01             	add    $0x1,%eax
+    32ec:	3d 10 27 00 00       	cmp    $0x2710,%eax
+    32f1:	75 ed                	jne    32e0 <bsstest+0x20>
+  printf(stdout, "bss test ok\n");
+    32f3:	83 ec 08             	sub    $0x8,%esp
+    32f6:	68 69 4d 00 00       	push   $0x4d69
+    32fb:	ff 35 00 5f 00 00    	pushl  0x5f00
+    3301:	e8 fa 07 00 00       	call   3b00 <printf>
+}
+    3306:	83 c4 10             	add    $0x10,%esp
+    3309:	c9                   	leave  
+    330a:	c3                   	ret    
+      printf(stdout, "bss test failed\n");
+    330b:	83 ec 08             	sub    $0x8,%esp
+    330e:	68 58 4d 00 00       	push   $0x4d58
+    3313:	ff 35 00 5f 00 00    	pushl  0x5f00
+    3319:	e8 e2 07 00 00       	call   3b00 <printf>
+      exit();
+    331e:	e8 60 06 00 00       	call   3983 <exit>
+    3323:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    332a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00003330 <bigargtest>:
+{
+    3330:	f3 0f 1e fb          	endbr32 
+    3334:	55                   	push   %ebp
+    3335:	89 e5                	mov    %esp,%ebp
+    3337:	83 ec 14             	sub    $0x14,%esp
+  unlink("bigarg-ok");
+    333a:	68 76 4d 00 00       	push   $0x4d76
+    333f:	e8 8f 06 00 00       	call   39d3 <unlink>
+  pid = fork();
+    3344:	e8 32 06 00 00       	call   397b <fork>
+  if(pid == 0){
+    3349:	83 c4 10             	add    $0x10,%esp
+    334c:	85 c0                	test   %eax,%eax
+    334e:	74 40                	je     3390 <bigargtest+0x60>
+  } else if(pid < 0){
+    3350:	0f 88 c1 00 00 00    	js     3417 <bigargtest+0xe7>
+  wait();
+    3356:	e8 30 06 00 00       	call   398b <wait>
+  fd = open("bigarg-ok", 0);
+    335b:	83 ec 08             	sub    $0x8,%esp
+    335e:	6a 00                	push   $0x0
+    3360:	68 76 4d 00 00       	push   $0x4d76
+    3365:	e8 59 06 00 00       	call   39c3 <open>
+  if(fd < 0){
+    336a:	83 c4 10             	add    $0x10,%esp
+    336d:	85 c0                	test   %eax,%eax
+    336f:	0f 88 8b 00 00 00    	js     3400 <bigargtest+0xd0>
+  close(fd);
+    3375:	83 ec 0c             	sub    $0xc,%esp
+    3378:	50                   	push   %eax
+    3379:	e8 2d 06 00 00       	call   39ab <close>
+  unlink("bigarg-ok");
+    337e:	c7 04 24 76 4d 00 00 	movl   $0x4d76,(%esp)
+    3385:	e8 49 06 00 00       	call   39d3 <unlink>
+}
+    338a:	83 c4 10             	add    $0x10,%esp
+    338d:	c9                   	leave  
+    338e:	c3                   	ret    
+    338f:	90                   	nop
+      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
+    3390:	c7 04 85 20 5f 00 00 	movl   $0x54d0,0x5f20(,%eax,4)
+    3397:	d0 54 00 00 
+    for(i = 0; i < MAXARG-1; i++)
+    339b:	83 c0 01             	add    $0x1,%eax
+    339e:	83 f8 1f             	cmp    $0x1f,%eax
+    33a1:	75 ed                	jne    3390 <bigargtest+0x60>
+    printf(stdout, "bigarg test\n");
+    33a3:	51                   	push   %ecx
+    33a4:	51                   	push   %ecx
+    33a5:	68 80 4d 00 00       	push   $0x4d80
+    33aa:	ff 35 00 5f 00 00    	pushl  0x5f00
+    args[MAXARG-1] = 0;
+    33b0:	c7 05 9c 5f 00 00 00 	movl   $0x0,0x5f9c
+    33b7:	00 00 00 
+    printf(stdout, "bigarg test\n");
+    33ba:	e8 41 07 00 00       	call   3b00 <printf>
+    exec("echo", args);
+    33bf:	58                   	pop    %eax
+    33c0:	5a                   	pop    %edx
+    33c1:	68 20 5f 00 00       	push   $0x5f20
+    33c6:	68 4d 3f 00 00       	push   $0x3f4d
+    33cb:	e8 eb 05 00 00       	call   39bb <exec>
+    printf(stdout, "bigarg test ok\n");
+    33d0:	59                   	pop    %ecx
+    33d1:	58                   	pop    %eax
+    33d2:	68 8d 4d 00 00       	push   $0x4d8d
+    33d7:	ff 35 00 5f 00 00    	pushl  0x5f00
+    33dd:	e8 1e 07 00 00       	call   3b00 <printf>
+    fd = open("bigarg-ok", O_CREATE);
+    33e2:	58                   	pop    %eax
+    33e3:	5a                   	pop    %edx
+    33e4:	68 00 02 00 00       	push   $0x200
+    33e9:	68 76 4d 00 00       	push   $0x4d76
+    33ee:	e8 d0 05 00 00       	call   39c3 <open>
+    close(fd);
+    33f3:	89 04 24             	mov    %eax,(%esp)
+    33f6:	e8 b0 05 00 00       	call   39ab <close>
+    exit();
+    33fb:	e8 83 05 00 00       	call   3983 <exit>
+    printf(stdout, "bigarg test failed!\n");
+    3400:	50                   	push   %eax
+    3401:	50                   	push   %eax
+    3402:	68 b6 4d 00 00       	push   $0x4db6
+    3407:	ff 35 00 5f 00 00    	pushl  0x5f00
+    340d:	e8 ee 06 00 00       	call   3b00 <printf>
+    exit();
+    3412:	e8 6c 05 00 00       	call   3983 <exit>
+    printf(stdout, "bigargtest: fork failed\n");
+    3417:	52                   	push   %edx
+    3418:	52                   	push   %edx
+    3419:	68 9d 4d 00 00       	push   $0x4d9d
+    341e:	ff 35 00 5f 00 00    	pushl  0x5f00
+    3424:	e8 d7 06 00 00       	call   3b00 <printf>
+    exit();
+    3429:	e8 55 05 00 00       	call   3983 <exit>
+    342e:	66 90                	xchg   %ax,%ax
+
+00003430 <fsfull>:
+{
+    3430:	f3 0f 1e fb          	endbr32 
+    3434:	55                   	push   %ebp
+    3435:	89 e5                	mov    %esp,%ebp
+    3437:	57                   	push   %edi
+    3438:	56                   	push   %esi
+  for(nfiles = 0; ; nfiles++){
+    3439:	31 f6                	xor    %esi,%esi
+{
+    343b:	53                   	push   %ebx
+    343c:	83 ec 54             	sub    $0x54,%esp
+  printf(1, "fsfull test\n");
+    343f:	68 cb 4d 00 00       	push   $0x4dcb
+    3444:	6a 01                	push   $0x1
+    3446:	e8 b5 06 00 00       	call   3b00 <printf>
+    344b:	83 c4 10             	add    $0x10,%esp
+    344e:	66 90                	xchg   %ax,%ax
+    name[1] = '0' + nfiles / 1000;
+    3450:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    3455:	b9 cd cc cc cc       	mov    $0xcccccccd,%ecx
+    printf(1, "writing %s\n", name);
+    345a:	83 ec 04             	sub    $0x4,%esp
+    name[0] = 'f';
+    345d:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    3461:	f7 e6                	mul    %esi
+    name[5] = '\0';
+    3463:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    3467:	c1 ea 06             	shr    $0x6,%edx
+    346a:	8d 42 30             	lea    0x30(%edx),%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    346d:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+    name[1] = '0' + nfiles / 1000;
+    3473:	88 45 a9             	mov    %al,-0x57(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    3476:	89 f0                	mov    %esi,%eax
+    3478:	29 d0                	sub    %edx,%eax
+    347a:	89 c2                	mov    %eax,%edx
+    347c:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    3481:	f7 e2                	mul    %edx
+    name[3] = '0' + (nfiles % 100) / 10;
+    3483:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    3488:	c1 ea 05             	shr    $0x5,%edx
+    348b:	83 c2 30             	add    $0x30,%edx
+    348e:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    3491:	f7 e6                	mul    %esi
+    3493:	89 f0                	mov    %esi,%eax
+    3495:	c1 ea 05             	shr    $0x5,%edx
+    3498:	6b d2 64             	imul   $0x64,%edx,%edx
+    349b:	29 d0                	sub    %edx,%eax
+    349d:	f7 e1                	mul    %ecx
+    name[4] = '0' + (nfiles % 10);
+    349f:	89 f0                	mov    %esi,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    34a1:	c1 ea 03             	shr    $0x3,%edx
+    34a4:	83 c2 30             	add    $0x30,%edx
+    34a7:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    34aa:	f7 e1                	mul    %ecx
+    34ac:	89 f1                	mov    %esi,%ecx
+    34ae:	c1 ea 03             	shr    $0x3,%edx
+    34b1:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    34b4:	01 c0                	add    %eax,%eax
+    34b6:	29 c1                	sub    %eax,%ecx
+    34b8:	89 c8                	mov    %ecx,%eax
+    34ba:	83 c0 30             	add    $0x30,%eax
+    34bd:	88 45 ac             	mov    %al,-0x54(%ebp)
+    printf(1, "writing %s\n", name);
+    34c0:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    34c3:	50                   	push   %eax
+    34c4:	68 d8 4d 00 00       	push   $0x4dd8
+    34c9:	6a 01                	push   $0x1
+    34cb:	e8 30 06 00 00       	call   3b00 <printf>
+    int fd = open(name, O_CREATE|O_RDWR);
+    34d0:	58                   	pop    %eax
+    34d1:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    34d4:	5a                   	pop    %edx
+    34d5:	68 02 02 00 00       	push   $0x202
+    34da:	50                   	push   %eax
+    34db:	e8 e3 04 00 00       	call   39c3 <open>
+    if(fd < 0){
+    34e0:	83 c4 10             	add    $0x10,%esp
+    int fd = open(name, O_CREATE|O_RDWR);
+    34e3:	89 c7                	mov    %eax,%edi
+    if(fd < 0){
+    34e5:	85 c0                	test   %eax,%eax
+    34e7:	78 4d                	js     3536 <fsfull+0x106>
+    int total = 0;
+    34e9:	31 db                	xor    %ebx,%ebx
+    34eb:	eb 05                	jmp    34f2 <fsfull+0xc2>
+    34ed:	8d 76 00             	lea    0x0(%esi),%esi
+      total += cc;
+    34f0:	01 c3                	add    %eax,%ebx
+      int cc = write(fd, buf, 512);
+    34f2:	83 ec 04             	sub    $0x4,%esp
+    34f5:	68 00 02 00 00       	push   $0x200
+    34fa:	68 e0 86 00 00       	push   $0x86e0
+    34ff:	57                   	push   %edi
+    3500:	e8 9e 04 00 00       	call   39a3 <write>
+      if(cc < 512)
+    3505:	83 c4 10             	add    $0x10,%esp
+    3508:	3d ff 01 00 00       	cmp    $0x1ff,%eax
+    350d:	7f e1                	jg     34f0 <fsfull+0xc0>
+    printf(1, "wrote %d bytes\n", total);
+    350f:	83 ec 04             	sub    $0x4,%esp
+    3512:	53                   	push   %ebx
+    3513:	68 f4 4d 00 00       	push   $0x4df4
+    3518:	6a 01                	push   $0x1
+    351a:	e8 e1 05 00 00       	call   3b00 <printf>
+    close(fd);
+    351f:	89 3c 24             	mov    %edi,(%esp)
+    3522:	e8 84 04 00 00       	call   39ab <close>
+    if(total == 0)
+    3527:	83 c4 10             	add    $0x10,%esp
+    352a:	85 db                	test   %ebx,%ebx
+    352c:	74 1e                	je     354c <fsfull+0x11c>
+  for(nfiles = 0; ; nfiles++){
+    352e:	83 c6 01             	add    $0x1,%esi
+    3531:	e9 1a ff ff ff       	jmp    3450 <fsfull+0x20>
+      printf(1, "open %s failed\n", name);
+    3536:	83 ec 04             	sub    $0x4,%esp
+    3539:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    353c:	50                   	push   %eax
+    353d:	68 e4 4d 00 00       	push   $0x4de4
+    3542:	6a 01                	push   $0x1
+    3544:	e8 b7 05 00 00       	call   3b00 <printf>
+      break;
+    3549:	83 c4 10             	add    $0x10,%esp
+    name[1] = '0' + nfiles / 1000;
+    354c:	bf d3 4d 62 10       	mov    $0x10624dd3,%edi
+    name[2] = '0' + (nfiles % 1000) / 100;
+    3551:	bb 1f 85 eb 51       	mov    $0x51eb851f,%ebx
+    3556:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    355d:	8d 76 00             	lea    0x0(%esi),%esi
+    name[1] = '0' + nfiles / 1000;
+    3560:	89 f0                	mov    %esi,%eax
+    3562:	89 f1                	mov    %esi,%ecx
+    unlink(name);
+    3564:	83 ec 0c             	sub    $0xc,%esp
+    name[0] = 'f';
+    3567:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    356b:	f7 ef                	imul   %edi
+    356d:	c1 f9 1f             	sar    $0x1f,%ecx
+    name[5] = '\0';
+    3570:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    3574:	c1 fa 06             	sar    $0x6,%edx
+    3577:	29 ca                	sub    %ecx,%edx
+    3579:	8d 42 30             	lea    0x30(%edx),%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    357c:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+    name[1] = '0' + nfiles / 1000;
+    3582:	88 45 a9             	mov    %al,-0x57(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    3585:	89 f0                	mov    %esi,%eax
+    3587:	29 d0                	sub    %edx,%eax
+    3589:	f7 e3                	mul    %ebx
+    name[3] = '0' + (nfiles % 100) / 10;
+    358b:	89 f0                	mov    %esi,%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    358d:	c1 ea 05             	shr    $0x5,%edx
+    3590:	83 c2 30             	add    $0x30,%edx
+    3593:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    3596:	f7 eb                	imul   %ebx
+    3598:	89 f0                	mov    %esi,%eax
+    359a:	c1 fa 05             	sar    $0x5,%edx
+    359d:	29 ca                	sub    %ecx,%edx
+    359f:	6b d2 64             	imul   $0x64,%edx,%edx
+    35a2:	29 d0                	sub    %edx,%eax
+    35a4:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
+    35a9:	f7 e2                	mul    %edx
+    name[4] = '0' + (nfiles % 10);
+    35ab:	89 f0                	mov    %esi,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    35ad:	c1 ea 03             	shr    $0x3,%edx
+    35b0:	83 c2 30             	add    $0x30,%edx
+    35b3:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    35b6:	ba 67 66 66 66       	mov    $0x66666667,%edx
+    35bb:	f7 ea                	imul   %edx
+    35bd:	c1 fa 02             	sar    $0x2,%edx
+    35c0:	29 ca                	sub    %ecx,%edx
+    35c2:	89 f1                	mov    %esi,%ecx
+    nfiles--;
+    35c4:	83 ee 01             	sub    $0x1,%esi
+    name[4] = '0' + (nfiles % 10);
+    35c7:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    35ca:	01 c0                	add    %eax,%eax
+    35cc:	29 c1                	sub    %eax,%ecx
+    35ce:	89 c8                	mov    %ecx,%eax
+    35d0:	83 c0 30             	add    $0x30,%eax
+    35d3:	88 45 ac             	mov    %al,-0x54(%ebp)
+    unlink(name);
+    35d6:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    35d9:	50                   	push   %eax
+    35da:	e8 f4 03 00 00       	call   39d3 <unlink>
+  while(nfiles >= 0){
+    35df:	83 c4 10             	add    $0x10,%esp
+    35e2:	83 fe ff             	cmp    $0xffffffff,%esi
+    35e5:	0f 85 75 ff ff ff    	jne    3560 <fsfull+0x130>
+  printf(1, "fsfull test finished\n");
+    35eb:	83 ec 08             	sub    $0x8,%esp
+    35ee:	68 04 4e 00 00       	push   $0x4e04
+    35f3:	6a 01                	push   $0x1
+    35f5:	e8 06 05 00 00       	call   3b00 <printf>
+}
+    35fa:	83 c4 10             	add    $0x10,%esp
+    35fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3600:	5b                   	pop    %ebx
+    3601:	5e                   	pop    %esi
+    3602:	5f                   	pop    %edi
+    3603:	5d                   	pop    %ebp
+    3604:	c3                   	ret    
+    3605:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    360c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003610 <uio>:
+{
+    3610:	f3 0f 1e fb          	endbr32 
+    3614:	55                   	push   %ebp
+    3615:	89 e5                	mov    %esp,%ebp
+    3617:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "uio test\n");
+    361a:	68 1a 4e 00 00       	push   $0x4e1a
+    361f:	6a 01                	push   $0x1
+    3621:	e8 da 04 00 00       	call   3b00 <printf>
+  pid = fork();
+    3626:	e8 50 03 00 00       	call   397b <fork>
+  if(pid == 0){
+    362b:	83 c4 10             	add    $0x10,%esp
+    362e:	85 c0                	test   %eax,%eax
+    3630:	74 1b                	je     364d <uio+0x3d>
+  } else if(pid < 0){
+    3632:	78 3d                	js     3671 <uio+0x61>
+  wait();
+    3634:	e8 52 03 00 00       	call   398b <wait>
+  printf(1, "uio test done\n");
+    3639:	83 ec 08             	sub    $0x8,%esp
+    363c:	68 24 4e 00 00       	push   $0x4e24
+    3641:	6a 01                	push   $0x1
+    3643:	e8 b8 04 00 00       	call   3b00 <printf>
+}
+    3648:	83 c4 10             	add    $0x10,%esp
+    364b:	c9                   	leave  
+    364c:	c3                   	ret    
+    asm volatile("outb %0,%1"::"a"(val), "d" (port));
+    364d:	b8 09 00 00 00       	mov    $0x9,%eax
+    3652:	ba 70 00 00 00       	mov    $0x70,%edx
+    3657:	ee                   	out    %al,(%dx)
+    asm volatile("inb %1,%0" : "=a" (val) : "d" (port));
+    3658:	ba 71 00 00 00       	mov    $0x71,%edx
+    365d:	ec                   	in     (%dx),%al
+    printf(1, "uio: uio succeeded; test FAILED\n");
+    365e:	52                   	push   %edx
+    365f:	52                   	push   %edx
+    3660:	68 b0 55 00 00       	push   $0x55b0
+    3665:	6a 01                	push   $0x1
+    3667:	e8 94 04 00 00       	call   3b00 <printf>
+    exit();
+    366c:	e8 12 03 00 00       	call   3983 <exit>
+    printf (1, "fork failed\n");
+    3671:	50                   	push   %eax
+    3672:	50                   	push   %eax
+    3673:	68 a9 4d 00 00       	push   $0x4da9
+    3678:	6a 01                	push   $0x1
+    367a:	e8 81 04 00 00       	call   3b00 <printf>
+    exit();
+    367f:	e8 ff 02 00 00       	call   3983 <exit>
+    3684:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    368b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    368f:	90                   	nop
+
+00003690 <argptest>:
+{
+    3690:	f3 0f 1e fb          	endbr32 
+    3694:	55                   	push   %ebp
+    3695:	89 e5                	mov    %esp,%ebp
+    3697:	53                   	push   %ebx
+    3698:	83 ec 0c             	sub    $0xc,%esp
+  fd = open("init", O_RDONLY);
+    369b:	6a 00                	push   $0x0
+    369d:	68 33 4e 00 00       	push   $0x4e33
+    36a2:	e8 1c 03 00 00       	call   39c3 <open>
+  if (fd < 0) {
+    36a7:	83 c4 10             	add    $0x10,%esp
+    36aa:	85 c0                	test   %eax,%eax
+    36ac:	78 39                	js     36e7 <argptest+0x57>
+  read(fd, sbrk(0) - 1, -1);
+    36ae:	83 ec 0c             	sub    $0xc,%esp
+    36b1:	89 c3                	mov    %eax,%ebx
+    36b3:	6a 00                	push   $0x0
+    36b5:	e8 51 03 00 00       	call   3a0b <sbrk>
+    36ba:	83 c4 0c             	add    $0xc,%esp
+    36bd:	83 e8 01             	sub    $0x1,%eax
+    36c0:	6a ff                	push   $0xffffffff
+    36c2:	50                   	push   %eax
+    36c3:	53                   	push   %ebx
+    36c4:	e8 d2 02 00 00       	call   399b <read>
+  close(fd);
+    36c9:	89 1c 24             	mov    %ebx,(%esp)
+    36cc:	e8 da 02 00 00       	call   39ab <close>
+  printf(1, "arg test passed\n");
+    36d1:	58                   	pop    %eax
+    36d2:	5a                   	pop    %edx
+    36d3:	68 45 4e 00 00       	push   $0x4e45
+    36d8:	6a 01                	push   $0x1
+    36da:	e8 21 04 00 00       	call   3b00 <printf>
+}
+    36df:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    36e2:	83 c4 10             	add    $0x10,%esp
+    36e5:	c9                   	leave  
+    36e6:	c3                   	ret    
+    printf(2, "open failed\n");
+    36e7:	51                   	push   %ecx
+    36e8:	51                   	push   %ecx
+    36e9:	68 38 4e 00 00       	push   $0x4e38
+    36ee:	6a 02                	push   $0x2
+    36f0:	e8 0b 04 00 00       	call   3b00 <printf>
+    exit();
+    36f5:	e8 89 02 00 00       	call   3983 <exit>
+    36fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00003700 <rand>:
+{
+    3700:	f3 0f 1e fb          	endbr32 
+  randstate = randstate * 1664525 + 1013904223;
+    3704:	69 05 fc 5e 00 00 0d 	imul   $0x19660d,0x5efc,%eax
+    370b:	66 19 00 
+    370e:	05 5f f3 6e 3c       	add    $0x3c6ef35f,%eax
+    3713:	a3 fc 5e 00 00       	mov    %eax,0x5efc
+}
+    3718:	c3                   	ret    
+    3719:	66 90                	xchg   %ax,%ax
+    371b:	66 90                	xchg   %ax,%ax
+    371d:	66 90                	xchg   %ax,%ax
+    371f:	90                   	nop
+
+00003720 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+    3720:	f3 0f 1e fb          	endbr32 
+    3724:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+    3725:	31 c0                	xor    %eax,%eax
+{
+    3727:	89 e5                	mov    %esp,%ebp
+    3729:	53                   	push   %ebx
+    372a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+    372d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+    3730:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+    3734:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+    3737:	83 c0 01             	add    $0x1,%eax
+    373a:	84 d2                	test   %dl,%dl
+    373c:	75 f2                	jne    3730 <strcpy+0x10>
+    ;
+  return os;
+}
+    373e:	89 c8                	mov    %ecx,%eax
+    3740:	5b                   	pop    %ebx
+    3741:	5d                   	pop    %ebp
+    3742:	c3                   	ret    
+    3743:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    374a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00003750 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+    3750:	f3 0f 1e fb          	endbr32 
+    3754:	55                   	push   %ebp
+    3755:	89 e5                	mov    %esp,%ebp
+    3757:	53                   	push   %ebx
+    3758:	8b 4d 08             	mov    0x8(%ebp),%ecx
+    375b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+    375e:	0f b6 01             	movzbl (%ecx),%eax
+    3761:	0f b6 1a             	movzbl (%edx),%ebx
+    3764:	84 c0                	test   %al,%al
+    3766:	75 19                	jne    3781 <strcmp+0x31>
+    3768:	eb 26                	jmp    3790 <strcmp+0x40>
+    376a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3770:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+    3774:	83 c1 01             	add    $0x1,%ecx
+    3777:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+    377a:	0f b6 1a             	movzbl (%edx),%ebx
+    377d:	84 c0                	test   %al,%al
+    377f:	74 0f                	je     3790 <strcmp+0x40>
+    3781:	38 d8                	cmp    %bl,%al
+    3783:	74 eb                	je     3770 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+    3785:	29 d8                	sub    %ebx,%eax
+}
+    3787:	5b                   	pop    %ebx
+    3788:	5d                   	pop    %ebp
+    3789:	c3                   	ret    
+    378a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3790:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+    3792:	29 d8                	sub    %ebx,%eax
+}
+    3794:	5b                   	pop    %ebx
+    3795:	5d                   	pop    %ebp
+    3796:	c3                   	ret    
+    3797:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    379e:	66 90                	xchg   %ax,%ax
+
+000037a0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+    37a0:	f3 0f 1e fb          	endbr32 
+    37a4:	55                   	push   %ebp
+    37a5:	89 e5                	mov    %esp,%ebp
+    37a7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+    37aa:	80 3a 00             	cmpb   $0x0,(%edx)
+    37ad:	74 21                	je     37d0 <strlen+0x30>
+    37af:	31 c0                	xor    %eax,%eax
+    37b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    37b8:	83 c0 01             	add    $0x1,%eax
+    37bb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+    37bf:	89 c1                	mov    %eax,%ecx
+    37c1:	75 f5                	jne    37b8 <strlen+0x18>
+    ;
+  return n;
+}
+    37c3:	89 c8                	mov    %ecx,%eax
+    37c5:	5d                   	pop    %ebp
+    37c6:	c3                   	ret    
+    37c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    37ce:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+    37d0:	31 c9                	xor    %ecx,%ecx
+}
+    37d2:	5d                   	pop    %ebp
+    37d3:	89 c8                	mov    %ecx,%eax
+    37d5:	c3                   	ret    
+    37d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    37dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000037e0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+    37e0:	f3 0f 1e fb          	endbr32 
+    37e4:	55                   	push   %ebp
+    37e5:	89 e5                	mov    %esp,%ebp
+    37e7:	57                   	push   %edi
+    37e8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+    37eb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+    37ee:	8b 45 0c             	mov    0xc(%ebp),%eax
+    37f1:	89 d7                	mov    %edx,%edi
+    37f3:	fc                   	cld    
+    37f4:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+    37f6:	89 d0                	mov    %edx,%eax
+    37f8:	5f                   	pop    %edi
+    37f9:	5d                   	pop    %ebp
+    37fa:	c3                   	ret    
+    37fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    37ff:	90                   	nop
+
+00003800 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+    3800:	f3 0f 1e fb          	endbr32 
+    3804:	55                   	push   %ebp
+    3805:	89 e5                	mov    %esp,%ebp
+    3807:	8b 45 08             	mov    0x8(%ebp),%eax
+    380a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+    380e:	0f b6 10             	movzbl (%eax),%edx
+    3811:	84 d2                	test   %dl,%dl
+    3813:	75 16                	jne    382b <strchr+0x2b>
+    3815:	eb 21                	jmp    3838 <strchr+0x38>
+    3817:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    381e:	66 90                	xchg   %ax,%ax
+    3820:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+    3824:	83 c0 01             	add    $0x1,%eax
+    3827:	84 d2                	test   %dl,%dl
+    3829:	74 0d                	je     3838 <strchr+0x38>
+    if(*s == c)
+    382b:	38 d1                	cmp    %dl,%cl
+    382d:	75 f1                	jne    3820 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+    382f:	5d                   	pop    %ebp
+    3830:	c3                   	ret    
+    3831:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+    3838:	31 c0                	xor    %eax,%eax
+}
+    383a:	5d                   	pop    %ebp
+    383b:	c3                   	ret    
+    383c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003840 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+    3840:	f3 0f 1e fb          	endbr32 
+    3844:	55                   	push   %ebp
+    3845:	89 e5                	mov    %esp,%ebp
+    3847:	57                   	push   %edi
+    3848:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    3849:	31 f6                	xor    %esi,%esi
+{
+    384b:	53                   	push   %ebx
+    384c:	89 f3                	mov    %esi,%ebx
+    384e:	83 ec 1c             	sub    $0x1c,%esp
+    3851:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+    3854:	eb 33                	jmp    3889 <gets+0x49>
+    3856:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    385d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+    3860:	83 ec 04             	sub    $0x4,%esp
+    3863:	8d 45 e7             	lea    -0x19(%ebp),%eax
+    3866:	6a 01                	push   $0x1
+    3868:	50                   	push   %eax
+    3869:	6a 00                	push   $0x0
+    386b:	e8 2b 01 00 00       	call   399b <read>
+    if(cc < 1)
+    3870:	83 c4 10             	add    $0x10,%esp
+    3873:	85 c0                	test   %eax,%eax
+    3875:	7e 1c                	jle    3893 <gets+0x53>
+      break;
+    buf[i++] = c;
+    3877:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+    387b:	83 c7 01             	add    $0x1,%edi
+    387e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+    3881:	3c 0a                	cmp    $0xa,%al
+    3883:	74 23                	je     38a8 <gets+0x68>
+    3885:	3c 0d                	cmp    $0xd,%al
+    3887:	74 1f                	je     38a8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+    3889:	83 c3 01             	add    $0x1,%ebx
+    388c:	89 fe                	mov    %edi,%esi
+    388e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+    3891:	7c cd                	jl     3860 <gets+0x20>
+    3893:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+    3895:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+    3898:	c6 03 00             	movb   $0x0,(%ebx)
+}
+    389b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    389e:	5b                   	pop    %ebx
+    389f:	5e                   	pop    %esi
+    38a0:	5f                   	pop    %edi
+    38a1:	5d                   	pop    %ebp
+    38a2:	c3                   	ret    
+    38a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    38a7:	90                   	nop
+    38a8:	8b 75 08             	mov    0x8(%ebp),%esi
+    38ab:	8b 45 08             	mov    0x8(%ebp),%eax
+    38ae:	01 de                	add    %ebx,%esi
+    38b0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+    38b2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+    38b5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    38b8:	5b                   	pop    %ebx
+    38b9:	5e                   	pop    %esi
+    38ba:	5f                   	pop    %edi
+    38bb:	5d                   	pop    %ebp
+    38bc:	c3                   	ret    
+    38bd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000038c0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+    38c0:	f3 0f 1e fb          	endbr32 
+    38c4:	55                   	push   %ebp
+    38c5:	89 e5                	mov    %esp,%ebp
+    38c7:	56                   	push   %esi
+    38c8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+    38c9:	83 ec 08             	sub    $0x8,%esp
+    38cc:	6a 00                	push   $0x0
+    38ce:	ff 75 08             	pushl  0x8(%ebp)
+    38d1:	e8 ed 00 00 00       	call   39c3 <open>
+  if(fd < 0)
+    38d6:	83 c4 10             	add    $0x10,%esp
+    38d9:	85 c0                	test   %eax,%eax
+    38db:	78 2b                	js     3908 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+    38dd:	83 ec 08             	sub    $0x8,%esp
+    38e0:	ff 75 0c             	pushl  0xc(%ebp)
+    38e3:	89 c3                	mov    %eax,%ebx
+    38e5:	50                   	push   %eax
+    38e6:	e8 f0 00 00 00       	call   39db <fstat>
+  close(fd);
+    38eb:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+    38ee:	89 c6                	mov    %eax,%esi
+  close(fd);
+    38f0:	e8 b6 00 00 00       	call   39ab <close>
+  return r;
+    38f5:	83 c4 10             	add    $0x10,%esp
+}
+    38f8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    38fb:	89 f0                	mov    %esi,%eax
+    38fd:	5b                   	pop    %ebx
+    38fe:	5e                   	pop    %esi
+    38ff:	5d                   	pop    %ebp
+    3900:	c3                   	ret    
+    3901:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+    3908:	be ff ff ff ff       	mov    $0xffffffff,%esi
+    390d:	eb e9                	jmp    38f8 <stat+0x38>
+    390f:	90                   	nop
+
+00003910 <atoi>:
+
+int
+atoi(const char *s)
+{
+    3910:	f3 0f 1e fb          	endbr32 
+    3914:	55                   	push   %ebp
+    3915:	89 e5                	mov    %esp,%ebp
+    3917:	53                   	push   %ebx
+    3918:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+    391b:	0f be 02             	movsbl (%edx),%eax
+    391e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+    3921:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+    3924:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+    3929:	77 1a                	ja     3945 <atoi+0x35>
+    392b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    392f:	90                   	nop
+    n = n*10 + *s++ - '0';
+    3930:	83 c2 01             	add    $0x1,%edx
+    3933:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+    3936:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+    393a:	0f be 02             	movsbl (%edx),%eax
+    393d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+    3940:	80 fb 09             	cmp    $0x9,%bl
+    3943:	76 eb                	jbe    3930 <atoi+0x20>
+  return n;
+}
+    3945:	89 c8                	mov    %ecx,%eax
+    3947:	5b                   	pop    %ebx
+    3948:	5d                   	pop    %ebp
+    3949:	c3                   	ret    
+    394a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00003950 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+    3950:	f3 0f 1e fb          	endbr32 
+    3954:	55                   	push   %ebp
+    3955:	89 e5                	mov    %esp,%ebp
+    3957:	57                   	push   %edi
+    3958:	8b 45 10             	mov    0x10(%ebp),%eax
+    395b:	8b 55 08             	mov    0x8(%ebp),%edx
+    395e:	56                   	push   %esi
+    395f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+    3962:	85 c0                	test   %eax,%eax
+    3964:	7e 0f                	jle    3975 <memmove+0x25>
+    3966:	01 d0                	add    %edx,%eax
+  dst = vdst;
+    3968:	89 d7                	mov    %edx,%edi
+    396a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+    3970:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+    3971:	39 f8                	cmp    %edi,%eax
+    3973:	75 fb                	jne    3970 <memmove+0x20>
+  return vdst;
+}
+    3975:	5e                   	pop    %esi
+    3976:	89 d0                	mov    %edx,%eax
+    3978:	5f                   	pop    %edi
+    3979:	5d                   	pop    %ebp
+    397a:	c3                   	ret    
+
+0000397b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+    397b:	b8 01 00 00 00       	mov    $0x1,%eax
+    3980:	cd 40                	int    $0x40
+    3982:	c3                   	ret    
+
+00003983 <exit>:
+SYSCALL(exit)
+    3983:	b8 02 00 00 00       	mov    $0x2,%eax
+    3988:	cd 40                	int    $0x40
+    398a:	c3                   	ret    
+
+0000398b <wait>:
+SYSCALL(wait)
+    398b:	b8 03 00 00 00       	mov    $0x3,%eax
+    3990:	cd 40                	int    $0x40
+    3992:	c3                   	ret    
+
+00003993 <pipe>:
+SYSCALL(pipe)
+    3993:	b8 04 00 00 00       	mov    $0x4,%eax
+    3998:	cd 40                	int    $0x40
+    399a:	c3                   	ret    
+
+0000399b <read>:
+SYSCALL(read)
+    399b:	b8 05 00 00 00       	mov    $0x5,%eax
+    39a0:	cd 40                	int    $0x40
+    39a2:	c3                   	ret    
+
+000039a3 <write>:
+SYSCALL(write)
+    39a3:	b8 10 00 00 00       	mov    $0x10,%eax
+    39a8:	cd 40                	int    $0x40
+    39aa:	c3                   	ret    
+
+000039ab <close>:
+SYSCALL(close)
+    39ab:	b8 15 00 00 00       	mov    $0x15,%eax
+    39b0:	cd 40                	int    $0x40
+    39b2:	c3                   	ret    
+
+000039b3 <kill>:
+SYSCALL(kill)
+    39b3:	b8 06 00 00 00       	mov    $0x6,%eax
+    39b8:	cd 40                	int    $0x40
+    39ba:	c3                   	ret    
+
+000039bb <exec>:
+SYSCALL(exec)
+    39bb:	b8 07 00 00 00       	mov    $0x7,%eax
+    39c0:	cd 40                	int    $0x40
+    39c2:	c3                   	ret    
+
+000039c3 <open>:
+SYSCALL(open)
+    39c3:	b8 0f 00 00 00       	mov    $0xf,%eax
+    39c8:	cd 40                	int    $0x40
+    39ca:	c3                   	ret    
+
+000039cb <mknod>:
+SYSCALL(mknod)
+    39cb:	b8 11 00 00 00       	mov    $0x11,%eax
+    39d0:	cd 40                	int    $0x40
+    39d2:	c3                   	ret    
+
+000039d3 <unlink>:
+SYSCALL(unlink)
+    39d3:	b8 12 00 00 00       	mov    $0x12,%eax
+    39d8:	cd 40                	int    $0x40
+    39da:	c3                   	ret    
+
+000039db <fstat>:
+SYSCALL(fstat)
+    39db:	b8 08 00 00 00       	mov    $0x8,%eax
+    39e0:	cd 40                	int    $0x40
+    39e2:	c3                   	ret    
+
+000039e3 <link>:
+SYSCALL(link)
+    39e3:	b8 13 00 00 00       	mov    $0x13,%eax
+    39e8:	cd 40                	int    $0x40
+    39ea:	c3                   	ret    
+
+000039eb <mkdir>:
+SYSCALL(mkdir)
+    39eb:	b8 14 00 00 00       	mov    $0x14,%eax
+    39f0:	cd 40                	int    $0x40
+    39f2:	c3                   	ret    
+
+000039f3 <chdir>:
+SYSCALL(chdir)
+    39f3:	b8 09 00 00 00       	mov    $0x9,%eax
+    39f8:	cd 40                	int    $0x40
+    39fa:	c3                   	ret    
+
+000039fb <dup>:
+SYSCALL(dup)
+    39fb:	b8 0a 00 00 00       	mov    $0xa,%eax
+    3a00:	cd 40                	int    $0x40
+    3a02:	c3                   	ret    
+
+00003a03 <getpid>:
+SYSCALL(getpid)
+    3a03:	b8 0b 00 00 00       	mov    $0xb,%eax
+    3a08:	cd 40                	int    $0x40
+    3a0a:	c3                   	ret    
+
+00003a0b <sbrk>:
+SYSCALL(sbrk)
+    3a0b:	b8 0c 00 00 00       	mov    $0xc,%eax
+    3a10:	cd 40                	int    $0x40
+    3a12:	c3                   	ret    
+
+00003a13 <sleep>:
+SYSCALL(sleep)
+    3a13:	b8 0d 00 00 00       	mov    $0xd,%eax
+    3a18:	cd 40                	int    $0x40
+    3a1a:	c3                   	ret    
+
+00003a1b <uptime>:
+SYSCALL(uptime)
+    3a1b:	b8 0e 00 00 00       	mov    $0xe,%eax
+    3a20:	cd 40                	int    $0x40
+    3a22:	c3                   	ret    
+
+00003a23 <getNumProc>:
+SYSCALL(getNumProc)
+    3a23:	b8 16 00 00 00       	mov    $0x16,%eax
+    3a28:	cd 40                	int    $0x40
+    3a2a:	c3                   	ret    
+
+00003a2b <getMaxPid>:
+SYSCALL(getMaxPid)
+    3a2b:	b8 17 00 00 00       	mov    $0x17,%eax
+    3a30:	cd 40                	int    $0x40
+    3a32:	c3                   	ret    
+
+00003a33 <getProcInfo>:
+SYSCALL(getProcInfo)
+    3a33:	b8 18 00 00 00       	mov    $0x18,%eax
+    3a38:	cd 40                	int    $0x40
+    3a3a:	c3                   	ret    
+
+00003a3b <set_burst_time>:
+SYSCALL(set_burst_time)
+    3a3b:	b8 19 00 00 00       	mov    $0x19,%eax
+    3a40:	cd 40                	int    $0x40
+    3a42:	c3                   	ret    
+
+00003a43 <get_burst_time>:
+    3a43:	b8 1a 00 00 00       	mov    $0x1a,%eax
+    3a48:	cd 40                	int    $0x40
+    3a4a:	c3                   	ret    
+    3a4b:	66 90                	xchg   %ax,%ax
+    3a4d:	66 90                	xchg   %ax,%ax
+    3a4f:	90                   	nop
+
+00003a50 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+    3a50:	55                   	push   %ebp
+    3a51:	89 e5                	mov    %esp,%ebp
+    3a53:	57                   	push   %edi
+    3a54:	56                   	push   %esi
+    3a55:	53                   	push   %ebx
+    3a56:	83 ec 3c             	sub    $0x3c,%esp
+    3a59:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+    3a5c:	89 d1                	mov    %edx,%ecx
+{
+    3a5e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+    3a61:	85 d2                	test   %edx,%edx
+    3a63:	0f 89 7f 00 00 00    	jns    3ae8 <printint+0x98>
+    3a69:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+    3a6d:	74 79                	je     3ae8 <printint+0x98>
+    neg = 1;
+    3a6f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+    3a76:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+    3a78:	31 db                	xor    %ebx,%ebx
+    3a7a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+    3a7d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+    3a80:	89 c8                	mov    %ecx,%eax
+    3a82:	31 d2                	xor    %edx,%edx
+    3a84:	89 cf                	mov    %ecx,%edi
+    3a86:	f7 75 c4             	divl   -0x3c(%ebp)
+    3a89:	0f b6 92 08 56 00 00 	movzbl 0x5608(%edx),%edx
+    3a90:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    3a93:	89 d8                	mov    %ebx,%eax
+    3a95:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+    3a98:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+    3a9b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+    3a9e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+    3aa1:	76 dd                	jbe    3a80 <printint+0x30>
+  if(neg)
+    3aa3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+    3aa6:	85 c9                	test   %ecx,%ecx
+    3aa8:	74 0c                	je     3ab6 <printint+0x66>
+    buf[i++] = '-';
+    3aaa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+    3aaf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+    3ab1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+    3ab6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+    3ab9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+    3abd:	eb 07                	jmp    3ac6 <printint+0x76>
+    3abf:	90                   	nop
+    3ac0:	0f b6 13             	movzbl (%ebx),%edx
+    3ac3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+    3ac6:	83 ec 04             	sub    $0x4,%esp
+    3ac9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+    3acc:	6a 01                	push   $0x1
+    3ace:	56                   	push   %esi
+    3acf:	57                   	push   %edi
+    3ad0:	e8 ce fe ff ff       	call   39a3 <write>
+  while(--i >= 0)
+    3ad5:	83 c4 10             	add    $0x10,%esp
+    3ad8:	39 de                	cmp    %ebx,%esi
+    3ada:	75 e4                	jne    3ac0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+    3adc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3adf:	5b                   	pop    %ebx
+    3ae0:	5e                   	pop    %esi
+    3ae1:	5f                   	pop    %edi
+    3ae2:	5d                   	pop    %ebp
+    3ae3:	c3                   	ret    
+    3ae4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+    3ae8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+    3aef:	eb 87                	jmp    3a78 <printint+0x28>
+    3af1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3af8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3aff:	90                   	nop
+
+00003b00 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+    3b00:	f3 0f 1e fb          	endbr32 
+    3b04:	55                   	push   %ebp
+    3b05:	89 e5                	mov    %esp,%ebp
+    3b07:	57                   	push   %edi
+    3b08:	56                   	push   %esi
+    3b09:	53                   	push   %ebx
+    3b0a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    3b0d:	8b 75 0c             	mov    0xc(%ebp),%esi
+    3b10:	0f b6 1e             	movzbl (%esi),%ebx
+    3b13:	84 db                	test   %bl,%bl
+    3b15:	0f 84 b4 00 00 00    	je     3bcf <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+    3b1b:	8d 45 10             	lea    0x10(%ebp),%eax
+    3b1e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+    3b21:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+    3b24:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+    3b26:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    3b29:	eb 33                	jmp    3b5e <printf+0x5e>
+    3b2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3b2f:	90                   	nop
+    3b30:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+    3b33:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+    3b38:	83 f8 25             	cmp    $0x25,%eax
+    3b3b:	74 17                	je     3b54 <printf+0x54>
+  write(fd, &c, 1);
+    3b3d:	83 ec 04             	sub    $0x4,%esp
+    3b40:	88 5d e7             	mov    %bl,-0x19(%ebp)
+    3b43:	6a 01                	push   $0x1
+    3b45:	57                   	push   %edi
+    3b46:	ff 75 08             	pushl  0x8(%ebp)
+    3b49:	e8 55 fe ff ff       	call   39a3 <write>
+    3b4e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+    3b51:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+    3b54:	0f b6 1e             	movzbl (%esi),%ebx
+    3b57:	83 c6 01             	add    $0x1,%esi
+    3b5a:	84 db                	test   %bl,%bl
+    3b5c:	74 71                	je     3bcf <printf+0xcf>
+    c = fmt[i] & 0xff;
+    3b5e:	0f be cb             	movsbl %bl,%ecx
+    3b61:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+    3b64:	85 d2                	test   %edx,%edx
+    3b66:	74 c8                	je     3b30 <printf+0x30>
+      }
+    } else if(state == '%'){
+    3b68:	83 fa 25             	cmp    $0x25,%edx
+    3b6b:	75 e7                	jne    3b54 <printf+0x54>
+      if(c == 'd'){
+    3b6d:	83 f8 64             	cmp    $0x64,%eax
+    3b70:	0f 84 9a 00 00 00    	je     3c10 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+    3b76:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+    3b7c:	83 f9 70             	cmp    $0x70,%ecx
+    3b7f:	74 5f                	je     3be0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+    3b81:	83 f8 73             	cmp    $0x73,%eax
+    3b84:	0f 84 d6 00 00 00    	je     3c60 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+    3b8a:	83 f8 63             	cmp    $0x63,%eax
+    3b8d:	0f 84 8d 00 00 00    	je     3c20 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+    3b93:	83 f8 25             	cmp    $0x25,%eax
+    3b96:	0f 84 b4 00 00 00    	je     3c50 <printf+0x150>
+  write(fd, &c, 1);
+    3b9c:	83 ec 04             	sub    $0x4,%esp
+    3b9f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+    3ba3:	6a 01                	push   $0x1
+    3ba5:	57                   	push   %edi
+    3ba6:	ff 75 08             	pushl  0x8(%ebp)
+    3ba9:	e8 f5 fd ff ff       	call   39a3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+    3bae:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+    3bb1:	83 c4 0c             	add    $0xc,%esp
+    3bb4:	6a 01                	push   $0x1
+    3bb6:	83 c6 01             	add    $0x1,%esi
+    3bb9:	57                   	push   %edi
+    3bba:	ff 75 08             	pushl  0x8(%ebp)
+    3bbd:	e8 e1 fd ff ff       	call   39a3 <write>
+  for(i = 0; fmt[i]; i++){
+    3bc2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+    3bc6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+    3bc9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+    3bcb:	84 db                	test   %bl,%bl
+    3bcd:	75 8f                	jne    3b5e <printf+0x5e>
+    }
+  }
+}
+    3bcf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3bd2:	5b                   	pop    %ebx
+    3bd3:	5e                   	pop    %esi
+    3bd4:	5f                   	pop    %edi
+    3bd5:	5d                   	pop    %ebp
+    3bd6:	c3                   	ret    
+    3bd7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3bde:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+    3be0:	83 ec 0c             	sub    $0xc,%esp
+    3be3:	b9 10 00 00 00       	mov    $0x10,%ecx
+    3be8:	6a 00                	push   $0x0
+    3bea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+    3bed:	8b 45 08             	mov    0x8(%ebp),%eax
+    3bf0:	8b 13                	mov    (%ebx),%edx
+    3bf2:	e8 59 fe ff ff       	call   3a50 <printint>
+        ap++;
+    3bf7:	89 d8                	mov    %ebx,%eax
+    3bf9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    3bfc:	31 d2                	xor    %edx,%edx
+        ap++;
+    3bfe:	83 c0 04             	add    $0x4,%eax
+    3c01:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    3c04:	e9 4b ff ff ff       	jmp    3b54 <printf+0x54>
+    3c09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+    3c10:	83 ec 0c             	sub    $0xc,%esp
+    3c13:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    3c18:	6a 01                	push   $0x1
+    3c1a:	eb ce                	jmp    3bea <printf+0xea>
+    3c1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+    3c20:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+    3c23:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+    3c26:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+    3c28:	6a 01                	push   $0x1
+        ap++;
+    3c2a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+    3c2d:	57                   	push   %edi
+    3c2e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+    3c31:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    3c34:	e8 6a fd ff ff       	call   39a3 <write>
+        ap++;
+    3c39:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+    3c3c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    3c3f:	31 d2                	xor    %edx,%edx
+    3c41:	e9 0e ff ff ff       	jmp    3b54 <printf+0x54>
+    3c46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3c4d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+    3c50:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+    3c53:	83 ec 04             	sub    $0x4,%esp
+    3c56:	e9 59 ff ff ff       	jmp    3bb4 <printf+0xb4>
+    3c5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3c5f:	90                   	nop
+        s = (char*)*ap;
+    3c60:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    3c63:	8b 18                	mov    (%eax),%ebx
+        ap++;
+    3c65:	83 c0 04             	add    $0x4,%eax
+    3c68:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+    3c6b:	85 db                	test   %ebx,%ebx
+    3c6d:	74 17                	je     3c86 <printf+0x186>
+        while(*s != 0){
+    3c6f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+    3c72:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+    3c74:	84 c0                	test   %al,%al
+    3c76:	0f 84 d8 fe ff ff    	je     3b54 <printf+0x54>
+    3c7c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    3c7f:	89 de                	mov    %ebx,%esi
+    3c81:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3c84:	eb 1a                	jmp    3ca0 <printf+0x1a0>
+          s = "(null)";
+    3c86:	bb fe 55 00 00       	mov    $0x55fe,%ebx
+        while(*s != 0){
+    3c8b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    3c8e:	b8 28 00 00 00       	mov    $0x28,%eax
+    3c93:	89 de                	mov    %ebx,%esi
+    3c95:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3c98:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3c9f:	90                   	nop
+  write(fd, &c, 1);
+    3ca0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+    3ca3:	83 c6 01             	add    $0x1,%esi
+    3ca6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    3ca9:	6a 01                	push   $0x1
+    3cab:	57                   	push   %edi
+    3cac:	53                   	push   %ebx
+    3cad:	e8 f1 fc ff ff       	call   39a3 <write>
+        while(*s != 0){
+    3cb2:	0f b6 06             	movzbl (%esi),%eax
+    3cb5:	83 c4 10             	add    $0x10,%esp
+    3cb8:	84 c0                	test   %al,%al
+    3cba:	75 e4                	jne    3ca0 <printf+0x1a0>
+    3cbc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+    3cbf:	31 d2                	xor    %edx,%edx
+    3cc1:	e9 8e fe ff ff       	jmp    3b54 <printf+0x54>
+    3cc6:	66 90                	xchg   %ax,%ax
+    3cc8:	66 90                	xchg   %ax,%ax
+    3cca:	66 90                	xchg   %ax,%ax
+    3ccc:	66 90                	xchg   %ax,%ax
+    3cce:	66 90                	xchg   %ax,%ax
+
+00003cd0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    3cd0:	f3 0f 1e fb          	endbr32 
+    3cd4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3cd5:	a1 a0 5f 00 00       	mov    0x5fa0,%eax
+{
+    3cda:	89 e5                	mov    %esp,%ebp
+    3cdc:	57                   	push   %edi
+    3cdd:	56                   	push   %esi
+    3cde:	53                   	push   %ebx
+    3cdf:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3ce2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+    3ce4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3ce7:	39 c8                	cmp    %ecx,%eax
+    3ce9:	73 15                	jae    3d00 <free+0x30>
+    3ceb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3cef:	90                   	nop
+    3cf0:	39 d1                	cmp    %edx,%ecx
+    3cf2:	72 14                	jb     3d08 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3cf4:	39 d0                	cmp    %edx,%eax
+    3cf6:	73 10                	jae    3d08 <free+0x38>
+{
+    3cf8:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3cfa:	8b 10                	mov    (%eax),%edx
+    3cfc:	39 c8                	cmp    %ecx,%eax
+    3cfe:	72 f0                	jb     3cf0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3d00:	39 d0                	cmp    %edx,%eax
+    3d02:	72 f4                	jb     3cf8 <free+0x28>
+    3d04:	39 d1                	cmp    %edx,%ecx
+    3d06:	73 f0                	jae    3cf8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    3d08:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    3d0b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    3d0e:	39 fa                	cmp    %edi,%edx
+    3d10:	74 1e                	je     3d30 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+    3d12:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    3d15:	8b 50 04             	mov    0x4(%eax),%edx
+    3d18:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    3d1b:	39 f1                	cmp    %esi,%ecx
+    3d1d:	74 28                	je     3d47 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+    3d1f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+    3d21:	5b                   	pop    %ebx
+  freep = p;
+    3d22:	a3 a0 5f 00 00       	mov    %eax,0x5fa0
+}
+    3d27:	5e                   	pop    %esi
+    3d28:	5f                   	pop    %edi
+    3d29:	5d                   	pop    %ebp
+    3d2a:	c3                   	ret    
+    3d2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3d2f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+    3d30:	03 72 04             	add    0x4(%edx),%esi
+    3d33:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    3d36:	8b 10                	mov    (%eax),%edx
+    3d38:	8b 12                	mov    (%edx),%edx
+    3d3a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    3d3d:	8b 50 04             	mov    0x4(%eax),%edx
+    3d40:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    3d43:	39 f1                	cmp    %esi,%ecx
+    3d45:	75 d8                	jne    3d1f <free+0x4f>
+    p->s.size += bp->s.size;
+    3d47:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+    3d4a:	a3 a0 5f 00 00       	mov    %eax,0x5fa0
+    p->s.size += bp->s.size;
+    3d4f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+    3d52:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    3d55:	89 10                	mov    %edx,(%eax)
+}
+    3d57:	5b                   	pop    %ebx
+    3d58:	5e                   	pop    %esi
+    3d59:	5f                   	pop    %edi
+    3d5a:	5d                   	pop    %ebp
+    3d5b:	c3                   	ret    
+    3d5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003d60 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    3d60:	f3 0f 1e fb          	endbr32 
+    3d64:	55                   	push   %ebp
+    3d65:	89 e5                	mov    %esp,%ebp
+    3d67:	57                   	push   %edi
+    3d68:	56                   	push   %esi
+    3d69:	53                   	push   %ebx
+    3d6a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    3d6d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+    3d70:	8b 3d a0 5f 00 00    	mov    0x5fa0,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    3d76:	8d 70 07             	lea    0x7(%eax),%esi
+    3d79:	c1 ee 03             	shr    $0x3,%esi
+    3d7c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+    3d7f:	85 ff                	test   %edi,%edi
+    3d81:	0f 84 a9 00 00 00    	je     3e30 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3d87:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+    3d89:	8b 48 04             	mov    0x4(%eax),%ecx
+    3d8c:	39 f1                	cmp    %esi,%ecx
+    3d8e:	73 6d                	jae    3dfd <malloc+0x9d>
+    3d90:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+    3d96:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    3d9b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+    3d9e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+    3da5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+    3da8:	eb 17                	jmp    3dc1 <malloc+0x61>
+    3daa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3db0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+    3db2:	8b 4a 04             	mov    0x4(%edx),%ecx
+    3db5:	39 f1                	cmp    %esi,%ecx
+    3db7:	73 4f                	jae    3e08 <malloc+0xa8>
+    3db9:	8b 3d a0 5f 00 00    	mov    0x5fa0,%edi
+    3dbf:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    3dc1:	39 c7                	cmp    %eax,%edi
+    3dc3:	75 eb                	jne    3db0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+    3dc5:	83 ec 0c             	sub    $0xc,%esp
+    3dc8:	ff 75 e4             	pushl  -0x1c(%ebp)
+    3dcb:	e8 3b fc ff ff       	call   3a0b <sbrk>
+  if(p == (char*)-1)
+    3dd0:	83 c4 10             	add    $0x10,%esp
+    3dd3:	83 f8 ff             	cmp    $0xffffffff,%eax
+    3dd6:	74 1b                	je     3df3 <malloc+0x93>
+  hp->s.size = nu;
+    3dd8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+    3ddb:	83 ec 0c             	sub    $0xc,%esp
+    3dde:	83 c0 08             	add    $0x8,%eax
+    3de1:	50                   	push   %eax
+    3de2:	e8 e9 fe ff ff       	call   3cd0 <free>
+  return freep;
+    3de7:	a1 a0 5f 00 00       	mov    0x5fa0,%eax
+      if((p = morecore(nunits)) == 0)
+    3dec:	83 c4 10             	add    $0x10,%esp
+    3def:	85 c0                	test   %eax,%eax
+    3df1:	75 bd                	jne    3db0 <malloc+0x50>
+        return 0;
+  }
+}
+    3df3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+    3df6:	31 c0                	xor    %eax,%eax
+}
+    3df8:	5b                   	pop    %ebx
+    3df9:	5e                   	pop    %esi
+    3dfa:	5f                   	pop    %edi
+    3dfb:	5d                   	pop    %ebp
+    3dfc:	c3                   	ret    
+    if(p->s.size >= nunits){
+    3dfd:	89 c2                	mov    %eax,%edx
+    3dff:	89 f8                	mov    %edi,%eax
+    3e01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+    3e08:	39 ce                	cmp    %ecx,%esi
+    3e0a:	74 54                	je     3e60 <malloc+0x100>
+        p->s.size -= nunits;
+    3e0c:	29 f1                	sub    %esi,%ecx
+    3e0e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+    3e11:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+    3e14:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+    3e17:	a3 a0 5f 00 00       	mov    %eax,0x5fa0
+}
+    3e1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+    3e1f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+    3e22:	5b                   	pop    %ebx
+    3e23:	5e                   	pop    %esi
+    3e24:	5f                   	pop    %edi
+    3e25:	5d                   	pop    %ebp
+    3e26:	c3                   	ret    
+    3e27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3e2e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+    3e30:	c7 05 a0 5f 00 00 a4 	movl   $0x5fa4,0x5fa0
+    3e37:	5f 00 00 
+    base.s.size = 0;
+    3e3a:	bf a4 5f 00 00       	mov    $0x5fa4,%edi
+    base.s.ptr = freep = prevp = &base;
+    3e3f:	c7 05 a4 5f 00 00 a4 	movl   $0x5fa4,0x5fa4
+    3e46:	5f 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3e49:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+    3e4b:	c7 05 a8 5f 00 00 00 	movl   $0x0,0x5fa8
+    3e52:	00 00 00 
+    if(p->s.size >= nunits){
+    3e55:	e9 36 ff ff ff       	jmp    3d90 <malloc+0x30>
+    3e5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+    3e60:	8b 0a                	mov    (%edx),%ecx
+    3e62:	89 08                	mov    %ecx,(%eax)
+    3e64:	eb b1                	jmp    3e17 <malloc+0xb7>
diff -ruN xv6-public/usertests.d xv6-new/usertests.d
--- xv6-public/usertests.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/usertests.d	2022-10-07 22:43:44.791886860 +0530
@@ -0,0 +1,2 @@
+usertests.o: usertests.c /usr/include/stdc-predef.h param.h types.h \
+ stat.h user.h fs.h fcntl.h syscall.h traps.h memlayout.h
Binary files xv6-public/usertests.o and xv6-new/usertests.o differ
diff -ruN xv6-public/usertests.sym xv6-new/usertests.sym
--- xv6-public/usertests.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/usertests.sym	2022-10-07 22:43:44.791886860 +0530
@@ -0,0 +1,108 @@
+00000000 .text
+00003e68 .rodata
+0000561c .eh_frame
+00005efc .data
+00005f20 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 usertests.c
+00005f20 args.1460
+00000000 ulib.c
+00000000 printf.c
+00003a50 printint
+00005608 digits.1096
+00000000 umalloc.c
+00005fa0 freep
+00005fa4 base
+00003720 strcpy
+00000d60 exitwait
+00003b00 printf
+00005f00 stdout
+00003330 bigargtest
+00003950 memmove
+00000310 openiputtest
+000039cb mknod
+00003840 gets
+00003a03 getpid
+00000a60 pipe1
+00002c00 iref
+00003d60 malloc
+00003a13 sleep
+00003a43 get_burst_time
+00000210 exitiputtest
+00003430 fsfull
+00001c60 bigdir
+00002d20 forktest
+00000690 writetest1
+00002490 bigwrite
+00000eb0 sharedfd
+00005efc randstate
+00003993 pipe
+00005fc0 uninit
+00002a00 dirfile
+000039a3 write
+000032c0 bsstest
+00005f04 echoargv
+000039db fstat
+000039b3 kill
+00003200 validatetest
+00002880 rmdot
+000039f3 chdir
+00000a10 exectest
+000039bb exec
+0000398b wait
+00003700 rand
+0000399b read
+00000c00 preempt
+000039d3 unlink
+00003690 argptest
+00000de0 mem
+0000397b fork
+00003a0b sbrk
+00003a1b uptime
+00005f18 __bss_start
+000037e0 memset
+00000860 createtest
+00000000 main
+00003a3b set_burst_time
+00001270 createdelete
+00003750 strcmp
+000004b0 writetest
+000039fb dup
+00002dd0 sbrktest
+00000410 opentest
+00001da0 subdir
+00003a2b getMaxPid
+00003610 uio
+00001630 linktest
+000086e0 buf
+00000920 dirtest
+00000120 iputtest
+00003a23 getNumProc
+00003a33 getProcInfo
+000038c0 stat
+00002570 bigfile
+00005f18 _edata
+0000a6e4 _end
+000014a0 unlinkread
+000039e3 link
+00003983 exit
+00003910 atoi
+00001b50 linkunlink
+0000a6e0 name
+000037a0 strlen
+000039c3 open
+00003800 strchr
+00001850 concreate
+00002740 fourteen
+000031f0 validateint
+00001070 fourfiles
+000039eb mkdir
+000039ab close
+00003cd0 free
diff -ruN xv6-public/usys.S xv6-new/usys.S
--- xv6-public/usys.S	2022-10-07 22:44:57.841887896 +0530
+++ xv6-new/usys.S	2022-10-05 11:31:05.713731000 +0530
@@ -29,3 +29,8 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(getNumProc)
+SYSCALL(getMaxPid)
+SYSCALL(getProcInfo)
+SYSCALL(set_burst_time)
+SYSCALL(get_burst_time)
\ No newline at end of file
Binary files xv6-public/usys.o and xv6-new/usys.o differ
Binary files xv6-public/vm.o and xv6-new/vm.o differ
diff -ruN xv6-public/wc.asm xv6-new/wc.asm
--- xv6-public/wc.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/wc.asm	2022-10-07 22:43:44.791886860 +0530
@@ -0,0 +1,1360 @@
+
+_wc:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	be 01 00 00 00       	mov    $0x1,%esi
+  18:	53                   	push   %ebx
+  19:	51                   	push   %ecx
+  1a:	83 ec 18             	sub    $0x18,%esp
+  1d:	8b 01                	mov    (%ecx),%eax
+  1f:	8b 59 04             	mov    0x4(%ecx),%ebx
+  22:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  25:	83 c3 04             	add    $0x4,%ebx
+  int fd, i;
+
+  if(argc <= 1){
+  28:	83 f8 01             	cmp    $0x1,%eax
+  2b:	7e 52                	jle    7f <main+0x7f>
+  2d:	8d 76 00             	lea    0x0(%esi),%esi
+    wc(0, "");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+  30:	83 ec 08             	sub    $0x8,%esp
+  33:	6a 00                	push   $0x0
+  35:	ff 33                	pushl  (%ebx)
+  37:	e8 f7 03 00 00       	call   433 <open>
+  3c:	83 c4 10             	add    $0x10,%esp
+  3f:	89 c7                	mov    %eax,%edi
+  41:	85 c0                	test   %eax,%eax
+  43:	78 26                	js     6b <main+0x6b>
+      printf(1, "wc: cannot open %s\n", argv[i]);
+      exit();
+    }
+    wc(fd, argv[i]);
+  45:	83 ec 08             	sub    $0x8,%esp
+  48:	ff 33                	pushl  (%ebx)
+  for(i = 1; i < argc; i++){
+  4a:	83 c6 01             	add    $0x1,%esi
+  4d:	83 c3 04             	add    $0x4,%ebx
+    wc(fd, argv[i]);
+  50:	50                   	push   %eax
+  51:	e8 4a 00 00 00       	call   a0 <wc>
+    close(fd);
+  56:	89 3c 24             	mov    %edi,(%esp)
+  59:	e8 bd 03 00 00       	call   41b <close>
+  for(i = 1; i < argc; i++){
+  5e:	83 c4 10             	add    $0x10,%esp
+  61:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  64:	75 ca                	jne    30 <main+0x30>
+  }
+  exit();
+  66:	e8 88 03 00 00       	call   3f3 <exit>
+      printf(1, "wc: cannot open %s\n", argv[i]);
+  6b:	50                   	push   %eax
+  6c:	ff 33                	pushl  (%ebx)
+  6e:	68 fb 08 00 00       	push   $0x8fb
+  73:	6a 01                	push   $0x1
+  75:	e8 f6 04 00 00       	call   570 <printf>
+      exit();
+  7a:	e8 74 03 00 00       	call   3f3 <exit>
+    wc(0, "");
+  7f:	52                   	push   %edx
+  80:	52                   	push   %edx
+  81:	68 ed 08 00 00       	push   $0x8ed
+  86:	6a 00                	push   $0x0
+  88:	e8 13 00 00 00       	call   a0 <wc>
+    exit();
+  8d:	e8 61 03 00 00       	call   3f3 <exit>
+  92:	66 90                	xchg   %ax,%ax
+  94:	66 90                	xchg   %ax,%ax
+  96:	66 90                	xchg   %ax,%ax
+  98:	66 90                	xchg   %ax,%ax
+  9a:	66 90                	xchg   %ax,%ax
+  9c:	66 90                	xchg   %ax,%ax
+  9e:	66 90                	xchg   %ax,%ax
+
+000000a0 <wc>:
+{
+  a0:	f3 0f 1e fb          	endbr32 
+  a4:	55                   	push   %ebp
+  a5:	89 e5                	mov    %esp,%ebp
+  a7:	57                   	push   %edi
+  a8:	56                   	push   %esi
+  a9:	53                   	push   %ebx
+  l = w = c = 0;
+  aa:	31 db                	xor    %ebx,%ebx
+{
+  ac:	83 ec 1c             	sub    $0x1c,%esp
+  inword = 0;
+  af:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+  l = w = c = 0;
+  b6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  bd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+  c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+  c8:	83 ec 04             	sub    $0x4,%esp
+  cb:	68 00 02 00 00       	push   $0x200
+  d0:	68 20 0c 00 00       	push   $0xc20
+  d5:	ff 75 08             	pushl  0x8(%ebp)
+  d8:	e8 2e 03 00 00       	call   40b <read>
+  dd:	83 c4 10             	add    $0x10,%esp
+  e0:	89 c6                	mov    %eax,%esi
+  e2:	85 c0                	test   %eax,%eax
+  e4:	7e 62                	jle    148 <wc+0xa8>
+    for(i=0; i<n; i++){
+  e6:	31 ff                	xor    %edi,%edi
+  e8:	eb 14                	jmp    fe <wc+0x5e>
+  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        inword = 0;
+  f0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+    for(i=0; i<n; i++){
+  f7:	83 c7 01             	add    $0x1,%edi
+  fa:	39 fe                	cmp    %edi,%esi
+  fc:	74 42                	je     140 <wc+0xa0>
+      if(buf[i] == '\n')
+  fe:	0f be 87 20 0c 00 00 	movsbl 0xc20(%edi),%eax
+        l++;
+ 105:	31 c9                	xor    %ecx,%ecx
+ 107:	3c 0a                	cmp    $0xa,%al
+ 109:	0f 94 c1             	sete   %cl
+      if(strchr(" \r\t\n\v", buf[i]))
+ 10c:	83 ec 08             	sub    $0x8,%esp
+ 10f:	50                   	push   %eax
+        l++;
+ 110:	01 cb                	add    %ecx,%ebx
+      if(strchr(" \r\t\n\v", buf[i]))
+ 112:	68 d8 08 00 00       	push   $0x8d8
+ 117:	e8 54 01 00 00       	call   270 <strchr>
+ 11c:	83 c4 10             	add    $0x10,%esp
+ 11f:	85 c0                	test   %eax,%eax
+ 121:	75 cd                	jne    f0 <wc+0x50>
+      else if(!inword){
+ 123:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+ 126:	85 d2                	test   %edx,%edx
+ 128:	75 cd                	jne    f7 <wc+0x57>
+    for(i=0; i<n; i++){
+ 12a:	83 c7 01             	add    $0x1,%edi
+        w++;
+ 12d:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+        inword = 1;
+ 131:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
+    for(i=0; i<n; i++){
+ 138:	39 fe                	cmp    %edi,%esi
+ 13a:	75 c2                	jne    fe <wc+0x5e>
+ 13c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 140:	01 75 dc             	add    %esi,-0x24(%ebp)
+ 143:	eb 83                	jmp    c8 <wc+0x28>
+ 145:	8d 76 00             	lea    0x0(%esi),%esi
+  if(n < 0){
+ 148:	75 24                	jne    16e <wc+0xce>
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+ 14a:	83 ec 08             	sub    $0x8,%esp
+ 14d:	ff 75 0c             	pushl  0xc(%ebp)
+ 150:	ff 75 dc             	pushl  -0x24(%ebp)
+ 153:	ff 75 e0             	pushl  -0x20(%ebp)
+ 156:	53                   	push   %ebx
+ 157:	68 ee 08 00 00       	push   $0x8ee
+ 15c:	6a 01                	push   $0x1
+ 15e:	e8 0d 04 00 00       	call   570 <printf>
+}
+ 163:	83 c4 20             	add    $0x20,%esp
+ 166:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 169:	5b                   	pop    %ebx
+ 16a:	5e                   	pop    %esi
+ 16b:	5f                   	pop    %edi
+ 16c:	5d                   	pop    %ebp
+ 16d:	c3                   	ret    
+    printf(1, "wc: read error\n");
+ 16e:	50                   	push   %eax
+ 16f:	50                   	push   %eax
+ 170:	68 de 08 00 00       	push   $0x8de
+ 175:	6a 01                	push   $0x1
+ 177:	e8 f4 03 00 00       	call   570 <printf>
+    exit();
+ 17c:	e8 72 02 00 00       	call   3f3 <exit>
+ 181:	66 90                	xchg   %ax,%ax
+ 183:	66 90                	xchg   %ax,%ax
+ 185:	66 90                	xchg   %ax,%ax
+ 187:	66 90                	xchg   %ax,%ax
+ 189:	66 90                	xchg   %ax,%ax
+ 18b:	66 90                	xchg   %ax,%ax
+ 18d:	66 90                	xchg   %ax,%ax
+ 18f:	90                   	nop
+
+00000190 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 190:	f3 0f 1e fb          	endbr32 
+ 194:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 195:	31 c0                	xor    %eax,%eax
+{
+ 197:	89 e5                	mov    %esp,%ebp
+ 199:	53                   	push   %ebx
+ 19a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 19d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 1a0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 1a4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 1a7:	83 c0 01             	add    $0x1,%eax
+ 1aa:	84 d2                	test   %dl,%dl
+ 1ac:	75 f2                	jne    1a0 <strcpy+0x10>
+    ;
+  return os;
+}
+ 1ae:	89 c8                	mov    %ecx,%eax
+ 1b0:	5b                   	pop    %ebx
+ 1b1:	5d                   	pop    %ebp
+ 1b2:	c3                   	ret    
+ 1b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000001c0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 1c0:	f3 0f 1e fb          	endbr32 
+ 1c4:	55                   	push   %ebp
+ 1c5:	89 e5                	mov    %esp,%ebp
+ 1c7:	53                   	push   %ebx
+ 1c8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 1cb:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 1ce:	0f b6 01             	movzbl (%ecx),%eax
+ 1d1:	0f b6 1a             	movzbl (%edx),%ebx
+ 1d4:	84 c0                	test   %al,%al
+ 1d6:	75 19                	jne    1f1 <strcmp+0x31>
+ 1d8:	eb 26                	jmp    200 <strcmp+0x40>
+ 1da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1e0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 1e4:	83 c1 01             	add    $0x1,%ecx
+ 1e7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 1ea:	0f b6 1a             	movzbl (%edx),%ebx
+ 1ed:	84 c0                	test   %al,%al
+ 1ef:	74 0f                	je     200 <strcmp+0x40>
+ 1f1:	38 d8                	cmp    %bl,%al
+ 1f3:	74 eb                	je     1e0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 1f5:	29 d8                	sub    %ebx,%eax
+}
+ 1f7:	5b                   	pop    %ebx
+ 1f8:	5d                   	pop    %ebp
+ 1f9:	c3                   	ret    
+ 1fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 200:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 202:	29 d8                	sub    %ebx,%eax
+}
+ 204:	5b                   	pop    %ebx
+ 205:	5d                   	pop    %ebp
+ 206:	c3                   	ret    
+ 207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20e:	66 90                	xchg   %ax,%ax
+
+00000210 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 210:	f3 0f 1e fb          	endbr32 
+ 214:	55                   	push   %ebp
+ 215:	89 e5                	mov    %esp,%ebp
+ 217:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 21a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 21d:	74 21                	je     240 <strlen+0x30>
+ 21f:	31 c0                	xor    %eax,%eax
+ 221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 228:	83 c0 01             	add    $0x1,%eax
+ 22b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 22f:	89 c1                	mov    %eax,%ecx
+ 231:	75 f5                	jne    228 <strlen+0x18>
+    ;
+  return n;
+}
+ 233:	89 c8                	mov    %ecx,%eax
+ 235:	5d                   	pop    %ebp
+ 236:	c3                   	ret    
+ 237:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 240:	31 c9                	xor    %ecx,%ecx
+}
+ 242:	5d                   	pop    %ebp
+ 243:	89 c8                	mov    %ecx,%eax
+ 245:	c3                   	ret    
+ 246:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000250 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 250:	f3 0f 1e fb          	endbr32 
+ 254:	55                   	push   %ebp
+ 255:	89 e5                	mov    %esp,%ebp
+ 257:	57                   	push   %edi
+ 258:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 25b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 25e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 261:	89 d7                	mov    %edx,%edi
+ 263:	fc                   	cld    
+ 264:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 266:	89 d0                	mov    %edx,%eax
+ 268:	5f                   	pop    %edi
+ 269:	5d                   	pop    %ebp
+ 26a:	c3                   	ret    
+ 26b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 26f:	90                   	nop
+
+00000270 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	8b 45 08             	mov    0x8(%ebp),%eax
+ 27a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 27e:	0f b6 10             	movzbl (%eax),%edx
+ 281:	84 d2                	test   %dl,%dl
+ 283:	75 16                	jne    29b <strchr+0x2b>
+ 285:	eb 21                	jmp    2a8 <strchr+0x38>
+ 287:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 28e:	66 90                	xchg   %ax,%ax
+ 290:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 294:	83 c0 01             	add    $0x1,%eax
+ 297:	84 d2                	test   %dl,%dl
+ 299:	74 0d                	je     2a8 <strchr+0x38>
+    if(*s == c)
+ 29b:	38 d1                	cmp    %dl,%cl
+ 29d:	75 f1                	jne    290 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 29f:	5d                   	pop    %ebp
+ 2a0:	c3                   	ret    
+ 2a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 2a8:	31 c0                	xor    %eax,%eax
+}
+ 2aa:	5d                   	pop    %ebp
+ 2ab:	c3                   	ret    
+ 2ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000002b0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	57                   	push   %edi
+ 2b8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 2b9:	31 f6                	xor    %esi,%esi
+{
+ 2bb:	53                   	push   %ebx
+ 2bc:	89 f3                	mov    %esi,%ebx
+ 2be:	83 ec 1c             	sub    $0x1c,%esp
+ 2c1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 2c4:	eb 33                	jmp    2f9 <gets+0x49>
+ 2c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2cd:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 2d0:	83 ec 04             	sub    $0x4,%esp
+ 2d3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 2d6:	6a 01                	push   $0x1
+ 2d8:	50                   	push   %eax
+ 2d9:	6a 00                	push   $0x0
+ 2db:	e8 2b 01 00 00       	call   40b <read>
+    if(cc < 1)
+ 2e0:	83 c4 10             	add    $0x10,%esp
+ 2e3:	85 c0                	test   %eax,%eax
+ 2e5:	7e 1c                	jle    303 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 2e7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 2eb:	83 c7 01             	add    $0x1,%edi
+ 2ee:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 2f1:	3c 0a                	cmp    $0xa,%al
+ 2f3:	74 23                	je     318 <gets+0x68>
+ 2f5:	3c 0d                	cmp    $0xd,%al
+ 2f7:	74 1f                	je     318 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 2f9:	83 c3 01             	add    $0x1,%ebx
+ 2fc:	89 fe                	mov    %edi,%esi
+ 2fe:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 301:	7c cd                	jl     2d0 <gets+0x20>
+ 303:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 305:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 308:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 30b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 30e:	5b                   	pop    %ebx
+ 30f:	5e                   	pop    %esi
+ 310:	5f                   	pop    %edi
+ 311:	5d                   	pop    %ebp
+ 312:	c3                   	ret    
+ 313:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 317:	90                   	nop
+ 318:	8b 75 08             	mov    0x8(%ebp),%esi
+ 31b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 31e:	01 de                	add    %ebx,%esi
+ 320:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 322:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 325:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 328:	5b                   	pop    %ebx
+ 329:	5e                   	pop    %esi
+ 32a:	5f                   	pop    %edi
+ 32b:	5d                   	pop    %ebp
+ 32c:	c3                   	ret    
+ 32d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000330 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 330:	f3 0f 1e fb          	endbr32 
+ 334:	55                   	push   %ebp
+ 335:	89 e5                	mov    %esp,%ebp
+ 337:	56                   	push   %esi
+ 338:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 339:	83 ec 08             	sub    $0x8,%esp
+ 33c:	6a 00                	push   $0x0
+ 33e:	ff 75 08             	pushl  0x8(%ebp)
+ 341:	e8 ed 00 00 00       	call   433 <open>
+  if(fd < 0)
+ 346:	83 c4 10             	add    $0x10,%esp
+ 349:	85 c0                	test   %eax,%eax
+ 34b:	78 2b                	js     378 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 34d:	83 ec 08             	sub    $0x8,%esp
+ 350:	ff 75 0c             	pushl  0xc(%ebp)
+ 353:	89 c3                	mov    %eax,%ebx
+ 355:	50                   	push   %eax
+ 356:	e8 f0 00 00 00       	call   44b <fstat>
+  close(fd);
+ 35b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 35e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 360:	e8 b6 00 00 00       	call   41b <close>
+  return r;
+ 365:	83 c4 10             	add    $0x10,%esp
+}
+ 368:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 36b:	89 f0                	mov    %esi,%eax
+ 36d:	5b                   	pop    %ebx
+ 36e:	5e                   	pop    %esi
+ 36f:	5d                   	pop    %ebp
+ 370:	c3                   	ret    
+ 371:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 378:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 37d:	eb e9                	jmp    368 <stat+0x38>
+ 37f:	90                   	nop
+
+00000380 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 380:	f3 0f 1e fb          	endbr32 
+ 384:	55                   	push   %ebp
+ 385:	89 e5                	mov    %esp,%ebp
+ 387:	53                   	push   %ebx
+ 388:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 38b:	0f be 02             	movsbl (%edx),%eax
+ 38e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 391:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 394:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 399:	77 1a                	ja     3b5 <atoi+0x35>
+ 39b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 39f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 3a0:	83 c2 01             	add    $0x1,%edx
+ 3a3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 3a6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 3aa:	0f be 02             	movsbl (%edx),%eax
+ 3ad:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 3b0:	80 fb 09             	cmp    $0x9,%bl
+ 3b3:	76 eb                	jbe    3a0 <atoi+0x20>
+  return n;
+}
+ 3b5:	89 c8                	mov    %ecx,%eax
+ 3b7:	5b                   	pop    %ebx
+ 3b8:	5d                   	pop    %ebp
+ 3b9:	c3                   	ret    
+ 3ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000003c0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 3c0:	f3 0f 1e fb          	endbr32 
+ 3c4:	55                   	push   %ebp
+ 3c5:	89 e5                	mov    %esp,%ebp
+ 3c7:	57                   	push   %edi
+ 3c8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 3cb:	8b 55 08             	mov    0x8(%ebp),%edx
+ 3ce:	56                   	push   %esi
+ 3cf:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 3d2:	85 c0                	test   %eax,%eax
+ 3d4:	7e 0f                	jle    3e5 <memmove+0x25>
+ 3d6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 3d8:	89 d7                	mov    %edx,%edi
+ 3da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 3e0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 3e1:	39 f8                	cmp    %edi,%eax
+ 3e3:	75 fb                	jne    3e0 <memmove+0x20>
+  return vdst;
+}
+ 3e5:	5e                   	pop    %esi
+ 3e6:	89 d0                	mov    %edx,%eax
+ 3e8:	5f                   	pop    %edi
+ 3e9:	5d                   	pop    %ebp
+ 3ea:	c3                   	ret    
+
+000003eb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 3eb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <exit>:
+SYSCALL(exit)
+ 3f3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <wait>:
+SYSCALL(wait)
+ 3fb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <pipe>:
+SYSCALL(pipe)
+ 403:	b8 04 00 00 00       	mov    $0x4,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <read>:
+SYSCALL(read)
+ 40b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <write>:
+SYSCALL(write)
+ 413:	b8 10 00 00 00       	mov    $0x10,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <close>:
+SYSCALL(close)
+ 41b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <kill>:
+SYSCALL(kill)
+ 423:	b8 06 00 00 00       	mov    $0x6,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <exec>:
+SYSCALL(exec)
+ 42b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <open>:
+SYSCALL(open)
+ 433:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <mknod>:
+SYSCALL(mknod)
+ 43b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <unlink>:
+SYSCALL(unlink)
+ 443:	b8 12 00 00 00       	mov    $0x12,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <fstat>:
+SYSCALL(fstat)
+ 44b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+
+00000453 <link>:
+SYSCALL(link)
+ 453:	b8 13 00 00 00       	mov    $0x13,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+
+0000045b <mkdir>:
+SYSCALL(mkdir)
+ 45b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 460:	cd 40                	int    $0x40
+ 462:	c3                   	ret    
+
+00000463 <chdir>:
+SYSCALL(chdir)
+ 463:	b8 09 00 00 00       	mov    $0x9,%eax
+ 468:	cd 40                	int    $0x40
+ 46a:	c3                   	ret    
+
+0000046b <dup>:
+SYSCALL(dup)
+ 46b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 470:	cd 40                	int    $0x40
+ 472:	c3                   	ret    
+
+00000473 <getpid>:
+SYSCALL(getpid)
+ 473:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 478:	cd 40                	int    $0x40
+ 47a:	c3                   	ret    
+
+0000047b <sbrk>:
+SYSCALL(sbrk)
+ 47b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 480:	cd 40                	int    $0x40
+ 482:	c3                   	ret    
+
+00000483 <sleep>:
+SYSCALL(sleep)
+ 483:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 488:	cd 40                	int    $0x40
+ 48a:	c3                   	ret    
+
+0000048b <uptime>:
+SYSCALL(uptime)
+ 48b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 490:	cd 40                	int    $0x40
+ 492:	c3                   	ret    
+
+00000493 <getNumProc>:
+SYSCALL(getNumProc)
+ 493:	b8 16 00 00 00       	mov    $0x16,%eax
+ 498:	cd 40                	int    $0x40
+ 49a:	c3                   	ret    
+
+0000049b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 49b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 4a0:	cd 40                	int    $0x40
+ 4a2:	c3                   	ret    
+
+000004a3 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 4a3:	b8 18 00 00 00       	mov    $0x18,%eax
+ 4a8:	cd 40                	int    $0x40
+ 4aa:	c3                   	ret    
+
+000004ab <set_burst_time>:
+SYSCALL(set_burst_time)
+ 4ab:	b8 19 00 00 00       	mov    $0x19,%eax
+ 4b0:	cd 40                	int    $0x40
+ 4b2:	c3                   	ret    
+
+000004b3 <get_burst_time>:
+ 4b3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 4b8:	cd 40                	int    $0x40
+ 4ba:	c3                   	ret    
+ 4bb:	66 90                	xchg   %ax,%ax
+ 4bd:	66 90                	xchg   %ax,%ax
+ 4bf:	90                   	nop
+
+000004c0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 4c0:	55                   	push   %ebp
+ 4c1:	89 e5                	mov    %esp,%ebp
+ 4c3:	57                   	push   %edi
+ 4c4:	56                   	push   %esi
+ 4c5:	53                   	push   %ebx
+ 4c6:	83 ec 3c             	sub    $0x3c,%esp
+ 4c9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 4cc:	89 d1                	mov    %edx,%ecx
+{
+ 4ce:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 4d1:	85 d2                	test   %edx,%edx
+ 4d3:	0f 89 7f 00 00 00    	jns    558 <printint+0x98>
+ 4d9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 4dd:	74 79                	je     558 <printint+0x98>
+    neg = 1;
+ 4df:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 4e6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 4e8:	31 db                	xor    %ebx,%ebx
+ 4ea:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 4ed:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 4f0:	89 c8                	mov    %ecx,%eax
+ 4f2:	31 d2                	xor    %edx,%edx
+ 4f4:	89 cf                	mov    %ecx,%edi
+ 4f6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 4f9:	0f b6 92 18 09 00 00 	movzbl 0x918(%edx),%edx
+ 500:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 503:	89 d8                	mov    %ebx,%eax
+ 505:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 508:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 50b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 50e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 511:	76 dd                	jbe    4f0 <printint+0x30>
+  if(neg)
+ 513:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 516:	85 c9                	test   %ecx,%ecx
+ 518:	74 0c                	je     526 <printint+0x66>
+    buf[i++] = '-';
+ 51a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 51f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 521:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 526:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 529:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 52d:	eb 07                	jmp    536 <printint+0x76>
+ 52f:	90                   	nop
+ 530:	0f b6 13             	movzbl (%ebx),%edx
+ 533:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 536:	83 ec 04             	sub    $0x4,%esp
+ 539:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 53c:	6a 01                	push   $0x1
+ 53e:	56                   	push   %esi
+ 53f:	57                   	push   %edi
+ 540:	e8 ce fe ff ff       	call   413 <write>
+  while(--i >= 0)
+ 545:	83 c4 10             	add    $0x10,%esp
+ 548:	39 de                	cmp    %ebx,%esi
+ 54a:	75 e4                	jne    530 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 54c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 54f:	5b                   	pop    %ebx
+ 550:	5e                   	pop    %esi
+ 551:	5f                   	pop    %edi
+ 552:	5d                   	pop    %ebp
+ 553:	c3                   	ret    
+ 554:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 558:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 55f:	eb 87                	jmp    4e8 <printint+0x28>
+ 561:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 568:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56f:	90                   	nop
+
+00000570 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 570:	f3 0f 1e fb          	endbr32 
+ 574:	55                   	push   %ebp
+ 575:	89 e5                	mov    %esp,%ebp
+ 577:	57                   	push   %edi
+ 578:	56                   	push   %esi
+ 579:	53                   	push   %ebx
+ 57a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 57d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 580:	0f b6 1e             	movzbl (%esi),%ebx
+ 583:	84 db                	test   %bl,%bl
+ 585:	0f 84 b4 00 00 00    	je     63f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 58b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 58e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 591:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 594:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 596:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 599:	eb 33                	jmp    5ce <printf+0x5e>
+ 59b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 59f:	90                   	nop
+ 5a0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 5a3:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 5a8:	83 f8 25             	cmp    $0x25,%eax
+ 5ab:	74 17                	je     5c4 <printf+0x54>
+  write(fd, &c, 1);
+ 5ad:	83 ec 04             	sub    $0x4,%esp
+ 5b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 5b3:	6a 01                	push   $0x1
+ 5b5:	57                   	push   %edi
+ 5b6:	ff 75 08             	pushl  0x8(%ebp)
+ 5b9:	e8 55 fe ff ff       	call   413 <write>
+ 5be:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 5c1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 5c4:	0f b6 1e             	movzbl (%esi),%ebx
+ 5c7:	83 c6 01             	add    $0x1,%esi
+ 5ca:	84 db                	test   %bl,%bl
+ 5cc:	74 71                	je     63f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 5ce:	0f be cb             	movsbl %bl,%ecx
+ 5d1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 5d4:	85 d2                	test   %edx,%edx
+ 5d6:	74 c8                	je     5a0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 5d8:	83 fa 25             	cmp    $0x25,%edx
+ 5db:	75 e7                	jne    5c4 <printf+0x54>
+      if(c == 'd'){
+ 5dd:	83 f8 64             	cmp    $0x64,%eax
+ 5e0:	0f 84 9a 00 00 00    	je     680 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 5e6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 5ec:	83 f9 70             	cmp    $0x70,%ecx
+ 5ef:	74 5f                	je     650 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 5f1:	83 f8 73             	cmp    $0x73,%eax
+ 5f4:	0f 84 d6 00 00 00    	je     6d0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 5fa:	83 f8 63             	cmp    $0x63,%eax
+ 5fd:	0f 84 8d 00 00 00    	je     690 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 603:	83 f8 25             	cmp    $0x25,%eax
+ 606:	0f 84 b4 00 00 00    	je     6c0 <printf+0x150>
+  write(fd, &c, 1);
+ 60c:	83 ec 04             	sub    $0x4,%esp
+ 60f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 613:	6a 01                	push   $0x1
+ 615:	57                   	push   %edi
+ 616:	ff 75 08             	pushl  0x8(%ebp)
+ 619:	e8 f5 fd ff ff       	call   413 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 61e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 621:	83 c4 0c             	add    $0xc,%esp
+ 624:	6a 01                	push   $0x1
+ 626:	83 c6 01             	add    $0x1,%esi
+ 629:	57                   	push   %edi
+ 62a:	ff 75 08             	pushl  0x8(%ebp)
+ 62d:	e8 e1 fd ff ff       	call   413 <write>
+  for(i = 0; fmt[i]; i++){
+ 632:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 636:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 639:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 63b:	84 db                	test   %bl,%bl
+ 63d:	75 8f                	jne    5ce <printf+0x5e>
+    }
+  }
+}
+ 63f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 642:	5b                   	pop    %ebx
+ 643:	5e                   	pop    %esi
+ 644:	5f                   	pop    %edi
+ 645:	5d                   	pop    %ebp
+ 646:	c3                   	ret    
+ 647:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 64e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 650:	83 ec 0c             	sub    $0xc,%esp
+ 653:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 658:	6a 00                	push   $0x0
+ 65a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 65d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 660:	8b 13                	mov    (%ebx),%edx
+ 662:	e8 59 fe ff ff       	call   4c0 <printint>
+        ap++;
+ 667:	89 d8                	mov    %ebx,%eax
+ 669:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 66c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 66e:	83 c0 04             	add    $0x4,%eax
+ 671:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 674:	e9 4b ff ff ff       	jmp    5c4 <printf+0x54>
+ 679:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 680:	83 ec 0c             	sub    $0xc,%esp
+ 683:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 688:	6a 01                	push   $0x1
+ 68a:	eb ce                	jmp    65a <printf+0xea>
+ 68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 690:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 693:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 696:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 698:	6a 01                	push   $0x1
+        ap++;
+ 69a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 69d:	57                   	push   %edi
+ 69e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 6a1:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6a4:	e8 6a fd ff ff       	call   413 <write>
+        ap++;
+ 6a9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 6ac:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 6af:	31 d2                	xor    %edx,%edx
+ 6b1:	e9 0e ff ff ff       	jmp    5c4 <printf+0x54>
+ 6b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6bd:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 6c0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6c3:	83 ec 04             	sub    $0x4,%esp
+ 6c6:	e9 59 ff ff ff       	jmp    624 <printf+0xb4>
+ 6cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6cf:	90                   	nop
+        s = (char*)*ap;
+ 6d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 6d3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 6d5:	83 c0 04             	add    $0x4,%eax
+ 6d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 6db:	85 db                	test   %ebx,%ebx
+ 6dd:	74 17                	je     6f6 <printf+0x186>
+        while(*s != 0){
+ 6df:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 6e2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 6e4:	84 c0                	test   %al,%al
+ 6e6:	0f 84 d8 fe ff ff    	je     5c4 <printf+0x54>
+ 6ec:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 6ef:	89 de                	mov    %ebx,%esi
+ 6f1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6f4:	eb 1a                	jmp    710 <printf+0x1a0>
+          s = "(null)";
+ 6f6:	bb 0f 09 00 00       	mov    $0x90f,%ebx
+        while(*s != 0){
+ 6fb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 6fe:	b8 28 00 00 00       	mov    $0x28,%eax
+ 703:	89 de                	mov    %ebx,%esi
+ 705:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 708:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 70f:	90                   	nop
+  write(fd, &c, 1);
+ 710:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 713:	83 c6 01             	add    $0x1,%esi
+ 716:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 719:	6a 01                	push   $0x1
+ 71b:	57                   	push   %edi
+ 71c:	53                   	push   %ebx
+ 71d:	e8 f1 fc ff ff       	call   413 <write>
+        while(*s != 0){
+ 722:	0f b6 06             	movzbl (%esi),%eax
+ 725:	83 c4 10             	add    $0x10,%esp
+ 728:	84 c0                	test   %al,%al
+ 72a:	75 e4                	jne    710 <printf+0x1a0>
+ 72c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 72f:	31 d2                	xor    %edx,%edx
+ 731:	e9 8e fe ff ff       	jmp    5c4 <printf+0x54>
+ 736:	66 90                	xchg   %ax,%ax
+ 738:	66 90                	xchg   %ax,%ax
+ 73a:	66 90                	xchg   %ax,%ax
+ 73c:	66 90                	xchg   %ax,%ax
+ 73e:	66 90                	xchg   %ax,%ax
+
+00000740 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 740:	f3 0f 1e fb          	endbr32 
+ 744:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 745:	a1 00 0c 00 00       	mov    0xc00,%eax
+{
+ 74a:	89 e5                	mov    %esp,%ebp
+ 74c:	57                   	push   %edi
+ 74d:	56                   	push   %esi
+ 74e:	53                   	push   %ebx
+ 74f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 752:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 754:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 757:	39 c8                	cmp    %ecx,%eax
+ 759:	73 15                	jae    770 <free+0x30>
+ 75b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 75f:	90                   	nop
+ 760:	39 d1                	cmp    %edx,%ecx
+ 762:	72 14                	jb     778 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 764:	39 d0                	cmp    %edx,%eax
+ 766:	73 10                	jae    778 <free+0x38>
+{
+ 768:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 76a:	8b 10                	mov    (%eax),%edx
+ 76c:	39 c8                	cmp    %ecx,%eax
+ 76e:	72 f0                	jb     760 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 770:	39 d0                	cmp    %edx,%eax
+ 772:	72 f4                	jb     768 <free+0x28>
+ 774:	39 d1                	cmp    %edx,%ecx
+ 776:	73 f0                	jae    768 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 778:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 77b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 77e:	39 fa                	cmp    %edi,%edx
+ 780:	74 1e                	je     7a0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 782:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 785:	8b 50 04             	mov    0x4(%eax),%edx
+ 788:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 78b:	39 f1                	cmp    %esi,%ecx
+ 78d:	74 28                	je     7b7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 78f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 791:	5b                   	pop    %ebx
+  freep = p;
+ 792:	a3 00 0c 00 00       	mov    %eax,0xc00
+}
+ 797:	5e                   	pop    %esi
+ 798:	5f                   	pop    %edi
+ 799:	5d                   	pop    %ebp
+ 79a:	c3                   	ret    
+ 79b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 79f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 7a0:	03 72 04             	add    0x4(%edx),%esi
+ 7a3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 7a6:	8b 10                	mov    (%eax),%edx
+ 7a8:	8b 12                	mov    (%edx),%edx
+ 7aa:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 7ad:	8b 50 04             	mov    0x4(%eax),%edx
+ 7b0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 7b3:	39 f1                	cmp    %esi,%ecx
+ 7b5:	75 d8                	jne    78f <free+0x4f>
+    p->s.size += bp->s.size;
+ 7b7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 7ba:	a3 00 0c 00 00       	mov    %eax,0xc00
+    p->s.size += bp->s.size;
+ 7bf:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 7c2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 7c5:	89 10                	mov    %edx,(%eax)
+}
+ 7c7:	5b                   	pop    %ebx
+ 7c8:	5e                   	pop    %esi
+ 7c9:	5f                   	pop    %edi
+ 7ca:	5d                   	pop    %ebp
+ 7cb:	c3                   	ret    
+ 7cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000007d0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 7d0:	f3 0f 1e fb          	endbr32 
+ 7d4:	55                   	push   %ebp
+ 7d5:	89 e5                	mov    %esp,%ebp
+ 7d7:	57                   	push   %edi
+ 7d8:	56                   	push   %esi
+ 7d9:	53                   	push   %ebx
+ 7da:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 7e0:	8b 3d 00 0c 00 00    	mov    0xc00,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7e6:	8d 70 07             	lea    0x7(%eax),%esi
+ 7e9:	c1 ee 03             	shr    $0x3,%esi
+ 7ec:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 7ef:	85 ff                	test   %edi,%edi
+ 7f1:	0f 84 a9 00 00 00    	je     8a0 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7f7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 7f9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7fc:	39 f1                	cmp    %esi,%ecx
+ 7fe:	73 6d                	jae    86d <malloc+0x9d>
+ 800:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 806:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 80b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 80e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 815:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 818:	eb 17                	jmp    831 <malloc+0x61>
+ 81a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 820:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 822:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 825:	39 f1                	cmp    %esi,%ecx
+ 827:	73 4f                	jae    878 <malloc+0xa8>
+ 829:	8b 3d 00 0c 00 00    	mov    0xc00,%edi
+ 82f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 831:	39 c7                	cmp    %eax,%edi
+ 833:	75 eb                	jne    820 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 835:	83 ec 0c             	sub    $0xc,%esp
+ 838:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 83b:	e8 3b fc ff ff       	call   47b <sbrk>
+  if(p == (char*)-1)
+ 840:	83 c4 10             	add    $0x10,%esp
+ 843:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 846:	74 1b                	je     863 <malloc+0x93>
+  hp->s.size = nu;
+ 848:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 84b:	83 ec 0c             	sub    $0xc,%esp
+ 84e:	83 c0 08             	add    $0x8,%eax
+ 851:	50                   	push   %eax
+ 852:	e8 e9 fe ff ff       	call   740 <free>
+  return freep;
+ 857:	a1 00 0c 00 00       	mov    0xc00,%eax
+      if((p = morecore(nunits)) == 0)
+ 85c:	83 c4 10             	add    $0x10,%esp
+ 85f:	85 c0                	test   %eax,%eax
+ 861:	75 bd                	jne    820 <malloc+0x50>
+        return 0;
+  }
+}
+ 863:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 866:	31 c0                	xor    %eax,%eax
+}
+ 868:	5b                   	pop    %ebx
+ 869:	5e                   	pop    %esi
+ 86a:	5f                   	pop    %edi
+ 86b:	5d                   	pop    %ebp
+ 86c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 86d:	89 c2                	mov    %eax,%edx
+ 86f:	89 f8                	mov    %edi,%eax
+ 871:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 878:	39 ce                	cmp    %ecx,%esi
+ 87a:	74 54                	je     8d0 <malloc+0x100>
+        p->s.size -= nunits;
+ 87c:	29 f1                	sub    %esi,%ecx
+ 87e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 881:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 884:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 887:	a3 00 0c 00 00       	mov    %eax,0xc00
+}
+ 88c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 88f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 892:	5b                   	pop    %ebx
+ 893:	5e                   	pop    %esi
+ 894:	5f                   	pop    %edi
+ 895:	5d                   	pop    %ebp
+ 896:	c3                   	ret    
+ 897:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 89e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 8a0:	c7 05 00 0c 00 00 04 	movl   $0xc04,0xc00
+ 8a7:	0c 00 00 
+    base.s.size = 0;
+ 8aa:	bf 04 0c 00 00       	mov    $0xc04,%edi
+    base.s.ptr = freep = prevp = &base;
+ 8af:	c7 05 04 0c 00 00 04 	movl   $0xc04,0xc04
+ 8b6:	0c 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 8b9:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 8bb:	c7 05 08 0c 00 00 00 	movl   $0x0,0xc08
+ 8c2:	00 00 00 
+    if(p->s.size >= nunits){
+ 8c5:	e9 36 ff ff ff       	jmp    800 <malloc+0x30>
+ 8ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 8d0:	8b 0a                	mov    (%edx),%ecx
+ 8d2:	89 08                	mov    %ecx,(%eax)
+ 8d4:	eb b1                	jmp    887 <malloc+0xb7>
diff -ruN xv6-public/wc.d xv6-new/wc.d
--- xv6-public/wc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/wc.d	2022-10-07 22:43:44.791886860 +0530
@@ -0,0 +1 @@
+wc.o: wc.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/wc.o and xv6-new/wc.o differ
diff -ruN xv6-public/wc.sym xv6-new/wc.sym
--- xv6-public/wc.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/wc.sym	2022-10-07 22:43:44.791886860 +0530
@@ -0,0 +1,64 @@
+00000000 .text
+000008d8 .rodata
+0000092c .eh_frame
+00000c00 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 wc.c
+00000000 ulib.c
+00000000 printf.c
+000004c0 printint
+00000918 digits.1096
+00000000 umalloc.c
+00000c00 freep
+00000c04 base
+00000190 strcpy
+00000570 printf
+000003c0 memmove
+0000043b mknod
+000002b0 gets
+00000473 getpid
+000007d0 malloc
+00000483 sleep
+000004b3 get_burst_time
+00000403 pipe
+00000413 write
+0000044b fstat
+00000423 kill
+00000463 chdir
+0000042b exec
+000003fb wait
+0000040b read
+00000443 unlink
+000000a0 wc
+000003eb fork
+0000047b sbrk
+0000048b uptime
+00000c00 __bss_start
+00000250 memset
+00000000 main
+000004ab set_burst_time
+000001c0 strcmp
+0000046b dup
+0000049b getMaxPid
+00000c20 buf
+00000493 getNumProc
+000004a3 getProcInfo
+00000330 stat
+00000c00 _edata
+00000e20 _end
+00000453 link
+000003f3 exit
+00000380 atoi
+00000210 strlen
+00000433 open
+00000270 strchr
+0000045b mkdir
+0000041b close
+00000740 free
Binary files xv6-public/xv6.img and xv6-new/xv6.img differ
diff -ruN xv6-public/zombie.asm xv6-new/zombie.asm
--- xv6-public/zombie.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/zombie.asm	2022-10-07 22:43:44.791886860 +0530
@@ -0,0 +1,1190 @@
+
+_zombie:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(void)
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	51                   	push   %ecx
+  12:	83 ec 04             	sub    $0x4,%esp
+  if(fork() > 0)
+  15:	e8 71 02 00 00       	call   28b <fork>
+  1a:	85 c0                	test   %eax,%eax
+  1c:	7e 0d                	jle    2b <main+0x2b>
+    sleep(5);  // Let child exit before parent.
+  1e:	83 ec 0c             	sub    $0xc,%esp
+  21:	6a 05                	push   $0x5
+  23:	e8 fb 02 00 00       	call   323 <sleep>
+  28:	83 c4 10             	add    $0x10,%esp
+  exit();
+  2b:	e8 63 02 00 00       	call   293 <exit>
+
+00000030 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  30:	f3 0f 1e fb          	endbr32 
+  34:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  35:	31 c0                	xor    %eax,%eax
+{
+  37:	89 e5                	mov    %esp,%ebp
+  39:	53                   	push   %ebx
+  3a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  3d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  40:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  44:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  47:	83 c0 01             	add    $0x1,%eax
+  4a:	84 d2                	test   %dl,%dl
+  4c:	75 f2                	jne    40 <strcpy+0x10>
+    ;
+  return os;
+}
+  4e:	89 c8                	mov    %ecx,%eax
+  50:	5b                   	pop    %ebx
+  51:	5d                   	pop    %ebp
+  52:	c3                   	ret    
+  53:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000060 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  60:	f3 0f 1e fb          	endbr32 
+  64:	55                   	push   %ebp
+  65:	89 e5                	mov    %esp,%ebp
+  67:	53                   	push   %ebx
+  68:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  6b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  6e:	0f b6 01             	movzbl (%ecx),%eax
+  71:	0f b6 1a             	movzbl (%edx),%ebx
+  74:	84 c0                	test   %al,%al
+  76:	75 19                	jne    91 <strcmp+0x31>
+  78:	eb 26                	jmp    a0 <strcmp+0x40>
+  7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  80:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  84:	83 c1 01             	add    $0x1,%ecx
+  87:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  8a:	0f b6 1a             	movzbl (%edx),%ebx
+  8d:	84 c0                	test   %al,%al
+  8f:	74 0f                	je     a0 <strcmp+0x40>
+  91:	38 d8                	cmp    %bl,%al
+  93:	74 eb                	je     80 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  95:	29 d8                	sub    %ebx,%eax
+}
+  97:	5b                   	pop    %ebx
+  98:	5d                   	pop    %ebp
+  99:	c3                   	ret    
+  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  a0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  a2:	29 d8                	sub    %ebx,%eax
+}
+  a4:	5b                   	pop    %ebx
+  a5:	5d                   	pop    %ebp
+  a6:	c3                   	ret    
+  a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ae:	66 90                	xchg   %ax,%ax
+
+000000b0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  b0:	f3 0f 1e fb          	endbr32 
+  b4:	55                   	push   %ebp
+  b5:	89 e5                	mov    %esp,%ebp
+  b7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  ba:	80 3a 00             	cmpb   $0x0,(%edx)
+  bd:	74 21                	je     e0 <strlen+0x30>
+  bf:	31 c0                	xor    %eax,%eax
+  c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  c8:	83 c0 01             	add    $0x1,%eax
+  cb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+  cf:	89 c1                	mov    %eax,%ecx
+  d1:	75 f5                	jne    c8 <strlen+0x18>
+    ;
+  return n;
+}
+  d3:	89 c8                	mov    %ecx,%eax
+  d5:	5d                   	pop    %ebp
+  d6:	c3                   	ret    
+  d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  de:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+  e0:	31 c9                	xor    %ecx,%ecx
+}
+  e2:	5d                   	pop    %ebp
+  e3:	89 c8                	mov    %ecx,%eax
+  e5:	c3                   	ret    
+  e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000000f0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  f0:	f3 0f 1e fb          	endbr32 
+  f4:	55                   	push   %ebp
+  f5:	89 e5                	mov    %esp,%ebp
+  f7:	57                   	push   %edi
+  f8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+  fb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 101:	89 d7                	mov    %edx,%edi
+ 103:	fc                   	cld    
+ 104:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 106:	89 d0                	mov    %edx,%eax
+ 108:	5f                   	pop    %edi
+ 109:	5d                   	pop    %ebp
+ 10a:	c3                   	ret    
+ 10b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 10f:	90                   	nop
+
+00000110 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 110:	f3 0f 1e fb          	endbr32 
+ 114:	55                   	push   %ebp
+ 115:	89 e5                	mov    %esp,%ebp
+ 117:	8b 45 08             	mov    0x8(%ebp),%eax
+ 11a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 11e:	0f b6 10             	movzbl (%eax),%edx
+ 121:	84 d2                	test   %dl,%dl
+ 123:	75 16                	jne    13b <strchr+0x2b>
+ 125:	eb 21                	jmp    148 <strchr+0x38>
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+ 130:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 134:	83 c0 01             	add    $0x1,%eax
+ 137:	84 d2                	test   %dl,%dl
+ 139:	74 0d                	je     148 <strchr+0x38>
+    if(*s == c)
+ 13b:	38 d1                	cmp    %dl,%cl
+ 13d:	75 f1                	jne    130 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 13f:	5d                   	pop    %ebp
+ 140:	c3                   	ret    
+ 141:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 148:	31 c0                	xor    %eax,%eax
+}
+ 14a:	5d                   	pop    %ebp
+ 14b:	c3                   	ret    
+ 14c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000150 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 150:	f3 0f 1e fb          	endbr32 
+ 154:	55                   	push   %ebp
+ 155:	89 e5                	mov    %esp,%ebp
+ 157:	57                   	push   %edi
+ 158:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 159:	31 f6                	xor    %esi,%esi
+{
+ 15b:	53                   	push   %ebx
+ 15c:	89 f3                	mov    %esi,%ebx
+ 15e:	83 ec 1c             	sub    $0x1c,%esp
+ 161:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 164:	eb 33                	jmp    199 <gets+0x49>
+ 166:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 170:	83 ec 04             	sub    $0x4,%esp
+ 173:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 176:	6a 01                	push   $0x1
+ 178:	50                   	push   %eax
+ 179:	6a 00                	push   $0x0
+ 17b:	e8 2b 01 00 00       	call   2ab <read>
+    if(cc < 1)
+ 180:	83 c4 10             	add    $0x10,%esp
+ 183:	85 c0                	test   %eax,%eax
+ 185:	7e 1c                	jle    1a3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 187:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 18b:	83 c7 01             	add    $0x1,%edi
+ 18e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 191:	3c 0a                	cmp    $0xa,%al
+ 193:	74 23                	je     1b8 <gets+0x68>
+ 195:	3c 0d                	cmp    $0xd,%al
+ 197:	74 1f                	je     1b8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 199:	83 c3 01             	add    $0x1,%ebx
+ 19c:	89 fe                	mov    %edi,%esi
+ 19e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1a1:	7c cd                	jl     170 <gets+0x20>
+ 1a3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1a5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1a8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ae:	5b                   	pop    %ebx
+ 1af:	5e                   	pop    %esi
+ 1b0:	5f                   	pop    %edi
+ 1b1:	5d                   	pop    %ebp
+ 1b2:	c3                   	ret    
+ 1b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1b7:	90                   	nop
+ 1b8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1bb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1be:	01 de                	add    %ebx,%esi
+ 1c0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1c2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1c8:	5b                   	pop    %ebx
+ 1c9:	5e                   	pop    %esi
+ 1ca:	5f                   	pop    %edi
+ 1cb:	5d                   	pop    %ebp
+ 1cc:	c3                   	ret    
+ 1cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001d0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1d0:	f3 0f 1e fb          	endbr32 
+ 1d4:	55                   	push   %ebp
+ 1d5:	89 e5                	mov    %esp,%ebp
+ 1d7:	56                   	push   %esi
+ 1d8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1d9:	83 ec 08             	sub    $0x8,%esp
+ 1dc:	6a 00                	push   $0x0
+ 1de:	ff 75 08             	pushl  0x8(%ebp)
+ 1e1:	e8 ed 00 00 00       	call   2d3 <open>
+  if(fd < 0)
+ 1e6:	83 c4 10             	add    $0x10,%esp
+ 1e9:	85 c0                	test   %eax,%eax
+ 1eb:	78 2b                	js     218 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 1ed:	83 ec 08             	sub    $0x8,%esp
+ 1f0:	ff 75 0c             	pushl  0xc(%ebp)
+ 1f3:	89 c3                	mov    %eax,%ebx
+ 1f5:	50                   	push   %eax
+ 1f6:	e8 f0 00 00 00       	call   2eb <fstat>
+  close(fd);
+ 1fb:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 1fe:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 200:	e8 b6 00 00 00       	call   2bb <close>
+  return r;
+ 205:	83 c4 10             	add    $0x10,%esp
+}
+ 208:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 20b:	89 f0                	mov    %esi,%eax
+ 20d:	5b                   	pop    %ebx
+ 20e:	5e                   	pop    %esi
+ 20f:	5d                   	pop    %ebp
+ 210:	c3                   	ret    
+ 211:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 218:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 21d:	eb e9                	jmp    208 <stat+0x38>
+ 21f:	90                   	nop
+
+00000220 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	53                   	push   %ebx
+ 228:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 22b:	0f be 02             	movsbl (%edx),%eax
+ 22e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 231:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 234:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 239:	77 1a                	ja     255 <atoi+0x35>
+ 23b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 23f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 240:	83 c2 01             	add    $0x1,%edx
+ 243:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 246:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 24a:	0f be 02             	movsbl (%edx),%eax
+ 24d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 250:	80 fb 09             	cmp    $0x9,%bl
+ 253:	76 eb                	jbe    240 <atoi+0x20>
+  return n;
+}
+ 255:	89 c8                	mov    %ecx,%eax
+ 257:	5b                   	pop    %ebx
+ 258:	5d                   	pop    %ebp
+ 259:	c3                   	ret    
+ 25a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000260 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 260:	f3 0f 1e fb          	endbr32 
+ 264:	55                   	push   %ebp
+ 265:	89 e5                	mov    %esp,%ebp
+ 267:	57                   	push   %edi
+ 268:	8b 45 10             	mov    0x10(%ebp),%eax
+ 26b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 26e:	56                   	push   %esi
+ 26f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 272:	85 c0                	test   %eax,%eax
+ 274:	7e 0f                	jle    285 <memmove+0x25>
+ 276:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 278:	89 d7                	mov    %edx,%edi
+ 27a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 280:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 281:	39 f8                	cmp    %edi,%eax
+ 283:	75 fb                	jne    280 <memmove+0x20>
+  return vdst;
+}
+ 285:	5e                   	pop    %esi
+ 286:	89 d0                	mov    %edx,%eax
+ 288:	5f                   	pop    %edi
+ 289:	5d                   	pop    %ebp
+ 28a:	c3                   	ret    
+
+0000028b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 28b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 290:	cd 40                	int    $0x40
+ 292:	c3                   	ret    
+
+00000293 <exit>:
+SYSCALL(exit)
+ 293:	b8 02 00 00 00       	mov    $0x2,%eax
+ 298:	cd 40                	int    $0x40
+ 29a:	c3                   	ret    
+
+0000029b <wait>:
+SYSCALL(wait)
+ 29b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2a0:	cd 40                	int    $0x40
+ 2a2:	c3                   	ret    
+
+000002a3 <pipe>:
+SYSCALL(pipe)
+ 2a3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2a8:	cd 40                	int    $0x40
+ 2aa:	c3                   	ret    
+
+000002ab <read>:
+SYSCALL(read)
+ 2ab:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2b0:	cd 40                	int    $0x40
+ 2b2:	c3                   	ret    
+
+000002b3 <write>:
+SYSCALL(write)
+ 2b3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2b8:	cd 40                	int    $0x40
+ 2ba:	c3                   	ret    
+
+000002bb <close>:
+SYSCALL(close)
+ 2bb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <kill>:
+SYSCALL(kill)
+ 2c3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <exec>:
+SYSCALL(exec)
+ 2cb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <open>:
+SYSCALL(open)
+ 2d3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <mknod>:
+SYSCALL(mknod)
+ 2db:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <unlink>:
+SYSCALL(unlink)
+ 2e3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <fstat>:
+SYSCALL(fstat)
+ 2eb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <link>:
+SYSCALL(link)
+ 2f3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <mkdir>:
+SYSCALL(mkdir)
+ 2fb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <chdir>:
+SYSCALL(chdir)
+ 303:	b8 09 00 00 00       	mov    $0x9,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <dup>:
+SYSCALL(dup)
+ 30b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <getpid>:
+SYSCALL(getpid)
+ 313:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <sbrk>:
+SYSCALL(sbrk)
+ 31b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <sleep>:
+SYSCALL(sleep)
+ 323:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <uptime>:
+SYSCALL(uptime)
+ 32b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <getNumProc>:
+SYSCALL(getNumProc)
+ 333:	b8 16 00 00 00       	mov    $0x16,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 33b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 343:	b8 18 00 00 00       	mov    $0x18,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 34b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <get_burst_time>:
+ 353:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+ 35b:	66 90                	xchg   %ax,%ax
+ 35d:	66 90                	xchg   %ax,%ax
+ 35f:	90                   	nop
+
+00000360 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	56                   	push   %esi
+ 365:	53                   	push   %ebx
+ 366:	83 ec 3c             	sub    $0x3c,%esp
+ 369:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 36c:	89 d1                	mov    %edx,%ecx
+{
+ 36e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 371:	85 d2                	test   %edx,%edx
+ 373:	0f 89 7f 00 00 00    	jns    3f8 <printint+0x98>
+ 379:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 37d:	74 79                	je     3f8 <printint+0x98>
+    neg = 1;
+ 37f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 386:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 388:	31 db                	xor    %ebx,%ebx
+ 38a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 38d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 390:	89 c8                	mov    %ecx,%eax
+ 392:	31 d2                	xor    %edx,%edx
+ 394:	89 cf                	mov    %ecx,%edi
+ 396:	f7 75 c4             	divl   -0x3c(%ebp)
+ 399:	0f b6 92 80 07 00 00 	movzbl 0x780(%edx),%edx
+ 3a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3a3:	89 d8                	mov    %ebx,%eax
+ 3a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3b1:	76 dd                	jbe    390 <printint+0x30>
+  if(neg)
+ 3b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3b6:	85 c9                	test   %ecx,%ecx
+ 3b8:	74 0c                	je     3c6 <printint+0x66>
+    buf[i++] = '-';
+ 3ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3bf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3cd:	eb 07                	jmp    3d6 <printint+0x76>
+ 3cf:	90                   	nop
+ 3d0:	0f b6 13             	movzbl (%ebx),%edx
+ 3d3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3d6:	83 ec 04             	sub    $0x4,%esp
+ 3d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3dc:	6a 01                	push   $0x1
+ 3de:	56                   	push   %esi
+ 3df:	57                   	push   %edi
+ 3e0:	e8 ce fe ff ff       	call   2b3 <write>
+  while(--i >= 0)
+ 3e5:	83 c4 10             	add    $0x10,%esp
+ 3e8:	39 de                	cmp    %ebx,%esi
+ 3ea:	75 e4                	jne    3d0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 3ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ef:	5b                   	pop    %ebx
+ 3f0:	5e                   	pop    %esi
+ 3f1:	5f                   	pop    %edi
+ 3f2:	5d                   	pop    %ebp
+ 3f3:	c3                   	ret    
+ 3f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 3f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 3ff:	eb 87                	jmp    388 <printint+0x28>
+ 401:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 408:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 40f:	90                   	nop
+
+00000410 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 410:	f3 0f 1e fb          	endbr32 
+ 414:	55                   	push   %ebp
+ 415:	89 e5                	mov    %esp,%ebp
+ 417:	57                   	push   %edi
+ 418:	56                   	push   %esi
+ 419:	53                   	push   %ebx
+ 41a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 41d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 420:	0f b6 1e             	movzbl (%esi),%ebx
+ 423:	84 db                	test   %bl,%bl
+ 425:	0f 84 b4 00 00 00    	je     4df <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 42b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 42e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 431:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 434:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 436:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 439:	eb 33                	jmp    46e <printf+0x5e>
+ 43b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 43f:	90                   	nop
+ 440:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 443:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 448:	83 f8 25             	cmp    $0x25,%eax
+ 44b:	74 17                	je     464 <printf+0x54>
+  write(fd, &c, 1);
+ 44d:	83 ec 04             	sub    $0x4,%esp
+ 450:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 453:	6a 01                	push   $0x1
+ 455:	57                   	push   %edi
+ 456:	ff 75 08             	pushl  0x8(%ebp)
+ 459:	e8 55 fe ff ff       	call   2b3 <write>
+ 45e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 461:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 464:	0f b6 1e             	movzbl (%esi),%ebx
+ 467:	83 c6 01             	add    $0x1,%esi
+ 46a:	84 db                	test   %bl,%bl
+ 46c:	74 71                	je     4df <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 46e:	0f be cb             	movsbl %bl,%ecx
+ 471:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 474:	85 d2                	test   %edx,%edx
+ 476:	74 c8                	je     440 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 478:	83 fa 25             	cmp    $0x25,%edx
+ 47b:	75 e7                	jne    464 <printf+0x54>
+      if(c == 'd'){
+ 47d:	83 f8 64             	cmp    $0x64,%eax
+ 480:	0f 84 9a 00 00 00    	je     520 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 486:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 48c:	83 f9 70             	cmp    $0x70,%ecx
+ 48f:	74 5f                	je     4f0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 491:	83 f8 73             	cmp    $0x73,%eax
+ 494:	0f 84 d6 00 00 00    	je     570 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 49a:	83 f8 63             	cmp    $0x63,%eax
+ 49d:	0f 84 8d 00 00 00    	je     530 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4a3:	83 f8 25             	cmp    $0x25,%eax
+ 4a6:	0f 84 b4 00 00 00    	je     560 <printf+0x150>
+  write(fd, &c, 1);
+ 4ac:	83 ec 04             	sub    $0x4,%esp
+ 4af:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4b3:	6a 01                	push   $0x1
+ 4b5:	57                   	push   %edi
+ 4b6:	ff 75 08             	pushl  0x8(%ebp)
+ 4b9:	e8 f5 fd ff ff       	call   2b3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4be:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 4c1:	83 c4 0c             	add    $0xc,%esp
+ 4c4:	6a 01                	push   $0x1
+ 4c6:	83 c6 01             	add    $0x1,%esi
+ 4c9:	57                   	push   %edi
+ 4ca:	ff 75 08             	pushl  0x8(%ebp)
+ 4cd:	e8 e1 fd ff ff       	call   2b3 <write>
+  for(i = 0; fmt[i]; i++){
+ 4d2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 4d6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 4d9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 4db:	84 db                	test   %bl,%bl
+ 4dd:	75 8f                	jne    46e <printf+0x5e>
+    }
+  }
+}
+ 4df:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4e2:	5b                   	pop    %ebx
+ 4e3:	5e                   	pop    %esi
+ 4e4:	5f                   	pop    %edi
+ 4e5:	5d                   	pop    %ebp
+ 4e6:	c3                   	ret    
+ 4e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ee:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 4f0:	83 ec 0c             	sub    $0xc,%esp
+ 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4f8:	6a 00                	push   $0x0
+ 4fa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 4fd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 500:	8b 13                	mov    (%ebx),%edx
+ 502:	e8 59 fe ff ff       	call   360 <printint>
+        ap++;
+ 507:	89 d8                	mov    %ebx,%eax
+ 509:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 50c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 50e:	83 c0 04             	add    $0x4,%eax
+ 511:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 514:	e9 4b ff ff ff       	jmp    464 <printf+0x54>
+ 519:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 520:	83 ec 0c             	sub    $0xc,%esp
+ 523:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 528:	6a 01                	push   $0x1
+ 52a:	eb ce                	jmp    4fa <printf+0xea>
+ 52c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 530:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 533:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 536:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 538:	6a 01                	push   $0x1
+        ap++;
+ 53a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 53d:	57                   	push   %edi
+ 53e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 541:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 544:	e8 6a fd ff ff       	call   2b3 <write>
+        ap++;
+ 549:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 54c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 54f:	31 d2                	xor    %edx,%edx
+ 551:	e9 0e ff ff ff       	jmp    464 <printf+0x54>
+ 556:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 55d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 560:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 563:	83 ec 04             	sub    $0x4,%esp
+ 566:	e9 59 ff ff ff       	jmp    4c4 <printf+0xb4>
+ 56b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 56f:	90                   	nop
+        s = (char*)*ap;
+ 570:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 573:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 575:	83 c0 04             	add    $0x4,%eax
+ 578:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 57b:	85 db                	test   %ebx,%ebx
+ 57d:	74 17                	je     596 <printf+0x186>
+        while(*s != 0){
+ 57f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 582:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 584:	84 c0                	test   %al,%al
+ 586:	0f 84 d8 fe ff ff    	je     464 <printf+0x54>
+ 58c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 58f:	89 de                	mov    %ebx,%esi
+ 591:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 594:	eb 1a                	jmp    5b0 <printf+0x1a0>
+          s = "(null)";
+ 596:	bb 78 07 00 00       	mov    $0x778,%ebx
+        while(*s != 0){
+ 59b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 59e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5a3:	89 de                	mov    %ebx,%esi
+ 5a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5af:	90                   	nop
+  write(fd, &c, 1);
+ 5b0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5b3:	83 c6 01             	add    $0x1,%esi
+ 5b6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5b9:	6a 01                	push   $0x1
+ 5bb:	57                   	push   %edi
+ 5bc:	53                   	push   %ebx
+ 5bd:	e8 f1 fc ff ff       	call   2b3 <write>
+        while(*s != 0){
+ 5c2:	0f b6 06             	movzbl (%esi),%eax
+ 5c5:	83 c4 10             	add    $0x10,%esp
+ 5c8:	84 c0                	test   %al,%al
+ 5ca:	75 e4                	jne    5b0 <printf+0x1a0>
+ 5cc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 5cf:	31 d2                	xor    %edx,%edx
+ 5d1:	e9 8e fe ff ff       	jmp    464 <printf+0x54>
+ 5d6:	66 90                	xchg   %ax,%ax
+ 5d8:	66 90                	xchg   %ax,%ax
+ 5da:	66 90                	xchg   %ax,%ax
+ 5dc:	66 90                	xchg   %ax,%ax
+ 5de:	66 90                	xchg   %ax,%ax
+
+000005e0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5e0:	f3 0f 1e fb          	endbr32 
+ 5e4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5e5:	a1 28 0a 00 00       	mov    0xa28,%eax
+{
+ 5ea:	89 e5                	mov    %esp,%ebp
+ 5ec:	57                   	push   %edi
+ 5ed:	56                   	push   %esi
+ 5ee:	53                   	push   %ebx
+ 5ef:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 5f4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5f7:	39 c8                	cmp    %ecx,%eax
+ 5f9:	73 15                	jae    610 <free+0x30>
+ 5fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5ff:	90                   	nop
+ 600:	39 d1                	cmp    %edx,%ecx
+ 602:	72 14                	jb     618 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 604:	39 d0                	cmp    %edx,%eax
+ 606:	73 10                	jae    618 <free+0x38>
+{
+ 608:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 60a:	8b 10                	mov    (%eax),%edx
+ 60c:	39 c8                	cmp    %ecx,%eax
+ 60e:	72 f0                	jb     600 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 610:	39 d0                	cmp    %edx,%eax
+ 612:	72 f4                	jb     608 <free+0x28>
+ 614:	39 d1                	cmp    %edx,%ecx
+ 616:	73 f0                	jae    608 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 618:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 61b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 61e:	39 fa                	cmp    %edi,%edx
+ 620:	74 1e                	je     640 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 622:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 625:	8b 50 04             	mov    0x4(%eax),%edx
+ 628:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 62b:	39 f1                	cmp    %esi,%ecx
+ 62d:	74 28                	je     657 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 62f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 631:	5b                   	pop    %ebx
+  freep = p;
+ 632:	a3 28 0a 00 00       	mov    %eax,0xa28
+}
+ 637:	5e                   	pop    %esi
+ 638:	5f                   	pop    %edi
+ 639:	5d                   	pop    %ebp
+ 63a:	c3                   	ret    
+ 63b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 640:	03 72 04             	add    0x4(%edx),%esi
+ 643:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 646:	8b 10                	mov    (%eax),%edx
+ 648:	8b 12                	mov    (%edx),%edx
+ 64a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 64d:	8b 50 04             	mov    0x4(%eax),%edx
+ 650:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 653:	39 f1                	cmp    %esi,%ecx
+ 655:	75 d8                	jne    62f <free+0x4f>
+    p->s.size += bp->s.size;
+ 657:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 65a:	a3 28 0a 00 00       	mov    %eax,0xa28
+    p->s.size += bp->s.size;
+ 65f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 662:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 665:	89 10                	mov    %edx,(%eax)
+}
+ 667:	5b                   	pop    %ebx
+ 668:	5e                   	pop    %esi
+ 669:	5f                   	pop    %edi
+ 66a:	5d                   	pop    %ebp
+ 66b:	c3                   	ret    
+ 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000670 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 670:	f3 0f 1e fb          	endbr32 
+ 674:	55                   	push   %ebp
+ 675:	89 e5                	mov    %esp,%ebp
+ 677:	57                   	push   %edi
+ 678:	56                   	push   %esi
+ 679:	53                   	push   %ebx
+ 67a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 67d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 680:	8b 3d 28 0a 00 00    	mov    0xa28,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 686:	8d 70 07             	lea    0x7(%eax),%esi
+ 689:	c1 ee 03             	shr    $0x3,%esi
+ 68c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 68f:	85 ff                	test   %edi,%edi
+ 691:	0f 84 a9 00 00 00    	je     740 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 697:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 699:	8b 48 04             	mov    0x4(%eax),%ecx
+ 69c:	39 f1                	cmp    %esi,%ecx
+ 69e:	73 6d                	jae    70d <malloc+0x9d>
+ 6a0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6a6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6ab:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ae:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6b5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6b8:	eb 17                	jmp    6d1 <malloc+0x61>
+ 6ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6c0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 6c2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6c5:	39 f1                	cmp    %esi,%ecx
+ 6c7:	73 4f                	jae    718 <malloc+0xa8>
+ 6c9:	8b 3d 28 0a 00 00    	mov    0xa28,%edi
+ 6cf:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6d1:	39 c7                	cmp    %eax,%edi
+ 6d3:	75 eb                	jne    6c0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 6d5:	83 ec 0c             	sub    $0xc,%esp
+ 6d8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 6db:	e8 3b fc ff ff       	call   31b <sbrk>
+  if(p == (char*)-1)
+ 6e0:	83 c4 10             	add    $0x10,%esp
+ 6e3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6e6:	74 1b                	je     703 <malloc+0x93>
+  hp->s.size = nu;
+ 6e8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6eb:	83 ec 0c             	sub    $0xc,%esp
+ 6ee:	83 c0 08             	add    $0x8,%eax
+ 6f1:	50                   	push   %eax
+ 6f2:	e8 e9 fe ff ff       	call   5e0 <free>
+  return freep;
+ 6f7:	a1 28 0a 00 00       	mov    0xa28,%eax
+      if((p = morecore(nunits)) == 0)
+ 6fc:	83 c4 10             	add    $0x10,%esp
+ 6ff:	85 c0                	test   %eax,%eax
+ 701:	75 bd                	jne    6c0 <malloc+0x50>
+        return 0;
+  }
+}
+ 703:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 706:	31 c0                	xor    %eax,%eax
+}
+ 708:	5b                   	pop    %ebx
+ 709:	5e                   	pop    %esi
+ 70a:	5f                   	pop    %edi
+ 70b:	5d                   	pop    %ebp
+ 70c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 70d:	89 c2                	mov    %eax,%edx
+ 70f:	89 f8                	mov    %edi,%eax
+ 711:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 718:	39 ce                	cmp    %ecx,%esi
+ 71a:	74 54                	je     770 <malloc+0x100>
+        p->s.size -= nunits;
+ 71c:	29 f1                	sub    %esi,%ecx
+ 71e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 721:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 724:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 727:	a3 28 0a 00 00       	mov    %eax,0xa28
+}
+ 72c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 72f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 732:	5b                   	pop    %ebx
+ 733:	5e                   	pop    %esi
+ 734:	5f                   	pop    %edi
+ 735:	5d                   	pop    %ebp
+ 736:	c3                   	ret    
+ 737:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 73e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 740:	c7 05 28 0a 00 00 2c 	movl   $0xa2c,0xa28
+ 747:	0a 00 00 
+    base.s.size = 0;
+ 74a:	bf 2c 0a 00 00       	mov    $0xa2c,%edi
+    base.s.ptr = freep = prevp = &base;
+ 74f:	c7 05 2c 0a 00 00 2c 	movl   $0xa2c,0xa2c
+ 756:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 759:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 75b:	c7 05 30 0a 00 00 00 	movl   $0x0,0xa30
+ 762:	00 00 00 
+    if(p->s.size >= nunits){
+ 765:	e9 36 ff ff ff       	jmp    6a0 <malloc+0x30>
+ 76a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 770:	8b 0a                	mov    (%edx),%ecx
+ 772:	89 08                	mov    %ecx,(%eax)
+ 774:	eb b1                	jmp    727 <malloc+0xb7>
diff -ruN xv6-public/zombie.d xv6-new/zombie.d
--- xv6-public/zombie.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/zombie.d	2022-10-07 22:43:44.791886860 +0530
@@ -0,0 +1 @@
+zombie.o: zombie.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/zombie.o and xv6-new/zombie.o differ
diff -ruN xv6-public/zombie.sym xv6-new/zombie.sym
--- xv6-public/zombie.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/zombie.sym	2022-10-07 22:43:44.791886860 +0530
@@ -0,0 +1,62 @@
+00000000 .text
+00000778 .rodata
+00000794 .eh_frame
+00000a28 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 zombie.c
+00000000 ulib.c
+00000000 printf.c
+00000360 printint
+00000780 digits.1096
+00000000 umalloc.c
+00000a28 freep
+00000a2c base
+00000030 strcpy
+00000410 printf
+00000260 memmove
+000002db mknod
+00000150 gets
+00000313 getpid
+00000670 malloc
+00000323 sleep
+00000353 get_burst_time
+000002a3 pipe
+000002b3 write
+000002eb fstat
+000002c3 kill
+00000303 chdir
+000002cb exec
+0000029b wait
+000002ab read
+000002e3 unlink
+0000028b fork
+0000031b sbrk
+0000032b uptime
+00000a28 __bss_start
+000000f0 memset
+00000000 main
+0000034b set_burst_time
+00000060 strcmp
+0000030b dup
+0000033b getMaxPid
+00000333 getNumProc
+00000343 getProcInfo
+000001d0 stat
+00000a28 _edata
+00000a34 _end
+000002f3 link
+00000293 exit
+00000220 atoi
+000000b0 strlen
+000002d3 open
+00000110 strchr
+000002fb mkdir
+000002bb close
+000005e0 free
