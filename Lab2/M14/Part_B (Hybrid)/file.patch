Binary files xv6-public/.git/index and xv6-new/.git/index differ
diff -ruN xv6-public/.git/logs/HEAD xv6-new/.git/logs/HEAD
--- xv6-public/.git/logs/HEAD	2022-10-07 22:33:18.211877978 +0530
+++ xv6-new/.git/logs/HEAD	2022-10-07 22:31:14.161876219 +0530
@@ -1 +1 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 akshat <akshat@4KxH4T.localdomain> 1665162198 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 akshat <akshat@4KxH4T.localdomain> 1665162074 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
diff -ruN xv6-public/.git/logs/refs/heads/master xv6-new/.git/logs/refs/heads/master
--- xv6-public/.git/logs/refs/heads/master	2022-10-07 22:33:18.211877978 +0530
+++ xv6-new/.git/logs/refs/heads/master	2022-10-07 22:31:14.161876219 +0530
@@ -1 +1 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 akshat <akshat@4KxH4T.localdomain> 1665162198 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 akshat <akshat@4KxH4T.localdomain> 1665162074 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
diff -ruN xv6-public/.git/logs/refs/remotes/origin/HEAD xv6-new/.git/logs/refs/remotes/origin/HEAD
--- xv6-public/.git/logs/refs/remotes/origin/HEAD	2022-10-07 22:33:18.211877978 +0530
+++ xv6-new/.git/logs/refs/remotes/origin/HEAD	2022-10-07 22:31:14.161876219 +0530
@@ -1 +1 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 akshat <akshat@4KxH4T.localdomain> 1665162198 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 akshat <akshat@4KxH4T.localdomain> 1665162074 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
diff -ruN xv6-public/Makefile xv6-new/Makefile
--- xv6-public/Makefile	2022-10-07 22:33:18.211877978 +0530
+++ xv6-new/Makefile	2022-10-07 17:56:01.181642200 +0530
@@ -181,6 +181,11 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_test1\
+	_partA_test1\
+	_partA_test2\
+	_partA_test3\
+	_testIO\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -217,7 +222,7 @@
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
@@ -249,8 +254,8 @@
 
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
-	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
+	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c testIO.c\
+	printf.c umalloc.c test1.c partA_test1.c partA_test2.c partA_test3.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
@@ -283,4 +288,4 @@
 	cp dist/* dist/.gdbinit.tmpl /tmp/xv6
 	(cd /tmp; tar cf - xv6) | gzip >xv6-rev10.tar.gz  # the next one will be 10 (9/17)
 
-.PHONY: dist-test dist
+.PHONY: dist-test dist
\ No newline at end of file
Binary files xv6-public/bio.o and xv6-new/bio.o differ
Binary files xv6-public/console.o and xv6-new/console.o differ
diff -ruN xv6-public/defs.h xv6-new/defs.h
--- xv6-public/defs.h	2022-10-07 22:33:18.211877978 +0530
+++ xv6-new/defs.h	2022-10-05 11:40:59.843739400 +0530
@@ -8,6 +8,7 @@
 struct spinlock;
 struct sleeplock;
 struct stat;
+struct processInfo;
 struct superblock;
 
 // bio.c
@@ -120,6 +121,12 @@
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int             getNumProc(void);
+int             getMaxPid(void);
+int             getProcInfo(int,struct processInfo*);
+int             set_burst_time(int);
+int             get_burst_time(void);
+
 
 // swtch.S
 void            swtch(struct context**, struct context*);
@@ -187,4 +194,4 @@
 void            clearpteu(pde_t *pgdir, char *uva);
 
 // number of elements in fixed-size array
-#define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+#define NELEM(x) (sizeof(x)/sizeof((x)[0]))
\ No newline at end of file
Binary files xv6-public/exec.o and xv6-new/exec.o differ
Binary files xv6-public/file.o and xv6-new/file.o differ
Binary files xv6-public/fs.o and xv6-new/fs.o differ
Binary files xv6-public/ide.o and xv6-new/ide.o differ
Binary files xv6-public/ioapic.o and xv6-new/ioapic.o differ
Binary files xv6-public/kalloc.o and xv6-new/kalloc.o differ
Binary files xv6-public/kbd.o and xv6-new/kbd.o differ
Binary files xv6-public/kernel and xv6-new/kernel differ
diff -ruN xv6-public/kernel.asm xv6-new/kernel.asm
--- xv6-public/kernel.asm	2022-10-07 22:34:12.601878749 +0530
+++ xv6-new/kernel.asm	2022-10-07 22:31:54.561876792 +0530
@@ -24,7 +24,7 @@
 80100012:	0f 22 e0             	mov    %eax,%cr4
   # Set page directory
   movl    $(V2P_WO(entrypgdir)), %eax
-80100015:	b8 00 90 10 00       	mov    $0x109000,%eax
+80100015:	b8 00 a0 10 00       	mov    $0x10a000,%eax
   movl    %eax, %cr3
 8010001a:	0f 22 d8             	mov    %eax,%cr3
   # Turn on paging.
@@ -37,7 +37,7 @@
 
   # Set up the stack pointer.
   movl $(stack + KSTACKSIZE), %esp
-80100028:	bc c0 b5 10 80       	mov    $0x8010b5c0,%esp
+80100028:	bc c0 c5 10 80       	mov    $0x8010c5c0,%esp
 
   # Jump to main(), and switch to executing at
   # high addresses. The indirect call is needed because
@@ -71,22 +71,22 @@
   bcache.head.prev = &bcache.head;
   bcache.head.next = &bcache.head;
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-80100048:	bb f4 b5 10 80       	mov    $0x8010b5f4,%ebx
+80100048:	bb f4 c5 10 80       	mov    $0x8010c5f4,%ebx
 {
 8010004d:	83 ec 0c             	sub    $0xc,%esp
   initlock(&bcache.lock, "bcache");
-80100050:	68 e0 70 10 80       	push   $0x801070e0
-80100055:	68 c0 b5 10 80       	push   $0x8010b5c0
-8010005a:	e8 81 43 00 00       	call   801043e0 <initlock>
+80100050:	68 00 77 10 80       	push   $0x80107700
+80100055:	68 c0 c5 10 80       	push   $0x8010c5c0
+8010005a:	e8 01 49 00 00       	call   80104960 <initlock>
   bcache.head.next = &bcache.head;
 8010005f:	83 c4 10             	add    $0x10,%esp
-80100062:	b8 bc fc 10 80       	mov    $0x8010fcbc,%eax
+80100062:	b8 bc 0c 11 80       	mov    $0x80110cbc,%eax
   bcache.head.prev = &bcache.head;
-80100067:	c7 05 0c fd 10 80 bc 	movl   $0x8010fcbc,0x8010fd0c
-8010006e:	fc 10 80 
+80100067:	c7 05 0c 0d 11 80 bc 	movl   $0x80110cbc,0x80110d0c
+8010006e:	0c 11 80 
   bcache.head.next = &bcache.head;
-80100071:	c7 05 10 fd 10 80 bc 	movl   $0x8010fcbc,0x8010fd10
-80100078:	fc 10 80 
+80100071:	c7 05 10 0d 11 80 bc 	movl   $0x80110cbc,0x80110d10
+80100078:	0c 11 80 
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
 8010007b:	eb 05                	jmp    80100082 <binit+0x42>
 8010007d:	8d 76 00             	lea    0x0(%esi),%esi
@@ -98,13 +98,13 @@
 80100085:	83 ec 08             	sub    $0x8,%esp
 80100088:	8d 43 0c             	lea    0xc(%ebx),%eax
     b->prev = &bcache.head;
-8010008b:	c7 43 50 bc fc 10 80 	movl   $0x8010fcbc,0x50(%ebx)
+8010008b:	c7 43 50 bc 0c 11 80 	movl   $0x80110cbc,0x50(%ebx)
     initsleeplock(&b->lock, "buffer");
-80100092:	68 e7 70 10 80       	push   $0x801070e7
+80100092:	68 07 77 10 80       	push   $0x80107707
 80100097:	50                   	push   %eax
-80100098:	e8 03 42 00 00       	call   801042a0 <initsleeplock>
+80100098:	e8 83 47 00 00       	call   80104820 <initsleeplock>
     bcache.head.next->prev = b;
-8010009d:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
+8010009d:	a1 10 0d 11 80       	mov    0x80110d10,%eax
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
 801000a2:	8d 93 5c 02 00 00    	lea    0x25c(%ebx),%edx
 801000a8:	83 c4 10             	add    $0x10,%esp
@@ -112,9 +112,9 @@
 801000ab:	89 58 50             	mov    %ebx,0x50(%eax)
     bcache.head.next = b;
 801000ae:	89 d8                	mov    %ebx,%eax
-801000b0:	89 1d 10 fd 10 80    	mov    %ebx,0x8010fd10
+801000b0:	89 1d 10 0d 11 80    	mov    %ebx,0x80110d10
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-801000b6:	81 fb 60 fa 10 80    	cmp    $0x8010fa60,%ebx
+801000b6:	81 fb 60 0a 11 80    	cmp    $0x80110a60,%ebx
 801000bc:	75 c2                	jne    80100080 <binit+0x40>
   }
 }
@@ -141,16 +141,16 @@
 801000dd:	8b 7d 08             	mov    0x8(%ebp),%edi
 801000e0:	8b 75 0c             	mov    0xc(%ebp),%esi
   acquire(&bcache.lock);
-801000e3:	68 c0 b5 10 80       	push   $0x8010b5c0
-801000e8:	e8 73 44 00 00       	call   80104560 <acquire>
+801000e3:	68 c0 c5 10 80       	push   $0x8010c5c0
+801000e8:	e8 f3 49 00 00       	call   80104ae0 <acquire>
   for(b = bcache.head.next; b != &bcache.head; b = b->next){
-801000ed:	8b 1d 10 fd 10 80    	mov    0x8010fd10,%ebx
+801000ed:	8b 1d 10 0d 11 80    	mov    0x80110d10,%ebx
 801000f3:	83 c4 10             	add    $0x10,%esp
-801000f6:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+801000f6:	81 fb bc 0c 11 80    	cmp    $0x80110cbc,%ebx
 801000fc:	75 0d                	jne    8010010b <bread+0x3b>
 801000fe:	eb 20                	jmp    80100120 <bread+0x50>
 80100100:	8b 5b 54             	mov    0x54(%ebx),%ebx
-80100103:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+80100103:	81 fb bc 0c 11 80    	cmp    $0x80110cbc,%ebx
 80100109:	74 15                	je     80100120 <bread+0x50>
     if(b->dev == dev && b->blockno == blockno){
 8010010b:	3b 7b 04             	cmp    0x4(%ebx),%edi
@@ -164,12 +164,12 @@
 8010011b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8010011f:	90                   	nop
   for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
-80100120:	8b 1d 0c fd 10 80    	mov    0x8010fd0c,%ebx
-80100126:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+80100120:	8b 1d 0c 0d 11 80    	mov    0x80110d0c,%ebx
+80100126:	81 fb bc 0c 11 80    	cmp    $0x80110cbc,%ebx
 8010012c:	75 0d                	jne    8010013b <bread+0x6b>
 8010012e:	eb 70                	jmp    801001a0 <bread+0xd0>
 80100130:	8b 5b 50             	mov    0x50(%ebx),%ebx
-80100133:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+80100133:	81 fb bc 0c 11 80    	cmp    $0x80110cbc,%ebx
 80100139:	74 65                	je     801001a0 <bread+0xd0>
     if(b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
 8010013b:	8b 43 4c             	mov    0x4c(%ebx),%eax
@@ -187,12 +187,12 @@
 80100153:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
       release(&bcache.lock);
 8010015a:	83 ec 0c             	sub    $0xc,%esp
-8010015d:	68 c0 b5 10 80       	push   $0x8010b5c0
-80100162:	e8 b9 44 00 00       	call   80104620 <release>
+8010015d:	68 c0 c5 10 80       	push   $0x8010c5c0
+80100162:	e8 39 4a 00 00       	call   80104ba0 <release>
       acquiresleep(&b->lock);
 80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
 8010016a:	89 04 24             	mov    %eax,(%esp)
-8010016d:	e8 6e 41 00 00       	call   801042e0 <acquiresleep>
+8010016d:	e8 ee 46 00 00       	call   80104860 <acquiresleep>
       return b;
 80100172:	83 c4 10             	add    $0x10,%esp
   struct buf *b;
@@ -229,7 +229,7 @@
 8010019e:	66 90                	xchg   %ax,%ax
   panic("bget: no buffers");
 801001a0:	83 ec 0c             	sub    $0xc,%esp
-801001a3:	68 ee 70 10 80       	push   $0x801070ee
+801001a3:	68 0e 77 10 80       	push   $0x8010770e
 801001a8:	e8 e3 01 00 00       	call   80100390 <panic>
 801001ad:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -248,7 +248,7 @@
   if(!holdingsleep(&b->lock))
 801001be:	8d 43 0c             	lea    0xc(%ebx),%eax
 801001c1:	50                   	push   %eax
-801001c2:	e8 b9 41 00 00       	call   80104380 <holdingsleep>
+801001c2:	e8 39 47 00 00       	call   80104900 <holdingsleep>
 801001c7:	83 c4 10             	add    $0x10,%esp
 801001ca:	85 c0                	test   %eax,%eax
 801001cc:	74 0f                	je     801001dd <bwrite+0x2d>
@@ -264,7 +264,7 @@
 801001d8:	e9 a3 20 00 00       	jmp    80102280 <iderw>
     panic("bwrite");
 801001dd:	83 ec 0c             	sub    $0xc,%esp
-801001e0:	68 ff 70 10 80       	push   $0x801070ff
+801001e0:	68 1f 77 10 80       	push   $0x8010771f
 801001e5:	e8 a6 01 00 00       	call   80100390 <panic>
 801001ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
@@ -285,7 +285,7 @@
 801001fc:	8d 73 0c             	lea    0xc(%ebx),%esi
 801001ff:	83 ec 0c             	sub    $0xc,%esp
 80100202:	56                   	push   %esi
-80100203:	e8 78 41 00 00       	call   80104380 <holdingsleep>
+80100203:	e8 f8 46 00 00       	call   80104900 <holdingsleep>
 80100208:	83 c4 10             	add    $0x10,%esp
 8010020b:	85 c0                	test   %eax,%eax
 8010020d:	74 66                	je     80100275 <brelse+0x85>
@@ -294,11 +294,11 @@
   releasesleep(&b->lock);
 8010020f:	83 ec 0c             	sub    $0xc,%esp
 80100212:	56                   	push   %esi
-80100213:	e8 28 41 00 00       	call   80104340 <releasesleep>
+80100213:	e8 a8 46 00 00       	call   801048c0 <releasesleep>
 
   acquire(&bcache.lock);
-80100218:	c7 04 24 c0 b5 10 80 	movl   $0x8010b5c0,(%esp)
-8010021f:	e8 3c 43 00 00       	call   80104560 <acquire>
+80100218:	c7 04 24 c0 c5 10 80 	movl   $0x8010c5c0,(%esp)
+8010021f:	e8 bc 48 00 00       	call   80104ae0 <acquire>
   b->refcnt--;
 80100224:	8b 43 4c             	mov    0x4c(%ebx),%eax
   if (b->refcnt == 0) {
@@ -319,30 +319,30 @@
 80100240:	8b 53 54             	mov    0x54(%ebx),%edx
 80100243:	89 50 54             	mov    %edx,0x54(%eax)
     b->next = bcache.head.next;
-80100246:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
+80100246:	a1 10 0d 11 80       	mov    0x80110d10,%eax
     b->prev = &bcache.head;
-8010024b:	c7 43 50 bc fc 10 80 	movl   $0x8010fcbc,0x50(%ebx)
+8010024b:	c7 43 50 bc 0c 11 80 	movl   $0x80110cbc,0x50(%ebx)
     b->next = bcache.head.next;
 80100252:	89 43 54             	mov    %eax,0x54(%ebx)
     bcache.head.next->prev = b;
-80100255:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
+80100255:	a1 10 0d 11 80       	mov    0x80110d10,%eax
 8010025a:	89 58 50             	mov    %ebx,0x50(%eax)
     bcache.head.next = b;
-8010025d:	89 1d 10 fd 10 80    	mov    %ebx,0x8010fd10
+8010025d:	89 1d 10 0d 11 80    	mov    %ebx,0x80110d10
   }
   
   release(&bcache.lock);
-80100263:	c7 45 08 c0 b5 10 80 	movl   $0x8010b5c0,0x8(%ebp)
+80100263:	c7 45 08 c0 c5 10 80 	movl   $0x8010c5c0,0x8(%ebp)
 }
 8010026a:	8d 65 f8             	lea    -0x8(%ebp),%esp
 8010026d:	5b                   	pop    %ebx
 8010026e:	5e                   	pop    %esi
 8010026f:	5d                   	pop    %ebp
   release(&bcache.lock);
-80100270:	e9 ab 43 00 00       	jmp    80104620 <release>
+80100270:	e9 2b 49 00 00       	jmp    80104ba0 <release>
     panic("brelse");
 80100275:	83 ec 0c             	sub    $0xc,%esp
-80100278:	68 06 71 10 80       	push   $0x80107106
+80100278:	68 26 77 10 80       	push   $0x80107726
 8010027d:	e8 0e 01 00 00       	call   80100390 <panic>
 80100282:	66 90                	xchg   %ax,%ax
 80100284:	66 90                	xchg   %ax,%ax
@@ -378,8 +378,8 @@
   iunlock(ip);
 801002a5:	e8 96 15 00 00       	call   80101840 <iunlock>
   acquire(&cons.lock);
-801002aa:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-801002b1:	e8 aa 42 00 00       	call   80104560 <acquire>
+801002aa:	c7 04 24 20 b5 10 80 	movl   $0x8010b520,(%esp)
+801002b1:	e8 2a 48 00 00       	call   80104ae0 <acquire>
         // caller gets a 0-byte result.
         input.r--;
       }
@@ -395,30 +395,30 @@
 801002be:	85 db                	test   %ebx,%ebx
 801002c0:	0f 8e 97 00 00 00    	jle    8010035d <consoleread+0xcd>
     while(input.r == input.w){
-801002c6:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
-801002cb:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+801002c6:	a1 a0 0f 11 80       	mov    0x80110fa0,%eax
+801002cb:	3b 05 a4 0f 11 80    	cmp    0x80110fa4,%eax
 801002d1:	74 27                	je     801002fa <consoleread+0x6a>
 801002d3:	eb 5b                	jmp    80100330 <consoleread+0xa0>
 801002d5:	8d 76 00             	lea    0x0(%esi),%esi
       sleep(&input.r, &cons.lock);
 801002d8:	83 ec 08             	sub    $0x8,%esp
-801002db:	68 20 a5 10 80       	push   $0x8010a520
-801002e0:	68 a0 ff 10 80       	push   $0x8010ffa0
-801002e5:	e8 36 3c 00 00       	call   80103f20 <sleep>
+801002db:	68 20 b5 10 80       	push   $0x8010b520
+801002e0:	68 a0 0f 11 80       	push   $0x80110fa0
+801002e5:	e8 e6 3f 00 00       	call   801042d0 <sleep>
     while(input.r == input.w){
-801002ea:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
+801002ea:	a1 a0 0f 11 80       	mov    0x80110fa0,%eax
 801002ef:	83 c4 10             	add    $0x10,%esp
-801002f2:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+801002f2:	3b 05 a4 0f 11 80    	cmp    0x80110fa4,%eax
 801002f8:	75 36                	jne    80100330 <consoleread+0xa0>
       if(myproc()->killed){
-801002fa:	e8 61 36 00 00       	call   80103960 <myproc>
+801002fa:	e8 61 39 00 00       	call   80103c60 <myproc>
 801002ff:	8b 48 24             	mov    0x24(%eax),%ecx
 80100302:	85 c9                	test   %ecx,%ecx
 80100304:	74 d2                	je     801002d8 <consoleread+0x48>
         release(&cons.lock);
 80100306:	83 ec 0c             	sub    $0xc,%esp
-80100309:	68 20 a5 10 80       	push   $0x8010a520
-8010030e:	e8 0d 43 00 00       	call   80104620 <release>
+80100309:	68 20 b5 10 80       	push   $0x8010b520
+8010030e:	e8 8d 48 00 00       	call   80104ba0 <release>
         ilock(ip);
 80100313:	5a                   	pop    %edx
 80100314:	ff 75 08             	pushl  0x8(%ebp)
@@ -443,10 +443,10 @@
 8010032c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     c = input.buf[input.r++ % INPUT_BUF];
 80100330:	8d 50 01             	lea    0x1(%eax),%edx
-80100333:	89 15 a0 ff 10 80    	mov    %edx,0x8010ffa0
+80100333:	89 15 a0 0f 11 80    	mov    %edx,0x80110fa0
 80100339:	89 c2                	mov    %eax,%edx
 8010033b:	83 e2 7f             	and    $0x7f,%edx
-8010033e:	0f be 8a 20 ff 10 80 	movsbl -0x7fef00e0(%edx),%ecx
+8010033e:	0f be 8a 20 0f 11 80 	movsbl -0x7feef0e0(%edx),%ecx
     if(c == C('D')){  // EOF
 80100345:	80 f9 04             	cmp    $0x4,%cl
 80100348:	74 38                	je     80100382 <consoleread+0xf2>
@@ -462,8 +462,8 @@
 80100357:	0f 85 61 ff ff ff    	jne    801002be <consoleread+0x2e>
   release(&cons.lock);
 8010035d:	83 ec 0c             	sub    $0xc,%esp
-80100360:	68 20 a5 10 80       	push   $0x8010a520
-80100365:	e8 b6 42 00 00       	call   80104620 <release>
+80100360:	68 20 b5 10 80       	push   $0x8010b520
+80100365:	e8 36 48 00 00       	call   80104ba0 <release>
   ilock(ip);
 8010036a:	58                   	pop    %eax
 8010036b:	ff 75 08             	pushl  0x8(%ebp)
@@ -485,7 +485,7 @@
 80100382:	39 f3                	cmp    %esi,%ebx
 80100384:	73 d7                	jae    8010035d <consoleread+0xcd>
         input.r--;
-80100386:	a3 a0 ff 10 80       	mov    %eax,0x8010ffa0
+80100386:	a3 a0 0f 11 80       	mov    %eax,0x80110fa0
 8010038b:	eb d0                	jmp    8010035d <consoleread+0xcd>
 8010038d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -505,7 +505,7 @@
   asm volatile("cli");
 8010039c:	fa                   	cli    
   cons.locking = 0;
-8010039d:	c7 05 54 a5 10 80 00 	movl   $0x0,0x8010a554
+8010039d:	c7 05 54 b5 10 80 00 	movl   $0x0,0x8010b554
 801003a4:	00 00 00 
   getcallerpcs(&s, pcs);
 801003a7:	8d 5d d0             	lea    -0x30(%ebp),%ebx
@@ -514,14 +514,14 @@
 801003ad:	e8 ee 24 00 00       	call   801028a0 <lapicid>
 801003b2:	83 ec 08             	sub    $0x8,%esp
 801003b5:	50                   	push   %eax
-801003b6:	68 0d 71 10 80       	push   $0x8010710d
+801003b6:	68 2d 77 10 80       	push   $0x8010772d
 801003bb:	e8 f0 02 00 00       	call   801006b0 <cprintf>
   cprintf(s);
 801003c0:	58                   	pop    %eax
 801003c1:	ff 75 08             	pushl  0x8(%ebp)
 801003c4:	e8 e7 02 00 00       	call   801006b0 <cprintf>
   cprintf("\n");
-801003c9:	c7 04 24 37 7a 10 80 	movl   $0x80107a37,(%esp)
+801003c9:	c7 04 24 6b 80 10 80 	movl   $0x8010806b,(%esp)
 801003d0:	e8 db 02 00 00       	call   801006b0 <cprintf>
   getcallerpcs(&s, pcs);
 801003d5:	8d 45 08             	lea    0x8(%ebp),%eax
@@ -529,21 +529,21 @@
 801003d9:	59                   	pop    %ecx
 801003da:	53                   	push   %ebx
 801003db:	50                   	push   %eax
-801003dc:	e8 1f 40 00 00       	call   80104400 <getcallerpcs>
+801003dc:	e8 9f 45 00 00       	call   80104980 <getcallerpcs>
   for(i=0; i<10; i++)
 801003e1:	83 c4 10             	add    $0x10,%esp
     cprintf(" %p", pcs[i]);
 801003e4:	83 ec 08             	sub    $0x8,%esp
 801003e7:	ff 33                	pushl  (%ebx)
 801003e9:	83 c3 04             	add    $0x4,%ebx
-801003ec:	68 21 71 10 80       	push   $0x80107121
+801003ec:	68 41 77 10 80       	push   $0x80107741
 801003f1:	e8 ba 02 00 00       	call   801006b0 <cprintf>
   for(i=0; i<10; i++)
 801003f6:	83 c4 10             	add    $0x10,%esp
 801003f9:	39 f3                	cmp    %esi,%ebx
 801003fb:	75 e7                	jne    801003e4 <panic+0x54>
   panicked = 1; // freeze other CPU
-801003fd:	c7 05 58 a5 10 80 01 	movl   $0x1,0x8010a558
+801003fd:	c7 05 58 b5 10 80 01 	movl   $0x1,0x8010b558
 80100404:	00 00 00 
   for(;;)
 80100407:	eb fe                	jmp    80100407 <panic+0x77>
@@ -564,7 +564,7 @@
     uartputc(c);
 80100426:	83 ec 0c             	sub    $0xc,%esp
 80100429:	50                   	push   %eax
-8010042a:	e8 b1 58 00 00       	call   80105ce0 <uartputc>
+8010042a:	e8 d1 5e 00 00       	call   80106300 <uartputc>
 8010042f:	83 c4 10             	add    $0x10,%esp
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
 80100432:	bf d4 03 00 00       	mov    $0x3d4,%edi
@@ -657,11 +657,11 @@
     uartputc('\b'); uartputc(' '); uartputc('\b');
 80100510:	83 ec 0c             	sub    $0xc,%esp
 80100513:	6a 08                	push   $0x8
-80100515:	e8 c6 57 00 00       	call   80105ce0 <uartputc>
+80100515:	e8 e6 5d 00 00       	call   80106300 <uartputc>
 8010051a:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
-80100521:	e8 ba 57 00 00       	call   80105ce0 <uartputc>
+80100521:	e8 da 5d 00 00       	call   80106300 <uartputc>
 80100526:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-8010052d:	e8 ae 57 00 00       	call   80105ce0 <uartputc>
+8010052d:	e8 ce 5d 00 00       	call   80106300 <uartputc>
 80100532:	83 c4 10             	add    $0x10,%esp
 80100535:	e9 f8 fe ff ff       	jmp    80100432 <consputc.part.0+0x22>
 8010053a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -676,7 +676,7 @@
 80100552:	68 60 0e 00 00       	push   $0xe60
 80100557:	68 a0 80 0b 80       	push   $0x800b80a0
 8010055c:	68 00 80 0b 80       	push   $0x800b8000
-80100561:	e8 aa 41 00 00       	call   80104710 <memmove>
+80100561:	e8 2a 47 00 00       	call   80104c90 <memmove>
     memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
 80100566:	b8 80 07 00 00       	mov    $0x780,%eax
 8010056b:	83 c4 0c             	add    $0xc,%esp
@@ -685,13 +685,13 @@
 80100572:	50                   	push   %eax
 80100573:	6a 00                	push   $0x0
 80100575:	56                   	push   %esi
-80100576:	e8 f5 40 00 00       	call   80104670 <memset>
+80100576:	e8 75 46 00 00       	call   80104bf0 <memset>
 8010057b:	88 5d e7             	mov    %bl,-0x19(%ebp)
 8010057e:	83 c4 10             	add    $0x10,%esp
 80100581:	e9 22 ff ff ff       	jmp    801004a8 <consputc.part.0+0x98>
     panic("pos under/overflow");
 80100586:	83 ec 0c             	sub    $0xc,%esp
-80100589:	68 25 71 10 80       	push   $0x80107125
+80100589:	68 45 77 10 80       	push   $0x80107745
 8010058e:	e8 fd fd ff ff       	call   80100390 <panic>
 80100593:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010059a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -722,7 +722,7 @@
 801005c2:	31 d2                	xor    %edx,%edx
 801005c4:	89 ce                	mov    %ecx,%esi
 801005c6:	f7 75 d4             	divl   -0x2c(%ebp)
-801005c9:	0f b6 92 50 71 10 80 	movzbl -0x7fef8eb0(%edx),%edx
+801005c9:	0f b6 92 70 77 10 80 	movzbl -0x7fef8890(%edx),%edx
 801005d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
 801005d3:	89 d8                	mov    %ebx,%eax
 801005d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
@@ -749,7 +749,7 @@
 801005fc:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
 80100600:	0f be c2             	movsbl %dl,%eax
   if(panicked){
-80100603:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+80100603:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
 80100609:	85 d2                	test   %edx,%edx
 8010060b:	74 03                	je     80100610 <printint+0x70>
   asm volatile("cli");
@@ -800,8 +800,8 @@
   iunlock(ip);
 80100653:	e8 e8 11 00 00       	call   80101840 <iunlock>
   acquire(&cons.lock);
-80100658:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-8010065f:	e8 fc 3e 00 00       	call   80104560 <acquire>
+80100658:	c7 04 24 20 b5 10 80 	movl   $0x8010b520,(%esp)
+8010065f:	e8 7c 44 00 00       	call   80104ae0 <acquire>
   for(i = 0; i < n; i++)
 80100664:	83 c4 10             	add    $0x10,%esp
 80100667:	85 db                	test   %ebx,%ebx
@@ -809,7 +809,7 @@
 8010066b:	8b 7d 0c             	mov    0xc(%ebp),%edi
 8010066e:	8d 34 1f             	lea    (%edi,%ebx,1),%esi
   if(panicked){
-80100671:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+80100671:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
 80100677:	85 d2                	test   %edx,%edx
 80100679:	74 05                	je     80100680 <consolewrite+0x40>
 8010067b:	fa                   	cli    
@@ -825,8 +825,8 @@
 8010068d:	75 e2                	jne    80100671 <consolewrite+0x31>
   release(&cons.lock);
 8010068f:	83 ec 0c             	sub    $0xc,%esp
-80100692:	68 20 a5 10 80       	push   $0x8010a520
-80100697:	e8 84 3f 00 00       	call   80104620 <release>
+80100692:	68 20 b5 10 80       	push   $0x8010b520
+80100697:	e8 04 45 00 00       	call   80104ba0 <release>
   ilock(ip);
 8010069c:	58                   	pop    %eax
 8010069d:	ff 75 08             	pushl  0x8(%ebp)
@@ -853,7 +853,7 @@
 801006b9:	53                   	push   %ebx
 801006ba:	83 ec 1c             	sub    $0x1c,%esp
   locking = cons.locking;
-801006bd:	a1 54 a5 10 80       	mov    0x8010a554,%eax
+801006bd:	a1 54 b5 10 80       	mov    0x8010b554,%eax
 801006c2:	89 45 e0             	mov    %eax,-0x20(%ebp)
   if(locking)
 801006c5:	85 c0                	test   %eax,%eax
@@ -875,7 +875,7 @@
 801006e7:	83 f8 25             	cmp    $0x25,%eax
 801006ea:	74 44                	je     80100730 <cprintf+0x80>
   if(panicked){
-801006ec:	8b 0d 58 a5 10 80    	mov    0x8010a558,%ecx
+801006ec:	8b 0d 58 b5 10 80    	mov    0x8010b558,%ecx
 801006f2:	85 c9                	test   %ecx,%ecx
 801006f4:	74 0f                	je     80100705 <cprintf+0x55>
 801006f6:	fa                   	cli    
@@ -936,11 +936,11 @@
 80100779:	85 db                	test   %ebx,%ebx
 8010077b:	75 55                	jne    801007d2 <cprintf+0x122>
         s = "(null)";
-8010077d:	bb 38 71 10 80       	mov    $0x80107138,%ebx
+8010077d:	bb 58 77 10 80       	mov    $0x80107758,%ebx
       for(; *s; s++)
 80100782:	b8 28 00 00 00       	mov    $0x28,%eax
   if(panicked){
-80100787:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+80100787:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
 8010078d:	85 d2                	test   %edx,%edx
 8010078f:	74 39                	je     801007ca <cprintf+0x11a>
 80100791:	fa                   	cli    
@@ -961,8 +961,8 @@
 801007b0:	e9 55 ff ff ff       	jmp    8010070a <cprintf+0x5a>
     acquire(&cons.lock);
 801007b5:	83 ec 0c             	sub    $0xc,%esp
-801007b8:	68 20 a5 10 80       	push   $0x8010a520
-801007bd:	e8 9e 3d 00 00       	call   80104560 <acquire>
+801007b8:	68 20 b5 10 80       	push   $0x8010b520
+801007bd:	e8 1e 43 00 00       	call   80104ae0 <acquire>
 801007c2:	83 c4 10             	add    $0x10,%esp
 801007c5:	e9 03 ff ff ff       	jmp    801006cd <cprintf+0x1d>
 801007ca:	e8 41 fc ff ff       	call   80100410 <consputc.part.0>
@@ -975,7 +975,7 @@
 801007d9:	89 fb                	mov    %edi,%ebx
 801007db:	e9 2a ff ff ff       	jmp    8010070a <cprintf+0x5a>
   if(panicked){
-801007e0:	8b 3d 58 a5 10 80    	mov    0x8010a558,%edi
+801007e0:	8b 3d 58 b5 10 80    	mov    0x8010b558,%edi
 801007e6:	85 ff                	test   %edi,%edi
 801007e8:	0f 84 12 ff ff ff    	je     80100700 <cprintf+0x50>
 801007ee:	fa                   	cli    
@@ -983,7 +983,7 @@
 801007ef:	eb fe                	jmp    801007ef <cprintf+0x13f>
 801007f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   if(panicked){
-801007f8:	8b 0d 58 a5 10 80    	mov    0x8010a558,%ecx
+801007f8:	8b 0d 58 b5 10 80    	mov    0x8010b558,%ecx
 801007fe:	85 c9                	test   %ecx,%ecx
 80100800:	74 06                	je     80100808 <cprintf+0x158>
 80100802:	fa                   	cli    
@@ -993,7 +993,7 @@
 80100808:	b8 25 00 00 00       	mov    $0x25,%eax
 8010080d:	e8 fe fb ff ff       	call   80100410 <consputc.part.0>
   if(panicked){
-80100812:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+80100812:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
 80100818:	85 d2                	test   %edx,%edx
 8010081a:	74 2c                	je     80100848 <cprintf+0x198>
 8010081c:	fa                   	cli    
@@ -1002,14 +1002,14 @@
 8010081f:	90                   	nop
     release(&cons.lock);
 80100820:	83 ec 0c             	sub    $0xc,%esp
-80100823:	68 20 a5 10 80       	push   $0x8010a520
-80100828:	e8 f3 3d 00 00       	call   80104620 <release>
+80100823:	68 20 b5 10 80       	push   $0x8010b520
+80100828:	e8 73 43 00 00       	call   80104ba0 <release>
 8010082d:	83 c4 10             	add    $0x10,%esp
 }
 80100830:	e9 ee fe ff ff       	jmp    80100723 <cprintf+0x73>
     panic("null fmt");
 80100835:	83 ec 0c             	sub    $0xc,%esp
-80100838:	68 3f 71 10 80       	push   $0x8010713f
+80100838:	68 5f 77 10 80       	push   $0x8010775f
 8010083d:	e8 4e fb ff ff       	call   80100390 <panic>
 80100842:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80100848:	89 f8                	mov    %edi,%eax
@@ -1033,8 +1033,8 @@
 8010086c:	83 ec 18             	sub    $0x18,%esp
 8010086f:	8b 7d 08             	mov    0x8(%ebp),%edi
   acquire(&cons.lock);
-80100872:	68 20 a5 10 80       	push   $0x8010a520
-80100877:	e8 e4 3c 00 00       	call   80104560 <acquire>
+80100872:	68 20 b5 10 80       	push   $0x8010b520
+80100877:	e8 64 42 00 00       	call   80104ae0 <acquire>
   while((c = getc()) >= 0){
 8010087c:	83 c4 10             	add    $0x10,%esp
 8010087f:	eb 17                	jmp    80100898 <consoleintr+0x38>
@@ -1056,22 +1056,22 @@
 801008ab:	83 fb 7f             	cmp    $0x7f,%ebx
 801008ae:	0f 84 cc 00 00 00    	je     80100980 <consoleintr+0x120>
       if(c != 0 && input.e-input.r < INPUT_BUF){
-801008b4:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+801008b4:	a1 a8 0f 11 80       	mov    0x80110fa8,%eax
 801008b9:	89 c2                	mov    %eax,%edx
-801008bb:	2b 15 a0 ff 10 80    	sub    0x8010ffa0,%edx
+801008bb:	2b 15 a0 0f 11 80    	sub    0x80110fa0,%edx
 801008c1:	83 fa 7f             	cmp    $0x7f,%edx
 801008c4:	77 d2                	ja     80100898 <consoleintr+0x38>
         c = (c == '\r') ? '\n' : c;
 801008c6:	8d 48 01             	lea    0x1(%eax),%ecx
-801008c9:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+801008c9:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
 801008cf:	83 e0 7f             	and    $0x7f,%eax
         input.buf[input.e++ % INPUT_BUF] = c;
-801008d2:	89 0d a8 ff 10 80    	mov    %ecx,0x8010ffa8
+801008d2:	89 0d a8 0f 11 80    	mov    %ecx,0x80110fa8
         c = (c == '\r') ? '\n' : c;
 801008d8:	83 fb 0d             	cmp    $0xd,%ebx
 801008db:	0f 84 02 01 00 00    	je     801009e3 <consoleintr+0x183>
         input.buf[input.e++ % INPUT_BUF] = c;
-801008e1:	88 98 20 ff 10 80    	mov    %bl,-0x7fef00e0(%eax)
+801008e1:	88 98 20 0f 11 80    	mov    %bl,-0x7feef0e0(%eax)
   if(panicked){
 801008e7:	85 d2                	test   %edx,%edx
 801008e9:	0f 85 ff 00 00 00    	jne    801009ee <consoleintr+0x18e>
@@ -1082,27 +1082,27 @@
 801008f9:	0f 84 0f 01 00 00    	je     80100a0e <consoleintr+0x1ae>
 801008ff:	83 fb 04             	cmp    $0x4,%ebx
 80100902:	0f 84 06 01 00 00    	je     80100a0e <consoleintr+0x1ae>
-80100908:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
+80100908:	a1 a0 0f 11 80       	mov    0x80110fa0,%eax
 8010090d:	83 e8 80             	sub    $0xffffff80,%eax
-80100910:	39 05 a8 ff 10 80    	cmp    %eax,0x8010ffa8
+80100910:	39 05 a8 0f 11 80    	cmp    %eax,0x80110fa8
 80100916:	75 80                	jne    80100898 <consoleintr+0x38>
 80100918:	e9 f6 00 00 00       	jmp    80100a13 <consoleintr+0x1b3>
 8010091d:	8d 76 00             	lea    0x0(%esi),%esi
       while(input.e != input.w &&
-80100920:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
-80100925:	39 05 a4 ff 10 80    	cmp    %eax,0x8010ffa4
+80100920:	a1 a8 0f 11 80       	mov    0x80110fa8,%eax
+80100925:	39 05 a4 0f 11 80    	cmp    %eax,0x80110fa4
 8010092b:	0f 84 67 ff ff ff    	je     80100898 <consoleintr+0x38>
             input.buf[(input.e-1) % INPUT_BUF] != '\n'){
 80100931:	83 e8 01             	sub    $0x1,%eax
 80100934:	89 c2                	mov    %eax,%edx
 80100936:	83 e2 7f             	and    $0x7f,%edx
       while(input.e != input.w &&
-80100939:	80 ba 20 ff 10 80 0a 	cmpb   $0xa,-0x7fef00e0(%edx)
+80100939:	80 ba 20 0f 11 80 0a 	cmpb   $0xa,-0x7feef0e0(%edx)
 80100940:	0f 84 52 ff ff ff    	je     80100898 <consoleintr+0x38>
   if(panicked){
-80100946:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+80100946:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
         input.e--;
-8010094c:	a3 a8 ff 10 80       	mov    %eax,0x8010ffa8
+8010094c:	a3 a8 0f 11 80       	mov    %eax,0x80110fa8
   if(panicked){
 80100951:	85 d2                	test   %edx,%edx
 80100953:	74 0b                	je     80100960 <consoleintr+0x100>
@@ -1114,20 +1114,20 @@
 80100960:	b8 00 01 00 00       	mov    $0x100,%eax
 80100965:	e8 a6 fa ff ff       	call   80100410 <consputc.part.0>
       while(input.e != input.w &&
-8010096a:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
-8010096f:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+8010096a:	a1 a8 0f 11 80       	mov    0x80110fa8,%eax
+8010096f:	3b 05 a4 0f 11 80    	cmp    0x80110fa4,%eax
 80100975:	75 ba                	jne    80100931 <consoleintr+0xd1>
 80100977:	e9 1c ff ff ff       	jmp    80100898 <consoleintr+0x38>
 8010097c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       if(input.e != input.w){
-80100980:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
-80100985:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+80100980:	a1 a8 0f 11 80       	mov    0x80110fa8,%eax
+80100985:	3b 05 a4 0f 11 80    	cmp    0x80110fa4,%eax
 8010098b:	0f 84 07 ff ff ff    	je     80100898 <consoleintr+0x38>
         input.e--;
 80100991:	83 e8 01             	sub    $0x1,%eax
-80100994:	a3 a8 ff 10 80       	mov    %eax,0x8010ffa8
+80100994:	a3 a8 0f 11 80       	mov    %eax,0x80110fa8
   if(panicked){
-80100999:	a1 58 a5 10 80       	mov    0x8010a558,%eax
+80100999:	a1 58 b5 10 80       	mov    0x8010b558,%eax
 8010099e:	85 c0                	test   %eax,%eax
 801009a0:	74 16                	je     801009b8 <consoleintr+0x158>
 801009a2:	fa                   	cli    
@@ -1144,8 +1144,8 @@
 801009c2:	e9 d1 fe ff ff       	jmp    80100898 <consoleintr+0x38>
   release(&cons.lock);
 801009c7:	83 ec 0c             	sub    $0xc,%esp
-801009ca:	68 20 a5 10 80       	push   $0x8010a520
-801009cf:	e8 4c 3c 00 00       	call   80104620 <release>
+801009ca:	68 20 b5 10 80       	push   $0x8010b520
+801009cf:	e8 cc 41 00 00       	call   80104ba0 <release>
   if(doprocdump) {
 801009d4:	83 c4 10             	add    $0x10,%esp
 801009d7:	85 f6                	test   %esi,%esi
@@ -1158,7 +1158,7 @@
 801009e1:	5d                   	pop    %ebp
 801009e2:	c3                   	ret    
         input.buf[input.e++ % INPUT_BUF] = c;
-801009e3:	c6 80 20 ff 10 80 0a 	movb   $0xa,-0x7fef00e0(%eax)
+801009e3:	c6 80 20 0f 11 80 0a 	movb   $0xa,-0x7feef0e0(%eax)
   if(panicked){
 801009ea:	85 d2                	test   %edx,%edx
 801009ec:	74 16                	je     80100a04 <consoleintr+0x1a4>
@@ -1173,18 +1173,18 @@
 801009fd:	5f                   	pop    %edi
 801009fe:	5d                   	pop    %ebp
     procdump();  // now call procdump() wo. cons.lock held
-801009ff:	e9 cc 37 00 00       	jmp    801041d0 <procdump>
+801009ff:	e9 8c 3b 00 00       	jmp    80104590 <procdump>
 80100a04:	b8 0a 00 00 00       	mov    $0xa,%eax
 80100a09:	e8 02 fa ff ff       	call   80100410 <consputc.part.0>
         if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
-80100a0e:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+80100a0e:	a1 a8 0f 11 80       	mov    0x80110fa8,%eax
           wakeup(&input.r);
 80100a13:	83 ec 0c             	sub    $0xc,%esp
           input.w = input.e;
-80100a16:	a3 a4 ff 10 80       	mov    %eax,0x8010ffa4
+80100a16:	a3 a4 0f 11 80       	mov    %eax,0x80110fa4
           wakeup(&input.r);
-80100a1b:	68 a0 ff 10 80       	push   $0x8010ffa0
-80100a20:	e8 bb 36 00 00       	call   801040e0 <wakeup>
+80100a1b:	68 a0 0f 11 80       	push   $0x80110fa0
+80100a20:	e8 6b 3a 00 00       	call   80104490 <wakeup>
 80100a25:	83 c4 10             	add    $0x10,%esp
 80100a28:	e9 6b fe ff ff       	jmp    80100898 <consoleintr+0x38>
 80100a2d:	8d 76 00             	lea    0x0(%esi),%esi
@@ -1199,9 +1199,9 @@
 80100a35:	89 e5                	mov    %esp,%ebp
 80100a37:	83 ec 10             	sub    $0x10,%esp
   initlock(&cons.lock, "console");
-80100a3a:	68 48 71 10 80       	push   $0x80107148
-80100a3f:	68 20 a5 10 80       	push   $0x8010a520
-80100a44:	e8 97 39 00 00       	call   801043e0 <initlock>
+80100a3a:	68 68 77 10 80       	push   $0x80107768
+80100a3f:	68 20 b5 10 80       	push   $0x8010b520
+80100a44:	e8 17 3f 00 00       	call   80104960 <initlock>
 
   devsw[CONSOLE].write = consolewrite;
   devsw[CONSOLE].read = consoleread;
@@ -1213,13 +1213,13 @@
 80100a4b:	6a 00                	push   $0x0
 80100a4d:	6a 01                	push   $0x1
   devsw[CONSOLE].write = consolewrite;
-80100a4f:	c7 05 6c 09 11 80 40 	movl   $0x80100640,0x8011096c
+80100a4f:	c7 05 6c 19 11 80 40 	movl   $0x80100640,0x8011196c
 80100a56:	06 10 80 
   devsw[CONSOLE].read = consoleread;
-80100a59:	c7 05 68 09 11 80 90 	movl   $0x80100290,0x80110968
+80100a59:	c7 05 68 19 11 80 90 	movl   $0x80100290,0x80111968
 80100a60:	02 10 80 
   cons.locking = 1;
-80100a63:	c7 05 54 a5 10 80 01 	movl   $0x1,0x8010a554
+80100a63:	c7 05 54 b5 10 80 01 	movl   $0x1,0x8010b554
 80100a6a:	00 00 00 
   ioapicenable(IRQ_KBD, 0);
 80100a6d:	e8 be 19 00 00       	call   80102430 <ioapicenable>
@@ -1253,7 +1253,7 @@
   struct proghdr ph;
   pde_t *pgdir, *oldpgdir;
   struct proc *curproc = myproc();
-80100a90:	e8 cb 2e 00 00       	call   80103960 <myproc>
+80100a90:	e8 cb 31 00 00       	call   80103c60 <myproc>
 80100a95:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
 
   begin_op();
@@ -1317,7 +1317,7 @@
 80100b07:	45 4c 46 
 80100b0a:	75 ce                	jne    80100ada <exec+0x5a>
   if((pgdir = setupkvm()) == 0)
-80100b0c:	e8 3f 63 00 00       	call   80106e50 <setupkvm>
+80100b0c:	e8 5f 69 00 00       	call   80107470 <setupkvm>
 80100b11:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
 80100b17:	85 c0                	test   %eax,%eax
 80100b19:	74 bf                	je     80100ada <exec+0x5a>
@@ -1347,7 +1347,7 @@
 80100b66:	50                   	push   %eax
 80100b67:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
 80100b6d:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100b73:	e8 f8 60 00 00       	call   80106c70 <allocuvm>
+80100b73:	e8 18 67 00 00       	call   80107290 <allocuvm>
 80100b78:	83 c4 10             	add    $0x10,%esp
 80100b7b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
 80100b81:	85 c0                	test   %eax,%eax
@@ -1363,7 +1363,7 @@
 80100ba1:	53                   	push   %ebx
 80100ba2:	50                   	push   %eax
 80100ba3:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100ba9:	e8 f2 5f 00 00       	call   80106ba0 <loaduvm>
+80100ba9:	e8 12 66 00 00       	call   801071c0 <loaduvm>
 80100bae:	83 c4 20             	add    $0x20,%esp
 80100bb1:	85 c0                	test   %eax,%eax
 80100bb3:	78 2d                	js     80100be2 <exec+0x162>
@@ -1386,7 +1386,7 @@
     freevm(pgdir);
 80100be2:	83 ec 0c             	sub    $0xc,%esp
 80100be5:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100beb:	e8 e0 61 00 00       	call   80106dd0 <freevm>
+80100beb:	e8 00 68 00 00       	call   801073f0 <freevm>
   if(ip){
 80100bf0:	83 c4 10             	add    $0x10,%esp
 80100bf3:	e9 e2 fe ff ff       	jmp    80100ada <exec+0x5a>
@@ -1408,7 +1408,7 @@
 80100c2a:	57                   	push   %edi
 80100c2b:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
 80100c31:	57                   	push   %edi
-80100c32:	e8 39 60 00 00       	call   80106c70 <allocuvm>
+80100c32:	e8 59 66 00 00       	call   80107290 <allocuvm>
 80100c37:	83 c4 10             	add    $0x10,%esp
 80100c3a:	89 c6                	mov    %eax,%esi
 80100c3c:	85 c0                	test   %eax,%eax
@@ -1424,7 +1424,7 @@
   for(argc = 0; argv[argc]; argc++) {
 80100c51:	31 ff                	xor    %edi,%edi
   clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
-80100c53:	e8 98 62 00 00       	call   80106ef0 <clearpteu>
+80100c53:	e8 b8 68 00 00       	call   80107510 <clearpteu>
   for(argc = 0; argv[argc]; argc++) {
 80100c58:	8b 45 0c             	mov    0xc(%ebp),%eax
 80100c5b:	83 c4 10             	add    $0x10,%esp
@@ -1453,7 +1453,7 @@
     sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
 80100c9f:	83 ec 0c             	sub    $0xc,%esp
 80100ca2:	50                   	push   %eax
-80100ca3:	e8 c8 3b 00 00       	call   80104870 <strlen>
+80100ca3:	e8 48 41 00 00       	call   80104df0 <strlen>
 80100ca8:	f7 d0                	not    %eax
 80100caa:	01 c3                	add    %eax,%ebx
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
@@ -1463,14 +1463,14 @@
 80100cb0:	83 e3 fc             	and    $0xfffffffc,%ebx
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
 80100cb3:	ff 34 b8             	pushl  (%eax,%edi,4)
-80100cb6:	e8 b5 3b 00 00       	call   80104870 <strlen>
+80100cb6:	e8 35 41 00 00       	call   80104df0 <strlen>
 80100cbb:	83 c0 01             	add    $0x1,%eax
 80100cbe:	50                   	push   %eax
 80100cbf:	8b 45 0c             	mov    0xc(%ebp),%eax
 80100cc2:	ff 34 b8             	pushl  (%eax,%edi,4)
 80100cc5:	53                   	push   %ebx
 80100cc6:	56                   	push   %esi
-80100cc7:	e8 84 63 00 00       	call   80107050 <copyout>
+80100cc7:	e8 a4 69 00 00       	call   80107670 <copyout>
 80100ccc:	83 c4 20             	add    $0x20,%esp
 80100ccf:	85 c0                	test   %eax,%eax
 80100cd1:	79 ad                	jns    80100c80 <exec+0x200>
@@ -1479,7 +1479,7 @@
     freevm(pgdir);
 80100cd8:	83 ec 0c             	sub    $0xc,%esp
 80100cdb:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100ce1:	e8 ea 60 00 00       	call   80106dd0 <freevm>
+80100ce1:	e8 0a 67 00 00       	call   801073f0 <freevm>
 80100ce6:	83 c4 10             	add    $0x10,%esp
   return -1;
 80100ce9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
@@ -1510,7 +1510,7 @@
   ustack[2] = sp - (argc+1)*4;  // argv pointer
 80100d2d:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
   if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-80100d33:	e8 18 63 00 00       	call   80107050 <copyout>
+80100d33:	e8 38 69 00 00       	call   80107670 <copyout>
 80100d38:	83 c4 10             	add    $0x10,%esp
 80100d3b:	85 c0                	test   %eax,%eax
 80100d3d:	78 99                	js     80100cd8 <exec+0x258>
@@ -1540,7 +1540,7 @@
 80100d6c:	52                   	push   %edx
 80100d6d:	83 c0 6c             	add    $0x6c,%eax
 80100d70:	50                   	push   %eax
-80100d71:	e8 ba 3a 00 00       	call   80104830 <safestrcpy>
+80100d71:	e8 3a 40 00 00       	call   80104db0 <safestrcpy>
   curproc->pgdir = pgdir;
 80100d76:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
   oldpgdir = curproc->pgdir;
@@ -1560,10 +1560,10 @@
 80100d97:	89 58 44             	mov    %ebx,0x44(%eax)
   switchuvm(curproc);
 80100d9a:	89 0c 24             	mov    %ecx,(%esp)
-80100d9d:	e8 6e 5c 00 00       	call   80106a10 <switchuvm>
+80100d9d:	e8 8e 62 00 00       	call   80107030 <switchuvm>
   freevm(oldpgdir);
 80100da2:	89 3c 24             	mov    %edi,(%esp)
-80100da5:	e8 26 60 00 00       	call   80106dd0 <freevm>
+80100da5:	e8 46 66 00 00       	call   801073f0 <freevm>
   return 0;
 80100daa:	83 c4 10             	add    $0x10,%esp
 80100dad:	31 c0                	xor    %eax,%eax
@@ -1572,7 +1572,7 @@
 80100db4:	e8 e7 1f 00 00       	call   80102da0 <end_op>
     cprintf("exec: fail\n");
 80100db9:	83 ec 0c             	sub    $0xc,%esp
-80100dbc:	68 61 71 10 80       	push   $0x80107161
+80100dbc:	68 81 77 10 80       	push   $0x80107781
 80100dc1:	e8 ea f8 ff ff       	call   801006b0 <cprintf>
     return -1;
 80100dc6:	83 c4 10             	add    $0x10,%esp
@@ -1596,9 +1596,9 @@
 80100de5:	89 e5                	mov    %esp,%ebp
 80100de7:	83 ec 10             	sub    $0x10,%esp
   initlock(&ftable.lock, "ftable");
-80100dea:	68 6d 71 10 80       	push   $0x8010716d
-80100def:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100df4:	e8 e7 35 00 00       	call   801043e0 <initlock>
+80100dea:	68 8d 77 10 80       	push   $0x8010778d
+80100def:	68 c0 0f 11 80       	push   $0x80110fc0
+80100df4:	e8 67 3b 00 00       	call   80104960 <initlock>
 }
 80100df9:	83 c4 10             	add    $0x10,%esp
 80100dfc:	c9                   	leave  
@@ -1619,18 +1619,18 @@
 
   acquire(&ftable.lock);
   for(f = ftable.file; f < ftable.file + NFILE; f++){
-80100e08:	bb f4 ff 10 80       	mov    $0x8010fff4,%ebx
+80100e08:	bb f4 0f 11 80       	mov    $0x80110ff4,%ebx
 {
 80100e0d:	83 ec 10             	sub    $0x10,%esp
   acquire(&ftable.lock);
-80100e10:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e15:	e8 46 37 00 00       	call   80104560 <acquire>
+80100e10:	68 c0 0f 11 80       	push   $0x80110fc0
+80100e15:	e8 c6 3c 00 00       	call   80104ae0 <acquire>
 80100e1a:	83 c4 10             	add    $0x10,%esp
 80100e1d:	eb 0c                	jmp    80100e2b <filealloc+0x2b>
 80100e1f:	90                   	nop
   for(f = ftable.file; f < ftable.file + NFILE; f++){
 80100e20:	83 c3 18             	add    $0x18,%ebx
-80100e23:	81 fb 54 09 11 80    	cmp    $0x80110954,%ebx
+80100e23:	81 fb 54 19 11 80    	cmp    $0x80111954,%ebx
 80100e29:	74 25                	je     80100e50 <filealloc+0x50>
     if(f->ref == 0){
 80100e2b:	8b 43 04             	mov    0x4(%ebx),%eax
@@ -1642,8 +1642,8 @@
       f->ref = 1;
 80100e35:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
       release(&ftable.lock);
-80100e3c:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e41:	e8 da 37 00 00       	call   80104620 <release>
+80100e3c:	68 c0 0f 11 80       	push   $0x80110fc0
+80100e41:	e8 5a 3d 00 00       	call   80104ba0 <release>
       return f;
     }
   }
@@ -1662,8 +1662,8 @@
   return 0;
 80100e53:	31 db                	xor    %ebx,%ebx
   release(&ftable.lock);
-80100e55:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e5a:	e8 c1 37 00 00       	call   80104620 <release>
+80100e55:	68 c0 0f 11 80       	push   $0x80110fc0
+80100e5a:	e8 41 3d 00 00       	call   80104ba0 <release>
 }
 80100e5f:	89 d8                	mov    %ebx,%eax
   return 0;
@@ -1687,8 +1687,8 @@
 80100e78:	83 ec 10             	sub    $0x10,%esp
 80100e7b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ftable.lock);
-80100e7e:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e83:	e8 d8 36 00 00       	call   80104560 <acquire>
+80100e7e:	68 c0 0f 11 80       	push   $0x80110fc0
+80100e83:	e8 58 3c 00 00       	call   80104ae0 <acquire>
   if(f->ref < 1)
 80100e88:	8b 43 04             	mov    0x4(%ebx),%eax
 80100e8b:	83 c4 10             	add    $0x10,%esp
@@ -1702,8 +1702,8 @@
   f->ref++;
 80100e98:	89 43 04             	mov    %eax,0x4(%ebx)
   release(&ftable.lock);
-80100e9b:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100ea0:	e8 7b 37 00 00       	call   80104620 <release>
+80100e9b:	68 c0 0f 11 80       	push   $0x80110fc0
+80100ea0:	e8 fb 3c 00 00       	call   80104ba0 <release>
   return f;
 }
 80100ea5:	89 d8                	mov    %ebx,%eax
@@ -1712,7 +1712,7 @@
 80100eab:	c3                   	ret    
     panic("filedup");
 80100eac:	83 ec 0c             	sub    $0xc,%esp
-80100eaf:	68 74 71 10 80       	push   $0x80107174
+80100eaf:	68 94 77 10 80       	push   $0x80107794
 80100eb4:	e8 d7 f4 ff ff       	call   80100390 <panic>
 80100eb9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
@@ -1733,8 +1733,8 @@
   struct file ff;
 
   acquire(&ftable.lock);
-80100ed0:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100ed5:	e8 86 36 00 00       	call   80104560 <acquire>
+80100ed0:	68 c0 0f 11 80       	push   $0x80110fc0
+80100ed5:	e8 06 3c 00 00       	call   80104ae0 <acquire>
   if(f->ref < 1)
 80100eda:	8b 53 04             	mov    0x4(%ebx),%edx
 80100edd:	83 c4 10             	add    $0x10,%esp
@@ -1763,11 +1763,11 @@
 80100f02:	88 45 e7             	mov    %al,-0x19(%ebp)
 80100f05:	8b 43 10             	mov    0x10(%ebx),%eax
   release(&ftable.lock);
-80100f08:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100f08:	68 c0 0f 11 80       	push   $0x80110fc0
   ff = *f;
 80100f0d:	89 45 e0             	mov    %eax,-0x20(%ebp)
   release(&ftable.lock);
-80100f10:	e8 0b 37 00 00       	call   80104620 <release>
+80100f10:	e8 8b 3c 00 00       	call   80104ba0 <release>
 
   if(ff.type == FD_PIPE)
 80100f15:	83 c4 10             	add    $0x10,%esp
@@ -1790,7 +1790,7 @@
 80100f29:	c3                   	ret    
 80100f2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     release(&ftable.lock);
-80100f30:	c7 45 08 c0 ff 10 80 	movl   $0x8010ffc0,0x8(%ebp)
+80100f30:	c7 45 08 c0 0f 11 80 	movl   $0x80110fc0,0x8(%ebp)
 }
 80100f37:	8d 65 f4             	lea    -0xc(%ebp),%esp
 80100f3a:	5b                   	pop    %ebx
@@ -1798,7 +1798,7 @@
 80100f3c:	5f                   	pop    %edi
 80100f3d:	5d                   	pop    %ebp
     release(&ftable.lock);
-80100f3e:	e9 dd 36 00 00       	jmp    80104620 <release>
+80100f3e:	e9 5d 3c 00 00       	jmp    80104ba0 <release>
 80100f43:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80100f47:	90                   	nop
     begin_op();
@@ -1835,7 +1835,7 @@
 80100f88:	c3                   	ret    
     panic("fileclose");
 80100f89:	83 ec 0c             	sub    $0xc,%esp
-80100f8c:	68 7c 71 10 80       	push   $0x8010717c
+80100f8c:	68 9c 77 10 80       	push   $0x8010779c
 80100f91:	e8 fa f3 ff ff       	call   80100390 <panic>
 80100f96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80100f9d:	8d 76 00             	lea    0x0(%esi),%esi
@@ -1969,7 +1969,7 @@
 80101075:	eb d3                	jmp    8010104a <fileread+0x5a>
   panic("fileread");
 80101077:	83 ec 0c             	sub    $0xc,%esp
-8010107a:	68 86 71 10 80       	push   $0x80107186
+8010107a:	68 a6 77 10 80       	push   $0x801077a6
 8010107f:	e8 0c f3 ff ff       	call   80100390 <panic>
 80101084:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010108b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2093,7 +2093,7 @@
 8010115e:	75 17                	jne    80101177 <filewrite+0xe7>
         panic("short filewrite");
 80101160:	83 ec 0c             	sub    $0xc,%esp
-80101163:	68 8f 71 10 80       	push   $0x8010718f
+80101163:	68 af 77 10 80       	push   $0x801077af
 80101168:	e8 23 f2 ff ff       	call   80100390 <panic>
 8010116d:	8d 76 00             	lea    0x0(%esi),%esi
     }
@@ -2124,7 +2124,7 @@
 80101191:	e9 0a 24 00 00       	jmp    801035a0 <pipewrite>
   panic("filewrite");
 80101196:	83 ec 0c             	sub    $0xc,%esp
-80101199:	68 95 71 10 80       	push   $0x80107195
+80101199:	68 b5 77 10 80       	push   $0x801077b5
 8010119e:	e8 ed f1 ff ff       	call   80100390 <panic>
 801011a3:	66 90                	xchg   %ax,%ax
 801011a5:	66 90                	xchg   %ax,%ax
@@ -2149,7 +2149,7 @@
   bp = bread(dev, BBLOCK(b, sb));
 801011b3:	89 d0                	mov    %edx,%eax
 801011b5:	c1 e8 0c             	shr    $0xc,%eax
-801011b8:	03 05 d8 09 11 80    	add    0x801109d8,%eax
+801011b8:	03 05 d8 19 11 80    	add    0x801119d8,%eax
 {
 801011be:	89 e5                	mov    %esp,%ebp
 801011c0:	56                   	push   %esi
@@ -2201,7 +2201,7 @@
 80101213:	c3                   	ret    
     panic("freeing free block");
 80101214:	83 ec 0c             	sub    $0xc,%esp
-80101217:	68 9f 71 10 80       	push   $0x8010719f
+80101217:	68 bf 77 10 80       	push   $0x801077bf
 8010121c:	e8 6f f1 ff ff       	call   80100390 <panic>
 80101221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80101228:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -2216,7 +2216,7 @@
 80101235:	53                   	push   %ebx
 80101236:	83 ec 1c             	sub    $0x1c,%esp
   for(b = 0; b < sb.size; b += BPB){
-80101239:	8b 0d c0 09 11 80    	mov    0x801109c0,%ecx
+80101239:	8b 0d c0 19 11 80    	mov    0x801119c0,%ecx
 {
 8010123f:	89 45 d8             	mov    %eax,-0x28(%ebp)
   for(b = 0; b < sb.size; b += BPB){
@@ -2228,14 +2228,14 @@
 80101254:	83 ec 08             	sub    $0x8,%esp
 80101257:	89 f0                	mov    %esi,%eax
 80101259:	c1 f8 0c             	sar    $0xc,%eax
-8010125c:	03 05 d8 09 11 80    	add    0x801109d8,%eax
+8010125c:	03 05 d8 19 11 80    	add    0x801119d8,%eax
 80101262:	50                   	push   %eax
 80101263:	ff 75 d8             	pushl  -0x28(%ebp)
 80101266:	e8 65 ee ff ff       	call   801000d0 <bread>
 8010126b:	83 c4 10             	add    $0x10,%esp
 8010126e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
-80101271:	a1 c0 09 11 80       	mov    0x801109c0,%eax
+80101271:	a1 c0 19 11 80       	mov    0x801119c0,%eax
 80101276:	89 45 e0             	mov    %eax,-0x20(%ebp)
 80101279:	31 c0                	xor    %eax,%eax
 8010127b:	eb 2f                	jmp    801012ac <balloc+0x7c>
@@ -2270,11 +2270,11 @@
 801012bc:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
 801012c3:	83 c4 10             	add    $0x10,%esp
 801012c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
-801012c9:	39 05 c0 09 11 80    	cmp    %eax,0x801109c0
+801012c9:	39 05 c0 19 11 80    	cmp    %eax,0x801119c0
 801012cf:	77 80                	ja     80101251 <balloc+0x21>
   panic("balloc: out of blocks");
 801012d1:	83 ec 0c             	sub    $0xc,%esp
-801012d4:	68 b2 71 10 80       	push   $0x801071b2
+801012d4:	68 d2 77 10 80       	push   $0x801077d2
 801012d9:	e8 b2 f0 ff ff       	call   80100390 <panic>
 801012de:	66 90                	xchg   %ax,%ax
         bp->data[bi/8] |= m;  // Mark block in use.
@@ -2305,7 +2305,7 @@
 8010130d:	68 00 02 00 00       	push   $0x200
 80101312:	6a 00                	push   $0x0
 80101314:	50                   	push   %eax
-80101315:	e8 56 33 00 00       	call   80104670 <memset>
+80101315:	e8 d6 38 00 00       	call   80104bf0 <memset>
   log_write(bp);
 8010131a:	89 1c 24             	mov    %ebx,(%esp)
 8010131d:	e8 ee 1b 00 00       	call   80102f10 <log_write>
@@ -2346,13 +2346,13 @@
 {
 80101349:	53                   	push   %ebx
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-8010134a:	bb 14 0a 11 80       	mov    $0x80110a14,%ebx
+8010134a:	bb 14 1a 11 80       	mov    $0x80111a14,%ebx
 {
 8010134f:	83 ec 28             	sub    $0x28,%esp
 80101352:	89 55 e4             	mov    %edx,-0x1c(%ebp)
   acquire(&icache.lock);
-80101355:	68 e0 09 11 80       	push   $0x801109e0
-8010135a:	e8 01 32 00 00       	call   80104560 <acquire>
+80101355:	68 e0 19 11 80       	push   $0x801119e0
+8010135a:	e8 81 37 00 00       	call   80104ae0 <acquire>
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
 8010135f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   acquire(&icache.lock);
@@ -2365,7 +2365,7 @@
 80101372:	74 6c                	je     801013e0 <iget+0xa0>
 80101374:	81 c3 90 00 00 00    	add    $0x90,%ebx
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-8010137a:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
+8010137a:	81 fb 34 36 11 80    	cmp    $0x80113634,%ebx
 80101380:	73 26                	jae    801013a8 <iget+0x68>
     if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
 80101382:	8b 4b 08             	mov    0x8(%ebx),%ecx
@@ -2384,7 +2384,7 @@
 80101397:	75 6e                	jne    80101407 <iget+0xc7>
 80101399:	89 c6                	mov    %eax,%esi
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-8010139b:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
+8010139b:	81 fb 34 36 11 80    	cmp    $0x80113634,%ebx
 801013a1:	72 df                	jb     80101382 <iget+0x42>
 801013a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 801013a7:	90                   	nop
@@ -2411,8 +2411,8 @@
   ip->valid = 0;
 801013bb:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
   release(&icache.lock);
-801013c2:	68 e0 09 11 80       	push   $0x801109e0
-801013c7:	e8 54 32 00 00       	call   80104620 <release>
+801013c2:	68 e0 19 11 80       	push   $0x801119e0
+801013c7:	e8 d4 37 00 00       	call   80104ba0 <release>
 
   return ip;
 801013cc:	83 c4 10             	add    $0x10,%esp
@@ -2435,11 +2435,11 @@
       return ip;
 801013eb:	89 de                	mov    %ebx,%esi
       release(&icache.lock);
-801013ed:	68 e0 09 11 80       	push   $0x801109e0
+801013ed:	68 e0 19 11 80       	push   $0x801119e0
       ip->ref++;
 801013f2:	89 4b 08             	mov    %ecx,0x8(%ebx)
       release(&icache.lock);
-801013f5:	e8 26 32 00 00       	call   80104620 <release>
+801013f5:	e8 a6 37 00 00       	call   80104ba0 <release>
       return ip;
 801013fa:	83 c4 10             	add    $0x10,%esp
 }
@@ -2451,7 +2451,7 @@
 80101405:	5d                   	pop    %ebp
 80101406:	c3                   	ret    
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-80101407:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
+80101407:	81 fb 34 36 11 80    	cmp    $0x80113634,%ebx
 8010140d:	73 10                	jae    8010141f <iget+0xdf>
     if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
 8010140f:	8b 4b 08             	mov    0x8(%ebx),%ecx
@@ -2460,7 +2460,7 @@
 8010141a:	e9 6e ff ff ff       	jmp    8010138d <iget+0x4d>
     panic("iget: no inodes");
 8010141f:	83 ec 0c             	sub    $0xc,%esp
-80101422:	68 c8 71 10 80       	push   $0x801071c8
+80101422:	68 e8 77 10 80       	push   $0x801077e8
 80101427:	e8 64 ef ff ff       	call   80100390 <panic>
 8010142c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
@@ -2581,7 +2581,7 @@
 801014e7:	c3                   	ret    
   panic("bmap: out of range");
 801014e8:	83 ec 0c             	sub    $0xc,%esp
-801014eb:	68 d8 71 10 80       	push   $0x801071d8
+801014eb:	68 f8 77 10 80       	push   $0x801077f8
 801014f0:	e8 9b ee ff ff       	call   80100390 <panic>
 801014f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 801014fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2608,7 +2608,7 @@
 80101521:	6a 1c                	push   $0x1c
 80101523:	50                   	push   %eax
 80101524:	56                   	push   %esi
-80101525:	e8 e6 31 00 00       	call   80104710 <memmove>
+80101525:	e8 66 37 00 00       	call   80104c90 <memmove>
   brelse(bp);
 8010152a:	89 5d 08             	mov    %ebx,0x8(%ebp)
 8010152d:	83 c4 10             	add    $0x10,%esp
@@ -2628,39 +2628,39 @@
 80101544:	55                   	push   %ebp
 80101545:	89 e5                	mov    %esp,%ebp
 80101547:	53                   	push   %ebx
-80101548:	bb 20 0a 11 80       	mov    $0x80110a20,%ebx
+80101548:	bb 20 1a 11 80       	mov    $0x80111a20,%ebx
 8010154d:	83 ec 0c             	sub    $0xc,%esp
   initlock(&icache.lock, "icache");
-80101550:	68 eb 71 10 80       	push   $0x801071eb
-80101555:	68 e0 09 11 80       	push   $0x801109e0
-8010155a:	e8 81 2e 00 00       	call   801043e0 <initlock>
+80101550:	68 0b 78 10 80       	push   $0x8010780b
+80101555:	68 e0 19 11 80       	push   $0x801119e0
+8010155a:	e8 01 34 00 00       	call   80104960 <initlock>
   for(i = 0; i < NINODE; i++) {
 8010155f:	83 c4 10             	add    $0x10,%esp
 80101562:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     initsleeplock(&icache.inode[i].lock, "inode");
 80101568:	83 ec 08             	sub    $0x8,%esp
-8010156b:	68 f2 71 10 80       	push   $0x801071f2
+8010156b:	68 12 78 10 80       	push   $0x80107812
 80101570:	53                   	push   %ebx
 80101571:	81 c3 90 00 00 00    	add    $0x90,%ebx
-80101577:	e8 24 2d 00 00       	call   801042a0 <initsleeplock>
+80101577:	e8 a4 32 00 00       	call   80104820 <initsleeplock>
   for(i = 0; i < NINODE; i++) {
 8010157c:	83 c4 10             	add    $0x10,%esp
-8010157f:	81 fb 40 26 11 80    	cmp    $0x80112640,%ebx
+8010157f:	81 fb 40 36 11 80    	cmp    $0x80113640,%ebx
 80101585:	75 e1                	jne    80101568 <iinit+0x28>
   readsb(dev, &sb);
 80101587:	83 ec 08             	sub    $0x8,%esp
-8010158a:	68 c0 09 11 80       	push   $0x801109c0
+8010158a:	68 c0 19 11 80       	push   $0x801119c0
 8010158f:	ff 75 08             	pushl  0x8(%ebp)
 80101592:	e8 69 ff ff ff       	call   80101500 <readsb>
   cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
-80101597:	ff 35 d8 09 11 80    	pushl  0x801109d8
-8010159d:	ff 35 d4 09 11 80    	pushl  0x801109d4
-801015a3:	ff 35 d0 09 11 80    	pushl  0x801109d0
-801015a9:	ff 35 cc 09 11 80    	pushl  0x801109cc
-801015af:	ff 35 c8 09 11 80    	pushl  0x801109c8
-801015b5:	ff 35 c4 09 11 80    	pushl  0x801109c4
-801015bb:	ff 35 c0 09 11 80    	pushl  0x801109c0
-801015c1:	68 58 72 10 80       	push   $0x80107258
+80101597:	ff 35 d8 19 11 80    	pushl  0x801119d8
+8010159d:	ff 35 d4 19 11 80    	pushl  0x801119d4
+801015a3:	ff 35 d0 19 11 80    	pushl  0x801119d0
+801015a9:	ff 35 cc 19 11 80    	pushl  0x801119cc
+801015af:	ff 35 c8 19 11 80    	pushl  0x801119c8
+801015b5:	ff 35 c4 19 11 80    	pushl  0x801119c4
+801015bb:	ff 35 c0 19 11 80    	pushl  0x801119c0
+801015c1:	68 78 78 10 80       	push   $0x80107878
 801015c6:	e8 e5 f0 ff ff       	call   801006b0 <cprintf>
 }
 801015cb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
@@ -2681,7 +2681,7 @@
 801015ea:	83 ec 1c             	sub    $0x1c,%esp
 801015ed:	8b 45 0c             	mov    0xc(%ebp),%eax
   for(inum = 1; inum < sb.ninodes; inum++){
-801015f0:	83 3d c8 09 11 80 01 	cmpl   $0x1,0x801109c8
+801015f0:	83 3d c8 19 11 80 01 	cmpl   $0x1,0x801119c8
 {
 801015f7:	8b 75 08             	mov    0x8(%ebp),%esi
 801015fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
@@ -2699,13 +2699,13 @@
 80101617:	e8 d4 eb ff ff       	call   801001f0 <brelse>
   for(inum = 1; inum < sb.ninodes; inum++){
 8010161c:	83 c4 10             	add    $0x10,%esp
-8010161f:	3b 3d c8 09 11 80    	cmp    0x801109c8,%edi
+8010161f:	3b 3d c8 19 11 80    	cmp    0x801119c8,%edi
 80101625:	73 69                	jae    80101690 <ialloc+0xb0>
     bp = bread(dev, IBLOCK(inum, sb));
 80101627:	89 f8                	mov    %edi,%eax
 80101629:	83 ec 08             	sub    $0x8,%esp
 8010162c:	c1 e8 03             	shr    $0x3,%eax
-8010162f:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+8010162f:	03 05 d4 19 11 80    	add    0x801119d4,%eax
 80101635:	50                   	push   %eax
 80101636:	56                   	push   %esi
 80101637:	e8 94 ea ff ff       	call   801000d0 <bread>
@@ -2727,7 +2727,7 @@
 80101659:	6a 40                	push   $0x40
 8010165b:	6a 00                	push   $0x0
 8010165d:	51                   	push   %ecx
-8010165e:	e8 0d 30 00 00       	call   80104670 <memset>
+8010165e:	e8 8d 35 00 00       	call   80104bf0 <memset>
       dip->type = type;
 80101663:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
 80101667:	8b 4d e0             	mov    -0x20(%ebp),%ecx
@@ -2756,7 +2756,7 @@
 8010168b:	e9 b0 fc ff ff       	jmp    80101340 <iget>
   panic("ialloc: no inodes");
 80101690:	83 ec 0c             	sub    $0xc,%esp
-80101693:	68 f8 71 10 80       	push   $0x801071f8
+80101693:	68 18 78 10 80       	push   $0x80107818
 80101698:	e8 f3 ec ff ff       	call   80100390 <panic>
 8010169d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -2775,7 +2775,7 @@
   bp = bread(ip->dev, IBLOCK(ip->inum, sb));
 801016b2:	83 ec 08             	sub    $0x8,%esp
 801016b5:	c1 e8 03             	shr    $0x3,%eax
-801016b8:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+801016b8:	03 05 d4 19 11 80    	add    0x801119d4,%eax
 801016be:	50                   	push   %eax
 801016bf:	ff 73 a4             	pushl  -0x5c(%ebx)
 801016c2:	e8 09 ea ff ff       	call   801000d0 <bread>
@@ -2811,7 +2811,7 @@
 80101701:	6a 34                	push   $0x34
 80101703:	53                   	push   %ebx
 80101704:	50                   	push   %eax
-80101705:	e8 06 30 00 00       	call   80104710 <memmove>
+80101705:	e8 86 35 00 00       	call   80104c90 <memmove>
   log_write(bp);
 8010170a:	89 34 24             	mov    %esi,(%esp)
 8010170d:	e8 fe 17 00 00       	call   80102f10 <log_write>
@@ -2837,13 +2837,13 @@
 80101738:	83 ec 10             	sub    $0x10,%esp
 8010173b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&icache.lock);
-8010173e:	68 e0 09 11 80       	push   $0x801109e0
-80101743:	e8 18 2e 00 00       	call   80104560 <acquire>
+8010173e:	68 e0 19 11 80       	push   $0x801119e0
+80101743:	e8 98 33 00 00       	call   80104ae0 <acquire>
   ip->ref++;
 80101748:	83 43 08 01          	addl   $0x1,0x8(%ebx)
   release(&icache.lock);
-8010174c:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101753:	e8 c8 2e 00 00       	call   80104620 <release>
+8010174c:	c7 04 24 e0 19 11 80 	movl   $0x801119e0,(%esp)
+80101753:	e8 48 34 00 00       	call   80104ba0 <release>
 }
 80101758:	89 d8                	mov    %ebx,%eax
 8010175a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
@@ -2869,7 +2869,7 @@
 8010177f:	83 ec 0c             	sub    $0xc,%esp
 80101782:	8d 43 0c             	lea    0xc(%ebx),%eax
 80101785:	50                   	push   %eax
-80101786:	e8 55 2b 00 00       	call   801042e0 <acquiresleep>
+80101786:	e8 d5 30 00 00       	call   80104860 <acquiresleep>
   if(ip->valid == 0){
 8010178b:	8b 43 4c             	mov    0x4c(%ebx),%eax
 8010178e:	83 c4 10             	add    $0x10,%esp
@@ -2886,7 +2886,7 @@
 801017a0:	8b 43 04             	mov    0x4(%ebx),%eax
 801017a3:	83 ec 08             	sub    $0x8,%esp
 801017a6:	c1 e8 03             	shr    $0x3,%eax
-801017a9:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+801017a9:	03 05 d4 19 11 80    	add    0x801119d4,%eax
 801017af:	50                   	push   %eax
 801017b0:	ff 33                	pushl  (%ebx)
 801017b2:	e8 19 e9 ff ff       	call   801000d0 <bread>
@@ -2922,7 +2922,7 @@
 801017f3:	50                   	push   %eax
 801017f4:	8d 43 5c             	lea    0x5c(%ebx),%eax
 801017f7:	50                   	push   %eax
-801017f8:	e8 13 2f 00 00       	call   80104710 <memmove>
+801017f8:	e8 93 34 00 00       	call   80104c90 <memmove>
     brelse(bp);
 801017fd:	89 34 24             	mov    %esi,(%esp)
 80101800:	e8 eb e9 ff ff       	call   801001f0 <brelse>
@@ -2935,11 +2935,11 @@
 80101814:	0f 85 7b ff ff ff    	jne    80101795 <ilock+0x35>
       panic("ilock: no type");
 8010181a:	83 ec 0c             	sub    $0xc,%esp
-8010181d:	68 10 72 10 80       	push   $0x80107210
+8010181d:	68 30 78 10 80       	push   $0x80107830
 80101822:	e8 69 eb ff ff       	call   80100390 <panic>
     panic("ilock");
 80101827:	83 ec 0c             	sub    $0xc,%esp
-8010182a:	68 0a 72 10 80       	push   $0x8010720a
+8010182a:	68 2a 78 10 80       	push   $0x8010782a
 8010182f:	e8 5c eb ff ff       	call   80100390 <panic>
 80101834:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010183b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2959,7 +2959,7 @@
 80101850:	83 ec 0c             	sub    $0xc,%esp
 80101853:	8d 73 0c             	lea    0xc(%ebx),%esi
 80101856:	56                   	push   %esi
-80101857:	e8 24 2b 00 00       	call   80104380 <holdingsleep>
+80101857:	e8 a4 30 00 00       	call   80104900 <holdingsleep>
 8010185c:	83 c4 10             	add    $0x10,%esp
 8010185f:	85 c0                	test   %eax,%eax
 80101861:	74 15                	je     80101878 <iunlock+0x38>
@@ -2974,10 +2974,10 @@
 80101871:	5e                   	pop    %esi
 80101872:	5d                   	pop    %ebp
   releasesleep(&ip->lock);
-80101873:	e9 c8 2a 00 00       	jmp    80104340 <releasesleep>
+80101873:	e9 48 30 00 00       	jmp    801048c0 <releasesleep>
     panic("iunlock");
 80101878:	83 ec 0c             	sub    $0xc,%esp
-8010187b:	68 1f 72 10 80       	push   $0x8010721f
+8010187b:	68 3f 78 10 80       	push   $0x8010783f
 80101880:	e8 0b eb ff ff       	call   80100390 <panic>
 80101885:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010188c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2995,7 +2995,7 @@
   acquiresleep(&ip->lock);
 801018a0:	8d 7b 0c             	lea    0xc(%ebx),%edi
 801018a3:	57                   	push   %edi
-801018a4:	e8 37 2a 00 00       	call   801042e0 <acquiresleep>
+801018a4:	e8 b7 2f 00 00       	call   80104860 <acquiresleep>
   if(ip->valid && ip->nlink == 0){
 801018a9:	8b 53 4c             	mov    0x4c(%ebx),%edx
 801018ac:	83 c4 10             	add    $0x10,%esp
@@ -3006,15 +3006,15 @@
   releasesleep(&ip->lock);
 801018ba:	83 ec 0c             	sub    $0xc,%esp
 801018bd:	57                   	push   %edi
-801018be:	e8 7d 2a 00 00       	call   80104340 <releasesleep>
+801018be:	e8 fd 2f 00 00       	call   801048c0 <releasesleep>
   acquire(&icache.lock);
-801018c3:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-801018ca:	e8 91 2c 00 00       	call   80104560 <acquire>
+801018c3:	c7 04 24 e0 19 11 80 	movl   $0x801119e0,(%esp)
+801018ca:	e8 11 32 00 00       	call   80104ae0 <acquire>
   ip->ref--;
 801018cf:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
   release(&icache.lock);
 801018d3:	83 c4 10             	add    $0x10,%esp
-801018d6:	c7 45 08 e0 09 11 80 	movl   $0x801109e0,0x8(%ebp)
+801018d6:	c7 45 08 e0 19 11 80 	movl   $0x801119e0,0x8(%ebp)
 }
 801018dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
 801018e0:	5b                   	pop    %ebx
@@ -3022,17 +3022,17 @@
 801018e2:	5f                   	pop    %edi
 801018e3:	5d                   	pop    %ebp
   release(&icache.lock);
-801018e4:	e9 37 2d 00 00       	jmp    80104620 <release>
+801018e4:	e9 b7 32 00 00       	jmp    80104ba0 <release>
 801018e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     acquire(&icache.lock);
 801018f0:	83 ec 0c             	sub    $0xc,%esp
-801018f3:	68 e0 09 11 80       	push   $0x801109e0
-801018f8:	e8 63 2c 00 00       	call   80104560 <acquire>
+801018f3:	68 e0 19 11 80       	push   $0x801119e0
+801018f8:	e8 e3 31 00 00       	call   80104ae0 <acquire>
     int r = ip->ref;
 801018fd:	8b 73 08             	mov    0x8(%ebx),%esi
     release(&icache.lock);
-80101900:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101907:	e8 14 2d 00 00       	call   80104620 <release>
+80101900:	c7 04 24 e0 19 11 80 	movl   $0x801119e0,(%esp)
+80101907:	e8 94 32 00 00       	call   80104ba0 <release>
     if(r == 1){
 8010190c:	83 c4 10             	add    $0x10,%esp
 8010190f:	83 fe 01             	cmp    $0x1,%esi
@@ -3287,7 +3287,7 @@
     memmove(dst, bp->data + off%BSIZE, m);
 80101b03:	50                   	push   %eax
 80101b04:	ff 75 e0             	pushl  -0x20(%ebp)
-80101b07:	e8 04 2c 00 00       	call   80104710 <memmove>
+80101b07:	e8 84 31 00 00       	call   80104c90 <memmove>
     brelse(bp);
 80101b0c:	8b 55 dc             	mov    -0x24(%ebp),%edx
 80101b0f:	89 14 24             	mov    %edx,(%esp)
@@ -3312,7 +3312,7 @@
 80101b30:	0f bf 40 52          	movswl 0x52(%eax),%eax
 80101b34:	66 83 f8 09          	cmp    $0x9,%ax
 80101b38:	77 17                	ja     80101b51 <readi+0xf1>
-80101b3a:	8b 04 c5 60 09 11 80 	mov    -0x7feef6a0(,%eax,8),%eax
+80101b3a:	8b 04 c5 60 19 11 80 	mov    -0x7feee6a0(,%eax,8),%eax
 80101b41:	85 c0                	test   %eax,%eax
 80101b43:	74 0c                	je     80101b51 <readi+0xf1>
     return devsw[ip->major].read(ip, dst, n);
@@ -3417,7 +3417,7 @@
     memmove(bp->data + off%BSIZE, src, m);
 80101bff:	ff 75 dc             	pushl  -0x24(%ebp)
 80101c02:	50                   	push   %eax
-80101c03:	e8 08 2b 00 00       	call   80104710 <memmove>
+80101c03:	e8 88 30 00 00       	call   80104c90 <memmove>
     log_write(bp);
 80101c08:	89 3c 24             	mov    %edi,(%esp)
 80101c0b:	e8 00 13 00 00       	call   80102f10 <log_write>
@@ -3454,7 +3454,7 @@
 80101c40:	0f bf 40 52          	movswl 0x52(%eax),%eax
 80101c44:	66 83 f8 09          	cmp    $0x9,%ax
 80101c48:	77 32                	ja     80101c7c <writei+0x11c>
-80101c4a:	8b 04 c5 64 09 11 80 	mov    -0x7feef69c(,%eax,8),%eax
+80101c4a:	8b 04 c5 64 19 11 80 	mov    -0x7feee69c(,%eax,8),%eax
 80101c51:	85 c0                	test   %eax,%eax
 80101c53:	74 27                	je     80101c7c <writei+0x11c>
     return devsw[ip->major].write(ip, src, n);
@@ -3500,7 +3500,7 @@
 80101c9a:	6a 0e                	push   $0xe
 80101c9c:	ff 75 0c             	pushl  0xc(%ebp)
 80101c9f:	ff 75 08             	pushl  0x8(%ebp)
-80101ca2:	e8 d9 2a 00 00       	call   80104780 <strncmp>
+80101ca2:	e8 59 30 00 00       	call   80104d00 <strncmp>
 }
 80101ca7:	c9                   	leave  
 80101ca8:	c3                   	ret    
@@ -3556,7 +3556,7 @@
 80101cff:	6a 0e                	push   $0xe
 80101d01:	50                   	push   %eax
 80101d02:	ff 75 0c             	pushl  0xc(%ebp)
-80101d05:	e8 76 2a 00 00       	call   80104780 <strncmp>
+80101d05:	e8 f6 2f 00 00       	call   80104d00 <strncmp>
       continue;
     if(namecmp(name, de.name) == 0){
 80101d0a:	83 c4 10             	add    $0x10,%esp
@@ -3604,11 +3604,11 @@
 80101d46:	c3                   	ret    
       panic("dirlookup read");
 80101d47:	83 ec 0c             	sub    $0xc,%esp
-80101d4a:	68 39 72 10 80       	push   $0x80107239
+80101d4a:	68 59 78 10 80       	push   $0x80107859
 80101d4f:	e8 3c e6 ff ff       	call   80100390 <panic>
     panic("dirlookup not DIR");
 80101d54:	83 ec 0c             	sub    $0xc,%esp
-80101d57:	68 27 72 10 80       	push   $0x80107227
+80101d57:	68 47 78 10 80       	push   $0x80107847
 80101d5c:	e8 2f e6 ff ff       	call   80100390 <panic>
 80101d61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80101d68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -3640,20 +3640,20 @@
     ip = iget(ROOTDEV, ROOTINO);
   else
     ip = idup(myproc()->cwd);
-80101d8a:	e8 d1 1b 00 00       	call   80103960 <myproc>
+80101d8a:	e8 d1 1e 00 00       	call   80103c60 <myproc>
   acquire(&icache.lock);
 80101d8f:	83 ec 0c             	sub    $0xc,%esp
 80101d92:	89 df                	mov    %ebx,%edi
     ip = idup(myproc()->cwd);
 80101d94:	8b 70 68             	mov    0x68(%eax),%esi
   acquire(&icache.lock);
-80101d97:	68 e0 09 11 80       	push   $0x801109e0
-80101d9c:	e8 bf 27 00 00       	call   80104560 <acquire>
+80101d97:	68 e0 19 11 80       	push   $0x801119e0
+80101d9c:	e8 3f 2d 00 00       	call   80104ae0 <acquire>
   ip->ref++;
 80101da1:	83 46 08 01          	addl   $0x1,0x8(%esi)
   release(&icache.lock);
-80101da5:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101dac:	e8 6f 28 00 00       	call   80104620 <release>
+80101da5:	c7 04 24 e0 19 11 80 	movl   $0x801119e0,(%esp)
+80101dac:	e8 ef 2d 00 00       	call   80104ba0 <release>
 80101db1:	83 c4 10             	add    $0x10,%esp
 80101db4:	eb 0d                	jmp    80101dc3 <namex+0x53>
 80101db6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -3698,7 +3698,7 @@
 80101e12:	89 df                	mov    %ebx,%edi
     memmove(name, s, DIRSIZ);
 80101e14:	ff 75 e4             	pushl  -0x1c(%ebp)
-80101e17:	e8 f4 28 00 00       	call   80104710 <memmove>
+80101e17:	e8 74 2e 00 00       	call   80104c90 <memmove>
 80101e1c:	83 c4 10             	add    $0x10,%esp
   while(*path == '/')
 80101e1f:	80 3b 2f             	cmpb   $0x2f,(%ebx)
@@ -3764,7 +3764,7 @@
 80101e9e:	89 df                	mov    %ebx,%edi
     memmove(name, s, len);
 80101ea0:	ff 75 e4             	pushl  -0x1c(%ebp)
-80101ea3:	e8 68 28 00 00       	call   80104710 <memmove>
+80101ea3:	e8 e8 2d 00 00       	call   80104c90 <memmove>
     name[len] = 0;
 80101ea8:	8b 45 dc             	mov    -0x24(%ebp),%eax
 80101eab:	83 c4 10             	add    $0x10,%esp
@@ -3910,7 +3910,7 @@
 80101fcf:	6a 0e                	push   $0xe
 80101fd1:	ff 75 0c             	pushl  0xc(%ebp)
 80101fd4:	50                   	push   %eax
-80101fd5:	e8 f6 27 00 00       	call   801047d0 <strncpy>
+80101fd5:	e8 76 2d 00 00       	call   80104d50 <strncpy>
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
 80101fda:	6a 10                	push   $0x10
   de.inum = inum;
@@ -3945,11 +3945,11 @@
 8010200e:	eb e5                	jmp    80101ff5 <dirlink+0x85>
       panic("dirlink read");
 80102010:	83 ec 0c             	sub    $0xc,%esp
-80102013:	68 48 72 10 80       	push   $0x80107248
+80102013:	68 68 78 10 80       	push   $0x80107868
 80102018:	e8 73 e3 ff ff       	call   80100390 <panic>
     panic("dirlink");
 8010201d:	83 ec 0c             	sub    $0xc,%esp
-80102020:	68 1e 78 10 80       	push   $0x8010781e
+80102020:	68 52 7e 10 80       	push   $0x80107e52
 80102025:	e8 66 e3 ff ff       	call   80100390 <panic>
 8010202a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
@@ -4100,11 +4100,11 @@
 80102127:	c3                   	ret    
     panic("incorrect blockno");
 80102128:	83 ec 0c             	sub    $0xc,%esp
-8010212b:	68 b4 72 10 80       	push   $0x801072b4
+8010212b:	68 d4 78 10 80       	push   $0x801078d4
 80102130:	e8 5b e2 ff ff       	call   80100390 <panic>
     panic("idestart");
 80102135:	83 ec 0c             	sub    $0xc,%esp
-80102138:	68 ab 72 10 80       	push   $0x801072ab
+80102138:	68 cb 78 10 80       	push   $0x801078cb
 8010213d:	e8 4e e2 ff ff       	call   80100390 <panic>
 80102142:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80102149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -4116,12 +4116,12 @@
 80102155:	89 e5                	mov    %esp,%ebp
 80102157:	83 ec 10             	sub    $0x10,%esp
   initlock(&idelock, "ide");
-8010215a:	68 c6 72 10 80       	push   $0x801072c6
-8010215f:	68 80 a5 10 80       	push   $0x8010a580
-80102164:	e8 77 22 00 00       	call   801043e0 <initlock>
+8010215a:	68 e6 78 10 80       	push   $0x801078e6
+8010215f:	68 80 b5 10 80       	push   $0x8010b580
+80102164:	e8 f7 27 00 00       	call   80104960 <initlock>
   ioapicenable(IRQ_IDE, ncpu - 1);
 80102169:	58                   	pop    %eax
-8010216a:	a1 00 2d 11 80       	mov    0x80112d00,%eax
+8010216a:	a1 00 3d 11 80       	mov    0x80113d00,%eax
 8010216f:	5a                   	pop    %edx
 80102170:	83 e8 01             	sub    $0x1,%eax
 80102173:	50                   	push   %eax
@@ -4155,7 +4155,7 @@
 801021b6:	84 c0                	test   %al,%al
 801021b8:	74 f6                	je     801021b0 <ideinit+0x60>
       havedisk1 = 1;
-801021ba:	c7 05 60 a5 10 80 01 	movl   $0x1,0x8010a560
+801021ba:	c7 05 60 b5 10 80 01 	movl   $0x1,0x8010b560
 801021c1:	00 00 00 
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
 801021c4:	b8 e0 ff ff ff       	mov    $0xffffffe0,%eax
@@ -4185,11 +4185,11 @@
 
   // First queued buffer is the active request.
   acquire(&idelock);
-801021ed:	68 80 a5 10 80       	push   $0x8010a580
-801021f2:	e8 69 23 00 00       	call   80104560 <acquire>
+801021ed:	68 80 b5 10 80       	push   $0x8010b580
+801021f2:	e8 e9 28 00 00       	call   80104ae0 <acquire>
 
   if((b = idequeue) == 0){
-801021f7:	8b 1d 64 a5 10 80    	mov    0x8010a564,%ebx
+801021f7:	8b 1d 64 b5 10 80    	mov    0x8010b564,%ebx
 801021fd:	83 c4 10             	add    $0x10,%esp
 80102200:	85 db                	test   %ebx,%ebx
 80102202:	74 5f                	je     80102263 <ideintr+0x83>
@@ -4198,7 +4198,7 @@
   }
   idequeue = b->qnext;
 80102204:	8b 43 58             	mov    0x58(%ebx),%eax
-80102207:	a3 64 a5 10 80       	mov    %eax,0x8010a564
+80102207:	a3 64 b5 10 80       	mov    %eax,0x8010b564
 
   // Read data if needed.
   if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
@@ -4238,11 +4238,11 @@
 8010224a:	89 33                	mov    %esi,(%ebx)
   wakeup(b);
 8010224c:	53                   	push   %ebx
-8010224d:	e8 8e 1e 00 00       	call   801040e0 <wakeup>
+8010224d:	e8 3e 22 00 00       	call   80104490 <wakeup>
 
   // Start disk on next buf in queue.
   if(idequeue != 0)
-80102252:	a1 64 a5 10 80       	mov    0x8010a564,%eax
+80102252:	a1 64 b5 10 80       	mov    0x8010b564,%eax
 80102257:	83 c4 10             	add    $0x10,%esp
 8010225a:	85 c0                	test   %eax,%eax
 8010225c:	74 05                	je     80102263 <ideintr+0x83>
@@ -4250,8 +4250,8 @@
 8010225e:	e8 0d fe ff ff       	call   80102070 <idestart>
     release(&idelock);
 80102263:	83 ec 0c             	sub    $0xc,%esp
-80102266:	68 80 a5 10 80       	push   $0x8010a580
-8010226b:	e8 b0 23 00 00       	call   80104620 <release>
+80102266:	68 80 b5 10 80       	push   $0x8010b580
+8010226b:	e8 30 29 00 00       	call   80104ba0 <release>
 
   release(&idelock);
 }
@@ -4282,7 +4282,7 @@
   if(!holdingsleep(&b->lock))
 8010228e:	8d 43 0c             	lea    0xc(%ebx),%eax
 80102291:	50                   	push   %eax
-80102292:	e8 e9 20 00 00       	call   80104380 <holdingsleep>
+80102292:	e8 69 26 00 00       	call   80104900 <holdingsleep>
 80102297:	83 c4 10             	add    $0x10,%esp
 8010229a:	85 c0                	test   %eax,%eax
 8010229c:	0f 84 cf 00 00 00    	je     80102371 <iderw+0xf1>
@@ -4297,20 +4297,20 @@
 801022b0:	8b 53 04             	mov    0x4(%ebx),%edx
 801022b3:	85 d2                	test   %edx,%edx
 801022b5:	74 0d                	je     801022c4 <iderw+0x44>
-801022b7:	a1 60 a5 10 80       	mov    0x8010a560,%eax
+801022b7:	a1 60 b5 10 80       	mov    0x8010b560,%eax
 801022bc:	85 c0                	test   %eax,%eax
 801022be:	0f 84 93 00 00 00    	je     80102357 <iderw+0xd7>
     panic("iderw: ide disk 1 not present");
 
   acquire(&idelock);  //DOC:acquire-lock
 801022c4:	83 ec 0c             	sub    $0xc,%esp
-801022c7:	68 80 a5 10 80       	push   $0x8010a580
-801022cc:	e8 8f 22 00 00       	call   80104560 <acquire>
+801022c7:	68 80 b5 10 80       	push   $0x8010b580
+801022cc:	e8 0f 28 00 00       	call   80104ae0 <acquire>
 
   // Append b to idequeue.
   b->qnext = 0;
   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-801022d1:	a1 64 a5 10 80       	mov    0x8010a564,%eax
+801022d1:	a1 64 b5 10 80       	mov    0x8010b564,%eax
   b->qnext = 0;
 801022d6:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
@@ -4329,7 +4329,7 @@
 
   // Start disk if necessary.
   if(idequeue == b)
-801022f6:	39 1d 64 a5 10 80    	cmp    %ebx,0x8010a564
+801022f6:	39 1d 64 b5 10 80    	cmp    %ebx,0x8010b564
 801022fc:	74 42                	je     80102340 <iderw+0xc0>
     idestart(b);
 
@@ -4343,9 +4343,9 @@
 8010230f:	90                   	nop
     sleep(b, &idelock);
 80102310:	83 ec 08             	sub    $0x8,%esp
-80102313:	68 80 a5 10 80       	push   $0x8010a580
+80102313:	68 80 b5 10 80       	push   $0x8010b580
 80102318:	53                   	push   %ebx
-80102319:	e8 02 1c 00 00       	call   80103f20 <sleep>
+80102319:	e8 b2 1f 00 00       	call   801042d0 <sleep>
   while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
 8010231e:	8b 03                	mov    (%ebx),%eax
 80102320:	83 c4 10             	add    $0x10,%esp
@@ -4356,12 +4356,12 @@
 
 
   release(&idelock);
-8010232b:	c7 45 08 80 a5 10 80 	movl   $0x8010a580,0x8(%ebp)
+8010232b:	c7 45 08 80 b5 10 80 	movl   $0x8010b580,0x8(%ebp)
 }
 80102332:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 80102335:	c9                   	leave  
   release(&idelock);
-80102336:	e9 e5 22 00 00       	jmp    80104620 <release>
+80102336:	e9 65 28 00 00       	jmp    80104ba0 <release>
 8010233b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8010233f:	90                   	nop
     idestart(b);
@@ -4370,19 +4370,19 @@
 80102347:	eb b5                	jmp    801022fe <iderw+0x7e>
 80102349:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-80102350:	ba 64 a5 10 80       	mov    $0x8010a564,%edx
+80102350:	ba 64 b5 10 80       	mov    $0x8010b564,%edx
 80102355:	eb 9d                	jmp    801022f4 <iderw+0x74>
     panic("iderw: ide disk 1 not present");
 80102357:	83 ec 0c             	sub    $0xc,%esp
-8010235a:	68 f5 72 10 80       	push   $0x801072f5
+8010235a:	68 15 79 10 80       	push   $0x80107915
 8010235f:	e8 2c e0 ff ff       	call   80100390 <panic>
     panic("iderw: nothing to do");
 80102364:	83 ec 0c             	sub    $0xc,%esp
-80102367:	68 e0 72 10 80       	push   $0x801072e0
+80102367:	68 00 79 10 80       	push   $0x80107900
 8010236c:	e8 1f e0 ff ff       	call   80100390 <panic>
     panic("iderw: buf not locked");
 80102371:	83 ec 0c             	sub    $0xc,%esp
-80102374:	68 ca 72 10 80       	push   $0x801072ca
+80102374:	68 ea 78 10 80       	push   $0x801078ea
 80102379:	e8 12 e0 ff ff       	call   80100390 <panic>
 8010237e:	66 90                	xchg   %ax,%ax
 
@@ -4398,7 +4398,7 @@
   int i, id, maxintr;
 
   ioapic = (volatile struct ioapic*)IOAPIC;
-80102385:	c7 05 34 26 11 80 00 	movl   $0xfec00000,0x80112634
+80102385:	c7 05 34 36 11 80 00 	movl   $0xfec00000,0x80113634
 8010238c:	00 c0 fe 
 {
 8010238f:	89 e5                	mov    %esp,%ebp
@@ -4408,16 +4408,16 @@
 80102393:	c7 05 00 00 c0 fe 01 	movl   $0x1,0xfec00000
 8010239a:	00 00 00 
   return ioapic->data;
-8010239d:	8b 15 34 26 11 80    	mov    0x80112634,%edx
+8010239d:	8b 15 34 36 11 80    	mov    0x80113634,%edx
 801023a3:	8b 72 10             	mov    0x10(%edx),%esi
   ioapic->reg = reg;
 801023a6:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
   return ioapic->data;
-801023ac:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+801023ac:	8b 0d 34 36 11 80    	mov    0x80113634,%ecx
   maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
   id = ioapicread(REG_ID) >> 24;
   if(id != ioapicid)
-801023b2:	0f b6 15 60 27 11 80 	movzbl 0x80112760,%edx
+801023b2:	0f b6 15 60 37 11 80 	movzbl 0x80113760,%edx
   maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
 801023b9:	c1 ee 10             	shr    $0x10,%esi
 801023bc:	89 f0                	mov    %esi,%eax
@@ -4431,9 +4431,9 @@
 801023c9:	74 16                	je     801023e1 <ioapicinit+0x61>
     cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
 801023cb:	83 ec 0c             	sub    $0xc,%esp
-801023ce:	68 14 73 10 80       	push   $0x80107314
+801023ce:	68 34 79 10 80       	push   $0x80107934
 801023d3:	e8 d8 e2 ff ff       	call   801006b0 <cprintf>
-801023d8:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+801023d8:	8b 0d 34 36 11 80    	mov    0x80113634,%ecx
 801023de:	83 c4 10             	add    $0x10,%esp
 801023e1:	83 c6 21             	add    $0x21,%esi
 {
@@ -4449,7 +4449,7 @@
     ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
 801023f2:	89 c3                	mov    %eax,%ebx
   ioapic->data = data;
-801023f4:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+801023f4:	8b 0d 34 36 11 80    	mov    0x80113634,%ecx
 801023fa:	83 c0 01             	add    $0x1,%eax
     ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
 801023fd:	81 cb 00 00 01 00    	or     $0x10000,%ebx
@@ -4460,7 +4460,7 @@
 80102409:	83 c2 02             	add    $0x2,%edx
 8010240c:	89 19                	mov    %ebx,(%ecx)
   ioapic->data = data;
-8010240e:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+8010240e:	8b 0d 34 36 11 80    	mov    0x80113634,%ecx
 80102414:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
   for(i = 0; i <= maxintr; i++){
 8010241b:	39 f0                	cmp    %esi,%eax
@@ -4484,7 +4484,7 @@
 80102430:	f3 0f 1e fb          	endbr32 
 80102434:	55                   	push   %ebp
   ioapic->reg = reg;
-80102435:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+80102435:	8b 0d 34 36 11 80    	mov    0x80113634,%ecx
 {
 8010243b:	89 e5                	mov    %esp,%ebp
 8010243d:	8b 45 08             	mov    0x8(%ebp),%eax
@@ -4497,7 +4497,7 @@
   ioapic->reg = reg;
 80102447:	89 01                	mov    %eax,(%ecx)
   ioapic->data = data;
-80102449:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+80102449:	8b 0d 34 36 11 80    	mov    0x80113634,%ecx
   ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
 8010244f:	83 c0 01             	add    $0x1,%eax
   ioapic->data = data;
@@ -4507,7 +4507,7 @@
   ioapic->reg = reg;
 80102458:	89 01                	mov    %eax,(%ecx)
   ioapic->data = data;
-8010245a:	a1 34 26 11 80       	mov    0x80112634,%eax
+8010245a:	a1 34 36 11 80       	mov    0x80113634,%eax
   ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
 8010245f:	c1 e2 18             	shl    $0x18,%edx
   ioapic->data = data;
@@ -4539,7 +4539,7 @@
   if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
 8010247e:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
 80102484:	75 7a                	jne    80102500 <kfree+0x90>
-80102486:	81 fb a8 54 11 80    	cmp    $0x801154a8,%ebx
+80102486:	81 fb a8 67 11 80    	cmp    $0x801167a8,%ebx
 8010248c:	72 72                	jb     80102500 <kfree+0x90>
 8010248e:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
 80102494:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
@@ -4552,23 +4552,23 @@
 8010249e:	68 00 10 00 00       	push   $0x1000
 801024a3:	6a 01                	push   $0x1
 801024a5:	53                   	push   %ebx
-801024a6:	e8 c5 21 00 00       	call   80104670 <memset>
+801024a6:	e8 45 27 00 00       	call   80104bf0 <memset>
 
   if(kmem.use_lock)
-801024ab:	8b 15 74 26 11 80    	mov    0x80112674,%edx
+801024ab:	8b 15 74 36 11 80    	mov    0x80113674,%edx
 801024b1:	83 c4 10             	add    $0x10,%esp
 801024b4:	85 d2                	test   %edx,%edx
 801024b6:	75 20                	jne    801024d8 <kfree+0x68>
     acquire(&kmem.lock);
   r = (struct run*)v;
   r->next = kmem.freelist;
-801024b8:	a1 78 26 11 80       	mov    0x80112678,%eax
+801024b8:	a1 78 36 11 80       	mov    0x80113678,%eax
 801024bd:	89 03                	mov    %eax,(%ebx)
   kmem.freelist = r;
   if(kmem.use_lock)
-801024bf:	a1 74 26 11 80       	mov    0x80112674,%eax
+801024bf:	a1 74 36 11 80       	mov    0x80113674,%eax
   kmem.freelist = r;
-801024c4:	89 1d 78 26 11 80    	mov    %ebx,0x80112678
+801024c4:	89 1d 78 36 11 80    	mov    %ebx,0x80113678
   if(kmem.use_lock)
 801024ca:	85 c0                	test   %eax,%eax
 801024cc:	75 22                	jne    801024f0 <kfree+0x80>
@@ -4581,21 +4581,21 @@
 801024d7:	90                   	nop
     acquire(&kmem.lock);
 801024d8:	83 ec 0c             	sub    $0xc,%esp
-801024db:	68 40 26 11 80       	push   $0x80112640
-801024e0:	e8 7b 20 00 00       	call   80104560 <acquire>
+801024db:	68 40 36 11 80       	push   $0x80113640
+801024e0:	e8 fb 25 00 00       	call   80104ae0 <acquire>
 801024e5:	83 c4 10             	add    $0x10,%esp
 801024e8:	eb ce                	jmp    801024b8 <kfree+0x48>
 801024ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     release(&kmem.lock);
-801024f0:	c7 45 08 40 26 11 80 	movl   $0x80112640,0x8(%ebp)
+801024f0:	c7 45 08 40 36 11 80 	movl   $0x80113640,0x8(%ebp)
 }
 801024f7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 801024fa:	c9                   	leave  
     release(&kmem.lock);
-801024fb:	e9 20 21 00 00       	jmp    80104620 <release>
+801024fb:	e9 a0 26 00 00       	jmp    80104ba0 <release>
     panic("kfree");
 80102500:	83 ec 0c             	sub    $0xc,%esp
-80102503:	68 46 73 10 80       	push   $0x80107346
+80102503:	68 66 79 10 80       	push   $0x80107966
 80102508:	e8 83 de ff ff       	call   80100390 <panic>
 8010250d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -4649,15 +4649,15 @@
 80102569:	8b 75 0c             	mov    0xc(%ebp),%esi
   initlock(&kmem.lock, "kmem");
 8010256c:	83 ec 08             	sub    $0x8,%esp
-8010256f:	68 4c 73 10 80       	push   $0x8010734c
-80102574:	68 40 26 11 80       	push   $0x80112640
-80102579:	e8 62 1e 00 00       	call   801043e0 <initlock>
+8010256f:	68 6c 79 10 80       	push   $0x8010796c
+80102574:	68 40 36 11 80       	push   $0x80113640
+80102579:	e8 e2 23 00 00       	call   80104960 <initlock>
   p = (char*)PGROUNDUP((uint)vstart);
 8010257e:	8b 45 08             	mov    0x8(%ebp),%eax
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
 80102581:	83 c4 10             	add    $0x10,%esp
   kmem.use_lock = 0;
-80102584:	c7 05 74 26 11 80 00 	movl   $0x0,0x80112674
+80102584:	c7 05 74 36 11 80 00 	movl   $0x0,0x80113674
 8010258b:	00 00 00 
   p = (char*)PGROUNDUP((uint)vstart);
 8010258e:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
@@ -4720,7 +4720,7 @@
 80102610:	39 de                	cmp    %ebx,%esi
 80102612:	73 e4                	jae    801025f8 <kinit2+0x28>
   kmem.use_lock = 1;
-80102614:	c7 05 74 26 11 80 01 	movl   $0x1,0x80112674
+80102614:	c7 05 74 36 11 80 01 	movl   $0x1,0x80113674
 8010261b:	00 00 00 
 }
 8010261e:	8d 65 f8             	lea    -0x8(%ebp),%esp
@@ -4742,18 +4742,18 @@
   struct run *r;
 
   if(kmem.use_lock)
-80102634:	a1 74 26 11 80       	mov    0x80112674,%eax
+80102634:	a1 74 36 11 80       	mov    0x80113674,%eax
 80102639:	85 c0                	test   %eax,%eax
 8010263b:	75 1b                	jne    80102658 <kalloc+0x28>
     acquire(&kmem.lock);
   r = kmem.freelist;
-8010263d:	a1 78 26 11 80       	mov    0x80112678,%eax
+8010263d:	a1 78 36 11 80       	mov    0x80113678,%eax
   if(r)
 80102642:	85 c0                	test   %eax,%eax
 80102644:	74 0a                	je     80102650 <kalloc+0x20>
     kmem.freelist = r->next;
 80102646:	8b 10                	mov    (%eax),%edx
-80102648:	89 15 78 26 11 80    	mov    %edx,0x80112678
+80102648:	89 15 78 36 11 80    	mov    %edx,0x80113678
   if(kmem.use_lock)
 8010264e:	c3                   	ret    
 8010264f:	90                   	nop
@@ -4767,26 +4767,26 @@
 80102659:	89 e5                	mov    %esp,%ebp
 8010265b:	83 ec 24             	sub    $0x24,%esp
     acquire(&kmem.lock);
-8010265e:	68 40 26 11 80       	push   $0x80112640
-80102663:	e8 f8 1e 00 00       	call   80104560 <acquire>
+8010265e:	68 40 36 11 80       	push   $0x80113640
+80102663:	e8 78 24 00 00       	call   80104ae0 <acquire>
   r = kmem.freelist;
-80102668:	a1 78 26 11 80       	mov    0x80112678,%eax
+80102668:	a1 78 36 11 80       	mov    0x80113678,%eax
   if(r)
-8010266d:	8b 15 74 26 11 80    	mov    0x80112674,%edx
+8010266d:	8b 15 74 36 11 80    	mov    0x80113674,%edx
 80102673:	83 c4 10             	add    $0x10,%esp
 80102676:	85 c0                	test   %eax,%eax
 80102678:	74 08                	je     80102682 <kalloc+0x52>
     kmem.freelist = r->next;
 8010267a:	8b 08                	mov    (%eax),%ecx
-8010267c:	89 0d 78 26 11 80    	mov    %ecx,0x80112678
+8010267c:	89 0d 78 36 11 80    	mov    %ecx,0x80113678
   if(kmem.use_lock)
 80102682:	85 d2                	test   %edx,%edx
 80102684:	74 16                	je     8010269c <kalloc+0x6c>
     release(&kmem.lock);
 80102686:	83 ec 0c             	sub    $0xc,%esp
 80102689:	89 45 f4             	mov    %eax,-0xc(%ebp)
-8010268c:	68 40 26 11 80       	push   $0x80112640
-80102691:	e8 8a 1f 00 00       	call   80104620 <release>
+8010268c:	68 40 36 11 80       	push   $0x80113640
+80102691:	e8 0a 25 00 00       	call   80104ba0 <release>
   return (char*)r;
 80102696:	8b 45 f4             	mov    -0xc(%ebp),%eax
     release(&kmem.lock);
@@ -4822,7 +4822,7 @@
 801026ba:	53                   	push   %ebx
 801026bb:	ec                   	in     (%dx),%al
   return data;
-801026bc:	8b 1d b4 a5 10 80    	mov    0x8010a5b4,%ebx
+801026bc:	8b 1d b4 b5 10 80    	mov    0x8010b5b4,%ebx
     return -1;
   data = inb(KBDATAP);
 801026c2:	0f b6 d0             	movzbl %al,%edx
@@ -4854,9 +4854,9 @@
   }
 
   shift |= shiftcode[data];
-801026df:	0f b6 8a 80 74 10 80 	movzbl -0x7fef8b80(%edx),%ecx
+801026df:	0f b6 8a a0 7a 10 80 	movzbl -0x7fef8560(%edx),%ecx
   shift ^= togglecode[data];
-801026e6:	0f b6 82 80 73 10 80 	movzbl -0x7fef8c80(%edx),%eax
+801026e6:	0f b6 82 a0 79 10 80 	movzbl -0x7fef8660(%edx),%eax
   shift |= shiftcode[data];
 801026ed:	09 d9                	or     %ebx,%ecx
   shift ^= togglecode[data];
@@ -4864,13 +4864,13 @@
   c = charcode[shift & (CTL | SHIFT)][data];
 801026f1:	89 c8                	mov    %ecx,%eax
   shift ^= togglecode[data];
-801026f3:	89 0d b4 a5 10 80    	mov    %ecx,0x8010a5b4
+801026f3:	89 0d b4 b5 10 80    	mov    %ecx,0x8010b5b4
   c = charcode[shift & (CTL | SHIFT)][data];
 801026f9:	83 e0 03             	and    $0x3,%eax
   if(shift & CAPSLOCK){
 801026fc:	83 e1 08             	and    $0x8,%ecx
   c = charcode[shift & (CTL | SHIFT)][data];
-801026ff:	8b 04 85 60 73 10 80 	mov    -0x7fef8ca0(,%eax,4),%eax
+801026ff:	8b 04 85 80 79 10 80 	mov    -0x7fef8680(,%eax,4),%eax
 80102706:	0f b6 04 10          	movzbl (%eax,%edx,1),%eax
   if(shift & CAPSLOCK){
 8010270a:	74 0b                	je     80102717 <kbdgetc+0x77>
@@ -4894,7 +4894,7 @@
     return 0;
 80102723:	31 c0                	xor    %eax,%eax
     shift |= E0ESC;
-80102725:	89 1d b4 a5 10 80    	mov    %ebx,0x8010a5b4
+80102725:	89 1d b4 b5 10 80    	mov    %ebx,0x8010b5b4
 }
 8010272b:	5b                   	pop    %ebx
 8010272c:	5d                   	pop    %ebp
@@ -4907,7 +4907,7 @@
     return 0;
 80102738:	31 c0                	xor    %eax,%eax
     shift &= ~(shiftcode[data] | E0ESC);
-8010273a:	0f b6 8a 80 74 10 80 	movzbl -0x7fef8b80(%edx),%ecx
+8010273a:	0f b6 8a a0 7a 10 80 	movzbl -0x7fef8560(%edx),%ecx
 80102741:	83 c9 40             	or     $0x40,%ecx
 80102744:	0f b6 c9             	movzbl %cl,%ecx
 80102747:	f7 d1                	not    %ecx
@@ -4916,7 +4916,7 @@
 8010274b:	5b                   	pop    %ebx
 8010274c:	5d                   	pop    %ebp
     shift &= ~(shiftcode[data] | E0ESC);
-8010274d:	89 0d b4 a5 10 80    	mov    %ecx,0x8010a5b4
+8010274d:	89 0d b4 b5 10 80    	mov    %ecx,0x8010b5b4
 }
 80102753:	c3                   	ret    
 80102754:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -4971,7 +4971,7 @@
 {
 801027a0:	f3 0f 1e fb          	endbr32 
   if(!lapic)
-801027a4:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+801027a4:	a1 7c 36 11 80       	mov    0x8011367c,%eax
 801027a9:	85 c0                	test   %eax,%eax
 801027ab:	0f 84 c7 00 00 00    	je     80102878 <lapicinit+0xd8>
   lapic[index] = value;
@@ -5084,7 +5084,7 @@
 {
 801028a0:	f3 0f 1e fb          	endbr32 
   if (!lapic)
-801028a4:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+801028a4:	a1 7c 36 11 80       	mov    0x8011367c,%eax
 801028a9:	85 c0                	test   %eax,%eax
 801028ab:	74 0b                	je     801028b8 <lapicid+0x18>
     return 0;
@@ -5108,7 +5108,7 @@
 {
 801028c0:	f3 0f 1e fb          	endbr32 
   if(lapic)
-801028c4:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+801028c4:	a1 7c 36 11 80       	mov    0x8011367c,%eax
 801028c9:	85 c0                	test   %eax,%eax
 801028cb:	74 0d                	je     801028da <lapiceoi+0x1a>
   lapic[index] = value;
@@ -5188,7 +5188,7 @@
   wrv[1] = addr >> 4;
 8010292c:	66 a3 69 04 00 80    	mov    %ax,0x80000469
   lapic[index] = value;
-80102932:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+80102932:	a1 7c 36 11 80       	mov    0x8011367c,%eax
 80102937:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
   lapic[ID];  // wait for write to finish, by reading
 8010293d:	8b 58 20             	mov    0x20(%eax),%ebx
@@ -5402,7 +5402,7 @@
 80102aba:	50                   	push   %eax
 80102abb:	8d 45 b8             	lea    -0x48(%ebp),%eax
 80102abe:	50                   	push   %eax
-80102abf:	e8 fc 1b 00 00       	call   801046c0 <memcmp>
+80102abf:	e8 7c 21 00 00       	call   80104c40 <memcmp>
 80102ac4:	83 c4 10             	add    $0x10,%esp
 80102ac7:	85 c0                	test   %eax,%eax
 80102ac9:	0f 85 f1 fe ff ff    	jne    801029c0 <cmostime+0x30>
@@ -5503,7 +5503,7 @@
   int tail;
 
   for (tail = 0; tail < log.lh.n; tail++) {
-80102b90:	8b 0d c8 26 11 80    	mov    0x801126c8,%ecx
+80102b90:	8b 0d c8 36 11 80    	mov    0x801136c8,%ecx
 80102b96:	85 c9                	test   %ecx,%ecx
 80102b98:	0f 8e 8a 00 00 00    	jle    80102c28 <install_trans+0x98>
 {
@@ -5518,19 +5518,19 @@
 80102ba6:	83 ec 0c             	sub    $0xc,%esp
 80102ba9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
-80102bb0:	a1 b4 26 11 80       	mov    0x801126b4,%eax
+80102bb0:	a1 b4 36 11 80       	mov    0x801136b4,%eax
 80102bb5:	83 ec 08             	sub    $0x8,%esp
 80102bb8:	01 f8                	add    %edi,%eax
 80102bba:	83 c0 01             	add    $0x1,%eax
 80102bbd:	50                   	push   %eax
-80102bbe:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102bbe:	ff 35 c4 36 11 80    	pushl  0x801136c4
 80102bc4:	e8 07 d5 ff ff       	call   801000d0 <bread>
 80102bc9:	89 c6                	mov    %eax,%esi
     struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
 80102bcb:	58                   	pop    %eax
 80102bcc:	5a                   	pop    %edx
-80102bcd:	ff 34 bd cc 26 11 80 	pushl  -0x7feed934(,%edi,4)
-80102bd4:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102bcd:	ff 34 bd cc 36 11 80 	pushl  -0x7feec934(,%edi,4)
+80102bd4:	ff 35 c4 36 11 80    	pushl  0x801136c4
   for (tail = 0; tail < log.lh.n; tail++) {
 80102bda:	83 c7 01             	add    $0x1,%edi
     struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
@@ -5545,7 +5545,7 @@
 80102bef:	50                   	push   %eax
 80102bf0:	8d 43 5c             	lea    0x5c(%ebx),%eax
 80102bf3:	50                   	push   %eax
-80102bf4:	e8 17 1b 00 00       	call   80104710 <memmove>
+80102bf4:	e8 97 20 00 00       	call   80104c90 <memmove>
     bwrite(dbuf);  // write dst to disk
 80102bf9:	89 1c 24             	mov    %ebx,(%esp)
 80102bfc:	e8 af d5 ff ff       	call   801001b0 <bwrite>
@@ -5557,7 +5557,7 @@
 80102c0c:	e8 df d5 ff ff       	call   801001f0 <brelse>
   for (tail = 0; tail < log.lh.n; tail++) {
 80102c11:	83 c4 10             	add    $0x10,%esp
-80102c14:	39 3d c8 26 11 80    	cmp    %edi,0x801126c8
+80102c14:	39 3d c8 36 11 80    	cmp    %edi,0x801136c8
 80102c1a:	7f 94                	jg     80102bb0 <install_trans+0x20>
   }
 }
@@ -5583,8 +5583,8 @@
 80102c33:	53                   	push   %ebx
 80102c34:	83 ec 0c             	sub    $0xc,%esp
   struct buf *buf = bread(log.dev, log.start);
-80102c37:	ff 35 b4 26 11 80    	pushl  0x801126b4
-80102c3d:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102c37:	ff 35 b4 36 11 80    	pushl  0x801136b4
+80102c3d:	ff 35 c4 36 11 80    	pushl  0x801136c4
 80102c43:	e8 88 d4 ff ff       	call   801000d0 <bread>
   struct logheader *hb = (struct logheader *) (buf->data);
   int i;
@@ -5594,7 +5594,7 @@
   struct buf *buf = bread(log.dev, log.start);
 80102c4b:	89 c3                	mov    %eax,%ebx
   hb->n = log.lh.n;
-80102c4d:	a1 c8 26 11 80       	mov    0x801126c8,%eax
+80102c4d:	a1 c8 36 11 80       	mov    0x801136c8,%eax
 80102c52:	89 43 5c             	mov    %eax,0x5c(%ebx)
   for (i = 0; i < log.lh.n; i++) {
 80102c55:	85 c0                	test   %eax,%eax
@@ -5603,7 +5603,7 @@
 80102c5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80102c5f:	90                   	nop
     hb->block[i] = log.lh.block[i];
-80102c60:	8b 0c 95 cc 26 11 80 	mov    -0x7feed934(,%edx,4),%ecx
+80102c60:	8b 0c 95 cc 36 11 80 	mov    -0x7feec934(,%edx,4),%ecx
 80102c67:	89 4c 93 60          	mov    %ecx,0x60(%ebx,%edx,4)
   for (i = 0; i < log.lh.n; i++) {
 80102c6b:	83 c2 01             	add    $0x1,%edx
@@ -5634,9 +5634,9 @@
 80102c98:	83 ec 2c             	sub    $0x2c,%esp
 80102c9b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&log.lock, "log");
-80102c9e:	68 80 75 10 80       	push   $0x80107580
-80102ca3:	68 80 26 11 80       	push   $0x80112680
-80102ca8:	e8 33 17 00 00       	call   801043e0 <initlock>
+80102c9e:	68 a0 7b 10 80       	push   $0x80107ba0
+80102ca3:	68 80 36 11 80       	push   $0x80113680
+80102ca8:	e8 b3 1c 00 00       	call   80104960 <initlock>
   readsb(dev, &sb);
 80102cad:	58                   	pop    %eax
 80102cae:	8d 45 dc             	lea    -0x24(%ebp),%eax
@@ -5649,13 +5649,13 @@
   struct buf *buf = bread(log.dev, log.start);
 80102cbc:	59                   	pop    %ecx
   log.dev = dev;
-80102cbd:	89 1d c4 26 11 80    	mov    %ebx,0x801126c4
+80102cbd:	89 1d c4 36 11 80    	mov    %ebx,0x801136c4
   log.size = sb.nlog;
 80102cc3:	8b 55 e8             	mov    -0x18(%ebp),%edx
   log.start = sb.logstart;
-80102cc6:	a3 b4 26 11 80       	mov    %eax,0x801126b4
+80102cc6:	a3 b4 36 11 80       	mov    %eax,0x801136b4
   log.size = sb.nlog;
-80102ccb:	89 15 b8 26 11 80    	mov    %edx,0x801126b8
+80102ccb:	89 15 b8 36 11 80    	mov    %edx,0x801136b8
   struct buf *buf = bread(log.dev, log.start);
 80102cd1:	5a                   	pop    %edx
 80102cd2:	50                   	push   %eax
@@ -5665,7 +5665,7 @@
 80102cd9:	83 c4 10             	add    $0x10,%esp
   log.lh.n = lh->n;
 80102cdc:	8b 48 5c             	mov    0x5c(%eax),%ecx
-80102cdf:	89 0d c8 26 11 80    	mov    %ecx,0x801126c8
+80102cdf:	89 0d c8 36 11 80    	mov    %ecx,0x801136c8
   for (i = 0; i < log.lh.n; i++) {
 80102ce5:	85 c9                	test   %ecx,%ecx
 80102ce7:	7e 19                	jle    80102d02 <initlog+0x72>
@@ -5674,7 +5674,7 @@
 80102cef:	90                   	nop
     log.lh.block[i] = lh->block[i];
 80102cf0:	8b 5c 90 60          	mov    0x60(%eax,%edx,4),%ebx
-80102cf4:	89 1c 95 cc 26 11 80 	mov    %ebx,-0x7feed934(,%edx,4)
+80102cf4:	89 1c 95 cc 36 11 80 	mov    %ebx,-0x7feec934(,%edx,4)
   for (i = 0; i < log.lh.n; i++) {
 80102cfb:	83 c2 01             	add    $0x1,%edx
 80102cfe:	39 d1                	cmp    %edx,%ecx
@@ -5691,7 +5691,7 @@
   install_trans(); // if committed, copy from log to disk
 80102d0b:	e8 80 fe ff ff       	call   80102b90 <install_trans>
   log.lh.n = 0;
-80102d10:	c7 05 c8 26 11 80 00 	movl   $0x0,0x801126c8
+80102d10:	c7 05 c8 36 11 80 00 	movl   $0x0,0x801136c8
 80102d17:	00 00 00 
   write_head(); // clear the log
 80102d1a:	e8 11 ff ff ff       	call   80102c30 <write_head>
@@ -5715,8 +5715,8 @@
 80102d35:	89 e5                	mov    %esp,%ebp
 80102d37:	83 ec 14             	sub    $0x14,%esp
   acquire(&log.lock);
-80102d3a:	68 80 26 11 80       	push   $0x80112680
-80102d3f:	e8 1c 18 00 00       	call   80104560 <acquire>
+80102d3a:	68 80 36 11 80       	push   $0x80113680
+80102d3f:	e8 9c 1d 00 00       	call   80104ae0 <acquire>
 80102d44:	83 c4 10             	add    $0x10,%esp
 80102d47:	eb 1c                	jmp    80102d65 <begin_op+0x35>
 80102d49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -5724,17 +5724,17 @@
     if(log.committing){
       sleep(&log, &log.lock);
 80102d50:	83 ec 08             	sub    $0x8,%esp
-80102d53:	68 80 26 11 80       	push   $0x80112680
-80102d58:	68 80 26 11 80       	push   $0x80112680
-80102d5d:	e8 be 11 00 00       	call   80103f20 <sleep>
+80102d53:	68 80 36 11 80       	push   $0x80113680
+80102d58:	68 80 36 11 80       	push   $0x80113680
+80102d5d:	e8 6e 15 00 00       	call   801042d0 <sleep>
 80102d62:	83 c4 10             	add    $0x10,%esp
     if(log.committing){
-80102d65:	a1 c0 26 11 80       	mov    0x801126c0,%eax
+80102d65:	a1 c0 36 11 80       	mov    0x801136c0,%eax
 80102d6a:	85 c0                	test   %eax,%eax
 80102d6c:	75 e2                	jne    80102d50 <begin_op+0x20>
     } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
-80102d6e:	a1 bc 26 11 80       	mov    0x801126bc,%eax
-80102d73:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
+80102d6e:	a1 bc 36 11 80       	mov    0x801136bc,%eax
+80102d73:	8b 15 c8 36 11 80    	mov    0x801136c8,%edx
 80102d79:	83 c0 01             	add    $0x1,%eax
 80102d7c:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
 80102d7f:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
@@ -5747,10 +5747,10 @@
       release(&log.lock);
 80102d87:	83 ec 0c             	sub    $0xc,%esp
       log.outstanding += 1;
-80102d8a:	a3 bc 26 11 80       	mov    %eax,0x801126bc
+80102d8a:	a3 bc 36 11 80       	mov    %eax,0x801136bc
       release(&log.lock);
-80102d8f:	68 80 26 11 80       	push   $0x80112680
-80102d94:	e8 87 18 00 00       	call   80104620 <release>
+80102d8f:	68 80 36 11 80       	push   $0x80113680
+80102d94:	e8 07 1e 00 00       	call   80104ba0 <release>
       break;
     }
   }
@@ -5777,16 +5777,16 @@
   int do_commit = 0;
 
   acquire(&log.lock);
-80102dad:	68 80 26 11 80       	push   $0x80112680
-80102db2:	e8 a9 17 00 00       	call   80104560 <acquire>
+80102dad:	68 80 36 11 80       	push   $0x80113680
+80102db2:	e8 29 1d 00 00       	call   80104ae0 <acquire>
   log.outstanding -= 1;
-80102db7:	a1 bc 26 11 80       	mov    0x801126bc,%eax
+80102db7:	a1 bc 36 11 80       	mov    0x801136bc,%eax
   if(log.committing)
-80102dbc:	8b 35 c0 26 11 80    	mov    0x801126c0,%esi
+80102dbc:	8b 35 c0 36 11 80    	mov    0x801136c0,%esi
 80102dc2:	83 c4 10             	add    $0x10,%esp
   log.outstanding -= 1;
 80102dc5:	8d 58 ff             	lea    -0x1(%eax),%ebx
-80102dc8:	89 1d bc 26 11 80    	mov    %ebx,0x801126bc
+80102dc8:	89 1d bc 36 11 80    	mov    %ebx,0x801136bc
   if(log.committing)
 80102dce:	85 f6                	test   %esi,%esi
 80102dd0:	0f 85 1e 01 00 00    	jne    80102ef4 <end_op+0x154>
@@ -5796,7 +5796,7 @@
 80102dd8:	0f 85 f2 00 00 00    	jne    80102ed0 <end_op+0x130>
     do_commit = 1;
     log.committing = 1;
-80102dde:	c7 05 c0 26 11 80 01 	movl   $0x1,0x801126c0
+80102dde:	c7 05 c0 36 11 80 01 	movl   $0x1,0x801136c0
 80102de5:	00 00 00 
     // begin_op() may be waiting for log space,
     // and decrementing log.outstanding has decreased
@@ -5805,32 +5805,32 @@
   }
   release(&log.lock);
 80102de8:	83 ec 0c             	sub    $0xc,%esp
-80102deb:	68 80 26 11 80       	push   $0x80112680
-80102df0:	e8 2b 18 00 00       	call   80104620 <release>
+80102deb:	68 80 36 11 80       	push   $0x80113680
+80102df0:	e8 ab 1d 00 00       	call   80104ba0 <release>
 }
 
 static void
 commit()
 {
   if (log.lh.n > 0) {
-80102df5:	8b 0d c8 26 11 80    	mov    0x801126c8,%ecx
+80102df5:	8b 0d c8 36 11 80    	mov    0x801136c8,%ecx
 80102dfb:	83 c4 10             	add    $0x10,%esp
 80102dfe:	85 c9                	test   %ecx,%ecx
 80102e00:	7f 3e                	jg     80102e40 <end_op+0xa0>
     acquire(&log.lock);
 80102e02:	83 ec 0c             	sub    $0xc,%esp
-80102e05:	68 80 26 11 80       	push   $0x80112680
-80102e0a:	e8 51 17 00 00       	call   80104560 <acquire>
+80102e05:	68 80 36 11 80       	push   $0x80113680
+80102e0a:	e8 d1 1c 00 00       	call   80104ae0 <acquire>
     wakeup(&log);
-80102e0f:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
+80102e0f:	c7 04 24 80 36 11 80 	movl   $0x80113680,(%esp)
     log.committing = 0;
-80102e16:	c7 05 c0 26 11 80 00 	movl   $0x0,0x801126c0
+80102e16:	c7 05 c0 36 11 80 00 	movl   $0x0,0x801136c0
 80102e1d:	00 00 00 
     wakeup(&log);
-80102e20:	e8 bb 12 00 00       	call   801040e0 <wakeup>
+80102e20:	e8 6b 16 00 00       	call   80104490 <wakeup>
     release(&log.lock);
-80102e25:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-80102e2c:	e8 ef 17 00 00       	call   80104620 <release>
+80102e25:	c7 04 24 80 36 11 80 	movl   $0x80113680,(%esp)
+80102e2c:	e8 6f 1d 00 00       	call   80104ba0 <release>
 80102e31:	83 c4 10             	add    $0x10,%esp
 }
 80102e34:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -5841,19 +5841,19 @@
 80102e3b:	c3                   	ret    
 80102e3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     struct buf *to = bread(log.dev, log.start+tail+1); // log block
-80102e40:	a1 b4 26 11 80       	mov    0x801126b4,%eax
+80102e40:	a1 b4 36 11 80       	mov    0x801136b4,%eax
 80102e45:	83 ec 08             	sub    $0x8,%esp
 80102e48:	01 d8                	add    %ebx,%eax
 80102e4a:	83 c0 01             	add    $0x1,%eax
 80102e4d:	50                   	push   %eax
-80102e4e:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102e4e:	ff 35 c4 36 11 80    	pushl  0x801136c4
 80102e54:	e8 77 d2 ff ff       	call   801000d0 <bread>
 80102e59:	89 c6                	mov    %eax,%esi
     struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
 80102e5b:	58                   	pop    %eax
 80102e5c:	5a                   	pop    %edx
-80102e5d:	ff 34 9d cc 26 11 80 	pushl  -0x7feed934(,%ebx,4)
-80102e64:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102e5d:	ff 34 9d cc 36 11 80 	pushl  -0x7feec934(,%ebx,4)
+80102e64:	ff 35 c4 36 11 80    	pushl  0x801136c4
   for (tail = 0; tail < log.lh.n; tail++) {
 80102e6a:	83 c3 01             	add    $0x1,%ebx
     struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
@@ -5868,7 +5868,7 @@
 80102e7f:	50                   	push   %eax
 80102e80:	8d 46 5c             	lea    0x5c(%esi),%eax
 80102e83:	50                   	push   %eax
-80102e84:	e8 87 18 00 00       	call   80104710 <memmove>
+80102e84:	e8 07 1e 00 00       	call   80104c90 <memmove>
     bwrite(to);  // write the log
 80102e89:	89 34 24             	mov    %esi,(%esp)
 80102e8c:	e8 1f d3 ff ff       	call   801001b0 <bwrite>
@@ -5880,7 +5880,7 @@
 80102e9c:	e8 4f d3 ff ff       	call   801001f0 <brelse>
   for (tail = 0; tail < log.lh.n; tail++) {
 80102ea1:	83 c4 10             	add    $0x10,%esp
-80102ea4:	3b 1d c8 26 11 80    	cmp    0x801126c8,%ebx
+80102ea4:	3b 1d c8 36 11 80    	cmp    0x801136c8,%ebx
 80102eaa:	7c 94                	jl     80102e40 <end_op+0xa0>
     write_log();     // Write modified blocks from cache to log
     write_head();    // Write header to disk -- the real commit
@@ -5888,7 +5888,7 @@
     install_trans(); // Now install writes to home locations
 80102eb1:	e8 da fc ff ff       	call   80102b90 <install_trans>
     log.lh.n = 0;
-80102eb6:	c7 05 c8 26 11 80 00 	movl   $0x0,0x801126c8
+80102eb6:	c7 05 c8 36 11 80 00 	movl   $0x0,0x801136c8
 80102ebd:	00 00 00 
     write_head();    // Erase the transaction from the log
 80102ec0:	e8 6b fd ff ff       	call   80102c30 <write_head>
@@ -5896,11 +5896,11 @@
 80102eca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     wakeup(&log);
 80102ed0:	83 ec 0c             	sub    $0xc,%esp
-80102ed3:	68 80 26 11 80       	push   $0x80112680
-80102ed8:	e8 03 12 00 00       	call   801040e0 <wakeup>
+80102ed3:	68 80 36 11 80       	push   $0x80113680
+80102ed8:	e8 b3 15 00 00       	call   80104490 <wakeup>
   release(&log.lock);
-80102edd:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-80102ee4:	e8 37 17 00 00       	call   80104620 <release>
+80102edd:	c7 04 24 80 36 11 80 	movl   $0x80113680,(%esp)
+80102ee4:	e8 b7 1c 00 00       	call   80104ba0 <release>
 80102ee9:	83 c4 10             	add    $0x10,%esp
 }
 80102eec:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -5911,7 +5911,7 @@
 80102ef3:	c3                   	ret    
     panic("log.committing");
 80102ef4:	83 ec 0c             	sub    $0xc,%esp
-80102ef7:	68 84 75 10 80       	push   $0x80107584
+80102ef7:	68 a4 7b 10 80       	push   $0x80107ba4
 80102efc:	e8 8f d4 ff ff       	call   80100390 <panic>
 80102f01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80102f08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -5932,29 +5932,29 @@
   int i;
 
   if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
-80102f1b:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
+80102f1b:	8b 15 c8 36 11 80    	mov    0x801136c8,%edx
 {
 80102f21:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
 80102f24:	83 fa 1d             	cmp    $0x1d,%edx
 80102f27:	0f 8f 91 00 00 00    	jg     80102fbe <log_write+0xae>
-80102f2d:	a1 b8 26 11 80       	mov    0x801126b8,%eax
+80102f2d:	a1 b8 36 11 80       	mov    0x801136b8,%eax
 80102f32:	83 e8 01             	sub    $0x1,%eax
 80102f35:	39 c2                	cmp    %eax,%edx
 80102f37:	0f 8d 81 00 00 00    	jge    80102fbe <log_write+0xae>
     panic("too big a transaction");
   if (log.outstanding < 1)
-80102f3d:	a1 bc 26 11 80       	mov    0x801126bc,%eax
+80102f3d:	a1 bc 36 11 80       	mov    0x801136bc,%eax
 80102f42:	85 c0                	test   %eax,%eax
 80102f44:	0f 8e 81 00 00 00    	jle    80102fcb <log_write+0xbb>
     panic("log_write outside of trans");
 
   acquire(&log.lock);
 80102f4a:	83 ec 0c             	sub    $0xc,%esp
-80102f4d:	68 80 26 11 80       	push   $0x80112680
-80102f52:	e8 09 16 00 00       	call   80104560 <acquire>
+80102f4d:	68 80 36 11 80       	push   $0x80113680
+80102f52:	e8 89 1b 00 00       	call   80104ae0 <acquire>
   for (i = 0; i < log.lh.n; i++) {
-80102f57:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
+80102f57:	8b 15 c8 36 11 80    	mov    0x801136c8,%edx
 80102f5d:	83 c4 10             	add    $0x10,%esp
 80102f60:	85 d2                	test   %edx,%edx
 80102f62:	7e 4e                	jle    80102fb2 <log_write+0xa2>
@@ -5969,12 +5969,12 @@
 80102f73:	39 c2                	cmp    %eax,%edx
 80102f75:	74 29                	je     80102fa0 <log_write+0x90>
     if (log.lh.block[i] == b->blockno)   // log absorbtion
-80102f77:	39 0c 85 cc 26 11 80 	cmp    %ecx,-0x7feed934(,%eax,4)
+80102f77:	39 0c 85 cc 36 11 80 	cmp    %ecx,-0x7feec934(,%eax,4)
 80102f7e:	75 f0                	jne    80102f70 <log_write+0x60>
       break;
   }
   log.lh.block[i] = b->blockno;
-80102f80:	89 0c 85 cc 26 11 80 	mov    %ecx,-0x7feed934(,%eax,4)
+80102f80:	89 0c 85 cc 36 11 80 	mov    %ecx,-0x7feec934(,%eax,4)
   if (i == log.lh.n)
     log.lh.n++;
   b->flags |= B_DIRTY; // prevent eviction
@@ -5983,31 +5983,31 @@
 }
 80102f8a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   release(&log.lock);
-80102f8d:	c7 45 08 80 26 11 80 	movl   $0x80112680,0x8(%ebp)
+80102f8d:	c7 45 08 80 36 11 80 	movl   $0x80113680,0x8(%ebp)
 }
 80102f94:	c9                   	leave  
   release(&log.lock);
-80102f95:	e9 86 16 00 00       	jmp    80104620 <release>
+80102f95:	e9 06 1c 00 00       	jmp    80104ba0 <release>
 80102f9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   log.lh.block[i] = b->blockno;
-80102fa0:	89 0c 95 cc 26 11 80 	mov    %ecx,-0x7feed934(,%edx,4)
+80102fa0:	89 0c 95 cc 36 11 80 	mov    %ecx,-0x7feec934(,%edx,4)
     log.lh.n++;
 80102fa7:	83 c2 01             	add    $0x1,%edx
-80102faa:	89 15 c8 26 11 80    	mov    %edx,0x801126c8
+80102faa:	89 15 c8 36 11 80    	mov    %edx,0x801136c8
 80102fb0:	eb d5                	jmp    80102f87 <log_write+0x77>
   log.lh.block[i] = b->blockno;
 80102fb2:	8b 43 08             	mov    0x8(%ebx),%eax
-80102fb5:	a3 cc 26 11 80       	mov    %eax,0x801126cc
+80102fb5:	a3 cc 36 11 80       	mov    %eax,0x801136cc
   if (i == log.lh.n)
 80102fba:	75 cb                	jne    80102f87 <log_write+0x77>
 80102fbc:	eb e9                	jmp    80102fa7 <log_write+0x97>
     panic("too big a transaction");
 80102fbe:	83 ec 0c             	sub    $0xc,%esp
-80102fc1:	68 93 75 10 80       	push   $0x80107593
+80102fc1:	68 b3 7b 10 80       	push   $0x80107bb3
 80102fc6:	e8 c5 d3 ff ff       	call   80100390 <panic>
     panic("log_write outside of trans");
 80102fcb:	83 ec 0c             	sub    $0xc,%esp
-80102fce:	68 a9 75 10 80       	push   $0x801075a9
+80102fce:	68 c9 7b 10 80       	push   $0x80107bc9
 80102fd3:	e8 b8 d3 ff ff       	call   80100390 <panic>
 80102fd8:	66 90                	xchg   %ax,%ax
 80102fda:	66 90                	xchg   %ax,%ax
@@ -6026,18 +6026,18 @@
 80102fe3:	53                   	push   %ebx
 80102fe4:	83 ec 04             	sub    $0x4,%esp
   cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
-80102fe7:	e8 54 09 00 00       	call   80103940 <cpuid>
+80102fe7:	e8 54 0c 00 00       	call   80103c40 <cpuid>
 80102fec:	89 c3                	mov    %eax,%ebx
-80102fee:	e8 4d 09 00 00       	call   80103940 <cpuid>
+80102fee:	e8 4d 0c 00 00       	call   80103c40 <cpuid>
 80102ff3:	83 ec 04             	sub    $0x4,%esp
 80102ff6:	53                   	push   %ebx
 80102ff7:	50                   	push   %eax
-80102ff8:	68 c4 75 10 80       	push   $0x801075c4
+80102ff8:	68 e4 7b 10 80       	push   $0x80107be4
 80102ffd:	e8 ae d6 ff ff       	call   801006b0 <cprintf>
   idtinit();       // load idt register
-80103002:	e8 19 29 00 00       	call   80105920 <idtinit>
+80103002:	e8 39 2f 00 00       	call   80105f40 <idtinit>
   xchg(&(mycpu()->started), 1); // tell startothers() we're up
-80103007:	e8 c4 08 00 00       	call   801038d0 <mycpu>
+80103007:	e8 c4 0b 00 00       	call   80103bd0 <mycpu>
 8010300c:	89 c2                	mov    %eax,%edx
 xchg(volatile uint *addr, uint newval)
 {
@@ -6048,7 +6048,7 @@
 8010300e:	b8 01 00 00 00       	mov    $0x1,%eax
 80103013:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
   scheduler();     // start running processes
-8010301a:	e8 11 0c 00 00       	call   80103c30 <scheduler>
+8010301a:	e8 11 0f 00 00       	call   80103f30 <scheduler>
 8010301f:	90                   	nop
 
 80103020 <mpenter>:
@@ -6058,9 +6058,9 @@
 80103025:	89 e5                	mov    %esp,%ebp
 80103027:	83 ec 08             	sub    $0x8,%esp
   switchkvm();
-8010302a:	e8 c1 39 00 00       	call   801069f0 <switchkvm>
+8010302a:	e8 e1 3f 00 00       	call   80107010 <switchkvm>
   seginit();
-8010302f:	e8 2c 39 00 00       	call   80106960 <seginit>
+8010302f:	e8 4c 3f 00 00       	call   80106f80 <seginit>
   lapicinit();
 80103034:	e8 67 f7 ff ff       	call   801027a0 <lapicinit>
   mpmain();
@@ -6080,16 +6080,16 @@
   kinit1(end, P2V(4*1024*1024)); // phys page allocator
 80103053:	83 ec 08             	sub    $0x8,%esp
 80103056:	68 00 00 40 80       	push   $0x80400000
-8010305b:	68 a8 54 11 80       	push   $0x801154a8
+8010305b:	68 a8 67 11 80       	push   $0x801167a8
 80103060:	e8 fb f4 ff ff       	call   80102560 <kinit1>
   kvmalloc();      // kernel page table
-80103065:	e8 66 3e 00 00       	call   80106ed0 <kvmalloc>
+80103065:	e8 86 44 00 00       	call   801074f0 <kvmalloc>
   mpinit();        // detect other processors
 8010306a:	e8 81 01 00 00       	call   801031f0 <mpinit>
   lapicinit();     // interrupt controller
 8010306f:	e8 2c f7 ff ff       	call   801027a0 <lapicinit>
   seginit();       // segment descriptors
-80103074:	e8 e7 38 00 00       	call   80106960 <seginit>
+80103074:	e8 07 3f 00 00       	call   80106f80 <seginit>
   picinit();       // disable pic
 80103079:	e8 52 03 00 00       	call   801033d0 <picinit>
   ioapicinit();    // another interrupt controller
@@ -6097,11 +6097,11 @@
   consoleinit();   // console hardware
 80103083:	e8 a8 d9 ff ff       	call   80100a30 <consoleinit>
   uartinit();      // serial port
-80103088:	e8 93 2b 00 00       	call   80105c20 <uartinit>
+80103088:	e8 b3 31 00 00       	call   80106240 <uartinit>
   pinit();         // process table
-8010308d:	e8 1e 08 00 00       	call   801038b0 <pinit>
+8010308d:	e8 4e 08 00 00       	call   801038e0 <pinit>
   tvinit();        // trap vectors
-80103092:	e8 09 28 00 00       	call   801058a0 <tvinit>
+80103092:	e8 29 2e 00 00       	call   80105ec0 <tvinit>
   binit();         // buffer cache
 80103097:	e8 a4 cf ff ff       	call   80100040 <binit>
   fileinit();      // file table
@@ -6116,28 +6116,28 @@
   memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
 801030a6:	83 c4 0c             	add    $0xc,%esp
 801030a9:	68 8a 00 00 00       	push   $0x8a
-801030ae:	68 8c a4 10 80       	push   $0x8010a48c
+801030ae:	68 8c b4 10 80       	push   $0x8010b48c
 801030b3:	68 00 70 00 80       	push   $0x80007000
-801030b8:	e8 53 16 00 00       	call   80104710 <memmove>
+801030b8:	e8 d3 1b 00 00       	call   80104c90 <memmove>
 
   for(c = cpus; c < cpus+ncpu; c++){
 801030bd:	83 c4 10             	add    $0x10,%esp
-801030c0:	69 05 00 2d 11 80 b0 	imul   $0xb0,0x80112d00,%eax
+801030c0:	69 05 00 3d 11 80 b0 	imul   $0xb0,0x80113d00,%eax
 801030c7:	00 00 00 
-801030ca:	05 80 27 11 80       	add    $0x80112780,%eax
-801030cf:	3d 80 27 11 80       	cmp    $0x80112780,%eax
+801030ca:	05 80 37 11 80       	add    $0x80113780,%eax
+801030cf:	3d 80 37 11 80       	cmp    $0x80113780,%eax
 801030d4:	76 7a                	jbe    80103150 <main+0x110>
-801030d6:	bb 80 27 11 80       	mov    $0x80112780,%ebx
+801030d6:	bb 80 37 11 80       	mov    $0x80113780,%ebx
 801030db:	eb 1c                	jmp    801030f9 <main+0xb9>
 801030dd:	8d 76 00             	lea    0x0(%esi),%esi
-801030e0:	69 05 00 2d 11 80 b0 	imul   $0xb0,0x80112d00,%eax
+801030e0:	69 05 00 3d 11 80 b0 	imul   $0xb0,0x80113d00,%eax
 801030e7:	00 00 00 
 801030ea:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
-801030f0:	05 80 27 11 80       	add    $0x80112780,%eax
+801030f0:	05 80 37 11 80       	add    $0x80113780,%eax
 801030f5:	39 c3                	cmp    %eax,%ebx
 801030f7:	73 57                	jae    80103150 <main+0x110>
     if(c == mycpu())  // We've started already.
-801030f9:	e8 d2 07 00 00       	call   801038d0 <mycpu>
+801030f9:	e8 d2 0a 00 00       	call   80103bd0 <mycpu>
 801030fe:	39 c3                	cmp    %eax,%ebx
 80103100:	74 de                	je     801030e0 <main+0xa0>
       continue;
@@ -6157,8 +6157,8 @@
 8010310a:	c7 05 f8 6f 00 80 20 	movl   $0x80103020,0x80006ff8
 80103111:	30 10 80 
     *(int**)(code-12) = (void *) V2P(entrypgdir);
-80103114:	c7 05 f4 6f 00 80 00 	movl   $0x109000,0x80006ff4
-8010311b:	90 10 00 
+80103114:	c7 05 f4 6f 00 80 00 	movl   $0x10a000,0x80006ff4
+8010311b:	a0 10 00 
     *(void**)(code-4) = stack + KSTACKSIZE;
 8010311e:	05 00 10 00 00       	add    $0x1000,%eax
 80103123:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
@@ -6183,7 +6183,7 @@
 80103158:	68 00 00 40 80       	push   $0x80400000
 8010315d:	e8 6e f4 ff ff       	call   801025d0 <kinit2>
   userinit();      // first user process
-80103162:	e8 29 08 00 00       	call   80103990 <userinit>
+80103162:	e8 29 0b 00 00       	call   80103c90 <userinit>
   mpmain();        // finish this processor's setup
 80103167:	e8 74 fe ff ff       	call   80102fe0 <mpmain>
 8010316c:	66 90                	xchg   %ax,%ax
@@ -6223,9 +6223,9 @@
 80103196:	83 ec 04             	sub    $0x4,%esp
 80103199:	8d 7e 10             	lea    0x10(%esi),%edi
 8010319c:	6a 04                	push   $0x4
-8010319e:	68 d8 75 10 80       	push   $0x801075d8
+8010319e:	68 f8 7b 10 80       	push   $0x80107bf8
 801031a3:	56                   	push   %esi
-801031a4:	e8 17 15 00 00       	call   801046c0 <memcmp>
+801031a4:	e8 97 1a 00 00       	call   80104c40 <memcmp>
 801031a9:	83 c4 10             	add    $0x10,%esp
 801031ac:	85 c0                	test   %eax,%eax
 801031ae:	75 e0                	jne    80103190 <mpsearch1+0x20>
@@ -6311,12 +6311,12 @@
 80103252:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
   if(memcmp(conf, "PCMP", 4) != 0)
 80103258:	6a 04                	push   $0x4
-8010325a:	68 dd 75 10 80       	push   $0x801075dd
+8010325a:	68 fd 7b 10 80       	push   $0x80107bfd
 8010325f:	50                   	push   %eax
   conf = (struct mpconf*) P2V((uint) mp->physaddr);
 80103260:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(memcmp(conf, "PCMP", 4) != 0)
-80103263:	e8 58 14 00 00       	call   801046c0 <memcmp>
+80103263:	e8 d8 19 00 00       	call   80104c40 <memcmp>
 80103268:	83 c4 10             	add    $0x10,%esp
 8010326b:	85 c0                	test   %eax,%eax
 8010326d:	0f 85 3d 01 00 00    	jne    801033b0 <mpinit+0x1c0>
@@ -6353,7 +6353,7 @@
   ismp = 1;
   lapic = (uint*)conf->lapicaddr;
 801032b8:	8b 83 24 00 00 80    	mov    -0x7fffffdc(%ebx),%eax
-801032be:	a3 7c 26 11 80       	mov    %eax,0x8011267c
+801032be:	a3 7c 36 11 80       	mov    %eax,0x8011367c
   for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
 801032c3:	8d 83 2c 00 00 80    	lea    -0x7fffffd4(%ebx),%eax
 801032c9:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
@@ -6433,13 +6433,13 @@
       p += sizeof(struct mpioapic);
 8010334c:	83 c0 08             	add    $0x8,%eax
       ioapicid = ioapic->apicno;
-8010334f:	88 0d 60 27 11 80    	mov    %cl,0x80112760
+8010334f:	88 0d 60 37 11 80    	mov    %cl,0x80113760
       continue;
 80103355:	eb 89                	jmp    801032e0 <mpinit+0xf0>
 80103357:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010335e:	66 90                	xchg   %ax,%ax
       if(ncpu < NCPU) {
-80103360:	8b 0d 00 2d 11 80    	mov    0x80112d00,%ecx
+80103360:	8b 0d 00 3d 11 80    	mov    0x80113d00,%ecx
 80103366:	83 f9 07             	cmp    $0x7,%ecx
 80103369:	7f 19                	jg     80103384 <mpinit+0x194>
         cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
@@ -6447,9 +6447,9 @@
 80103371:	0f b6 58 01          	movzbl 0x1(%eax),%ebx
         ncpu++;
 80103375:	83 c1 01             	add    $0x1,%ecx
-80103378:	89 0d 00 2d 11 80    	mov    %ecx,0x80112d00
+80103378:	89 0d 00 3d 11 80    	mov    %ecx,0x80113d00
         cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
-8010337e:	88 9f 80 27 11 80    	mov    %bl,-0x7feed880(%edi)
+8010337e:	88 9f 80 37 11 80    	mov    %bl,-0x7feec880(%edi)
       p += sizeof(struct mpproc);
 80103384:	83 c0 14             	add    $0x14,%eax
       continue;
@@ -6466,11 +6466,11 @@
 801033a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     panic("Expect to run on an SMP");
 801033b0:	83 ec 0c             	sub    $0xc,%esp
-801033b3:	68 e2 75 10 80       	push   $0x801075e2
+801033b3:	68 02 7c 10 80       	push   $0x80107c02
 801033b8:	e8 d3 cf ff ff       	call   80100390 <panic>
     panic("Didn't find a suitable machine");
 801033bd:	83 ec 0c             	sub    $0xc,%esp
-801033c0:	68 fc 75 10 80       	push   $0x801075fc
+801033c0:	68 1c 7c 10 80       	push   $0x80107c1c
 801033c5:	e8 c6 cf ff ff       	call   80100390 <panic>
 801033ca:	66 90                	xchg   %ax,%ax
 801033cc:	66 90                	xchg   %ax,%ax
@@ -6556,9 +6556,9 @@
 8010345d:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
 80103464:	00 00 00 
   initlock(&p->lock, "pipe");
-80103467:	68 1b 76 10 80       	push   $0x8010761b
+80103467:	68 3b 7c 10 80       	push   $0x80107c3b
 8010346c:	50                   	push   %eax
-8010346d:	e8 6e 0f 00 00       	call   801043e0 <initlock>
+8010346d:	e8 ee 14 00 00       	call   80104960 <initlock>
   (*f0)->type = FD_PIPE;
 80103472:	8b 03                	mov    (%ebx),%eax
   (*f0)->pipe = p;
@@ -6659,7 +6659,7 @@
   acquire(&p->lock);
 8010350f:	83 ec 0c             	sub    $0xc,%esp
 80103512:	53                   	push   %ebx
-80103513:	e8 48 10 00 00       	call   80104560 <acquire>
+80103513:	e8 c8 15 00 00       	call   80104ae0 <acquire>
   if(writable){
 80103518:	83 c4 10             	add    $0x10,%esp
 8010351b:	85 f6                	test   %esi,%esi
@@ -6673,7 +6673,7 @@
 8010352f:	00 00 00 
     wakeup(&p->nread);
 80103532:	50                   	push   %eax
-80103533:	e8 a8 0b 00 00       	call   801040e0 <wakeup>
+80103533:	e8 58 0f 00 00       	call   80104490 <wakeup>
 80103538:	83 c4 10             	add    $0x10,%esp
   } else {
     p->readopen = 0;
@@ -6697,7 +6697,7 @@
 80103556:	5e                   	pop    %esi
 80103557:	5d                   	pop    %ebp
     release(&p->lock);
-80103558:	e9 c3 10 00 00       	jmp    80104620 <release>
+80103558:	e9 43 16 00 00       	jmp    80104ba0 <release>
 8010355d:	8d 76 00             	lea    0x0(%esi),%esi
     wakeup(&p->nwrite);
 80103560:	83 ec 0c             	sub    $0xc,%esp
@@ -6707,14 +6707,14 @@
 80103570:	00 00 00 
     wakeup(&p->nwrite);
 80103573:	50                   	push   %eax
-80103574:	e8 67 0b 00 00       	call   801040e0 <wakeup>
+80103574:	e8 17 0f 00 00       	call   80104490 <wakeup>
 80103579:	83 c4 10             	add    $0x10,%esp
 8010357c:	eb bd                	jmp    8010353b <pipeclose+0x3b>
 8010357e:	66 90                	xchg   %ax,%ax
     release(&p->lock);
 80103580:	83 ec 0c             	sub    $0xc,%esp
 80103583:	53                   	push   %ebx
-80103584:	e8 97 10 00 00       	call   80104620 <release>
+80103584:	e8 17 16 00 00       	call   80104ba0 <release>
     kfree((char*)p);
 80103589:	89 5d 08             	mov    %ebx,0x8(%ebp)
 8010358c:	83 c4 10             	add    $0x10,%esp
@@ -6745,7 +6745,7 @@
 
   acquire(&p->lock);
 801035b0:	53                   	push   %ebx
-801035b1:	e8 aa 0f 00 00       	call   80104560 <acquire>
+801035b1:	e8 2a 15 00 00       	call   80104ae0 <acquire>
   for(i = 0; i < n; i++){
 801035b6:	8b 45 10             	mov    0x10(%ebp),%eax
 801035b9:	83 c4 10             	add    $0x10,%esp
@@ -6775,20 +6775,20 @@
 801035f3:	eb 63                	jmp    80103658 <pipewrite+0xb8>
 801035f5:	8d 76 00             	lea    0x0(%esi),%esi
       if(p->readopen == 0 || myproc()->killed){
-801035f8:	e8 63 03 00 00       	call   80103960 <myproc>
+801035f8:	e8 63 06 00 00       	call   80103c60 <myproc>
 801035fd:	8b 48 24             	mov    0x24(%eax),%ecx
 80103600:	85 c9                	test   %ecx,%ecx
 80103602:	75 34                	jne    80103638 <pipewrite+0x98>
       wakeup(&p->nread);
 80103604:	83 ec 0c             	sub    $0xc,%esp
 80103607:	57                   	push   %edi
-80103608:	e8 d3 0a 00 00       	call   801040e0 <wakeup>
+80103608:	e8 83 0e 00 00       	call   80104490 <wakeup>
       sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
 8010360d:	58                   	pop    %eax
 8010360e:	5a                   	pop    %edx
 8010360f:	53                   	push   %ebx
 80103610:	56                   	push   %esi
-80103611:	e8 0a 09 00 00       	call   80103f20 <sleep>
+80103611:	e8 ba 0c 00 00       	call   801042d0 <sleep>
     while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
 80103616:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
 8010361c:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
@@ -6803,7 +6803,7 @@
         release(&p->lock);
 80103638:	83 ec 0c             	sub    $0xc,%esp
 8010363b:	53                   	push   %ebx
-8010363c:	e8 df 0f 00 00       	call   80104620 <release>
+8010363c:	e8 5f 15 00 00       	call   80104ba0 <release>
         return -1;
 80103641:	83 c4 10             	add    $0x10,%esp
 80103644:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
@@ -6836,10 +6836,10 @@
 80103680:	83 ec 0c             	sub    $0xc,%esp
 80103683:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
 80103689:	50                   	push   %eax
-8010368a:	e8 51 0a 00 00       	call   801040e0 <wakeup>
+8010368a:	e8 01 0e 00 00       	call   80104490 <wakeup>
   release(&p->lock);
 8010368f:	89 1c 24             	mov    %ebx,(%esp)
-80103692:	e8 89 0f 00 00       	call   80104620 <release>
+80103692:	e8 09 15 00 00       	call   80104ba0 <release>
   return n;
 80103697:	8b 45 10             	mov    0x10(%ebp),%eax
 8010369a:	83 c4 10             	add    $0x10,%esp
@@ -6865,7 +6865,7 @@
   acquire(&p->lock);
 801036b3:	56                   	push   %esi
 801036b4:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
-801036ba:	e8 a1 0e 00 00       	call   80104560 <acquire>
+801036ba:	e8 21 14 00 00       	call   80104ae0 <acquire>
   while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
 801036bf:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
 801036c5:	83 c4 10             	add    $0x10,%esp
@@ -6874,7 +6874,7 @@
 801036d0:	eb 3b                	jmp    8010370d <piperead+0x6d>
 801036d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(myproc()->killed){
-801036d8:	e8 83 02 00 00       	call   80103960 <myproc>
+801036d8:	e8 83 05 00 00       	call   80103c60 <myproc>
 801036dd:	8b 48 24             	mov    0x24(%eax),%ecx
 801036e0:	85 c9                	test   %ecx,%ecx
 801036e2:	0f 85 88 00 00 00    	jne    80103770 <piperead+0xd0>
@@ -6885,7 +6885,7 @@
 801036e8:	83 ec 08             	sub    $0x8,%esp
 801036eb:	56                   	push   %esi
 801036ec:	53                   	push   %ebx
-801036ed:	e8 2e 08 00 00       	call   80103f20 <sleep>
+801036ed:	e8 de 0b 00 00       	call   801042d0 <sleep>
   while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
 801036f2:	8b 86 38 02 00 00    	mov    0x238(%esi),%eax
 801036f8:	83 c4 10             	add    $0x10,%esp
@@ -6924,10 +6924,10 @@
 8010374c:	83 ec 0c             	sub    $0xc,%esp
 8010374f:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
 80103755:	50                   	push   %eax
-80103756:	e8 85 09 00 00       	call   801040e0 <wakeup>
+80103756:	e8 35 0d 00 00       	call   80104490 <wakeup>
   release(&p->lock);
 8010375b:	89 34 24             	mov    %esi,(%esp)
-8010375e:	e8 bd 0e 00 00       	call   80104620 <release>
+8010375e:	e8 3d 14 00 00       	call   80104ba0 <release>
   return i;
 80103763:	83 c4 10             	add    $0x10,%esp
 }
@@ -6944,7 +6944,7 @@
 80103773:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
       release(&p->lock);
 80103778:	56                   	push   %esi
-80103779:	e8 a2 0e 00 00       	call   80104620 <release>
+80103779:	e8 22 14 00 00       	call   80104ba0 <release>
       return -1;
 8010377e:	83 c4 10             	add    $0x10,%esp
 }
@@ -6975,8611 +6975,9326 @@
   acquire(&ptable.lock);
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103794:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+80103794:	bb 54 3d 11 80       	mov    $0x80113d54,%ebx
 {
 80103799:	83 ec 10             	sub    $0x10,%esp
   acquire(&ptable.lock);
-8010379c:	68 20 2d 11 80       	push   $0x80112d20
-801037a1:	e8 ba 0d 00 00       	call   80104560 <acquire>
+8010379c:	68 20 3d 11 80       	push   $0x80113d20
+801037a1:	e8 3a 13 00 00       	call   80104ae0 <acquire>
 801037a6:	83 c4 10             	add    $0x10,%esp
-801037a9:	eb 10                	jmp    801037bb <allocproc+0x2b>
+801037a9:	eb 17                	jmp    801037c2 <allocproc+0x32>
 801037ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 801037af:	90                   	nop
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801037b0:	83 c3 7c             	add    $0x7c,%ebx
-801037b3:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
-801037b9:	74 75                	je     80103830 <allocproc+0xa0>
+801037b0:	81 c3 88 00 00 00    	add    $0x88,%ebx
+801037b6:	81 fb 54 5f 11 80    	cmp    $0x80115f54,%ebx
+801037bc:	0f 84 96 00 00 00    	je     80103858 <allocproc+0xc8>
     if(p->state == UNUSED)
-801037bb:	8b 43 0c             	mov    0xc(%ebx),%eax
-801037be:	85 c0                	test   %eax,%eax
-801037c0:	75 ee                	jne    801037b0 <allocproc+0x20>
+801037c2:	8b 43 0c             	mov    0xc(%ebx),%eax
+801037c5:	85 c0                	test   %eax,%eax
+801037c7:	75 e7                	jne    801037b0 <allocproc+0x20>
   release(&ptable.lock);
   return 0;
 
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-801037c2:	a1 04 a0 10 80       	mov    0x8010a004,%eax
-
+801037c9:	a1 04 b0 10 80       	mov    0x8010b004,%eax
+  p->number_of_context_switches = 0;  
+  p->burst_time = 0;
+  p->remaining_completion_time = 0;
   release(&ptable.lock);
-801037c7:	83 ec 0c             	sub    $0xc,%esp
+801037ce:	83 ec 0c             	sub    $0xc,%esp
   p->state = EMBRYO;
-801037ca:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
+801037d1:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
+  p->number_of_context_switches = 0;  
+801037d8:	c7 43 7c 00 00 00 00 	movl   $0x0,0x7c(%ebx)
   p->pid = nextpid++;
-801037d1:	89 43 10             	mov    %eax,0x10(%ebx)
-801037d4:	8d 50 01             	lea    0x1(%eax),%edx
+801037df:	89 43 10             	mov    %eax,0x10(%ebx)
+801037e2:	8d 50 01             	lea    0x1(%eax),%edx
+  p->burst_time = 0;
+801037e5:	c7 83 80 00 00 00 00 	movl   $0x0,0x80(%ebx)
+801037ec:	00 00 00 
+  p->remaining_completion_time = 0;
+801037ef:	c7 83 84 00 00 00 00 	movl   $0x0,0x84(%ebx)
+801037f6:	00 00 00 
   release(&ptable.lock);
-801037d7:	68 20 2d 11 80       	push   $0x80112d20
+801037f9:	68 20 3d 11 80       	push   $0x80113d20
   p->pid = nextpid++;
-801037dc:	89 15 04 a0 10 80    	mov    %edx,0x8010a004
+801037fe:	89 15 04 b0 10 80    	mov    %edx,0x8010b004
   release(&ptable.lock);
-801037e2:	e8 39 0e 00 00       	call   80104620 <release>
+80103804:	e8 97 13 00 00       	call   80104ba0 <release>
 
   // Allocate kernel stack.
   if((p->kstack = kalloc()) == 0){
-801037e7:	e8 44 ee ff ff       	call   80102630 <kalloc>
-801037ec:	83 c4 10             	add    $0x10,%esp
-801037ef:	89 43 08             	mov    %eax,0x8(%ebx)
-801037f2:	85 c0                	test   %eax,%eax
-801037f4:	74 53                	je     80103849 <allocproc+0xb9>
+80103809:	e8 22 ee ff ff       	call   80102630 <kalloc>
+8010380e:	83 c4 10             	add    $0x10,%esp
+80103811:	89 43 08             	mov    %eax,0x8(%ebx)
+80103814:	85 c0                	test   %eax,%eax
+80103816:	74 59                	je     80103871 <allocproc+0xe1>
     return 0;
   }
   sp = p->kstack + KSTACKSIZE;
 
   // Leave room for trap frame.
   sp -= sizeof *p->tf;
-801037f6:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
+80103818:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
   sp -= 4;
   *(uint*)sp = (uint)trapret;
 
   sp -= sizeof *p->context;
   p->context = (struct context*)sp;
   memset(p->context, 0, sizeof *p->context);
-801037fc:	83 ec 04             	sub    $0x4,%esp
+8010381e:	83 ec 04             	sub    $0x4,%esp
   sp -= sizeof *p->context;
-801037ff:	05 9c 0f 00 00       	add    $0xf9c,%eax
+80103821:	05 9c 0f 00 00       	add    $0xf9c,%eax
   sp -= sizeof *p->tf;
-80103804:	89 53 18             	mov    %edx,0x18(%ebx)
+80103826:	89 53 18             	mov    %edx,0x18(%ebx)
   *(uint*)sp = (uint)trapret;
-80103807:	c7 40 14 86 58 10 80 	movl   $0x80105886,0x14(%eax)
+80103829:	c7 40 14 b1 5e 10 80 	movl   $0x80105eb1,0x14(%eax)
   p->context = (struct context*)sp;
-8010380e:	89 43 1c             	mov    %eax,0x1c(%ebx)
+80103830:	89 43 1c             	mov    %eax,0x1c(%ebx)
   memset(p->context, 0, sizeof *p->context);
-80103811:	6a 14                	push   $0x14
-80103813:	6a 00                	push   $0x0
-80103815:	50                   	push   %eax
-80103816:	e8 55 0e 00 00       	call   80104670 <memset>
+80103833:	6a 14                	push   $0x14
+80103835:	6a 00                	push   $0x0
+80103837:	50                   	push   %eax
+80103838:	e8 b3 13 00 00       	call   80104bf0 <memset>
   p->context->eip = (uint)forkret;
-8010381b:	8b 43 1c             	mov    0x1c(%ebx),%eax
+8010383d:	8b 43 1c             	mov    0x1c(%ebx),%eax
 
   return p;
-8010381e:	83 c4 10             	add    $0x10,%esp
+80103840:	83 c4 10             	add    $0x10,%esp
   p->context->eip = (uint)forkret;
-80103821:	c7 40 10 60 38 10 80 	movl   $0x80103860,0x10(%eax)
+80103843:	c7 40 10 90 38 10 80 	movl   $0x80103890,0x10(%eax)
 }
-80103828:	89 d8                	mov    %ebx,%eax
-8010382a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010382d:	c9                   	leave  
-8010382e:	c3                   	ret    
-8010382f:	90                   	nop
+8010384a:	89 d8                	mov    %ebx,%eax
+8010384c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010384f:	c9                   	leave  
+80103850:	c3                   	ret    
+80103851:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   release(&ptable.lock);
-80103830:	83 ec 0c             	sub    $0xc,%esp
+80103858:	83 ec 0c             	sub    $0xc,%esp
   return 0;
-80103833:	31 db                	xor    %ebx,%ebx
+8010385b:	31 db                	xor    %ebx,%ebx
   release(&ptable.lock);
-80103835:	68 20 2d 11 80       	push   $0x80112d20
-8010383a:	e8 e1 0d 00 00       	call   80104620 <release>
+8010385d:	68 20 3d 11 80       	push   $0x80113d20
+80103862:	e8 39 13 00 00       	call   80104ba0 <release>
 }
-8010383f:	89 d8                	mov    %ebx,%eax
+80103867:	89 d8                	mov    %ebx,%eax
   return 0;
-80103841:	83 c4 10             	add    $0x10,%esp
+80103869:	83 c4 10             	add    $0x10,%esp
 }
-80103844:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103847:	c9                   	leave  
-80103848:	c3                   	ret    
+8010386c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010386f:	c9                   	leave  
+80103870:	c3                   	ret    
     p->state = UNUSED;
-80103849:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80103871:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
     return 0;
-80103850:	31 db                	xor    %ebx,%ebx
+80103878:	31 db                	xor    %ebx,%ebx
 }
-80103852:	89 d8                	mov    %ebx,%eax
-80103854:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103857:	c9                   	leave  
-80103858:	c3                   	ret    
-80103859:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010387a:	89 d8                	mov    %ebx,%eax
+8010387c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010387f:	c9                   	leave  
+80103880:	c3                   	ret    
+80103881:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103888:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010388f:	90                   	nop
 
-80103860 <forkret>:
+80103890 <forkret>:
 
 // A fork child's very first scheduling by scheduler()
 // will swtch here.  "Return" to user space.
 void
 forkret(void)
 {
-80103860:	f3 0f 1e fb          	endbr32 
-80103864:	55                   	push   %ebp
-80103865:	89 e5                	mov    %esp,%ebp
-80103867:	83 ec 14             	sub    $0x14,%esp
+80103890:	f3 0f 1e fb          	endbr32 
+80103894:	55                   	push   %ebp
+80103895:	89 e5                	mov    %esp,%ebp
+80103897:	83 ec 14             	sub    $0x14,%esp
   static int first = 1;
   // Still holding ptable.lock from scheduler.
   release(&ptable.lock);
-8010386a:	68 20 2d 11 80       	push   $0x80112d20
-8010386f:	e8 ac 0d 00 00       	call   80104620 <release>
+8010389a:	68 20 3d 11 80       	push   $0x80113d20
+8010389f:	e8 fc 12 00 00       	call   80104ba0 <release>
 
   if (first) {
-80103874:	a1 00 a0 10 80       	mov    0x8010a000,%eax
-80103879:	83 c4 10             	add    $0x10,%esp
-8010387c:	85 c0                	test   %eax,%eax
-8010387e:	75 08                	jne    80103888 <forkret+0x28>
+801038a4:	a1 00 b0 10 80       	mov    0x8010b000,%eax
+801038a9:	83 c4 10             	add    $0x10,%esp
+801038ac:	85 c0                	test   %eax,%eax
+801038ae:	75 08                	jne    801038b8 <forkret+0x28>
     iinit(ROOTDEV);
     initlog(ROOTDEV);
   }
 
   // Return to "caller", actually trapret (see allocproc).
 }
-80103880:	c9                   	leave  
-80103881:	c3                   	ret    
-80103882:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801038b0:	c9                   	leave  
+801038b1:	c3                   	ret    
+801038b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     first = 0;
-80103888:	c7 05 00 a0 10 80 00 	movl   $0x0,0x8010a000
-8010388f:	00 00 00 
+801038b8:	c7 05 00 b0 10 80 00 	movl   $0x0,0x8010b000
+801038bf:	00 00 00 
     iinit(ROOTDEV);
-80103892:	83 ec 0c             	sub    $0xc,%esp
-80103895:	6a 01                	push   $0x1
-80103897:	e8 a4 dc ff ff       	call   80101540 <iinit>
+801038c2:	83 ec 0c             	sub    $0xc,%esp
+801038c5:	6a 01                	push   $0x1
+801038c7:	e8 74 dc ff ff       	call   80101540 <iinit>
     initlog(ROOTDEV);
-8010389c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-801038a3:	e8 e8 f3 ff ff       	call   80102c90 <initlog>
+801038cc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+801038d3:	e8 b8 f3 ff ff       	call   80102c90 <initlog>
 }
-801038a8:	83 c4 10             	add    $0x10,%esp
-801038ab:	c9                   	leave  
-801038ac:	c3                   	ret    
-801038ad:	8d 76 00             	lea    0x0(%esi),%esi
-
-801038b0 <pinit>:
-{
-801038b0:	f3 0f 1e fb          	endbr32 
-801038b4:	55                   	push   %ebp
-801038b5:	89 e5                	mov    %esp,%ebp
-801038b7:	83 ec 10             	sub    $0x10,%esp
+801038d8:	83 c4 10             	add    $0x10,%esp
+801038db:	c9                   	leave  
+801038dc:	c3                   	ret    
+801038dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801038e0 <pinit>:
+{
+801038e0:	f3 0f 1e fb          	endbr32 
+801038e4:	55                   	push   %ebp
+801038e5:	89 e5                	mov    %esp,%ebp
+801038e7:	83 ec 10             	sub    $0x10,%esp
   initlock(&ptable.lock, "ptable");
-801038ba:	68 20 76 10 80       	push   $0x80107620
-801038bf:	68 20 2d 11 80       	push   $0x80112d20
-801038c4:	e8 17 0b 00 00       	call   801043e0 <initlock>
-}
-801038c9:	83 c4 10             	add    $0x10,%esp
-801038cc:	c9                   	leave  
-801038cd:	c3                   	ret    
-801038ce:	66 90                	xchg   %ax,%ax
-
-801038d0 <mycpu>:
-{
-801038d0:	f3 0f 1e fb          	endbr32 
-801038d4:	55                   	push   %ebp
-801038d5:	89 e5                	mov    %esp,%ebp
-801038d7:	56                   	push   %esi
-801038d8:	53                   	push   %ebx
+801038ea:	68 40 7c 10 80       	push   $0x80107c40
+801038ef:	68 20 3d 11 80       	push   $0x80113d20
+801038f4:	e8 67 10 00 00       	call   80104960 <initlock>
+}
+801038f9:	83 c4 10             	add    $0x10,%esp
+801038fc:	c9                   	leave  
+801038fd:	c3                   	ret    
+801038fe:	66 90                	xchg   %ax,%ax
+
+80103900 <insertionSort>:
+{ 
+80103900:	f3 0f 1e fb          	endbr32 
+80103904:	55                   	push   %ebp
+80103905:	89 e5                	mov    %esp,%ebp
+80103907:	57                   	push   %edi
+80103908:	56                   	push   %esi
+80103909:	53                   	push   %ebx
+8010390a:	83 ec 04             	sub    $0x4,%esp
+    for (i = 1; i < n; i++)
+8010390d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+{ 
+80103911:	8b 55 08             	mov    0x8(%ebp),%edx
+    for (i = 1; i < n; i++)
+80103914:	7e 46                	jle    8010395c <insertionSort+0x5c>
+80103916:	bf 01 00 00 00       	mov    $0x1,%edi
+8010391b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010391f:	90                   	nop
+        key = procArray[i]; 
+80103920:	89 7d f0             	mov    %edi,-0x10(%ebp)
+80103923:	8b 1c ba             	mov    (%edx,%edi,4),%ebx
+        while (j >= 0 && procArray[j] -> burst_time > key -> burst_time)
+80103926:	89 f8                	mov    %edi,%eax
+80103928:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010392f:	90                   	nop
+80103930:	8b 4c 82 fc          	mov    -0x4(%edx,%eax,4),%ecx
+80103934:	8b bb 80 00 00 00    	mov    0x80(%ebx),%edi
+8010393a:	8d 34 82             	lea    (%edx,%eax,4),%esi
+8010393d:	39 b9 80 00 00 00    	cmp    %edi,0x80(%ecx)
+80103943:	7e 23                	jle    80103968 <insertionSort+0x68>
+            procArray[j + 1] = procArray[j]; 
+80103945:	89 0c 82             	mov    %ecx,(%edx,%eax,4)
+        while (j >= 0 && procArray[j] -> burst_time > key -> burst_time)
+80103948:	83 e8 01             	sub    $0x1,%eax
+8010394b:	75 e3                	jne    80103930 <insertionSort+0x30>
+8010394d:	8b 7d f0             	mov    -0x10(%ebp),%edi
+80103950:	89 d6                	mov    %edx,%esi
+        procArray[j + 1] = key; 
+80103952:	89 1e                	mov    %ebx,(%esi)
+    for (i = 1; i < n; i++)
+80103954:	83 c7 01             	add    $0x1,%edi
+80103957:	39 7d 0c             	cmp    %edi,0xc(%ebp)
+8010395a:	75 c4                	jne    80103920 <insertionSort+0x20>
+} 
+8010395c:	83 c4 04             	add    $0x4,%esp
+8010395f:	5b                   	pop    %ebx
+80103960:	5e                   	pop    %esi
+80103961:	5f                   	pop    %edi
+80103962:	5d                   	pop    %ebp
+80103963:	c3                   	ret    
+80103964:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103968:	8b 7d f0             	mov    -0x10(%ebp),%edi
+8010396b:	eb e5                	jmp    80103952 <insertionSort+0x52>
+8010396d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80103970 <merge>:
+{
+80103970:	f3 0f 1e fb          	endbr32 
+80103974:	55                   	push   %ebp
+80103975:	89 e5                	mov    %esp,%ebp
+80103977:	57                   	push   %edi
+80103978:	56                   	push   %esi
+80103979:	53                   	push   %ebx
+8010397a:	83 ec 2c             	sub    $0x2c,%esp
+8010397d:	8b 75 10             	mov    0x10(%ebp),%esi
+80103980:	8b 55 0c             	mov    0xc(%ebp),%edx
+    int n1 = m - l + 1;
+80103983:	89 f0                	mov    %esi,%eax
+80103985:	29 d0                	sub    %edx,%eax
+80103987:	8d 78 01             	lea    0x1(%eax),%edi
+    struct proc *L[n1], *R[n2];
+8010398a:	8d 04 85 13 00 00 00 	lea    0x13(,%eax,4),%eax
+    int n1 = m - l + 1;
+80103991:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+    int n2 = r - m;
+80103994:	8b 7d 14             	mov    0x14(%ebp),%edi
+    struct proc *L[n1], *R[n2];
+80103997:	89 c1                	mov    %eax,%ecx
+80103999:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+8010399e:	83 e1 f0             	and    $0xfffffff0,%ecx
+    int n2 = r - m;
+801039a1:	29 f7                	sub    %esi,%edi
+801039a3:	89 7d e0             	mov    %edi,-0x20(%ebp)
+    struct proc *L[n1], *R[n2];
+801039a6:	89 e7                	mov    %esp,%edi
+801039a8:	29 c7                	sub    %eax,%edi
+801039aa:	89 f8                	mov    %edi,%eax
+801039ac:	39 c4                	cmp    %eax,%esp
+801039ae:	74 12                	je     801039c2 <merge+0x52>
+801039b0:	81 ec 00 10 00 00    	sub    $0x1000,%esp
+801039b6:	83 8c 24 fc 0f 00 00 	orl    $0x0,0xffc(%esp)
+801039bd:	00 
+801039be:	39 c4                	cmp    %eax,%esp
+801039c0:	75 ee                	jne    801039b0 <merge+0x40>
+801039c2:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
+801039c8:	29 cc                	sub    %ecx,%esp
+801039ca:	85 c9                	test   %ecx,%ecx
+801039cc:	0f 85 6e 01 00 00    	jne    80103b40 <merge+0x1d0>
+801039d2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801039d5:	89 e3                	mov    %esp,%ebx
+801039d7:	89 e7                	mov    %esp,%edi
+801039d9:	c1 e0 02             	shl    $0x2,%eax
+801039dc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+801039df:	83 c0 0f             	add    $0xf,%eax
+801039e2:	89 c1                	mov    %eax,%ecx
+801039e4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+801039e9:	29 c3                	sub    %eax,%ebx
+801039eb:	83 e1 f0             	and    $0xfffffff0,%ecx
+801039ee:	89 d8                	mov    %ebx,%eax
+801039f0:	39 c4                	cmp    %eax,%esp
+801039f2:	74 12                	je     80103a06 <merge+0x96>
+801039f4:	81 ec 00 10 00 00    	sub    $0x1000,%esp
+801039fa:	83 8c 24 fc 0f 00 00 	orl    $0x0,0xffc(%esp)
+80103a01:	00 
+80103a02:	39 c4                	cmp    %eax,%esp
+80103a04:	75 ee                	jne    801039f4 <merge+0x84>
+80103a06:	89 c8                	mov    %ecx,%eax
+80103a08:	25 ff 0f 00 00       	and    $0xfff,%eax
+80103a0d:	29 c4                	sub    %eax,%esp
+80103a0f:	85 c0                	test   %eax,%eax
+80103a11:	0f 85 42 01 00 00    	jne    80103b59 <merge+0x1e9>
+    for (i = 0; i < n1; i++)
+80103a17:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+    struct proc *L[n1], *R[n2];
+80103a1a:	89 65 dc             	mov    %esp,-0x24(%ebp)
+    for (i = 0; i < n1; i++)
+80103a1d:	85 db                	test   %ebx,%ebx
+80103a1f:	7e 29                	jle    80103a4a <merge+0xda>
+80103a21:	8b 45 08             	mov    0x8(%ebp),%eax
+80103a24:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80103a27:	89 55 0c             	mov    %edx,0xc(%ebp)
+80103a2a:	8d 0c 90             	lea    (%eax,%edx,4),%ecx
+80103a2d:	8d 1c 9f             	lea    (%edi,%ebx,4),%ebx
+80103a30:	89 f8                	mov    %edi,%eax
+80103a32:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        L[i] = procArray[l + i];
+80103a38:	8b 11                	mov    (%ecx),%edx
+80103a3a:	83 c0 04             	add    $0x4,%eax
+80103a3d:	83 c1 04             	add    $0x4,%ecx
+80103a40:	89 50 fc             	mov    %edx,-0x4(%eax)
+    for (i = 0; i < n1; i++)
+80103a43:	39 d8                	cmp    %ebx,%eax
+80103a45:	75 f1                	jne    80103a38 <merge+0xc8>
+80103a47:	8b 55 0c             	mov    0xc(%ebp),%edx
+    for (j = 0; j < n2; j++)
+80103a4a:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+80103a4d:	85 c9                	test   %ecx,%ecx
+80103a4f:	0f 8e fb 00 00 00    	jle    80103b50 <merge+0x1e0>
+80103a55:	8b 45 08             	mov    0x8(%ebp),%eax
+80103a58:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+80103a5b:	8d 5c b0 04          	lea    0x4(%eax,%esi,4),%ebx
+80103a5f:	89 c8                	mov    %ecx,%eax
+80103a61:	03 4d d4             	add    -0x2c(%ebp),%ecx
+80103a64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        R[j] = procArray[m + 1 + j];
+80103a68:	8b 33                	mov    (%ebx),%esi
+80103a6a:	83 c0 04             	add    $0x4,%eax
+80103a6d:	83 c3 04             	add    $0x4,%ebx
+80103a70:	89 70 fc             	mov    %esi,-0x4(%eax)
+    for (j = 0; j < n2; j++)
+80103a73:	39 c8                	cmp    %ecx,%eax
+80103a75:	75 f1                	jne    80103a68 <merge+0xf8>
+    while (i < n1 && j < n2) {
+80103a77:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80103a7a:	85 c0                	test   %eax,%eax
+80103a7c:	0f 8e e1 00 00 00    	jle    80103b63 <merge+0x1f3>
+    j = 0; // Initial index of second subarray
+80103a82:	89 7d d8             	mov    %edi,-0x28(%ebp)
+    i = 0; // Initial index of first subarray
+80103a85:	31 c9                	xor    %ecx,%ecx
+    j = 0; // Initial index of second subarray
+80103a87:	31 db                	xor    %ebx,%ebx
+80103a89:	eb 1b                	jmp    80103aa6 <merge+0x136>
+80103a8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103a8f:	90                   	nop
+            procArray[k] = L[i];
+80103a90:	8b 45 08             	mov    0x8(%ebp),%eax
+            i++;
+80103a93:	83 c1 01             	add    $0x1,%ecx
+            procArray[k] = L[i];
+80103a96:	89 34 90             	mov    %esi,(%eax,%edx,4)
+        k++;
+80103a99:	83 c2 01             	add    $0x1,%edx
+    while (i < n1 && j < n2) {
+80103a9c:	3b 4d e4             	cmp    -0x1c(%ebp),%ecx
+80103a9f:	7d 30                	jge    80103ad1 <merge+0x161>
+80103aa1:	3b 5d e0             	cmp    -0x20(%ebp),%ebx
+80103aa4:	7d 2b                	jge    80103ad1 <merge+0x161>
+        if ((L[i] -> burst_time) <= (R[j] -> burst_time)) {
+80103aa6:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80103aa9:	8b 34 88             	mov    (%eax,%ecx,4),%esi
+80103aac:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80103aaf:	8b 04 98             	mov    (%eax,%ebx,4),%eax
+80103ab2:	8b b8 80 00 00 00    	mov    0x80(%eax),%edi
+80103ab8:	39 be 80 00 00 00    	cmp    %edi,0x80(%esi)
+80103abe:	7e d0                	jle    80103a90 <merge+0x120>
+            procArray[k] = R[j];
+80103ac0:	8b 7d 08             	mov    0x8(%ebp),%edi
+            j++;
+80103ac3:	83 c3 01             	add    $0x1,%ebx
+            procArray[k] = R[j];
+80103ac6:	89 04 97             	mov    %eax,(%edi,%edx,4)
+        k++;
+80103ac9:	83 c2 01             	add    $0x1,%edx
+    while (i < n1 && j < n2) {
+80103acc:	3b 4d e4             	cmp    -0x1c(%ebp),%ecx
+80103acf:	7c d0                	jl     80103aa1 <merge+0x131>
+80103ad1:	8b 7d d8             	mov    -0x28(%ebp),%edi
+    while (i < n1) {
+80103ad4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80103ad7:	39 c8                	cmp    %ecx,%eax
+80103ad9:	7e 2c                	jle    80103b07 <merge+0x197>
+80103adb:	8d 34 8f             	lea    (%edi,%ecx,4),%esi
+80103ade:	89 55 0c             	mov    %edx,0xc(%ebp)
+80103ae1:	8d 3c 87             	lea    (%edi,%eax,4),%edi
+80103ae4:	89 75 d8             	mov    %esi,-0x28(%ebp)
+80103ae7:	8b 75 08             	mov    0x8(%ebp),%esi
+80103aea:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80103aed:	8d 34 96             	lea    (%esi,%edx,4),%esi
+        procArray[k] = L[i];
+80103af0:	8b 10                	mov    (%eax),%edx
+80103af2:	83 c0 04             	add    $0x4,%eax
+80103af5:	83 c6 04             	add    $0x4,%esi
+80103af8:	89 56 fc             	mov    %edx,-0x4(%esi)
+    while (i < n1) {
+80103afb:	39 f8                	cmp    %edi,%eax
+80103afd:	75 f1                	jne    80103af0 <merge+0x180>
+80103aff:	8b 55 0c             	mov    0xc(%ebp),%edx
+80103b02:	03 55 e4             	add    -0x1c(%ebp),%edx
+80103b05:	29 ca                	sub    %ecx,%edx
+    while (j < n2) {
+80103b07:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80103b0a:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+80103b0d:	8d 0c 38             	lea    (%eax,%edi,1),%ecx
+80103b10:	39 5d e0             	cmp    %ebx,-0x20(%ebp)
+80103b13:	7e 22                	jle    80103b37 <merge+0x1c7>
+80103b15:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80103b18:	8b 7d 08             	mov    0x8(%ebp),%edi
+80103b1b:	8d 04 98             	lea    (%eax,%ebx,4),%eax
+80103b1e:	8d 14 97             	lea    (%edi,%edx,4),%edx
+80103b21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        procArray[k] = R[j];
+80103b28:	8b 18                	mov    (%eax),%ebx
+80103b2a:	83 c0 04             	add    $0x4,%eax
+80103b2d:	83 c2 04             	add    $0x4,%edx
+80103b30:	89 5a fc             	mov    %ebx,-0x4(%edx)
+    while (j < n2) {
+80103b33:	39 c1                	cmp    %eax,%ecx
+80103b35:	75 f1                	jne    80103b28 <merge+0x1b8>
+}
+80103b37:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103b3a:	5b                   	pop    %ebx
+80103b3b:	5e                   	pop    %esi
+80103b3c:	5f                   	pop    %edi
+80103b3d:	5d                   	pop    %ebp
+80103b3e:	c3                   	ret    
+80103b3f:	90                   	nop
+    struct proc *L[n1], *R[n2];
+80103b40:	83 4c 0c fc 00       	orl    $0x0,-0x4(%esp,%ecx,1)
+80103b45:	e9 88 fe ff ff       	jmp    801039d2 <merge+0x62>
+80103b4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    i = 0; // Initial index of first subarray
+80103b50:	31 c9                	xor    %ecx,%ecx
+    j = 0; // Initial index of second subarray
+80103b52:	31 db                	xor    %ebx,%ebx
+80103b54:	e9 7b ff ff ff       	jmp    80103ad4 <merge+0x164>
+    struct proc *L[n1], *R[n2];
+80103b59:	83 4c 04 fc 00       	orl    $0x0,-0x4(%esp,%eax,1)
+80103b5e:	e9 b4 fe ff ff       	jmp    80103a17 <merge+0xa7>
+    j = 0; // Initial index of second subarray
+80103b63:	31 db                	xor    %ebx,%ebx
+80103b65:	eb ae                	jmp    80103b15 <merge+0x1a5>
+80103b67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103b6e:	66 90                	xchg   %ax,%ax
+
+80103b70 <mergeSort>:
+{
+80103b70:	f3 0f 1e fb          	endbr32 
+80103b74:	55                   	push   %ebp
+80103b75:	89 e5                	mov    %esp,%ebp
+80103b77:	57                   	push   %edi
+80103b78:	56                   	push   %esi
+80103b79:	53                   	push   %ebx
+80103b7a:	83 ec 0c             	sub    $0xc,%esp
+80103b7d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+80103b80:	8b 75 10             	mov    0x10(%ebp),%esi
+    if (l < r) {
+80103b83:	39 f3                	cmp    %esi,%ebx
+80103b85:	7c 09                	jl     80103b90 <mergeSort+0x20>
+}
+80103b87:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103b8a:	5b                   	pop    %ebx
+80103b8b:	5e                   	pop    %esi
+80103b8c:	5f                   	pop    %edi
+80103b8d:	5d                   	pop    %ebp
+80103b8e:	c3                   	ret    
+80103b8f:	90                   	nop
+        int m = l + (r - l) / 2;
+80103b90:	89 f7                	mov    %esi,%edi
+        mergeSort(procArray, l, m);
+80103b92:	83 ec 04             	sub    $0x4,%esp
+        int m = l + (r - l) / 2;
+80103b95:	29 df                	sub    %ebx,%edi
+80103b97:	d1 ff                	sar    %edi
+80103b99:	01 df                	add    %ebx,%edi
+        mergeSort(procArray, l, m);
+80103b9b:	57                   	push   %edi
+80103b9c:	53                   	push   %ebx
+80103b9d:	ff 75 08             	pushl  0x8(%ebp)
+80103ba0:	e8 cb ff ff ff       	call   80103b70 <mergeSort>
+        mergeSort(procArray, m + 1, r);
+80103ba5:	83 c4 0c             	add    $0xc,%esp
+80103ba8:	8d 47 01             	lea    0x1(%edi),%eax
+80103bab:	56                   	push   %esi
+80103bac:	50                   	push   %eax
+80103bad:	ff 75 08             	pushl  0x8(%ebp)
+80103bb0:	e8 bb ff ff ff       	call   80103b70 <mergeSort>
+        merge(procArray, l, m, r);
+80103bb5:	56                   	push   %esi
+80103bb6:	57                   	push   %edi
+80103bb7:	53                   	push   %ebx
+80103bb8:	ff 75 08             	pushl  0x8(%ebp)
+80103bbb:	e8 b0 fd ff ff       	call   80103970 <merge>
+80103bc0:	83 c4 20             	add    $0x20,%esp
+}
+80103bc3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103bc6:	5b                   	pop    %ebx
+80103bc7:	5e                   	pop    %esi
+80103bc8:	5f                   	pop    %edi
+80103bc9:	5d                   	pop    %ebp
+80103bca:	c3                   	ret    
+80103bcb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103bcf:	90                   	nop
+
+80103bd0 <mycpu>:
+{
+80103bd0:	f3 0f 1e fb          	endbr32 
+80103bd4:	55                   	push   %ebp
+80103bd5:	89 e5                	mov    %esp,%ebp
+80103bd7:	56                   	push   %esi
+80103bd8:	53                   	push   %ebx
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-801038d9:	9c                   	pushf  
-801038da:	58                   	pop    %eax
+80103bd9:	9c                   	pushf  
+80103bda:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-801038db:	f6 c4 02             	test   $0x2,%ah
-801038de:	75 4a                	jne    8010392a <mycpu+0x5a>
+80103bdb:	f6 c4 02             	test   $0x2,%ah
+80103bde:	75 4a                	jne    80103c2a <mycpu+0x5a>
   apicid = lapicid();
-801038e0:	e8 bb ef ff ff       	call   801028a0 <lapicid>
+80103be0:	e8 bb ec ff ff       	call   801028a0 <lapicid>
   for (i = 0; i < ncpu; ++i) {
-801038e5:	8b 35 00 2d 11 80    	mov    0x80112d00,%esi
+80103be5:	8b 35 00 3d 11 80    	mov    0x80113d00,%esi
   apicid = lapicid();
-801038eb:	89 c3                	mov    %eax,%ebx
+80103beb:	89 c3                	mov    %eax,%ebx
   for (i = 0; i < ncpu; ++i) {
-801038ed:	85 f6                	test   %esi,%esi
-801038ef:	7e 2c                	jle    8010391d <mycpu+0x4d>
-801038f1:	31 d2                	xor    %edx,%edx
-801038f3:	eb 0a                	jmp    801038ff <mycpu+0x2f>
-801038f5:	8d 76 00             	lea    0x0(%esi),%esi
-801038f8:	83 c2 01             	add    $0x1,%edx
-801038fb:	39 f2                	cmp    %esi,%edx
-801038fd:	74 1e                	je     8010391d <mycpu+0x4d>
+80103bed:	85 f6                	test   %esi,%esi
+80103bef:	7e 2c                	jle    80103c1d <mycpu+0x4d>
+80103bf1:	31 d2                	xor    %edx,%edx
+80103bf3:	eb 0a                	jmp    80103bff <mycpu+0x2f>
+80103bf5:	8d 76 00             	lea    0x0(%esi),%esi
+80103bf8:	83 c2 01             	add    $0x1,%edx
+80103bfb:	39 f2                	cmp    %esi,%edx
+80103bfd:	74 1e                	je     80103c1d <mycpu+0x4d>
     if (cpus[i].apicid == apicid)
-801038ff:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
-80103905:	0f b6 81 80 27 11 80 	movzbl -0x7feed880(%ecx),%eax
-8010390c:	39 d8                	cmp    %ebx,%eax
-8010390e:	75 e8                	jne    801038f8 <mycpu+0x28>
+80103bff:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
+80103c05:	0f b6 81 80 37 11 80 	movzbl -0x7feec880(%ecx),%eax
+80103c0c:	39 d8                	cmp    %ebx,%eax
+80103c0e:	75 e8                	jne    80103bf8 <mycpu+0x28>
 }
-80103910:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103c10:	8d 65 f8             	lea    -0x8(%ebp),%esp
       return &cpus[i];
-80103913:	8d 81 80 27 11 80    	lea    -0x7feed880(%ecx),%eax
+80103c13:	8d 81 80 37 11 80    	lea    -0x7feec880(%ecx),%eax
 }
-80103919:	5b                   	pop    %ebx
-8010391a:	5e                   	pop    %esi
-8010391b:	5d                   	pop    %ebp
-8010391c:	c3                   	ret    
+80103c19:	5b                   	pop    %ebx
+80103c1a:	5e                   	pop    %esi
+80103c1b:	5d                   	pop    %ebp
+80103c1c:	c3                   	ret    
   panic("unknown apicid\n");
-8010391d:	83 ec 0c             	sub    $0xc,%esp
-80103920:	68 27 76 10 80       	push   $0x80107627
-80103925:	e8 66 ca ff ff       	call   80100390 <panic>
+80103c1d:	83 ec 0c             	sub    $0xc,%esp
+80103c20:	68 47 7c 10 80       	push   $0x80107c47
+80103c25:	e8 66 c7 ff ff       	call   80100390 <panic>
     panic("mycpu called with interrupts enabled\n");
-8010392a:	83 ec 0c             	sub    $0xc,%esp
-8010392d:	68 04 77 10 80       	push   $0x80107704
-80103932:	e8 59 ca ff ff       	call   80100390 <panic>
-80103937:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010393e:	66 90                	xchg   %ax,%ax
+80103c2a:	83 ec 0c             	sub    $0xc,%esp
+80103c2d:	68 24 7d 10 80       	push   $0x80107d24
+80103c32:	e8 59 c7 ff ff       	call   80100390 <panic>
+80103c37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103c3e:	66 90                	xchg   %ax,%ax
 
-80103940 <cpuid>:
+80103c40 <cpuid>:
 cpuid() {
-80103940:	f3 0f 1e fb          	endbr32 
-80103944:	55                   	push   %ebp
-80103945:	89 e5                	mov    %esp,%ebp
-80103947:	83 ec 08             	sub    $0x8,%esp
+80103c40:	f3 0f 1e fb          	endbr32 
+80103c44:	55                   	push   %ebp
+80103c45:	89 e5                	mov    %esp,%ebp
+80103c47:	83 ec 08             	sub    $0x8,%esp
   return mycpu()-cpus;
-8010394a:	e8 81 ff ff ff       	call   801038d0 <mycpu>
+80103c4a:	e8 81 ff ff ff       	call   80103bd0 <mycpu>
 }
-8010394f:	c9                   	leave  
+80103c4f:	c9                   	leave  
   return mycpu()-cpus;
-80103950:	2d 80 27 11 80       	sub    $0x80112780,%eax
-80103955:	c1 f8 04             	sar    $0x4,%eax
-80103958:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
+80103c50:	2d 80 37 11 80       	sub    $0x80113780,%eax
+80103c55:	c1 f8 04             	sar    $0x4,%eax
+80103c58:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
 }
-8010395e:	c3                   	ret    
-8010395f:	90                   	nop
+80103c5e:	c3                   	ret    
+80103c5f:	90                   	nop
 
-80103960 <myproc>:
+80103c60 <myproc>:
 myproc(void) {
-80103960:	f3 0f 1e fb          	endbr32 
-80103964:	55                   	push   %ebp
-80103965:	89 e5                	mov    %esp,%ebp
-80103967:	53                   	push   %ebx
-80103968:	83 ec 04             	sub    $0x4,%esp
+80103c60:	f3 0f 1e fb          	endbr32 
+80103c64:	55                   	push   %ebp
+80103c65:	89 e5                	mov    %esp,%ebp
+80103c67:	53                   	push   %ebx
+80103c68:	83 ec 04             	sub    $0x4,%esp
   pushcli();
-8010396b:	e8 f0 0a 00 00       	call   80104460 <pushcli>
+80103c6b:	e8 70 0d 00 00       	call   801049e0 <pushcli>
   c = mycpu();
-80103970:	e8 5b ff ff ff       	call   801038d0 <mycpu>
+80103c70:	e8 5b ff ff ff       	call   80103bd0 <mycpu>
   p = c->proc;
-80103975:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103c75:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-8010397b:	e8 30 0b 00 00       	call   801044b0 <popcli>
+80103c7b:	e8 b0 0d 00 00       	call   80104a30 <popcli>
 }
-80103980:	83 c4 04             	add    $0x4,%esp
-80103983:	89 d8                	mov    %ebx,%eax
-80103985:	5b                   	pop    %ebx
-80103986:	5d                   	pop    %ebp
-80103987:	c3                   	ret    
-80103988:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010398f:	90                   	nop
-
-80103990 <userinit>:
-{
-80103990:	f3 0f 1e fb          	endbr32 
-80103994:	55                   	push   %ebp
-80103995:	89 e5                	mov    %esp,%ebp
-80103997:	53                   	push   %ebx
-80103998:	83 ec 04             	sub    $0x4,%esp
+80103c80:	83 c4 04             	add    $0x4,%esp
+80103c83:	89 d8                	mov    %ebx,%eax
+80103c85:	5b                   	pop    %ebx
+80103c86:	5d                   	pop    %ebp
+80103c87:	c3                   	ret    
+80103c88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103c8f:	90                   	nop
+
+80103c90 <userinit>:
+{
+80103c90:	f3 0f 1e fb          	endbr32 
+80103c94:	55                   	push   %ebp
+80103c95:	89 e5                	mov    %esp,%ebp
+80103c97:	53                   	push   %ebx
+80103c98:	83 ec 04             	sub    $0x4,%esp
   p = allocproc();
-8010399b:	e8 f0 fd ff ff       	call   80103790 <allocproc>
-801039a0:	89 c3                	mov    %eax,%ebx
+80103c9b:	e8 f0 fa ff ff       	call   80103790 <allocproc>
+80103ca0:	89 c3                	mov    %eax,%ebx
   initproc = p;
-801039a2:	a3 b8 a5 10 80       	mov    %eax,0x8010a5b8
+80103ca2:	a3 b8 b5 10 80       	mov    %eax,0x8010b5b8
   if((p->pgdir = setupkvm()) == 0)
-801039a7:	e8 a4 34 00 00       	call   80106e50 <setupkvm>
-801039ac:	89 43 04             	mov    %eax,0x4(%ebx)
-801039af:	85 c0                	test   %eax,%eax
-801039b1:	0f 84 bd 00 00 00    	je     80103a74 <userinit+0xe4>
+80103ca7:	e8 c4 37 00 00       	call   80107470 <setupkvm>
+80103cac:	89 43 04             	mov    %eax,0x4(%ebx)
+80103caf:	85 c0                	test   %eax,%eax
+80103cb1:	0f 84 bd 00 00 00    	je     80103d74 <userinit+0xe4>
   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
-801039b7:	83 ec 04             	sub    $0x4,%esp
-801039ba:	68 2c 00 00 00       	push   $0x2c
-801039bf:	68 60 a4 10 80       	push   $0x8010a460
-801039c4:	50                   	push   %eax
-801039c5:	e8 56 31 00 00       	call   80106b20 <inituvm>
+80103cb7:	83 ec 04             	sub    $0x4,%esp
+80103cba:	68 2c 00 00 00       	push   $0x2c
+80103cbf:	68 60 b4 10 80       	push   $0x8010b460
+80103cc4:	50                   	push   %eax
+80103cc5:	e8 76 34 00 00       	call   80107140 <inituvm>
   memset(p->tf, 0, sizeof(*p->tf));
-801039ca:	83 c4 0c             	add    $0xc,%esp
+80103cca:	83 c4 0c             	add    $0xc,%esp
   p->sz = PGSIZE;
-801039cd:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
+80103ccd:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
   memset(p->tf, 0, sizeof(*p->tf));
-801039d3:	6a 4c                	push   $0x4c
-801039d5:	6a 00                	push   $0x0
-801039d7:	ff 73 18             	pushl  0x18(%ebx)
-801039da:	e8 91 0c 00 00       	call   80104670 <memset>
+80103cd3:	6a 4c                	push   $0x4c
+80103cd5:	6a 00                	push   $0x0
+80103cd7:	ff 73 18             	pushl  0x18(%ebx)
+80103cda:	e8 11 0f 00 00       	call   80104bf0 <memset>
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-801039df:	8b 43 18             	mov    0x18(%ebx),%eax
-801039e2:	ba 1b 00 00 00       	mov    $0x1b,%edx
+80103cdf:	8b 43 18             	mov    0x18(%ebx),%eax
+80103ce2:	ba 1b 00 00 00       	mov    $0x1b,%edx
   safestrcpy(p->name, "initcode", sizeof(p->name));
-801039e7:	83 c4 0c             	add    $0xc,%esp
+80103ce7:	83 c4 0c             	add    $0xc,%esp
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-801039ea:	b9 23 00 00 00       	mov    $0x23,%ecx
+80103cea:	b9 23 00 00 00       	mov    $0x23,%ecx
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-801039ef:	66 89 50 3c          	mov    %dx,0x3c(%eax)
+80103cef:	66 89 50 3c          	mov    %dx,0x3c(%eax)
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-801039f3:	8b 43 18             	mov    0x18(%ebx),%eax
-801039f6:	66 89 48 2c          	mov    %cx,0x2c(%eax)
+80103cf3:	8b 43 18             	mov    0x18(%ebx),%eax
+80103cf6:	66 89 48 2c          	mov    %cx,0x2c(%eax)
   p->tf->es = p->tf->ds;
-801039fa:	8b 43 18             	mov    0x18(%ebx),%eax
-801039fd:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
-80103a01:	66 89 50 28          	mov    %dx,0x28(%eax)
+80103cfa:	8b 43 18             	mov    0x18(%ebx),%eax
+80103cfd:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80103d01:	66 89 50 28          	mov    %dx,0x28(%eax)
   p->tf->ss = p->tf->ds;
-80103a05:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a08:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
-80103a0c:	66 89 50 48          	mov    %dx,0x48(%eax)
+80103d05:	8b 43 18             	mov    0x18(%ebx),%eax
+80103d08:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80103d0c:	66 89 50 48          	mov    %dx,0x48(%eax)
   p->tf->eflags = FL_IF;
-80103a10:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a13:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
+80103d10:	8b 43 18             	mov    0x18(%ebx),%eax
+80103d13:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
   p->tf->esp = PGSIZE;
-80103a1a:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a1d:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
+80103d1a:	8b 43 18             	mov    0x18(%ebx),%eax
+80103d1d:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
   p->tf->eip = 0;  // beginning of initcode.S
-80103a24:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a27:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
+80103d24:	8b 43 18             	mov    0x18(%ebx),%eax
+80103d27:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
   safestrcpy(p->name, "initcode", sizeof(p->name));
-80103a2e:	8d 43 6c             	lea    0x6c(%ebx),%eax
-80103a31:	6a 10                	push   $0x10
-80103a33:	68 50 76 10 80       	push   $0x80107650
-80103a38:	50                   	push   %eax
-80103a39:	e8 f2 0d 00 00       	call   80104830 <safestrcpy>
+80103d2e:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80103d31:	6a 10                	push   $0x10
+80103d33:	68 70 7c 10 80       	push   $0x80107c70
+80103d38:	50                   	push   %eax
+80103d39:	e8 72 10 00 00       	call   80104db0 <safestrcpy>
   p->cwd = namei("/");
-80103a3e:	c7 04 24 59 76 10 80 	movl   $0x80107659,(%esp)
-80103a45:	e8 e6 e5 ff ff       	call   80102030 <namei>
-80103a4a:	89 43 68             	mov    %eax,0x68(%ebx)
+80103d3e:	c7 04 24 79 7c 10 80 	movl   $0x80107c79,(%esp)
+80103d45:	e8 e6 e2 ff ff       	call   80102030 <namei>
+80103d4a:	89 43 68             	mov    %eax,0x68(%ebx)
   acquire(&ptable.lock);
-80103a4d:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103a54:	e8 07 0b 00 00       	call   80104560 <acquire>
+80103d4d:	c7 04 24 20 3d 11 80 	movl   $0x80113d20,(%esp)
+80103d54:	e8 87 0d 00 00       	call   80104ae0 <acquire>
   p->state = RUNNABLE;
-80103a59:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+80103d59:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
   release(&ptable.lock);
-80103a60:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103a67:	e8 b4 0b 00 00       	call   80104620 <release>
+80103d60:	c7 04 24 20 3d 11 80 	movl   $0x80113d20,(%esp)
+80103d67:	e8 34 0e 00 00       	call   80104ba0 <release>
 }
-80103a6c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103a6f:	83 c4 10             	add    $0x10,%esp
-80103a72:	c9                   	leave  
-80103a73:	c3                   	ret    
+80103d6c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103d6f:	83 c4 10             	add    $0x10,%esp
+80103d72:	c9                   	leave  
+80103d73:	c3                   	ret    
     panic("userinit: out of memory?");
-80103a74:	83 ec 0c             	sub    $0xc,%esp
-80103a77:	68 37 76 10 80       	push   $0x80107637
-80103a7c:	e8 0f c9 ff ff       	call   80100390 <panic>
-80103a81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103a88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103a8f:	90                   	nop
+80103d74:	83 ec 0c             	sub    $0xc,%esp
+80103d77:	68 57 7c 10 80       	push   $0x80107c57
+80103d7c:	e8 0f c6 ff ff       	call   80100390 <panic>
+80103d81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103d88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103d8f:	90                   	nop
 
-80103a90 <growproc>:
+80103d90 <growproc>:
 {
-80103a90:	f3 0f 1e fb          	endbr32 
-80103a94:	55                   	push   %ebp
-80103a95:	89 e5                	mov    %esp,%ebp
-80103a97:	56                   	push   %esi
-80103a98:	53                   	push   %ebx
-80103a99:	8b 75 08             	mov    0x8(%ebp),%esi
+80103d90:	f3 0f 1e fb          	endbr32 
+80103d94:	55                   	push   %ebp
+80103d95:	89 e5                	mov    %esp,%ebp
+80103d97:	56                   	push   %esi
+80103d98:	53                   	push   %ebx
+80103d99:	8b 75 08             	mov    0x8(%ebp),%esi
   pushcli();
-80103a9c:	e8 bf 09 00 00       	call   80104460 <pushcli>
+80103d9c:	e8 3f 0c 00 00       	call   801049e0 <pushcli>
   c = mycpu();
-80103aa1:	e8 2a fe ff ff       	call   801038d0 <mycpu>
+80103da1:	e8 2a fe ff ff       	call   80103bd0 <mycpu>
   p = c->proc;
-80103aa6:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103da6:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103aac:	e8 ff 09 00 00       	call   801044b0 <popcli>
+80103dac:	e8 7f 0c 00 00       	call   80104a30 <popcli>
   sz = curproc->sz;
-80103ab1:	8b 03                	mov    (%ebx),%eax
+80103db1:	8b 03                	mov    (%ebx),%eax
   if(n > 0){
-80103ab3:	85 f6                	test   %esi,%esi
-80103ab5:	7f 19                	jg     80103ad0 <growproc+0x40>
+80103db3:	85 f6                	test   %esi,%esi
+80103db5:	7f 19                	jg     80103dd0 <growproc+0x40>
   } else if(n < 0){
-80103ab7:	75 37                	jne    80103af0 <growproc+0x60>
+80103db7:	75 37                	jne    80103df0 <growproc+0x60>
   switchuvm(curproc);
-80103ab9:	83 ec 0c             	sub    $0xc,%esp
+80103db9:	83 ec 0c             	sub    $0xc,%esp
   curproc->sz = sz;
-80103abc:	89 03                	mov    %eax,(%ebx)
+80103dbc:	89 03                	mov    %eax,(%ebx)
   switchuvm(curproc);
-80103abe:	53                   	push   %ebx
-80103abf:	e8 4c 2f 00 00       	call   80106a10 <switchuvm>
+80103dbe:	53                   	push   %ebx
+80103dbf:	e8 6c 32 00 00       	call   80107030 <switchuvm>
   return 0;
-80103ac4:	83 c4 10             	add    $0x10,%esp
-80103ac7:	31 c0                	xor    %eax,%eax
+80103dc4:	83 c4 10             	add    $0x10,%esp
+80103dc7:	31 c0                	xor    %eax,%eax
 }
-80103ac9:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103acc:	5b                   	pop    %ebx
-80103acd:	5e                   	pop    %esi
-80103ace:	5d                   	pop    %ebp
-80103acf:	c3                   	ret    
+80103dc9:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103dcc:	5b                   	pop    %ebx
+80103dcd:	5e                   	pop    %esi
+80103dce:	5d                   	pop    %ebp
+80103dcf:	c3                   	ret    
     if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
-80103ad0:	83 ec 04             	sub    $0x4,%esp
-80103ad3:	01 c6                	add    %eax,%esi
-80103ad5:	56                   	push   %esi
-80103ad6:	50                   	push   %eax
-80103ad7:	ff 73 04             	pushl  0x4(%ebx)
-80103ada:	e8 91 31 00 00       	call   80106c70 <allocuvm>
-80103adf:	83 c4 10             	add    $0x10,%esp
-80103ae2:	85 c0                	test   %eax,%eax
-80103ae4:	75 d3                	jne    80103ab9 <growproc+0x29>
+80103dd0:	83 ec 04             	sub    $0x4,%esp
+80103dd3:	01 c6                	add    %eax,%esi
+80103dd5:	56                   	push   %esi
+80103dd6:	50                   	push   %eax
+80103dd7:	ff 73 04             	pushl  0x4(%ebx)
+80103dda:	e8 b1 34 00 00       	call   80107290 <allocuvm>
+80103ddf:	83 c4 10             	add    $0x10,%esp
+80103de2:	85 c0                	test   %eax,%eax
+80103de4:	75 d3                	jne    80103db9 <growproc+0x29>
       return -1;
-80103ae6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80103aeb:	eb dc                	jmp    80103ac9 <growproc+0x39>
-80103aed:	8d 76 00             	lea    0x0(%esi),%esi
+80103de6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103deb:	eb dc                	jmp    80103dc9 <growproc+0x39>
+80103ded:	8d 76 00             	lea    0x0(%esi),%esi
     if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
-80103af0:	83 ec 04             	sub    $0x4,%esp
-80103af3:	01 c6                	add    %eax,%esi
-80103af5:	56                   	push   %esi
-80103af6:	50                   	push   %eax
-80103af7:	ff 73 04             	pushl  0x4(%ebx)
-80103afa:	e8 a1 32 00 00       	call   80106da0 <deallocuvm>
-80103aff:	83 c4 10             	add    $0x10,%esp
-80103b02:	85 c0                	test   %eax,%eax
-80103b04:	75 b3                	jne    80103ab9 <growproc+0x29>
-80103b06:	eb de                	jmp    80103ae6 <growproc+0x56>
-80103b08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103b0f:	90                   	nop
-
-80103b10 <fork>:
-{
-80103b10:	f3 0f 1e fb          	endbr32 
-80103b14:	55                   	push   %ebp
-80103b15:	89 e5                	mov    %esp,%ebp
-80103b17:	57                   	push   %edi
-80103b18:	56                   	push   %esi
-80103b19:	53                   	push   %ebx
-80103b1a:	83 ec 1c             	sub    $0x1c,%esp
+80103df0:	83 ec 04             	sub    $0x4,%esp
+80103df3:	01 c6                	add    %eax,%esi
+80103df5:	56                   	push   %esi
+80103df6:	50                   	push   %eax
+80103df7:	ff 73 04             	pushl  0x4(%ebx)
+80103dfa:	e8 c1 35 00 00       	call   801073c0 <deallocuvm>
+80103dff:	83 c4 10             	add    $0x10,%esp
+80103e02:	85 c0                	test   %eax,%eax
+80103e04:	75 b3                	jne    80103db9 <growproc+0x29>
+80103e06:	eb de                	jmp    80103de6 <growproc+0x56>
+80103e08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103e0f:	90                   	nop
+
+80103e10 <fork>:
+{
+80103e10:	f3 0f 1e fb          	endbr32 
+80103e14:	55                   	push   %ebp
+80103e15:	89 e5                	mov    %esp,%ebp
+80103e17:	57                   	push   %edi
+80103e18:	56                   	push   %esi
+80103e19:	53                   	push   %ebx
+80103e1a:	83 ec 1c             	sub    $0x1c,%esp
   pushcli();
-80103b1d:	e8 3e 09 00 00       	call   80104460 <pushcli>
+80103e1d:	e8 be 0b 00 00       	call   801049e0 <pushcli>
   c = mycpu();
-80103b22:	e8 a9 fd ff ff       	call   801038d0 <mycpu>
+80103e22:	e8 a9 fd ff ff       	call   80103bd0 <mycpu>
   p = c->proc;
-80103b27:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103e27:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103b2d:	e8 7e 09 00 00       	call   801044b0 <popcli>
+80103e2d:	e8 fe 0b 00 00       	call   80104a30 <popcli>
   if((np = allocproc()) == 0){
-80103b32:	e8 59 fc ff ff       	call   80103790 <allocproc>
-80103b37:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80103b3a:	85 c0                	test   %eax,%eax
-80103b3c:	0f 84 bb 00 00 00    	je     80103bfd <fork+0xed>
+80103e32:	e8 59 f9 ff ff       	call   80103790 <allocproc>
+80103e37:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80103e3a:	85 c0                	test   %eax,%eax
+80103e3c:	0f 84 bb 00 00 00    	je     80103efd <fork+0xed>
   if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
-80103b42:	83 ec 08             	sub    $0x8,%esp
-80103b45:	ff 33                	pushl  (%ebx)
-80103b47:	89 c7                	mov    %eax,%edi
-80103b49:	ff 73 04             	pushl  0x4(%ebx)
-80103b4c:	e8 cf 33 00 00       	call   80106f20 <copyuvm>
-80103b51:	83 c4 10             	add    $0x10,%esp
-80103b54:	89 47 04             	mov    %eax,0x4(%edi)
-80103b57:	85 c0                	test   %eax,%eax
-80103b59:	0f 84 a5 00 00 00    	je     80103c04 <fork+0xf4>
+80103e42:	83 ec 08             	sub    $0x8,%esp
+80103e45:	ff 33                	pushl  (%ebx)
+80103e47:	89 c7                	mov    %eax,%edi
+80103e49:	ff 73 04             	pushl  0x4(%ebx)
+80103e4c:	e8 ef 36 00 00       	call   80107540 <copyuvm>
+80103e51:	83 c4 10             	add    $0x10,%esp
+80103e54:	89 47 04             	mov    %eax,0x4(%edi)
+80103e57:	85 c0                	test   %eax,%eax
+80103e59:	0f 84 a5 00 00 00    	je     80103f04 <fork+0xf4>
   np->sz = curproc->sz;
-80103b5f:	8b 03                	mov    (%ebx),%eax
-80103b61:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80103b64:	89 01                	mov    %eax,(%ecx)
+80103e5f:	8b 03                	mov    (%ebx),%eax
+80103e61:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80103e64:	89 01                	mov    %eax,(%ecx)
   *np->tf = *curproc->tf;
-80103b66:	8b 79 18             	mov    0x18(%ecx),%edi
+80103e66:	8b 79 18             	mov    0x18(%ecx),%edi
   np->parent = curproc;
-80103b69:	89 c8                	mov    %ecx,%eax
-80103b6b:	89 59 14             	mov    %ebx,0x14(%ecx)
+80103e69:	89 c8                	mov    %ecx,%eax
+80103e6b:	89 59 14             	mov    %ebx,0x14(%ecx)
   *np->tf = *curproc->tf;
-80103b6e:	b9 13 00 00 00       	mov    $0x13,%ecx
-80103b73:	8b 73 18             	mov    0x18(%ebx),%esi
-80103b76:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+80103e6e:	b9 13 00 00 00       	mov    $0x13,%ecx
+80103e73:	8b 73 18             	mov    0x18(%ebx),%esi
+80103e76:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   for(i = 0; i < NOFILE; i++)
-80103b78:	31 f6                	xor    %esi,%esi
+80103e78:	31 f6                	xor    %esi,%esi
   np->tf->eax = 0;
-80103b7a:	8b 40 18             	mov    0x18(%eax),%eax
-80103b7d:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+80103e7a:	8b 40 18             	mov    0x18(%eax),%eax
+80103e7d:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   for(i = 0; i < NOFILE; i++)
-80103b84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103e84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[i])
-80103b88:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
-80103b8c:	85 c0                	test   %eax,%eax
-80103b8e:	74 13                	je     80103ba3 <fork+0x93>
+80103e88:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
+80103e8c:	85 c0                	test   %eax,%eax
+80103e8e:	74 13                	je     80103ea3 <fork+0x93>
       np->ofile[i] = filedup(curproc->ofile[i]);
-80103b90:	83 ec 0c             	sub    $0xc,%esp
-80103b93:	50                   	push   %eax
-80103b94:	e8 d7 d2 ff ff       	call   80100e70 <filedup>
-80103b99:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80103b9c:	83 c4 10             	add    $0x10,%esp
-80103b9f:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
+80103e90:	83 ec 0c             	sub    $0xc,%esp
+80103e93:	50                   	push   %eax
+80103e94:	e8 d7 cf ff ff       	call   80100e70 <filedup>
+80103e99:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80103e9c:	83 c4 10             	add    $0x10,%esp
+80103e9f:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
   for(i = 0; i < NOFILE; i++)
-80103ba3:	83 c6 01             	add    $0x1,%esi
-80103ba6:	83 fe 10             	cmp    $0x10,%esi
-80103ba9:	75 dd                	jne    80103b88 <fork+0x78>
+80103ea3:	83 c6 01             	add    $0x1,%esi
+80103ea6:	83 fe 10             	cmp    $0x10,%esi
+80103ea9:	75 dd                	jne    80103e88 <fork+0x78>
   np->cwd = idup(curproc->cwd);
-80103bab:	83 ec 0c             	sub    $0xc,%esp
-80103bae:	ff 73 68             	pushl  0x68(%ebx)
+80103eab:	83 ec 0c             	sub    $0xc,%esp
+80103eae:	ff 73 68             	pushl  0x68(%ebx)
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bb1:	83 c3 6c             	add    $0x6c,%ebx
+80103eb1:	83 c3 6c             	add    $0x6c,%ebx
   np->cwd = idup(curproc->cwd);
-80103bb4:	e8 77 db ff ff       	call   80101730 <idup>
-80103bb9:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80103eb4:	e8 77 d8 ff ff       	call   80101730 <idup>
+80103eb9:	8b 7d e4             	mov    -0x1c(%ebp),%edi
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bbc:	83 c4 0c             	add    $0xc,%esp
+80103ebc:	83 c4 0c             	add    $0xc,%esp
   np->cwd = idup(curproc->cwd);
-80103bbf:	89 47 68             	mov    %eax,0x68(%edi)
+80103ebf:	89 47 68             	mov    %eax,0x68(%edi)
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bc2:	8d 47 6c             	lea    0x6c(%edi),%eax
-80103bc5:	6a 10                	push   $0x10
-80103bc7:	53                   	push   %ebx
-80103bc8:	50                   	push   %eax
-80103bc9:	e8 62 0c 00 00       	call   80104830 <safestrcpy>
+80103ec2:	8d 47 6c             	lea    0x6c(%edi),%eax
+80103ec5:	6a 10                	push   $0x10
+80103ec7:	53                   	push   %ebx
+80103ec8:	50                   	push   %eax
+80103ec9:	e8 e2 0e 00 00       	call   80104db0 <safestrcpy>
   pid = np->pid;
-80103bce:	8b 5f 10             	mov    0x10(%edi),%ebx
+80103ece:	8b 5f 10             	mov    0x10(%edi),%ebx
   acquire(&ptable.lock);
-80103bd1:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103bd8:	e8 83 09 00 00       	call   80104560 <acquire>
+80103ed1:	c7 04 24 20 3d 11 80 	movl   $0x80113d20,(%esp)
+80103ed8:	e8 03 0c 00 00       	call   80104ae0 <acquire>
   np->state = RUNNABLE;
-80103bdd:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
+80103edd:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
   release(&ptable.lock);
-80103be4:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103beb:	e8 30 0a 00 00       	call   80104620 <release>
+80103ee4:	c7 04 24 20 3d 11 80 	movl   $0x80113d20,(%esp)
+80103eeb:	e8 b0 0c 00 00       	call   80104ba0 <release>
   return pid;
-80103bf0:	83 c4 10             	add    $0x10,%esp
+80103ef0:	83 c4 10             	add    $0x10,%esp
 }
-80103bf3:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103bf6:	89 d8                	mov    %ebx,%eax
-80103bf8:	5b                   	pop    %ebx
-80103bf9:	5e                   	pop    %esi
-80103bfa:	5f                   	pop    %edi
-80103bfb:	5d                   	pop    %ebp
-80103bfc:	c3                   	ret    
+80103ef3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103ef6:	89 d8                	mov    %ebx,%eax
+80103ef8:	5b                   	pop    %ebx
+80103ef9:	5e                   	pop    %esi
+80103efa:	5f                   	pop    %edi
+80103efb:	5d                   	pop    %ebp
+80103efc:	c3                   	ret    
     return -1;
-80103bfd:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80103c02:	eb ef                	jmp    80103bf3 <fork+0xe3>
+80103efd:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80103f02:	eb ef                	jmp    80103ef3 <fork+0xe3>
     kfree(np->kstack);
-80103c04:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-80103c07:	83 ec 0c             	sub    $0xc,%esp
-80103c0a:	ff 73 08             	pushl  0x8(%ebx)
-80103c0d:	e8 5e e8 ff ff       	call   80102470 <kfree>
+80103f04:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80103f07:	83 ec 0c             	sub    $0xc,%esp
+80103f0a:	ff 73 08             	pushl  0x8(%ebx)
+80103f0d:	e8 5e e5 ff ff       	call   80102470 <kfree>
     np->kstack = 0;
-80103c12:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+80103f12:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
     return -1;
-80103c19:	83 c4 10             	add    $0x10,%esp
+80103f19:	83 c4 10             	add    $0x10,%esp
     np->state = UNUSED;
-80103c1c:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80103f1c:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
     return -1;
-80103c23:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80103c28:	eb c9                	jmp    80103bf3 <fork+0xe3>
-80103c2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80103c30 <scheduler>:
-{
-80103c30:	f3 0f 1e fb          	endbr32 
-80103c34:	55                   	push   %ebp
-80103c35:	89 e5                	mov    %esp,%ebp
-80103c37:	57                   	push   %edi
-80103c38:	56                   	push   %esi
-80103c39:	53                   	push   %ebx
-80103c3a:	83 ec 0c             	sub    $0xc,%esp
+80103f23:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80103f28:	eb c9                	jmp    80103ef3 <fork+0xe3>
+80103f2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80103f30 <scheduler>:
+{
+80103f30:	f3 0f 1e fb          	endbr32 
+80103f34:	55                   	push   %ebp
+80103f35:	89 e5                	mov    %esp,%ebp
+80103f37:	57                   	push   %edi
+80103f38:	56                   	push   %esi
+  int time_quantum = 1e9;
+80103f39:	be 00 ca 9a 3b       	mov    $0x3b9aca00,%esi
+{
+80103f3e:	53                   	push   %ebx
+  int proc_to_be_executed_idx = 0;
+80103f3f:	31 db                	xor    %ebx,%ebx
+{
+80103f41:	81 ec 1c 01 00 00    	sub    $0x11c,%esp
   struct cpu *c = mycpu();
-80103c3d:	e8 8e fc ff ff       	call   801038d0 <mycpu>
-  c->proc = 0;
-80103c42:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
-80103c49:	00 00 00 
+80103f47:	e8 84 fc ff ff       	call   80103bd0 <mycpu>
+  c -> proc = 0;
+80103f4c:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
+80103f53:	00 00 00 
   struct cpu *c = mycpu();
-80103c4c:	89 c6                	mov    %eax,%esi
-  c->proc = 0;
-80103c4e:	8d 78 04             	lea    0x4(%eax),%edi
-80103c51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103f56:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
+  int proc_to_be_executed_idx = 0;
+80103f5c:	83 c0 04             	add    $0x4,%eax
+80103f5f:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
+80103f65:	8d 76 00             	lea    0x0(%esi),%esi
   asm volatile("sti");
-80103c58:	fb                   	sti    
+80103f68:	fb                   	sti    
     acquire(&ptable.lock);
-80103c59:	83 ec 0c             	sub    $0xc,%esp
+80103f69:	83 ec 0c             	sub    $0xc,%esp
+80103f6c:	68 20 3d 11 80       	push   $0x80113d20
+80103f71:	e8 6a 0b 00 00       	call   80104ae0 <acquire>
+80103f76:	83 c4 10             	add    $0x10,%esp
+    int num_of_proc_in_procArray = 0;
+80103f79:	31 c9                	xor    %ecx,%ecx
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103c5c:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
-    acquire(&ptable.lock);
-80103c61:	68 20 2d 11 80       	push   $0x80112d20
-80103c66:	e8 f5 08 00 00       	call   80104560 <acquire>
-80103c6b:	83 c4 10             	add    $0x10,%esp
-80103c6e:	66 90                	xchg   %ax,%ax
-      if(p->state != RUNNABLE)
-80103c70:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
-80103c74:	75 33                	jne    80103ca9 <scheduler+0x79>
-      switchuvm(p);
-80103c76:	83 ec 0c             	sub    $0xc,%esp
-      c->proc = p;
-80103c79:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
-      switchuvm(p);
-80103c7f:	53                   	push   %ebx
-80103c80:	e8 8b 2d 00 00       	call   80106a10 <switchuvm>
-      swtch(&(c->scheduler), p->context);
-80103c85:	58                   	pop    %eax
-80103c86:	5a                   	pop    %edx
-80103c87:	ff 73 1c             	pushl  0x1c(%ebx)
-80103c8a:	57                   	push   %edi
-      p->state = RUNNING;
-80103c8b:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
-      swtch(&(c->scheduler), p->context);
-80103c92:	e8 fc 0b 00 00       	call   80104893 <swtch>
+80103f7b:	b8 54 3d 11 80       	mov    $0x80113d54,%eax
+      if(p->state != RUNNABLE){
+80103f80:	83 78 0c 03          	cmpl   $0x3,0xc(%eax)
+80103f84:	75 0a                	jne    80103f90 <scheduler+0x60>
+      procArray[num_of_proc_in_procArray++] = p;
+80103f86:	89 84 8d e8 fe ff ff 	mov    %eax,-0x118(%ebp,%ecx,4)
+80103f8d:	83 c1 01             	add    $0x1,%ecx
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103f90:	05 88 00 00 00       	add    $0x88,%eax
+80103f95:	3d 54 5f 11 80       	cmp    $0x80115f54,%eax
+80103f9a:	75 e4                	jne    80103f80 <scheduler+0x50>
+    if(num_of_proc_in_procArray > 0){
+80103f9c:	85 c9                	test   %ecx,%ecx
+80103f9e:	0f 84 c7 00 00 00    	je     8010406b <scheduler+0x13b>
+      insertionSort(procArray, num_of_proc_in_procArray);
+80103fa4:	83 ec 08             	sub    $0x8,%esp
+80103fa7:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
+80103fad:	89 8d e0 fe ff ff    	mov    %ecx,-0x120(%ebp)
+80103fb3:	51                   	push   %ecx
+80103fb4:	50                   	push   %eax
+80103fb5:	e8 46 f9 ff ff       	call   80103900 <insertionSort>
+      if(time_quantum == 1e9 && procArray[0] -> burst_time != 0){
+80103fba:	83 c4 10             	add    $0x10,%esp
+80103fbd:	81 fe 00 ca 9a 3b    	cmp    $0x3b9aca00,%esi
+80103fc3:	8b 8d e0 fe ff ff    	mov    -0x120(%ebp),%ecx
+80103fc9:	75 11                	jne    80103fdc <scheduler+0xac>
+80103fcb:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
+80103fd1:	8b 80 80 00 00 00    	mov    0x80(%eax),%eax
+80103fd7:	85 c0                	test   %eax,%eax
+80103fd9:	0f 45 f0             	cmovne %eax,%esi
+      (procArray[proc_to_be_executed_idx    %    num_of_proc_in_procArray] -> number_of_context_switches)++;
+80103fdc:	89 d8                	mov    %ebx,%eax
+      switchuvm(procArray[proc_to_be_executed_idx    %    num_of_proc_in_procArray]);
+80103fde:	83 ec 0c             	sub    $0xc,%esp
+      (procArray[proc_to_be_executed_idx    %    num_of_proc_in_procArray] -> number_of_context_switches)++;
+80103fe1:	99                   	cltd   
+80103fe2:	f7 f9                	idiv   %ecx
+80103fe4:	8b 84 95 e8 fe ff ff 	mov    -0x118(%ebp,%edx,4),%eax
+80103feb:	89 d7                	mov    %edx,%edi
+80103fed:	83 40 7c 01          	addl   $0x1,0x7c(%eax)
+      c->proc = procArray[proc_to_be_executed_idx    %    num_of_proc_in_procArray];
+80103ff1:	8b 84 95 e8 fe ff ff 	mov    -0x118(%ebp,%edx,4),%eax
+80103ff8:	8b 95 e4 fe ff ff    	mov    -0x11c(%ebp),%edx
+80103ffe:	89 82 ac 00 00 00    	mov    %eax,0xac(%edx)
+      switchuvm(procArray[proc_to_be_executed_idx    %    num_of_proc_in_procArray]);
+80104004:	50                   	push   %eax
+80104005:	e8 26 30 00 00       	call   80107030 <switchuvm>
+      procArray[proc_to_be_executed_idx    %    num_of_proc_in_procArray]->state = RUNNING;
+8010400a:	8b 84 bd e8 fe ff ff 	mov    -0x118(%ebp,%edi,4),%eax
+80104011:	c7 40 0c 04 00 00 00 	movl   $0x4,0xc(%eax)
+      swtch(&(c->scheduler), procArray[proc_to_be_executed_idx    %    num_of_proc_in_procArray]->context);
+80104018:	58                   	pop    %eax
+80104019:	8b 84 bd e8 fe ff ff 	mov    -0x118(%ebp,%edi,4),%eax
+80104020:	5a                   	pop    %edx
+80104021:	ff 70 1c             	pushl  0x1c(%eax)
+80104024:	ff b5 dc fe ff ff    	pushl  -0x124(%ebp)
+8010402a:	e8 e4 0d 00 00       	call   80104e13 <swtch>
+      if(procArray[proc_to_be_executed_idx    %    num_of_proc_in_procArray] -> remaining_completion_time < time_quantum){
+8010402f:	8b 94 bd e8 fe ff ff 	mov    -0x118(%ebp,%edi,4),%edx
+80104036:	83 c4 10             	add    $0x10,%esp
+        procArray[proc_to_be_executed_idx    %    num_of_proc_in_procArray] -> remaining_completion_time -= time_quantum;
+80104039:	bf 00 00 00 00       	mov    $0x0,%edi
+      if(procArray[proc_to_be_executed_idx    %    num_of_proc_in_procArray] -> remaining_completion_time < time_quantum){
+8010403e:	8b 8a 84 00 00 00    	mov    0x84(%edx),%ecx
+        procArray[proc_to_be_executed_idx    %    num_of_proc_in_procArray] -> remaining_completion_time -= time_quantum;
+80104044:	89 c8                	mov    %ecx,%eax
+80104046:	29 f0                	sub    %esi,%eax
+80104048:	39 f1                	cmp    %esi,%ecx
+8010404a:	0f 4c c7             	cmovl  %edi,%eax
+      proc_to_be_executed_idx++;
+8010404d:	83 c3 01             	add    $0x1,%ebx
+80104050:	89 82 84 00 00 00    	mov    %eax,0x84(%edx)
       switchkvm();
-80103c97:	e8 54 2d 00 00       	call   801069f0 <switchkvm>
+80104056:	e8 b5 2f 00 00       	call   80107010 <switchkvm>
       c->proc = 0;
-80103c9c:	83 c4 10             	add    $0x10,%esp
-80103c9f:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
-80103ca6:	00 00 00 
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103ca9:	83 c3 7c             	add    $0x7c,%ebx
-80103cac:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
-80103cb2:	75 bc                	jne    80103c70 <scheduler+0x40>
+8010405b:	8b 95 e4 fe ff ff    	mov    -0x11c(%ebp),%edx
+80104061:	c7 82 ac 00 00 00 00 	movl   $0x0,0xac(%edx)
+80104068:	00 00 00 
     release(&ptable.lock);
-80103cb4:	83 ec 0c             	sub    $0xc,%esp
-80103cb7:	68 20 2d 11 80       	push   $0x80112d20
-80103cbc:	e8 5f 09 00 00       	call   80104620 <release>
-    sti();
-80103cc1:	83 c4 10             	add    $0x10,%esp
-80103cc4:	eb 92                	jmp    80103c58 <scheduler+0x28>
-80103cc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103ccd:	8d 76 00             	lea    0x0(%esi),%esi
-
-80103cd0 <sched>:
-{
-80103cd0:	f3 0f 1e fb          	endbr32 
-80103cd4:	55                   	push   %ebp
-80103cd5:	89 e5                	mov    %esp,%ebp
-80103cd7:	56                   	push   %esi
-80103cd8:	53                   	push   %ebx
+8010406b:	83 ec 0c             	sub    $0xc,%esp
+8010406e:	68 20 3d 11 80       	push   $0x80113d20
+80104073:	e8 28 0b 00 00       	call   80104ba0 <release>
+  for(;;){
+80104078:	83 c4 10             	add    $0x10,%esp
+8010407b:	e9 e8 fe ff ff       	jmp    80103f68 <scheduler+0x38>
+
+80104080 <sched>:
+{
+80104080:	f3 0f 1e fb          	endbr32 
+80104084:	55                   	push   %ebp
+80104085:	89 e5                	mov    %esp,%ebp
+80104087:	56                   	push   %esi
+80104088:	53                   	push   %ebx
   pushcli();
-80103cd9:	e8 82 07 00 00       	call   80104460 <pushcli>
+80104089:	e8 52 09 00 00       	call   801049e0 <pushcli>
   c = mycpu();
-80103cde:	e8 ed fb ff ff       	call   801038d0 <mycpu>
+8010408e:	e8 3d fb ff ff       	call   80103bd0 <mycpu>
   p = c->proc;
-80103ce3:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80104093:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103ce9:	e8 c2 07 00 00       	call   801044b0 <popcli>
+80104099:	e8 92 09 00 00       	call   80104a30 <popcli>
   if(!holding(&ptable.lock))
-80103cee:	83 ec 0c             	sub    $0xc,%esp
-80103cf1:	68 20 2d 11 80       	push   $0x80112d20
-80103cf6:	e8 15 08 00 00       	call   80104510 <holding>
-80103cfb:	83 c4 10             	add    $0x10,%esp
-80103cfe:	85 c0                	test   %eax,%eax
-80103d00:	74 4f                	je     80103d51 <sched+0x81>
+8010409e:	83 ec 0c             	sub    $0xc,%esp
+801040a1:	68 20 3d 11 80       	push   $0x80113d20
+801040a6:	e8 e5 09 00 00       	call   80104a90 <holding>
+801040ab:	83 c4 10             	add    $0x10,%esp
+801040ae:	85 c0                	test   %eax,%eax
+801040b0:	74 4f                	je     80104101 <sched+0x81>
   if(mycpu()->ncli != 1)
-80103d02:	e8 c9 fb ff ff       	call   801038d0 <mycpu>
-80103d07:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
-80103d0e:	75 68                	jne    80103d78 <sched+0xa8>
+801040b2:	e8 19 fb ff ff       	call   80103bd0 <mycpu>
+801040b7:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
+801040be:	75 68                	jne    80104128 <sched+0xa8>
   if(p->state == RUNNING)
-80103d10:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
-80103d14:	74 55                	je     80103d6b <sched+0x9b>
+801040c0:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
+801040c4:	74 55                	je     8010411b <sched+0x9b>
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-80103d16:	9c                   	pushf  
-80103d17:	58                   	pop    %eax
+801040c6:	9c                   	pushf  
+801040c7:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-80103d18:	f6 c4 02             	test   $0x2,%ah
-80103d1b:	75 41                	jne    80103d5e <sched+0x8e>
+801040c8:	f6 c4 02             	test   $0x2,%ah
+801040cb:	75 41                	jne    8010410e <sched+0x8e>
   intena = mycpu()->intena;
-80103d1d:	e8 ae fb ff ff       	call   801038d0 <mycpu>
+801040cd:	e8 fe fa ff ff       	call   80103bd0 <mycpu>
   swtch(&p->context, mycpu()->scheduler);
-80103d22:	83 c3 1c             	add    $0x1c,%ebx
+801040d2:	83 c3 1c             	add    $0x1c,%ebx
   intena = mycpu()->intena;
-80103d25:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
+801040d5:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
   swtch(&p->context, mycpu()->scheduler);
-80103d2b:	e8 a0 fb ff ff       	call   801038d0 <mycpu>
-80103d30:	83 ec 08             	sub    $0x8,%esp
-80103d33:	ff 70 04             	pushl  0x4(%eax)
-80103d36:	53                   	push   %ebx
-80103d37:	e8 57 0b 00 00       	call   80104893 <swtch>
+801040db:	e8 f0 fa ff ff       	call   80103bd0 <mycpu>
+801040e0:	83 ec 08             	sub    $0x8,%esp
+801040e3:	ff 70 04             	pushl  0x4(%eax)
+801040e6:	53                   	push   %ebx
+801040e7:	e8 27 0d 00 00       	call   80104e13 <swtch>
   mycpu()->intena = intena;
-80103d3c:	e8 8f fb ff ff       	call   801038d0 <mycpu>
+801040ec:	e8 df fa ff ff       	call   80103bd0 <mycpu>
 }
-80103d41:	83 c4 10             	add    $0x10,%esp
+801040f1:	83 c4 10             	add    $0x10,%esp
   mycpu()->intena = intena;
-80103d44:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
+801040f4:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
 }
-80103d4a:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103d4d:	5b                   	pop    %ebx
-80103d4e:	5e                   	pop    %esi
-80103d4f:	5d                   	pop    %ebp
-80103d50:	c3                   	ret    
+801040fa:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801040fd:	5b                   	pop    %ebx
+801040fe:	5e                   	pop    %esi
+801040ff:	5d                   	pop    %ebp
+80104100:	c3                   	ret    
     panic("sched ptable.lock");
-80103d51:	83 ec 0c             	sub    $0xc,%esp
-80103d54:	68 5b 76 10 80       	push   $0x8010765b
-80103d59:	e8 32 c6 ff ff       	call   80100390 <panic>
+80104101:	83 ec 0c             	sub    $0xc,%esp
+80104104:	68 7b 7c 10 80       	push   $0x80107c7b
+80104109:	e8 82 c2 ff ff       	call   80100390 <panic>
     panic("sched interruptible");
-80103d5e:	83 ec 0c             	sub    $0xc,%esp
-80103d61:	68 87 76 10 80       	push   $0x80107687
-80103d66:	e8 25 c6 ff ff       	call   80100390 <panic>
+8010410e:	83 ec 0c             	sub    $0xc,%esp
+80104111:	68 a7 7c 10 80       	push   $0x80107ca7
+80104116:	e8 75 c2 ff ff       	call   80100390 <panic>
     panic("sched running");
-80103d6b:	83 ec 0c             	sub    $0xc,%esp
-80103d6e:	68 79 76 10 80       	push   $0x80107679
-80103d73:	e8 18 c6 ff ff       	call   80100390 <panic>
+8010411b:	83 ec 0c             	sub    $0xc,%esp
+8010411e:	68 99 7c 10 80       	push   $0x80107c99
+80104123:	e8 68 c2 ff ff       	call   80100390 <panic>
     panic("sched locks");
-80103d78:	83 ec 0c             	sub    $0xc,%esp
-80103d7b:	68 6d 76 10 80       	push   $0x8010766d
-80103d80:	e8 0b c6 ff ff       	call   80100390 <panic>
-80103d85:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103d8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104128:	83 ec 0c             	sub    $0xc,%esp
+8010412b:	68 8d 7c 10 80       	push   $0x80107c8d
+80104130:	e8 5b c2 ff ff       	call   80100390 <panic>
+80104135:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010413c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80103d90 <exit>:
+80104140 <exit>:
 {
-80103d90:	f3 0f 1e fb          	endbr32 
-80103d94:	55                   	push   %ebp
-80103d95:	89 e5                	mov    %esp,%ebp
-80103d97:	57                   	push   %edi
-80103d98:	56                   	push   %esi
-80103d99:	53                   	push   %ebx
-80103d9a:	83 ec 0c             	sub    $0xc,%esp
+80104140:	f3 0f 1e fb          	endbr32 
+80104144:	55                   	push   %ebp
+80104145:	89 e5                	mov    %esp,%ebp
+80104147:	57                   	push   %edi
+80104148:	56                   	push   %esi
+80104149:	53                   	push   %ebx
+8010414a:	83 ec 0c             	sub    $0xc,%esp
   pushcli();
-80103d9d:	e8 be 06 00 00       	call   80104460 <pushcli>
+8010414d:	e8 8e 08 00 00       	call   801049e0 <pushcli>
   c = mycpu();
-80103da2:	e8 29 fb ff ff       	call   801038d0 <mycpu>
+80104152:	e8 79 fa ff ff       	call   80103bd0 <mycpu>
   p = c->proc;
-80103da7:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+80104157:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
   popcli();
-80103dad:	e8 fe 06 00 00       	call   801044b0 <popcli>
+8010415d:	e8 ce 08 00 00       	call   80104a30 <popcli>
   if(curproc == initproc)
-80103db2:	8d 5e 28             	lea    0x28(%esi),%ebx
-80103db5:	8d 7e 68             	lea    0x68(%esi),%edi
-80103db8:	39 35 b8 a5 10 80    	cmp    %esi,0x8010a5b8
-80103dbe:	0f 84 f3 00 00 00    	je     80103eb7 <exit+0x127>
-80103dc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104162:	8d 5e 28             	lea    0x28(%esi),%ebx
+80104165:	8d 7e 68             	lea    0x68(%esi),%edi
+80104168:	39 35 b8 b5 10 80    	cmp    %esi,0x8010b5b8
+8010416e:	0f 84 fd 00 00 00    	je     80104271 <exit+0x131>
+80104174:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[fd]){
-80103dc8:	8b 03                	mov    (%ebx),%eax
-80103dca:	85 c0                	test   %eax,%eax
-80103dcc:	74 12                	je     80103de0 <exit+0x50>
+80104178:	8b 03                	mov    (%ebx),%eax
+8010417a:	85 c0                	test   %eax,%eax
+8010417c:	74 12                	je     80104190 <exit+0x50>
       fileclose(curproc->ofile[fd]);
-80103dce:	83 ec 0c             	sub    $0xc,%esp
-80103dd1:	50                   	push   %eax
-80103dd2:	e8 e9 d0 ff ff       	call   80100ec0 <fileclose>
+8010417e:	83 ec 0c             	sub    $0xc,%esp
+80104181:	50                   	push   %eax
+80104182:	e8 39 cd ff ff       	call   80100ec0 <fileclose>
       curproc->ofile[fd] = 0;
-80103dd7:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-80103ddd:	83 c4 10             	add    $0x10,%esp
+80104187:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+8010418d:	83 c4 10             	add    $0x10,%esp
   for(fd = 0; fd < NOFILE; fd++){
-80103de0:	83 c3 04             	add    $0x4,%ebx
-80103de3:	39 df                	cmp    %ebx,%edi
-80103de5:	75 e1                	jne    80103dc8 <exit+0x38>
+80104190:	83 c3 04             	add    $0x4,%ebx
+80104193:	39 df                	cmp    %ebx,%edi
+80104195:	75 e1                	jne    80104178 <exit+0x38>
   begin_op();
-80103de7:	e8 44 ef ff ff       	call   80102d30 <begin_op>
+80104197:	e8 94 eb ff ff       	call   80102d30 <begin_op>
   iput(curproc->cwd);
-80103dec:	83 ec 0c             	sub    $0xc,%esp
-80103def:	ff 76 68             	pushl  0x68(%esi)
-80103df2:	e8 99 da ff ff       	call   80101890 <iput>
+8010419c:	83 ec 0c             	sub    $0xc,%esp
+8010419f:	ff 76 68             	pushl  0x68(%esi)
+801041a2:	e8 e9 d6 ff ff       	call   80101890 <iput>
   end_op();
-80103df7:	e8 a4 ef ff ff       	call   80102da0 <end_op>
+801041a7:	e8 f4 eb ff ff       	call   80102da0 <end_op>
   curproc->cwd = 0;
-80103dfc:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
+801041ac:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
   acquire(&ptable.lock);
-80103e03:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103e0a:	e8 51 07 00 00       	call   80104560 <acquire>
+801041b3:	c7 04 24 20 3d 11 80 	movl   $0x80113d20,(%esp)
+801041ba:	e8 21 09 00 00       	call   80104ae0 <acquire>
   wakeup1(curproc->parent);
-80103e0f:	8b 56 14             	mov    0x14(%esi),%edx
-80103e12:	83 c4 10             	add    $0x10,%esp
+801041bf:	8b 56 14             	mov    0x14(%esi),%edx
+801041c2:	83 c4 10             	add    $0x10,%esp
 static void
 wakeup1(void *chan)
 {
   struct proc *p;
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e15:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80103e1a:	eb 0e                	jmp    80103e2a <exit+0x9a>
-80103e1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103e20:	83 c0 7c             	add    $0x7c,%eax
-80103e23:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-80103e28:	74 1c                	je     80103e46 <exit+0xb6>
+801041c5:	b8 54 3d 11 80       	mov    $0x80113d54,%eax
+801041ca:	eb 10                	jmp    801041dc <exit+0x9c>
+801041cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801041d0:	05 88 00 00 00       	add    $0x88,%eax
+801041d5:	3d 54 5f 11 80       	cmp    $0x80115f54,%eax
+801041da:	74 1e                	je     801041fa <exit+0xba>
     if(p->state == SLEEPING && p->chan == chan)
-80103e2a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80103e2e:	75 f0                	jne    80103e20 <exit+0x90>
-80103e30:	3b 50 20             	cmp    0x20(%eax),%edx
-80103e33:	75 eb                	jne    80103e20 <exit+0x90>
+801041dc:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+801041e0:	75 ee                	jne    801041d0 <exit+0x90>
+801041e2:	3b 50 20             	cmp    0x20(%eax),%edx
+801041e5:	75 e9                	jne    801041d0 <exit+0x90>
       p->state = RUNNABLE;
-80103e35:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+801041e7:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e3c:	83 c0 7c             	add    $0x7c,%eax
-80103e3f:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-80103e44:	75 e4                	jne    80103e2a <exit+0x9a>
+801041ee:	05 88 00 00 00       	add    $0x88,%eax
+801041f3:	3d 54 5f 11 80       	cmp    $0x80115f54,%eax
+801041f8:	75 e2                	jne    801041dc <exit+0x9c>
       p->parent = initproc;
-80103e46:	8b 0d b8 a5 10 80    	mov    0x8010a5b8,%ecx
+801041fa:	8b 0d b8 b5 10 80    	mov    0x8010b5b8,%ecx
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103e4c:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
-80103e51:	eb 10                	jmp    80103e63 <exit+0xd3>
-80103e53:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103e57:	90                   	nop
-80103e58:	83 c2 7c             	add    $0x7c,%edx
-80103e5b:	81 fa 54 4c 11 80    	cmp    $0x80114c54,%edx
-80103e61:	74 3b                	je     80103e9e <exit+0x10e>
+80104200:	ba 54 3d 11 80       	mov    $0x80113d54,%edx
+80104205:	eb 17                	jmp    8010421e <exit+0xde>
+80104207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010420e:	66 90                	xchg   %ax,%ax
+80104210:	81 c2 88 00 00 00    	add    $0x88,%edx
+80104216:	81 fa 54 5f 11 80    	cmp    $0x80115f54,%edx
+8010421c:	74 3a                	je     80104258 <exit+0x118>
     if(p->parent == curproc){
-80103e63:	39 72 14             	cmp    %esi,0x14(%edx)
-80103e66:	75 f0                	jne    80103e58 <exit+0xc8>
+8010421e:	39 72 14             	cmp    %esi,0x14(%edx)
+80104221:	75 ed                	jne    80104210 <exit+0xd0>
       if(p->state == ZOMBIE)
-80103e68:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
+80104223:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
       p->parent = initproc;
-80103e6c:	89 4a 14             	mov    %ecx,0x14(%edx)
+80104227:	89 4a 14             	mov    %ecx,0x14(%edx)
       if(p->state == ZOMBIE)
-80103e6f:	75 e7                	jne    80103e58 <exit+0xc8>
+8010422a:	75 e4                	jne    80104210 <exit+0xd0>
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e71:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80103e76:	eb 12                	jmp    80103e8a <exit+0xfa>
-80103e78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103e7f:	90                   	nop
-80103e80:	83 c0 7c             	add    $0x7c,%eax
-80103e83:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-80103e88:	74 ce                	je     80103e58 <exit+0xc8>
+8010422c:	b8 54 3d 11 80       	mov    $0x80113d54,%eax
+80104231:	eb 11                	jmp    80104244 <exit+0x104>
+80104233:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104237:	90                   	nop
+80104238:	05 88 00 00 00       	add    $0x88,%eax
+8010423d:	3d 54 5f 11 80       	cmp    $0x80115f54,%eax
+80104242:	74 cc                	je     80104210 <exit+0xd0>
     if(p->state == SLEEPING && p->chan == chan)
-80103e8a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80103e8e:	75 f0                	jne    80103e80 <exit+0xf0>
-80103e90:	3b 48 20             	cmp    0x20(%eax),%ecx
-80103e93:	75 eb                	jne    80103e80 <exit+0xf0>
+80104244:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80104248:	75 ee                	jne    80104238 <exit+0xf8>
+8010424a:	3b 48 20             	cmp    0x20(%eax),%ecx
+8010424d:	75 e9                	jne    80104238 <exit+0xf8>
       p->state = RUNNABLE;
-80103e95:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-80103e9c:	eb e2                	jmp    80103e80 <exit+0xf0>
+8010424f:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80104256:	eb e0                	jmp    80104238 <exit+0xf8>
   curproc->state = ZOMBIE;
-80103e9e:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
+80104258:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
   sched();
-80103ea5:	e8 26 fe ff ff       	call   80103cd0 <sched>
+8010425f:	e8 1c fe ff ff       	call   80104080 <sched>
   panic("zombie exit");
-80103eaa:	83 ec 0c             	sub    $0xc,%esp
-80103ead:	68 a8 76 10 80       	push   $0x801076a8
-80103eb2:	e8 d9 c4 ff ff       	call   80100390 <panic>
+80104264:	83 ec 0c             	sub    $0xc,%esp
+80104267:	68 c8 7c 10 80       	push   $0x80107cc8
+8010426c:	e8 1f c1 ff ff       	call   80100390 <panic>
     panic("init exiting");
-80103eb7:	83 ec 0c             	sub    $0xc,%esp
-80103eba:	68 9b 76 10 80       	push   $0x8010769b
-80103ebf:	e8 cc c4 ff ff       	call   80100390 <panic>
-80103ec4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103ecb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103ecf:	90                   	nop
-
-80103ed0 <yield>:
-{
-80103ed0:	f3 0f 1e fb          	endbr32 
-80103ed4:	55                   	push   %ebp
-80103ed5:	89 e5                	mov    %esp,%ebp
-80103ed7:	53                   	push   %ebx
-80103ed8:	83 ec 10             	sub    $0x10,%esp
+80104271:	83 ec 0c             	sub    $0xc,%esp
+80104274:	68 bb 7c 10 80       	push   $0x80107cbb
+80104279:	e8 12 c1 ff ff       	call   80100390 <panic>
+8010427e:	66 90                	xchg   %ax,%ax
+
+80104280 <yield>:
+{
+80104280:	f3 0f 1e fb          	endbr32 
+80104284:	55                   	push   %ebp
+80104285:	89 e5                	mov    %esp,%ebp
+80104287:	53                   	push   %ebx
+80104288:	83 ec 10             	sub    $0x10,%esp
   acquire(&ptable.lock);  //DOC: yieldlock
-80103edb:	68 20 2d 11 80       	push   $0x80112d20
-80103ee0:	e8 7b 06 00 00       	call   80104560 <acquire>
+8010428b:	68 20 3d 11 80       	push   $0x80113d20
+80104290:	e8 4b 08 00 00       	call   80104ae0 <acquire>
   pushcli();
-80103ee5:	e8 76 05 00 00       	call   80104460 <pushcli>
+80104295:	e8 46 07 00 00       	call   801049e0 <pushcli>
   c = mycpu();
-80103eea:	e8 e1 f9 ff ff       	call   801038d0 <mycpu>
+8010429a:	e8 31 f9 ff ff       	call   80103bd0 <mycpu>
   p = c->proc;
-80103eef:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+8010429f:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103ef5:	e8 b6 05 00 00       	call   801044b0 <popcli>
+801042a5:	e8 86 07 00 00       	call   80104a30 <popcli>
   myproc()->state = RUNNABLE;
-80103efa:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+801042aa:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
   sched();
-80103f01:	e8 ca fd ff ff       	call   80103cd0 <sched>
+801042b1:	e8 ca fd ff ff       	call   80104080 <sched>
   release(&ptable.lock);
-80103f06:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103f0d:	e8 0e 07 00 00       	call   80104620 <release>
+801042b6:	c7 04 24 20 3d 11 80 	movl   $0x80113d20,(%esp)
+801042bd:	e8 de 08 00 00       	call   80104ba0 <release>
 }
-80103f12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103f15:	83 c4 10             	add    $0x10,%esp
-80103f18:	c9                   	leave  
-80103f19:	c3                   	ret    
-80103f1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80103f20 <sleep>:
-{
-80103f20:	f3 0f 1e fb          	endbr32 
-80103f24:	55                   	push   %ebp
-80103f25:	89 e5                	mov    %esp,%ebp
-80103f27:	57                   	push   %edi
-80103f28:	56                   	push   %esi
-80103f29:	53                   	push   %ebx
-80103f2a:	83 ec 0c             	sub    $0xc,%esp
-80103f2d:	8b 7d 08             	mov    0x8(%ebp),%edi
-80103f30:	8b 75 0c             	mov    0xc(%ebp),%esi
+801042c2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801042c5:	83 c4 10             	add    $0x10,%esp
+801042c8:	c9                   	leave  
+801042c9:	c3                   	ret    
+801042ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801042d0 <sleep>:
+{
+801042d0:	f3 0f 1e fb          	endbr32 
+801042d4:	55                   	push   %ebp
+801042d5:	89 e5                	mov    %esp,%ebp
+801042d7:	57                   	push   %edi
+801042d8:	56                   	push   %esi
+801042d9:	53                   	push   %ebx
+801042da:	83 ec 0c             	sub    $0xc,%esp
+801042dd:	8b 7d 08             	mov    0x8(%ebp),%edi
+801042e0:	8b 75 0c             	mov    0xc(%ebp),%esi
   pushcli();
-80103f33:	e8 28 05 00 00       	call   80104460 <pushcli>
+801042e3:	e8 f8 06 00 00       	call   801049e0 <pushcli>
   c = mycpu();
-80103f38:	e8 93 f9 ff ff       	call   801038d0 <mycpu>
+801042e8:	e8 e3 f8 ff ff       	call   80103bd0 <mycpu>
   p = c->proc;
-80103f3d:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+801042ed:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103f43:	e8 68 05 00 00       	call   801044b0 <popcli>
+801042f3:	e8 38 07 00 00       	call   80104a30 <popcli>
   if(p == 0)
-80103f48:	85 db                	test   %ebx,%ebx
-80103f4a:	0f 84 83 00 00 00    	je     80103fd3 <sleep+0xb3>
+801042f8:	85 db                	test   %ebx,%ebx
+801042fa:	0f 84 83 00 00 00    	je     80104383 <sleep+0xb3>
   if(lk == 0)
-80103f50:	85 f6                	test   %esi,%esi
-80103f52:	74 72                	je     80103fc6 <sleep+0xa6>
+80104300:	85 f6                	test   %esi,%esi
+80104302:	74 72                	je     80104376 <sleep+0xa6>
   if(lk != &ptable.lock){  //DOC: sleeplock0
-80103f54:	81 fe 20 2d 11 80    	cmp    $0x80112d20,%esi
-80103f5a:	74 4c                	je     80103fa8 <sleep+0x88>
+80104304:	81 fe 20 3d 11 80    	cmp    $0x80113d20,%esi
+8010430a:	74 4c                	je     80104358 <sleep+0x88>
     acquire(&ptable.lock);  //DOC: sleeplock1
-80103f5c:	83 ec 0c             	sub    $0xc,%esp
-80103f5f:	68 20 2d 11 80       	push   $0x80112d20
-80103f64:	e8 f7 05 00 00       	call   80104560 <acquire>
+8010430c:	83 ec 0c             	sub    $0xc,%esp
+8010430f:	68 20 3d 11 80       	push   $0x80113d20
+80104314:	e8 c7 07 00 00       	call   80104ae0 <acquire>
     release(lk);
-80103f69:	89 34 24             	mov    %esi,(%esp)
-80103f6c:	e8 af 06 00 00       	call   80104620 <release>
+80104319:	89 34 24             	mov    %esi,(%esp)
+8010431c:	e8 7f 08 00 00       	call   80104ba0 <release>
   p->chan = chan;
-80103f71:	89 7b 20             	mov    %edi,0x20(%ebx)
+80104321:	89 7b 20             	mov    %edi,0x20(%ebx)
   p->state = SLEEPING;
-80103f74:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+80104324:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
   sched();
-80103f7b:	e8 50 fd ff ff       	call   80103cd0 <sched>
+8010432b:	e8 50 fd ff ff       	call   80104080 <sched>
   p->chan = 0;
-80103f80:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+80104330:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
     release(&ptable.lock);
-80103f87:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103f8e:	e8 8d 06 00 00       	call   80104620 <release>
+80104337:	c7 04 24 20 3d 11 80 	movl   $0x80113d20,(%esp)
+8010433e:	e8 5d 08 00 00       	call   80104ba0 <release>
     acquire(lk);
-80103f93:	89 75 08             	mov    %esi,0x8(%ebp)
-80103f96:	83 c4 10             	add    $0x10,%esp
+80104343:	89 75 08             	mov    %esi,0x8(%ebp)
+80104346:	83 c4 10             	add    $0x10,%esp
 }
-80103f99:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103f9c:	5b                   	pop    %ebx
-80103f9d:	5e                   	pop    %esi
-80103f9e:	5f                   	pop    %edi
-80103f9f:	5d                   	pop    %ebp
+80104349:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010434c:	5b                   	pop    %ebx
+8010434d:	5e                   	pop    %esi
+8010434e:	5f                   	pop    %edi
+8010434f:	5d                   	pop    %ebp
     acquire(lk);
-80103fa0:	e9 bb 05 00 00       	jmp    80104560 <acquire>
-80103fa5:	8d 76 00             	lea    0x0(%esi),%esi
+80104350:	e9 8b 07 00 00       	jmp    80104ae0 <acquire>
+80104355:	8d 76 00             	lea    0x0(%esi),%esi
   p->chan = chan;
-80103fa8:	89 7b 20             	mov    %edi,0x20(%ebx)
+80104358:	89 7b 20             	mov    %edi,0x20(%ebx)
   p->state = SLEEPING;
-80103fab:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+8010435b:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
   sched();
-80103fb2:	e8 19 fd ff ff       	call   80103cd0 <sched>
+80104362:	e8 19 fd ff ff       	call   80104080 <sched>
   p->chan = 0;
-80103fb7:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+80104367:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
 }
-80103fbe:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103fc1:	5b                   	pop    %ebx
-80103fc2:	5e                   	pop    %esi
-80103fc3:	5f                   	pop    %edi
-80103fc4:	5d                   	pop    %ebp
-80103fc5:	c3                   	ret    
+8010436e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104371:	5b                   	pop    %ebx
+80104372:	5e                   	pop    %esi
+80104373:	5f                   	pop    %edi
+80104374:	5d                   	pop    %ebp
+80104375:	c3                   	ret    
     panic("sleep without lk");
-80103fc6:	83 ec 0c             	sub    $0xc,%esp
-80103fc9:	68 ba 76 10 80       	push   $0x801076ba
-80103fce:	e8 bd c3 ff ff       	call   80100390 <panic>
+80104376:	83 ec 0c             	sub    $0xc,%esp
+80104379:	68 da 7c 10 80       	push   $0x80107cda
+8010437e:	e8 0d c0 ff ff       	call   80100390 <panic>
     panic("sleep");
-80103fd3:	83 ec 0c             	sub    $0xc,%esp
-80103fd6:	68 b4 76 10 80       	push   $0x801076b4
-80103fdb:	e8 b0 c3 ff ff       	call   80100390 <panic>
-
-80103fe0 <wait>:
-{
-80103fe0:	f3 0f 1e fb          	endbr32 
-80103fe4:	55                   	push   %ebp
-80103fe5:	89 e5                	mov    %esp,%ebp
-80103fe7:	56                   	push   %esi
-80103fe8:	53                   	push   %ebx
+80104383:	83 ec 0c             	sub    $0xc,%esp
+80104386:	68 d4 7c 10 80       	push   $0x80107cd4
+8010438b:	e8 00 c0 ff ff       	call   80100390 <panic>
+
+80104390 <wait>:
+{
+80104390:	f3 0f 1e fb          	endbr32 
+80104394:	55                   	push   %ebp
+80104395:	89 e5                	mov    %esp,%ebp
+80104397:	56                   	push   %esi
+80104398:	53                   	push   %ebx
   pushcli();
-80103fe9:	e8 72 04 00 00       	call   80104460 <pushcli>
+80104399:	e8 42 06 00 00       	call   801049e0 <pushcli>
   c = mycpu();
-80103fee:	e8 dd f8 ff ff       	call   801038d0 <mycpu>
+8010439e:	e8 2d f8 ff ff       	call   80103bd0 <mycpu>
   p = c->proc;
-80103ff3:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+801043a3:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
   popcli();
-80103ff9:	e8 b2 04 00 00       	call   801044b0 <popcli>
+801043a9:	e8 82 06 00 00       	call   80104a30 <popcli>
   acquire(&ptable.lock);
-80103ffe:	83 ec 0c             	sub    $0xc,%esp
-80104001:	68 20 2d 11 80       	push   $0x80112d20
-80104006:	e8 55 05 00 00       	call   80104560 <acquire>
-8010400b:	83 c4 10             	add    $0x10,%esp
+801043ae:	83 ec 0c             	sub    $0xc,%esp
+801043b1:	68 20 3d 11 80       	push   $0x80113d20
+801043b6:	e8 25 07 00 00       	call   80104ae0 <acquire>
+801043bb:	83 c4 10             	add    $0x10,%esp
     havekids = 0;
-8010400e:	31 c0                	xor    %eax,%eax
+801043be:	31 c0                	xor    %eax,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104010:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
-80104015:	eb 14                	jmp    8010402b <wait+0x4b>
-80104017:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010401e:	66 90                	xchg   %ax,%ax
-80104020:	83 c3 7c             	add    $0x7c,%ebx
-80104023:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
-80104029:	74 1b                	je     80104046 <wait+0x66>
+801043c0:	bb 54 3d 11 80       	mov    $0x80113d54,%ebx
+801043c5:	eb 17                	jmp    801043de <wait+0x4e>
+801043c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801043ce:	66 90                	xchg   %ax,%ax
+801043d0:	81 c3 88 00 00 00    	add    $0x88,%ebx
+801043d6:	81 fb 54 5f 11 80    	cmp    $0x80115f54,%ebx
+801043dc:	74 1e                	je     801043fc <wait+0x6c>
       if(p->parent != curproc)
-8010402b:	39 73 14             	cmp    %esi,0x14(%ebx)
-8010402e:	75 f0                	jne    80104020 <wait+0x40>
+801043de:	39 73 14             	cmp    %esi,0x14(%ebx)
+801043e1:	75 ed                	jne    801043d0 <wait+0x40>
       if(p->state == ZOMBIE){
-80104030:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
-80104034:	74 32                	je     80104068 <wait+0x88>
+801043e3:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
+801043e7:	74 37                	je     80104420 <wait+0x90>
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104036:	83 c3 7c             	add    $0x7c,%ebx
+801043e9:	81 c3 88 00 00 00    	add    $0x88,%ebx
       havekids = 1;
-80104039:	b8 01 00 00 00       	mov    $0x1,%eax
+801043ef:	b8 01 00 00 00       	mov    $0x1,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-8010403e:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
-80104044:	75 e5                	jne    8010402b <wait+0x4b>
+801043f4:	81 fb 54 5f 11 80    	cmp    $0x80115f54,%ebx
+801043fa:	75 e2                	jne    801043de <wait+0x4e>
     if(!havekids || curproc->killed){
-80104046:	85 c0                	test   %eax,%eax
-80104048:	74 74                	je     801040be <wait+0xde>
-8010404a:	8b 46 24             	mov    0x24(%esi),%eax
-8010404d:	85 c0                	test   %eax,%eax
-8010404f:	75 6d                	jne    801040be <wait+0xde>
+801043fc:	85 c0                	test   %eax,%eax
+801043fe:	74 76                	je     80104476 <wait+0xe6>
+80104400:	8b 46 24             	mov    0x24(%esi),%eax
+80104403:	85 c0                	test   %eax,%eax
+80104405:	75 6f                	jne    80104476 <wait+0xe6>
     sleep(curproc, &ptable.lock);  //DOC: wait-sleep
-80104051:	83 ec 08             	sub    $0x8,%esp
-80104054:	68 20 2d 11 80       	push   $0x80112d20
-80104059:	56                   	push   %esi
-8010405a:	e8 c1 fe ff ff       	call   80103f20 <sleep>
+80104407:	83 ec 08             	sub    $0x8,%esp
+8010440a:	68 20 3d 11 80       	push   $0x80113d20
+8010440f:	56                   	push   %esi
+80104410:	e8 bb fe ff ff       	call   801042d0 <sleep>
     havekids = 0;
-8010405f:	83 c4 10             	add    $0x10,%esp
-80104062:	eb aa                	jmp    8010400e <wait+0x2e>
-80104064:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104415:	83 c4 10             	add    $0x10,%esp
+80104418:	eb a4                	jmp    801043be <wait+0x2e>
+8010441a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         kfree(p->kstack);
-80104068:	83 ec 0c             	sub    $0xc,%esp
-8010406b:	ff 73 08             	pushl  0x8(%ebx)
+80104420:	83 ec 0c             	sub    $0xc,%esp
+80104423:	ff 73 08             	pushl  0x8(%ebx)
         pid = p->pid;
-8010406e:	8b 73 10             	mov    0x10(%ebx),%esi
+80104426:	8b 73 10             	mov    0x10(%ebx),%esi
         kfree(p->kstack);
-80104071:	e8 fa e3 ff ff       	call   80102470 <kfree>
+80104429:	e8 42 e0 ff ff       	call   80102470 <kfree>
         freevm(p->pgdir);
-80104076:	5a                   	pop    %edx
-80104077:	ff 73 04             	pushl  0x4(%ebx)
+8010442e:	5a                   	pop    %edx
+8010442f:	ff 73 04             	pushl  0x4(%ebx)
         p->kstack = 0;
-8010407a:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+80104432:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
         freevm(p->pgdir);
-80104081:	e8 4a 2d 00 00       	call   80106dd0 <freevm>
+80104439:	e8 b2 2f 00 00       	call   801073f0 <freevm>
         release(&ptable.lock);
-80104086:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+8010443e:	c7 04 24 20 3d 11 80 	movl   $0x80113d20,(%esp)
         p->pid = 0;
-8010408d:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
+80104445:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
         p->parent = 0;
-80104094:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+8010444c:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
         p->name[0] = 0;
-8010409b:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
+80104453:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
         p->killed = 0;
-8010409f:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+80104457:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
         p->state = UNUSED;
-801040a6:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+8010445e:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
         release(&ptable.lock);
-801040ad:	e8 6e 05 00 00       	call   80104620 <release>
+80104465:	e8 36 07 00 00       	call   80104ba0 <release>
         return pid;
-801040b2:	83 c4 10             	add    $0x10,%esp
+8010446a:	83 c4 10             	add    $0x10,%esp
 }
-801040b5:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801040b8:	89 f0                	mov    %esi,%eax
-801040ba:	5b                   	pop    %ebx
-801040bb:	5e                   	pop    %esi
-801040bc:	5d                   	pop    %ebp
-801040bd:	c3                   	ret    
+8010446d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104470:	89 f0                	mov    %esi,%eax
+80104472:	5b                   	pop    %ebx
+80104473:	5e                   	pop    %esi
+80104474:	5d                   	pop    %ebp
+80104475:	c3                   	ret    
       release(&ptable.lock);
-801040be:	83 ec 0c             	sub    $0xc,%esp
+80104476:	83 ec 0c             	sub    $0xc,%esp
       return -1;
-801040c1:	be ff ff ff ff       	mov    $0xffffffff,%esi
+80104479:	be ff ff ff ff       	mov    $0xffffffff,%esi
       release(&ptable.lock);
-801040c6:	68 20 2d 11 80       	push   $0x80112d20
-801040cb:	e8 50 05 00 00       	call   80104620 <release>
+8010447e:	68 20 3d 11 80       	push   $0x80113d20
+80104483:	e8 18 07 00 00       	call   80104ba0 <release>
       return -1;
-801040d0:	83 c4 10             	add    $0x10,%esp
-801040d3:	eb e0                	jmp    801040b5 <wait+0xd5>
-801040d5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801040dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104488:	83 c4 10             	add    $0x10,%esp
+8010448b:	eb e0                	jmp    8010446d <wait+0xdd>
+8010448d:	8d 76 00             	lea    0x0(%esi),%esi
 
-801040e0 <wakeup>:
+80104490 <wakeup>:
 }
 
 // Wake up all processes sleeping on chan.
 void
 wakeup(void *chan)
 {
-801040e0:	f3 0f 1e fb          	endbr32 
-801040e4:	55                   	push   %ebp
-801040e5:	89 e5                	mov    %esp,%ebp
-801040e7:	53                   	push   %ebx
-801040e8:	83 ec 10             	sub    $0x10,%esp
-801040eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104490:	f3 0f 1e fb          	endbr32 
+80104494:	55                   	push   %ebp
+80104495:	89 e5                	mov    %esp,%ebp
+80104497:	53                   	push   %ebx
+80104498:	83 ec 10             	sub    $0x10,%esp
+8010449b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ptable.lock);
-801040ee:	68 20 2d 11 80       	push   $0x80112d20
-801040f3:	e8 68 04 00 00       	call   80104560 <acquire>
-801040f8:	83 c4 10             	add    $0x10,%esp
+8010449e:	68 20 3d 11 80       	push   $0x80113d20
+801044a3:	e8 38 06 00 00       	call   80104ae0 <acquire>
+801044a8:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801040fb:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80104100:	eb 10                	jmp    80104112 <wakeup+0x32>
-80104102:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104108:	83 c0 7c             	add    $0x7c,%eax
-8010410b:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-80104110:	74 1c                	je     8010412e <wakeup+0x4e>
+801044ab:	b8 54 3d 11 80       	mov    $0x80113d54,%eax
+801044b0:	eb 12                	jmp    801044c4 <wakeup+0x34>
+801044b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801044b8:	05 88 00 00 00       	add    $0x88,%eax
+801044bd:	3d 54 5f 11 80       	cmp    $0x80115f54,%eax
+801044c2:	74 1e                	je     801044e2 <wakeup+0x52>
     if(p->state == SLEEPING && p->chan == chan)
-80104112:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80104116:	75 f0                	jne    80104108 <wakeup+0x28>
-80104118:	3b 58 20             	cmp    0x20(%eax),%ebx
-8010411b:	75 eb                	jne    80104108 <wakeup+0x28>
+801044c4:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+801044c8:	75 ee                	jne    801044b8 <wakeup+0x28>
+801044ca:	3b 58 20             	cmp    0x20(%eax),%ebx
+801044cd:	75 e9                	jne    801044b8 <wakeup+0x28>
       p->state = RUNNABLE;
-8010411d:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+801044cf:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80104124:	83 c0 7c             	add    $0x7c,%eax
-80104127:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-8010412c:	75 e4                	jne    80104112 <wakeup+0x32>
+801044d6:	05 88 00 00 00       	add    $0x88,%eax
+801044db:	3d 54 5f 11 80       	cmp    $0x80115f54,%eax
+801044e0:	75 e2                	jne    801044c4 <wakeup+0x34>
   wakeup1(chan);
   release(&ptable.lock);
-8010412e:	c7 45 08 20 2d 11 80 	movl   $0x80112d20,0x8(%ebp)
+801044e2:	c7 45 08 20 3d 11 80 	movl   $0x80113d20,0x8(%ebp)
 }
-80104135:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104138:	c9                   	leave  
+801044e9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801044ec:	c9                   	leave  
   release(&ptable.lock);
-80104139:	e9 e2 04 00 00       	jmp    80104620 <release>
-8010413e:	66 90                	xchg   %ax,%ax
+801044ed:	e9 ae 06 00 00       	jmp    80104ba0 <release>
+801044f2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801044f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80104140 <kill>:
+80104500 <kill>:
 // Kill the process with the given pid.
 // Process won't exit until it returns
 // to user space (see trap in trap.c).
 int
 kill(int pid)
 {
-80104140:	f3 0f 1e fb          	endbr32 
-80104144:	55                   	push   %ebp
-80104145:	89 e5                	mov    %esp,%ebp
-80104147:	53                   	push   %ebx
-80104148:	83 ec 10             	sub    $0x10,%esp
-8010414b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104500:	f3 0f 1e fb          	endbr32 
+80104504:	55                   	push   %ebp
+80104505:	89 e5                	mov    %esp,%ebp
+80104507:	53                   	push   %ebx
+80104508:	83 ec 10             	sub    $0x10,%esp
+8010450b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct proc *p;
 
   acquire(&ptable.lock);
-8010414e:	68 20 2d 11 80       	push   $0x80112d20
-80104153:	e8 08 04 00 00       	call   80104560 <acquire>
-80104158:	83 c4 10             	add    $0x10,%esp
+8010450e:	68 20 3d 11 80       	push   $0x80113d20
+80104513:	e8 c8 05 00 00       	call   80104ae0 <acquire>
+80104518:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-8010415b:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80104160:	eb 10                	jmp    80104172 <kill+0x32>
-80104162:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104168:	83 c0 7c             	add    $0x7c,%eax
-8010416b:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-80104170:	74 36                	je     801041a8 <kill+0x68>
+8010451b:	b8 54 3d 11 80       	mov    $0x80113d54,%eax
+80104520:	eb 12                	jmp    80104534 <kill+0x34>
+80104522:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104528:	05 88 00 00 00       	add    $0x88,%eax
+8010452d:	3d 54 5f 11 80       	cmp    $0x80115f54,%eax
+80104532:	74 34                	je     80104568 <kill+0x68>
     if(p->pid == pid){
-80104172:	39 58 10             	cmp    %ebx,0x10(%eax)
-80104175:	75 f1                	jne    80104168 <kill+0x28>
+80104534:	39 58 10             	cmp    %ebx,0x10(%eax)
+80104537:	75 ef                	jne    80104528 <kill+0x28>
       p->killed = 1;
       // Wake process from sleep if necessary.
       if(p->state == SLEEPING)
-80104177:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80104539:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
       p->killed = 1;
-8010417b:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+8010453d:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
       if(p->state == SLEEPING)
-80104182:	75 07                	jne    8010418b <kill+0x4b>
+80104544:	75 07                	jne    8010454d <kill+0x4d>
         p->state = RUNNABLE;
-80104184:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80104546:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
       release(&ptable.lock);
-8010418b:	83 ec 0c             	sub    $0xc,%esp
-8010418e:	68 20 2d 11 80       	push   $0x80112d20
-80104193:	e8 88 04 00 00       	call   80104620 <release>
+8010454d:	83 ec 0c             	sub    $0xc,%esp
+80104550:	68 20 3d 11 80       	push   $0x80113d20
+80104555:	e8 46 06 00 00       	call   80104ba0 <release>
       return 0;
     }
   }
   release(&ptable.lock);
   return -1;
 }
-80104198:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010455a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
       return 0;
-8010419b:	83 c4 10             	add    $0x10,%esp
-8010419e:	31 c0                	xor    %eax,%eax
+8010455d:	83 c4 10             	add    $0x10,%esp
+80104560:	31 c0                	xor    %eax,%eax
 }
-801041a0:	c9                   	leave  
-801041a1:	c3                   	ret    
-801041a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104562:	c9                   	leave  
+80104563:	c3                   	ret    
+80104564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   release(&ptable.lock);
-801041a8:	83 ec 0c             	sub    $0xc,%esp
-801041ab:	68 20 2d 11 80       	push   $0x80112d20
-801041b0:	e8 6b 04 00 00       	call   80104620 <release>
+80104568:	83 ec 0c             	sub    $0xc,%esp
+8010456b:	68 20 3d 11 80       	push   $0x80113d20
+80104570:	e8 2b 06 00 00       	call   80104ba0 <release>
 }
-801041b5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104575:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   return -1;
-801041b8:	83 c4 10             	add    $0x10,%esp
-801041bb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104578:	83 c4 10             	add    $0x10,%esp
+8010457b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801041c0:	c9                   	leave  
-801041c1:	c3                   	ret    
-801041c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801041c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104580:	c9                   	leave  
+80104581:	c3                   	ret    
+80104582:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104589:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801041d0 <procdump>:
+80104590 <procdump>:
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
 void
 procdump(void)
 {
-801041d0:	f3 0f 1e fb          	endbr32 
-801041d4:	55                   	push   %ebp
-801041d5:	89 e5                	mov    %esp,%ebp
-801041d7:	57                   	push   %edi
-801041d8:	56                   	push   %esi
-801041d9:	8d 75 e8             	lea    -0x18(%ebp),%esi
-801041dc:	53                   	push   %ebx
-801041dd:	bb c0 2d 11 80       	mov    $0x80112dc0,%ebx
-801041e2:	83 ec 3c             	sub    $0x3c,%esp
-801041e5:	eb 28                	jmp    8010420f <procdump+0x3f>
-801041e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801041ee:	66 90                	xchg   %ax,%ax
+80104590:	f3 0f 1e fb          	endbr32 
+80104594:	55                   	push   %ebp
+80104595:	89 e5                	mov    %esp,%ebp
+80104597:	57                   	push   %edi
+80104598:	56                   	push   %esi
+80104599:	8d 75 e8             	lea    -0x18(%ebp),%esi
+8010459c:	53                   	push   %ebx
+8010459d:	bb c0 3d 11 80       	mov    $0x80113dc0,%ebx
+801045a2:	83 ec 3c             	sub    $0x3c,%esp
+801045a5:	eb 2b                	jmp    801045d2 <procdump+0x42>
+801045a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801045ae:	66 90                	xchg   %ax,%ax
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
         cprintf(" %p", pc[i]);
     }
     cprintf("\n");
-801041f0:	83 ec 0c             	sub    $0xc,%esp
-801041f3:	68 37 7a 10 80       	push   $0x80107a37
-801041f8:	e8 b3 c4 ff ff       	call   801006b0 <cprintf>
-801041fd:	83 c4 10             	add    $0x10,%esp
+801045b0:	83 ec 0c             	sub    $0xc,%esp
+801045b3:	68 6b 80 10 80       	push   $0x8010806b
+801045b8:	e8 f3 c0 ff ff       	call   801006b0 <cprintf>
+801045bd:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104200:	83 c3 7c             	add    $0x7c,%ebx
-80104203:	81 fb c0 4c 11 80    	cmp    $0x80114cc0,%ebx
-80104209:	0f 84 81 00 00 00    	je     80104290 <procdump+0xc0>
+801045c0:	81 c3 88 00 00 00    	add    $0x88,%ebx
+801045c6:	81 fb c0 5f 11 80    	cmp    $0x80115fc0,%ebx
+801045cc:	0f 84 8e 00 00 00    	je     80104660 <procdump+0xd0>
     if(p->state == UNUSED)
-8010420f:	8b 43 a0             	mov    -0x60(%ebx),%eax
-80104212:	85 c0                	test   %eax,%eax
-80104214:	74 ea                	je     80104200 <procdump+0x30>
+801045d2:	8b 43 a0             	mov    -0x60(%ebx),%eax
+801045d5:	85 c0                	test   %eax,%eax
+801045d7:	74 e7                	je     801045c0 <procdump+0x30>
       state = "???";
-80104216:	ba cb 76 10 80       	mov    $0x801076cb,%edx
+801045d9:	ba eb 7c 10 80       	mov    $0x80107ceb,%edx
     if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-8010421b:	83 f8 05             	cmp    $0x5,%eax
-8010421e:	77 11                	ja     80104231 <procdump+0x61>
-80104220:	8b 14 85 2c 77 10 80 	mov    -0x7fef88d4(,%eax,4),%edx
+801045de:	83 f8 05             	cmp    $0x5,%eax
+801045e1:	77 11                	ja     801045f4 <procdump+0x64>
+801045e3:	8b 14 85 4c 7d 10 80 	mov    -0x7fef82b4(,%eax,4),%edx
       state = "???";
-80104227:	b8 cb 76 10 80       	mov    $0x801076cb,%eax
-8010422c:	85 d2                	test   %edx,%edx
-8010422e:	0f 44 d0             	cmove  %eax,%edx
+801045ea:	b8 eb 7c 10 80       	mov    $0x80107ceb,%eax
+801045ef:	85 d2                	test   %edx,%edx
+801045f1:	0f 44 d0             	cmove  %eax,%edx
     cprintf("%d %s %s", p->pid, state, p->name);
-80104231:	53                   	push   %ebx
-80104232:	52                   	push   %edx
-80104233:	ff 73 a4             	pushl  -0x5c(%ebx)
-80104236:	68 cf 76 10 80       	push   $0x801076cf
-8010423b:	e8 70 c4 ff ff       	call   801006b0 <cprintf>
+801045f4:	53                   	push   %ebx
+801045f5:	52                   	push   %edx
+801045f6:	ff 73 a4             	pushl  -0x5c(%ebx)
+801045f9:	68 ef 7c 10 80       	push   $0x80107cef
+801045fe:	e8 ad c0 ff ff       	call   801006b0 <cprintf>
     if(p->state == SLEEPING){
-80104240:	83 c4 10             	add    $0x10,%esp
-80104243:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
-80104247:	75 a7                	jne    801041f0 <procdump+0x20>
+80104603:	83 c4 10             	add    $0x10,%esp
+80104606:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
+8010460a:	75 a4                	jne    801045b0 <procdump+0x20>
       getcallerpcs((uint*)p->context->ebp+2, pc);
-80104249:	83 ec 08             	sub    $0x8,%esp
-8010424c:	8d 45 c0             	lea    -0x40(%ebp),%eax
-8010424f:	8d 7d c0             	lea    -0x40(%ebp),%edi
-80104252:	50                   	push   %eax
-80104253:	8b 43 b0             	mov    -0x50(%ebx),%eax
-80104256:	8b 40 0c             	mov    0xc(%eax),%eax
-80104259:	83 c0 08             	add    $0x8,%eax
-8010425c:	50                   	push   %eax
-8010425d:	e8 9e 01 00 00       	call   80104400 <getcallerpcs>
+8010460c:	83 ec 08             	sub    $0x8,%esp
+8010460f:	8d 45 c0             	lea    -0x40(%ebp),%eax
+80104612:	8d 7d c0             	lea    -0x40(%ebp),%edi
+80104615:	50                   	push   %eax
+80104616:	8b 43 b0             	mov    -0x50(%ebx),%eax
+80104619:	8b 40 0c             	mov    0xc(%eax),%eax
+8010461c:	83 c0 08             	add    $0x8,%eax
+8010461f:	50                   	push   %eax
+80104620:	e8 5b 03 00 00       	call   80104980 <getcallerpcs>
       for(i=0; i<10 && pc[i] != 0; i++)
-80104262:	83 c4 10             	add    $0x10,%esp
-80104265:	8d 76 00             	lea    0x0(%esi),%esi
-80104268:	8b 17                	mov    (%edi),%edx
-8010426a:	85 d2                	test   %edx,%edx
-8010426c:	74 82                	je     801041f0 <procdump+0x20>
+80104625:	83 c4 10             	add    $0x10,%esp
+80104628:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010462f:	90                   	nop
+80104630:	8b 17                	mov    (%edi),%edx
+80104632:	85 d2                	test   %edx,%edx
+80104634:	0f 84 76 ff ff ff    	je     801045b0 <procdump+0x20>
         cprintf(" %p", pc[i]);
-8010426e:	83 ec 08             	sub    $0x8,%esp
-80104271:	83 c7 04             	add    $0x4,%edi
-80104274:	52                   	push   %edx
-80104275:	68 21 71 10 80       	push   $0x80107121
-8010427a:	e8 31 c4 ff ff       	call   801006b0 <cprintf>
+8010463a:	83 ec 08             	sub    $0x8,%esp
+8010463d:	83 c7 04             	add    $0x4,%edi
+80104640:	52                   	push   %edx
+80104641:	68 41 77 10 80       	push   $0x80107741
+80104646:	e8 65 c0 ff ff       	call   801006b0 <cprintf>
       for(i=0; i<10 && pc[i] != 0; i++)
-8010427f:	83 c4 10             	add    $0x10,%esp
-80104282:	39 fe                	cmp    %edi,%esi
-80104284:	75 e2                	jne    80104268 <procdump+0x98>
-80104286:	e9 65 ff ff ff       	jmp    801041f0 <procdump+0x20>
-8010428b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010428f:	90                   	nop
-  }
-}
-80104290:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104293:	5b                   	pop    %ebx
-80104294:	5e                   	pop    %esi
-80104295:	5f                   	pop    %edi
-80104296:	5d                   	pop    %ebp
-80104297:	c3                   	ret    
-80104298:	66 90                	xchg   %ax,%ax
-8010429a:	66 90                	xchg   %ax,%ax
-8010429c:	66 90                	xchg   %ax,%ax
-8010429e:	66 90                	xchg   %ax,%ax
+8010464b:	83 c4 10             	add    $0x10,%esp
+8010464e:	39 fe                	cmp    %edi,%esi
+80104650:	75 de                	jne    80104630 <procdump+0xa0>
+80104652:	e9 59 ff ff ff       	jmp    801045b0 <procdump+0x20>
+80104657:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010465e:	66 90                	xchg   %ax,%ax
+  }
+}
+80104660:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104663:	5b                   	pop    %ebx
+80104664:	5e                   	pop    %esi
+80104665:	5f                   	pop    %edi
+80104666:	5d                   	pop    %ebp
+80104667:	c3                   	ret    
+80104668:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010466f:	90                   	nop
+
+80104670 <getNumProc>:
+
+int 
+getNumProc(void){
+80104670:	f3 0f 1e fb          	endbr32 
+80104674:	55                   	push   %ebp
+80104675:	89 e5                	mov    %esp,%ebp
+80104677:	53                   	push   %ebx
+  struct proc *p;
+
+  acquire(&ptable.lock);
+
+  int activeProcesses = 0;
+80104678:	31 db                	xor    %ebx,%ebx
+getNumProc(void){
+8010467a:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock);
+8010467d:	68 20 3d 11 80       	push   $0x80113d20
+80104682:	e8 59 04 00 00       	call   80104ae0 <acquire>
+80104687:	83 c4 10             	add    $0x10,%esp
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+8010468a:	b8 54 3d 11 80       	mov    $0x80113d54,%eax
+8010468f:	90                   	nop
+    if(p->state != UNUSED){
+      activeProcesses++;
+80104690:	83 78 0c 01          	cmpl   $0x1,0xc(%eax)
+80104694:	83 db ff             	sbb    $0xffffffff,%ebx
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104697:	05 88 00 00 00       	add    $0x88,%eax
+8010469c:	3d 54 5f 11 80       	cmp    $0x80115f54,%eax
+801046a1:	75 ed                	jne    80104690 <getNumProc+0x20>
+    }
+  }
+  release(&ptable.lock);
+801046a3:	83 ec 0c             	sub    $0xc,%esp
+801046a6:	68 20 3d 11 80       	push   $0x80113d20
+801046ab:	e8 f0 04 00 00       	call   80104ba0 <release>
+  return activeProcesses;
+}
+801046b0:	89 d8                	mov    %ebx,%eax
+801046b2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801046b5:	c9                   	leave  
+801046b6:	c3                   	ret    
+801046b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801046be:	66 90                	xchg   %ax,%ax
+
+801046c0 <getMaxPid>:
+
+int 
+getMaxPid(void){
+801046c0:	f3 0f 1e fb          	endbr32 
+801046c4:	55                   	push   %ebp
+801046c5:	89 e5                	mov    %esp,%ebp
+801046c7:	53                   	push   %ebx
+  struct proc *p;
+
+  acquire(&ptable.lock);
+  int maxPID = -1e9;
+801046c8:	bb 00 36 65 c4       	mov    $0xc4653600,%ebx
+getMaxPid(void){
+801046cd:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock);
+801046d0:	68 20 3d 11 80       	push   $0x80113d20
+801046d5:	e8 06 04 00 00       	call   80104ae0 <acquire>
+801046da:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+801046dd:	b8 54 3d 11 80       	mov    $0x80113d54,%eax
+801046e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(maxPID < (p -> pid)){
+801046e8:	8b 50 10             	mov    0x10(%eax),%edx
+801046eb:	39 d3                	cmp    %edx,%ebx
+801046ed:	0f 4c da             	cmovl  %edx,%ebx
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+801046f0:	05 88 00 00 00       	add    $0x88,%eax
+801046f5:	3d 54 5f 11 80       	cmp    $0x80115f54,%eax
+801046fa:	75 ec                	jne    801046e8 <getMaxPid+0x28>
+      maxPID = (p -> pid);
+    }
+  }
+  release(&ptable.lock);
+801046fc:	83 ec 0c             	sub    $0xc,%esp
+801046ff:	68 20 3d 11 80       	push   $0x80113d20
+80104704:	e8 97 04 00 00       	call   80104ba0 <release>
+  return maxPID;
+}
+80104709:	89 d8                	mov    %ebx,%eax
+8010470b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010470e:	c9                   	leave  
+8010470f:	c3                   	ret    
+
+80104710 <getProcInfo>:
+
+int 
+getProcInfo(int pid,struct processInfo* procInfo){
+80104710:	f3 0f 1e fb          	endbr32 
+80104714:	55                   	push   %ebp
+80104715:	89 e5                	mov    %esp,%ebp
+80104717:	57                   	push   %edi
+  struct proc *p;
+
+  acquire(&ptable.lock);
+  int isProcessPresent = -1;
+80104718:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+getProcInfo(int pid,struct processInfo* procInfo){
+8010471d:	56                   	push   %esi
+8010471e:	53                   	push   %ebx
+8010471f:	83 ec 18             	sub    $0x18,%esp
+80104722:	8b 75 08             	mov    0x8(%ebp),%esi
+80104725:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  acquire(&ptable.lock);
+80104728:	68 20 3d 11 80       	push   $0x80113d20
+8010472d:	e8 ae 03 00 00       	call   80104ae0 <acquire>
+80104732:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104735:	b8 54 3d 11 80       	mov    $0x80113d54,%eax
+8010473a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(p -> pid == pid){
+80104740:	39 70 10             	cmp    %esi,0x10(%eax)
+80104743:	75 15                	jne    8010475a <getProcInfo+0x4a>
+      isProcessPresent = 0;
+      procInfo -> psize = p -> sz;
+80104745:	8b 10                	mov    (%eax),%edx
+      isProcessPresent = 0;
+80104747:	31 ff                	xor    %edi,%edi
+      procInfo -> psize = p -> sz;
+80104749:	89 53 04             	mov    %edx,0x4(%ebx)
+      procInfo -> numberContextSwitches = p -> number_of_context_switches;
+8010474c:	8b 50 7c             	mov    0x7c(%eax),%edx
+8010474f:	89 53 08             	mov    %edx,0x8(%ebx)
+      procInfo -> ppid = p -> parent -> pid;
+80104752:	8b 50 14             	mov    0x14(%eax),%edx
+80104755:	8b 52 10             	mov    0x10(%edx),%edx
+80104758:	89 13                	mov    %edx,(%ebx)
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+8010475a:	05 88 00 00 00       	add    $0x88,%eax
+8010475f:	3d 54 5f 11 80       	cmp    $0x80115f54,%eax
+80104764:	75 da                	jne    80104740 <getProcInfo+0x30>
+    }
+  }
+  release(&ptable.lock);
+80104766:	83 ec 0c             	sub    $0xc,%esp
+80104769:	68 20 3d 11 80       	push   $0x80113d20
+8010476e:	e8 2d 04 00 00       	call   80104ba0 <release>
+  return isProcessPresent;
+}
+80104773:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104776:	89 f8                	mov    %edi,%eax
+80104778:	5b                   	pop    %ebx
+80104779:	5e                   	pop    %esi
+8010477a:	5f                   	pop    %edi
+8010477b:	5d                   	pop    %ebp
+8010477c:	c3                   	ret    
+8010477d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80104780 <set_burst_time>:
+
+int 
+set_burst_time(int n){
+80104780:	f3 0f 1e fb          	endbr32 
+80104784:	55                   	push   %ebp
+80104785:	89 e5                	mov    %esp,%ebp
+80104787:	53                   	push   %ebx
+80104788:	83 ec 10             	sub    $0x10,%esp
+8010478b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+
+  acquire(&ptable.lock);
+8010478e:	68 20 3d 11 80       	push   $0x80113d20
+80104793:	e8 48 03 00 00       	call   80104ae0 <acquire>
+  int BurstTimeSet = -1;
+  mycpu()->proc->burst_time = n;
+80104798:	e8 33 f4 ff ff       	call   80103bd0 <mycpu>
+8010479d:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+801047a3:	89 98 80 00 00 00    	mov    %ebx,0x80(%eax)
+  mycpu()->proc->remaining_completion_time = n;
+801047a9:	e8 22 f4 ff ff       	call   80103bd0 <mycpu>
+801047ae:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+801047b4:	89 98 84 00 00 00    	mov    %ebx,0x84(%eax)
+  BurstTimeSet = 0;
+  release(&ptable.lock);
+801047ba:	c7 04 24 20 3d 11 80 	movl   $0x80113d20,(%esp)
+801047c1:	e8 da 03 00 00       	call   80104ba0 <release>
+  yield();
+801047c6:	e8 b5 fa ff ff       	call   80104280 <yield>
+  return BurstTimeSet;
+}
+801047cb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801047ce:	31 c0                	xor    %eax,%eax
+801047d0:	c9                   	leave  
+801047d1:	c3                   	ret    
+801047d2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801047d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801047e0 <get_burst_time>:
+
+int 
+get_burst_time(){
+801047e0:	f3 0f 1e fb          	endbr32 
+801047e4:	55                   	push   %ebp
+801047e5:	89 e5                	mov    %esp,%ebp
+801047e7:	53                   	push   %ebx
+801047e8:	83 ec 10             	sub    $0x10,%esp
+  
+  acquire(&ptable.lock);
+801047eb:	68 20 3d 11 80       	push   $0x80113d20
+801047f0:	e8 eb 02 00 00       	call   80104ae0 <acquire>
+  int burstTime = -1;
+  burstTime = mycpu()->proc->burst_time;
+801047f5:	e8 d6 f3 ff ff       	call   80103bd0 <mycpu>
+801047fa:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+80104800:	8b 98 80 00 00 00    	mov    0x80(%eax),%ebx
+  release(&ptable.lock);
+80104806:	c7 04 24 20 3d 11 80 	movl   $0x80113d20,(%esp)
+8010480d:	e8 8e 03 00 00       	call   80104ba0 <release>
+  return burstTime;
+80104812:	89 d8                	mov    %ebx,%eax
+80104814:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104817:	c9                   	leave  
+80104818:	c3                   	ret    
+80104819:	66 90                	xchg   %ax,%ax
+8010481b:	66 90                	xchg   %ax,%ax
+8010481d:	66 90                	xchg   %ax,%ax
+8010481f:	90                   	nop
 
-801042a0 <initsleeplock>:
+80104820 <initsleeplock>:
 #include "spinlock.h"
 #include "sleeplock.h"
 
 void
 initsleeplock(struct sleeplock *lk, char *name)
 {
-801042a0:	f3 0f 1e fb          	endbr32 
-801042a4:	55                   	push   %ebp
-801042a5:	89 e5                	mov    %esp,%ebp
-801042a7:	53                   	push   %ebx
-801042a8:	83 ec 0c             	sub    $0xc,%esp
-801042ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104820:	f3 0f 1e fb          	endbr32 
+80104824:	55                   	push   %ebp
+80104825:	89 e5                	mov    %esp,%ebp
+80104827:	53                   	push   %ebx
+80104828:	83 ec 0c             	sub    $0xc,%esp
+8010482b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&lk->lk, "sleep lock");
-801042ae:	68 44 77 10 80       	push   $0x80107744
-801042b3:	8d 43 04             	lea    0x4(%ebx),%eax
-801042b6:	50                   	push   %eax
-801042b7:	e8 24 01 00 00       	call   801043e0 <initlock>
+8010482e:	68 64 7d 10 80       	push   $0x80107d64
+80104833:	8d 43 04             	lea    0x4(%ebx),%eax
+80104836:	50                   	push   %eax
+80104837:	e8 24 01 00 00       	call   80104960 <initlock>
   lk->name = name;
-801042bc:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010483c:	8b 45 0c             	mov    0xc(%ebp),%eax
   lk->locked = 0;
-801042bf:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+8010483f:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   lk->pid = 0;
 }
-801042c5:	83 c4 10             	add    $0x10,%esp
+80104845:	83 c4 10             	add    $0x10,%esp
   lk->pid = 0;
-801042c8:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+80104848:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
   lk->name = name;
-801042cf:	89 43 38             	mov    %eax,0x38(%ebx)
+8010484f:	89 43 38             	mov    %eax,0x38(%ebx)
 }
-801042d2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801042d5:	c9                   	leave  
-801042d6:	c3                   	ret    
-801042d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801042de:	66 90                	xchg   %ax,%ax
+80104852:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104855:	c9                   	leave  
+80104856:	c3                   	ret    
+80104857:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010485e:	66 90                	xchg   %ax,%ax
 
-801042e0 <acquiresleep>:
+80104860 <acquiresleep>:
 
 void
 acquiresleep(struct sleeplock *lk)
 {
-801042e0:	f3 0f 1e fb          	endbr32 
-801042e4:	55                   	push   %ebp
-801042e5:	89 e5                	mov    %esp,%ebp
-801042e7:	56                   	push   %esi
-801042e8:	53                   	push   %ebx
-801042e9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104860:	f3 0f 1e fb          	endbr32 
+80104864:	55                   	push   %ebp
+80104865:	89 e5                	mov    %esp,%ebp
+80104867:	56                   	push   %esi
+80104868:	53                   	push   %ebx
+80104869:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&lk->lk);
-801042ec:	8d 73 04             	lea    0x4(%ebx),%esi
-801042ef:	83 ec 0c             	sub    $0xc,%esp
-801042f2:	56                   	push   %esi
-801042f3:	e8 68 02 00 00       	call   80104560 <acquire>
+8010486c:	8d 73 04             	lea    0x4(%ebx),%esi
+8010486f:	83 ec 0c             	sub    $0xc,%esp
+80104872:	56                   	push   %esi
+80104873:	e8 68 02 00 00       	call   80104ae0 <acquire>
   while (lk->locked) {
-801042f8:	8b 13                	mov    (%ebx),%edx
-801042fa:	83 c4 10             	add    $0x10,%esp
-801042fd:	85 d2                	test   %edx,%edx
-801042ff:	74 1a                	je     8010431b <acquiresleep+0x3b>
-80104301:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104878:	8b 13                	mov    (%ebx),%edx
+8010487a:	83 c4 10             	add    $0x10,%esp
+8010487d:	85 d2                	test   %edx,%edx
+8010487f:	74 1a                	je     8010489b <acquiresleep+0x3b>
+80104881:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     sleep(lk, &lk->lk);
-80104308:	83 ec 08             	sub    $0x8,%esp
-8010430b:	56                   	push   %esi
-8010430c:	53                   	push   %ebx
-8010430d:	e8 0e fc ff ff       	call   80103f20 <sleep>
+80104888:	83 ec 08             	sub    $0x8,%esp
+8010488b:	56                   	push   %esi
+8010488c:	53                   	push   %ebx
+8010488d:	e8 3e fa ff ff       	call   801042d0 <sleep>
   while (lk->locked) {
-80104312:	8b 03                	mov    (%ebx),%eax
-80104314:	83 c4 10             	add    $0x10,%esp
-80104317:	85 c0                	test   %eax,%eax
-80104319:	75 ed                	jne    80104308 <acquiresleep+0x28>
+80104892:	8b 03                	mov    (%ebx),%eax
+80104894:	83 c4 10             	add    $0x10,%esp
+80104897:	85 c0                	test   %eax,%eax
+80104899:	75 ed                	jne    80104888 <acquiresleep+0x28>
   }
   lk->locked = 1;
-8010431b:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+8010489b:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
   lk->pid = myproc()->pid;
-80104321:	e8 3a f6 ff ff       	call   80103960 <myproc>
-80104326:	8b 40 10             	mov    0x10(%eax),%eax
-80104329:	89 43 3c             	mov    %eax,0x3c(%ebx)
+801048a1:	e8 ba f3 ff ff       	call   80103c60 <myproc>
+801048a6:	8b 40 10             	mov    0x10(%eax),%eax
+801048a9:	89 43 3c             	mov    %eax,0x3c(%ebx)
   release(&lk->lk);
-8010432c:	89 75 08             	mov    %esi,0x8(%ebp)
+801048ac:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-8010432f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104332:	5b                   	pop    %ebx
-80104333:	5e                   	pop    %esi
-80104334:	5d                   	pop    %ebp
+801048af:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801048b2:	5b                   	pop    %ebx
+801048b3:	5e                   	pop    %esi
+801048b4:	5d                   	pop    %ebp
   release(&lk->lk);
-80104335:	e9 e6 02 00 00       	jmp    80104620 <release>
-8010433a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801048b5:	e9 e6 02 00 00       	jmp    80104ba0 <release>
+801048ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104340 <releasesleep>:
+801048c0 <releasesleep>:
 
 void
 releasesleep(struct sleeplock *lk)
 {
-80104340:	f3 0f 1e fb          	endbr32 
-80104344:	55                   	push   %ebp
-80104345:	89 e5                	mov    %esp,%ebp
-80104347:	56                   	push   %esi
-80104348:	53                   	push   %ebx
-80104349:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801048c0:	f3 0f 1e fb          	endbr32 
+801048c4:	55                   	push   %ebp
+801048c5:	89 e5                	mov    %esp,%ebp
+801048c7:	56                   	push   %esi
+801048c8:	53                   	push   %ebx
+801048c9:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&lk->lk);
-8010434c:	8d 73 04             	lea    0x4(%ebx),%esi
-8010434f:	83 ec 0c             	sub    $0xc,%esp
-80104352:	56                   	push   %esi
-80104353:	e8 08 02 00 00       	call   80104560 <acquire>
+801048cc:	8d 73 04             	lea    0x4(%ebx),%esi
+801048cf:	83 ec 0c             	sub    $0xc,%esp
+801048d2:	56                   	push   %esi
+801048d3:	e8 08 02 00 00       	call   80104ae0 <acquire>
   lk->locked = 0;
-80104358:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+801048d8:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   lk->pid = 0;
-8010435e:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+801048de:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
   wakeup(lk);
-80104365:	89 1c 24             	mov    %ebx,(%esp)
-80104368:	e8 73 fd ff ff       	call   801040e0 <wakeup>
+801048e5:	89 1c 24             	mov    %ebx,(%esp)
+801048e8:	e8 a3 fb ff ff       	call   80104490 <wakeup>
   release(&lk->lk);
-8010436d:	89 75 08             	mov    %esi,0x8(%ebp)
-80104370:	83 c4 10             	add    $0x10,%esp
+801048ed:	89 75 08             	mov    %esi,0x8(%ebp)
+801048f0:	83 c4 10             	add    $0x10,%esp
 }
-80104373:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104376:	5b                   	pop    %ebx
-80104377:	5e                   	pop    %esi
-80104378:	5d                   	pop    %ebp
+801048f3:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801048f6:	5b                   	pop    %ebx
+801048f7:	5e                   	pop    %esi
+801048f8:	5d                   	pop    %ebp
   release(&lk->lk);
-80104379:	e9 a2 02 00 00       	jmp    80104620 <release>
-8010437e:	66 90                	xchg   %ax,%ax
+801048f9:	e9 a2 02 00 00       	jmp    80104ba0 <release>
+801048fe:	66 90                	xchg   %ax,%ax
 
-80104380 <holdingsleep>:
+80104900 <holdingsleep>:
 
 int
 holdingsleep(struct sleeplock *lk)
 {
-80104380:	f3 0f 1e fb          	endbr32 
-80104384:	55                   	push   %ebp
-80104385:	89 e5                	mov    %esp,%ebp
-80104387:	57                   	push   %edi
-80104388:	31 ff                	xor    %edi,%edi
-8010438a:	56                   	push   %esi
-8010438b:	53                   	push   %ebx
-8010438c:	83 ec 18             	sub    $0x18,%esp
-8010438f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104900:	f3 0f 1e fb          	endbr32 
+80104904:	55                   	push   %ebp
+80104905:	89 e5                	mov    %esp,%ebp
+80104907:	57                   	push   %edi
+80104908:	31 ff                	xor    %edi,%edi
+8010490a:	56                   	push   %esi
+8010490b:	53                   	push   %ebx
+8010490c:	83 ec 18             	sub    $0x18,%esp
+8010490f:	8b 5d 08             	mov    0x8(%ebp),%ebx
   int r;
   
   acquire(&lk->lk);
-80104392:	8d 73 04             	lea    0x4(%ebx),%esi
-80104395:	56                   	push   %esi
-80104396:	e8 c5 01 00 00       	call   80104560 <acquire>
+80104912:	8d 73 04             	lea    0x4(%ebx),%esi
+80104915:	56                   	push   %esi
+80104916:	e8 c5 01 00 00       	call   80104ae0 <acquire>
   r = lk->locked && (lk->pid == myproc()->pid);
-8010439b:	8b 03                	mov    (%ebx),%eax
-8010439d:	83 c4 10             	add    $0x10,%esp
-801043a0:	85 c0                	test   %eax,%eax
-801043a2:	75 1c                	jne    801043c0 <holdingsleep+0x40>
+8010491b:	8b 03                	mov    (%ebx),%eax
+8010491d:	83 c4 10             	add    $0x10,%esp
+80104920:	85 c0                	test   %eax,%eax
+80104922:	75 1c                	jne    80104940 <holdingsleep+0x40>
   release(&lk->lk);
-801043a4:	83 ec 0c             	sub    $0xc,%esp
-801043a7:	56                   	push   %esi
-801043a8:	e8 73 02 00 00       	call   80104620 <release>
+80104924:	83 ec 0c             	sub    $0xc,%esp
+80104927:	56                   	push   %esi
+80104928:	e8 73 02 00 00       	call   80104ba0 <release>
   return r;
 }
-801043ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801043b0:	89 f8                	mov    %edi,%eax
-801043b2:	5b                   	pop    %ebx
-801043b3:	5e                   	pop    %esi
-801043b4:	5f                   	pop    %edi
-801043b5:	5d                   	pop    %ebp
-801043b6:	c3                   	ret    
-801043b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801043be:	66 90                	xchg   %ax,%ax
+8010492d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104930:	89 f8                	mov    %edi,%eax
+80104932:	5b                   	pop    %ebx
+80104933:	5e                   	pop    %esi
+80104934:	5f                   	pop    %edi
+80104935:	5d                   	pop    %ebp
+80104936:	c3                   	ret    
+80104937:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010493e:	66 90                	xchg   %ax,%ax
   r = lk->locked && (lk->pid == myproc()->pid);
-801043c0:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
-801043c3:	e8 98 f5 ff ff       	call   80103960 <myproc>
-801043c8:	39 58 10             	cmp    %ebx,0x10(%eax)
-801043cb:	0f 94 c0             	sete   %al
-801043ce:	0f b6 c0             	movzbl %al,%eax
-801043d1:	89 c7                	mov    %eax,%edi
-801043d3:	eb cf                	jmp    801043a4 <holdingsleep+0x24>
-801043d5:	66 90                	xchg   %ax,%ax
-801043d7:	66 90                	xchg   %ax,%ax
-801043d9:	66 90                	xchg   %ax,%ax
-801043db:	66 90                	xchg   %ax,%ax
-801043dd:	66 90                	xchg   %ax,%ax
-801043df:	90                   	nop
+80104940:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
+80104943:	e8 18 f3 ff ff       	call   80103c60 <myproc>
+80104948:	39 58 10             	cmp    %ebx,0x10(%eax)
+8010494b:	0f 94 c0             	sete   %al
+8010494e:	0f b6 c0             	movzbl %al,%eax
+80104951:	89 c7                	mov    %eax,%edi
+80104953:	eb cf                	jmp    80104924 <holdingsleep+0x24>
+80104955:	66 90                	xchg   %ax,%ax
+80104957:	66 90                	xchg   %ax,%ax
+80104959:	66 90                	xchg   %ax,%ax
+8010495b:	66 90                	xchg   %ax,%ax
+8010495d:	66 90                	xchg   %ax,%ax
+8010495f:	90                   	nop
 
-801043e0 <initlock>:
+80104960 <initlock>:
 #include "proc.h"
 #include "spinlock.h"
 
 void
 initlock(struct spinlock *lk, char *name)
 {
-801043e0:	f3 0f 1e fb          	endbr32 
-801043e4:	55                   	push   %ebp
-801043e5:	89 e5                	mov    %esp,%ebp
-801043e7:	8b 45 08             	mov    0x8(%ebp),%eax
+80104960:	f3 0f 1e fb          	endbr32 
+80104964:	55                   	push   %ebp
+80104965:	89 e5                	mov    %esp,%ebp
+80104967:	8b 45 08             	mov    0x8(%ebp),%eax
   lk->name = name;
-801043ea:	8b 55 0c             	mov    0xc(%ebp),%edx
+8010496a:	8b 55 0c             	mov    0xc(%ebp),%edx
   lk->locked = 0;
-801043ed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+8010496d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   lk->name = name;
-801043f3:	89 50 04             	mov    %edx,0x4(%eax)
+80104973:	89 50 04             	mov    %edx,0x4(%eax)
   lk->cpu = 0;
-801043f6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+80104976:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
 }
-801043fd:	5d                   	pop    %ebp
-801043fe:	c3                   	ret    
-801043ff:	90                   	nop
+8010497d:	5d                   	pop    %ebp
+8010497e:	c3                   	ret    
+8010497f:	90                   	nop
 
-80104400 <getcallerpcs>:
+80104980 <getcallerpcs>:
 }
 
 // Record the current call stack in pcs[] by following the %ebp chain.
 void
 getcallerpcs(void *v, uint pcs[])
 {
-80104400:	f3 0f 1e fb          	endbr32 
-80104404:	55                   	push   %ebp
+80104980:	f3 0f 1e fb          	endbr32 
+80104984:	55                   	push   %ebp
   uint *ebp;
   int i;
 
   ebp = (uint*)v - 2;
   for(i = 0; i < 10; i++){
-80104405:	31 d2                	xor    %edx,%edx
+80104985:	31 d2                	xor    %edx,%edx
 {
-80104407:	89 e5                	mov    %esp,%ebp
-80104409:	53                   	push   %ebx
+80104987:	89 e5                	mov    %esp,%ebp
+80104989:	53                   	push   %ebx
   ebp = (uint*)v - 2;
-8010440a:	8b 45 08             	mov    0x8(%ebp),%eax
+8010498a:	8b 45 08             	mov    0x8(%ebp),%eax
 {
-8010440d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+8010498d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   ebp = (uint*)v - 2;
-80104410:	83 e8 08             	sub    $0x8,%eax
+80104990:	83 e8 08             	sub    $0x8,%eax
   for(i = 0; i < 10; i++){
-80104413:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104417:	90                   	nop
+80104993:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104997:	90                   	nop
     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-80104418:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
-8010441e:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
-80104424:	77 1a                	ja     80104440 <getcallerpcs+0x40>
+80104998:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
+8010499e:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+801049a4:	77 1a                	ja     801049c0 <getcallerpcs+0x40>
       break;
     pcs[i] = ebp[1];     // saved %eip
-80104426:	8b 58 04             	mov    0x4(%eax),%ebx
-80104429:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
+801049a6:	8b 58 04             	mov    0x4(%eax),%ebx
+801049a9:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
   for(i = 0; i < 10; i++){
-8010442c:	83 c2 01             	add    $0x1,%edx
+801049ac:	83 c2 01             	add    $0x1,%edx
     ebp = (uint*)ebp[0]; // saved %ebp
-8010442f:	8b 00                	mov    (%eax),%eax
+801049af:	8b 00                	mov    (%eax),%eax
   for(i = 0; i < 10; i++){
-80104431:	83 fa 0a             	cmp    $0xa,%edx
-80104434:	75 e2                	jne    80104418 <getcallerpcs+0x18>
+801049b1:	83 fa 0a             	cmp    $0xa,%edx
+801049b4:	75 e2                	jne    80104998 <getcallerpcs+0x18>
   }
   for(; i < 10; i++)
     pcs[i] = 0;
 }
-80104436:	5b                   	pop    %ebx
-80104437:	5d                   	pop    %ebp
-80104438:	c3                   	ret    
-80104439:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801049b6:	5b                   	pop    %ebx
+801049b7:	5d                   	pop    %ebp
+801049b8:	c3                   	ret    
+801049b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(; i < 10; i++)
-80104440:	8d 04 91             	lea    (%ecx,%edx,4),%eax
-80104443:	8d 51 28             	lea    0x28(%ecx),%edx
-80104446:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010444d:	8d 76 00             	lea    0x0(%esi),%esi
+801049c0:	8d 04 91             	lea    (%ecx,%edx,4),%eax
+801049c3:	8d 51 28             	lea    0x28(%ecx),%edx
+801049c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801049cd:	8d 76 00             	lea    0x0(%esi),%esi
     pcs[i] = 0;
-80104450:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+801049d0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   for(; i < 10; i++)
-80104456:	83 c0 04             	add    $0x4,%eax
-80104459:	39 d0                	cmp    %edx,%eax
-8010445b:	75 f3                	jne    80104450 <getcallerpcs+0x50>
-}
-8010445d:	5b                   	pop    %ebx
-8010445e:	5d                   	pop    %ebp
-8010445f:	c3                   	ret    
+801049d6:	83 c0 04             	add    $0x4,%eax
+801049d9:	39 d0                	cmp    %edx,%eax
+801049db:	75 f3                	jne    801049d0 <getcallerpcs+0x50>
+}
+801049dd:	5b                   	pop    %ebx
+801049de:	5d                   	pop    %ebp
+801049df:	c3                   	ret    
 
-80104460 <pushcli>:
+801049e0 <pushcli>:
 // it takes two popcli to undo two pushcli.  Also, if interrupts
 // are off, then pushcli, popcli leaves them off.
 
 void
 pushcli(void)
 {
-80104460:	f3 0f 1e fb          	endbr32 
-80104464:	55                   	push   %ebp
-80104465:	89 e5                	mov    %esp,%ebp
-80104467:	53                   	push   %ebx
-80104468:	83 ec 04             	sub    $0x4,%esp
-8010446b:	9c                   	pushf  
-8010446c:	5b                   	pop    %ebx
+801049e0:	f3 0f 1e fb          	endbr32 
+801049e4:	55                   	push   %ebp
+801049e5:	89 e5                	mov    %esp,%ebp
+801049e7:	53                   	push   %ebx
+801049e8:	83 ec 04             	sub    $0x4,%esp
+801049eb:	9c                   	pushf  
+801049ec:	5b                   	pop    %ebx
   asm volatile("cli");
-8010446d:	fa                   	cli    
+801049ed:	fa                   	cli    
   int eflags;
 
   eflags = readeflags();
   cli();
   if(mycpu()->ncli == 0)
-8010446e:	e8 5d f4 ff ff       	call   801038d0 <mycpu>
-80104473:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
-80104479:	85 c0                	test   %eax,%eax
-8010447b:	74 13                	je     80104490 <pushcli+0x30>
+801049ee:	e8 dd f1 ff ff       	call   80103bd0 <mycpu>
+801049f3:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+801049f9:	85 c0                	test   %eax,%eax
+801049fb:	74 13                	je     80104a10 <pushcli+0x30>
     mycpu()->intena = eflags & FL_IF;
   mycpu()->ncli += 1;
-8010447d:	e8 4e f4 ff ff       	call   801038d0 <mycpu>
-80104482:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
+801049fd:	e8 ce f1 ff ff       	call   80103bd0 <mycpu>
+80104a02:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
 }
-80104489:	83 c4 04             	add    $0x4,%esp
-8010448c:	5b                   	pop    %ebx
-8010448d:	5d                   	pop    %ebp
-8010448e:	c3                   	ret    
-8010448f:	90                   	nop
+80104a09:	83 c4 04             	add    $0x4,%esp
+80104a0c:	5b                   	pop    %ebx
+80104a0d:	5d                   	pop    %ebp
+80104a0e:	c3                   	ret    
+80104a0f:	90                   	nop
     mycpu()->intena = eflags & FL_IF;
-80104490:	e8 3b f4 ff ff       	call   801038d0 <mycpu>
-80104495:	81 e3 00 02 00 00    	and    $0x200,%ebx
-8010449b:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
-801044a1:	eb da                	jmp    8010447d <pushcli+0x1d>
-801044a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801044aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104a10:	e8 bb f1 ff ff       	call   80103bd0 <mycpu>
+80104a15:	81 e3 00 02 00 00    	and    $0x200,%ebx
+80104a1b:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
+80104a21:	eb da                	jmp    801049fd <pushcli+0x1d>
+80104a23:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104a2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801044b0 <popcli>:
+80104a30 <popcli>:
 
 void
 popcli(void)
 {
-801044b0:	f3 0f 1e fb          	endbr32 
-801044b4:	55                   	push   %ebp
-801044b5:	89 e5                	mov    %esp,%ebp
-801044b7:	83 ec 08             	sub    $0x8,%esp
+80104a30:	f3 0f 1e fb          	endbr32 
+80104a34:	55                   	push   %ebp
+80104a35:	89 e5                	mov    %esp,%ebp
+80104a37:	83 ec 08             	sub    $0x8,%esp
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-801044ba:	9c                   	pushf  
-801044bb:	58                   	pop    %eax
+80104a3a:	9c                   	pushf  
+80104a3b:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-801044bc:	f6 c4 02             	test   $0x2,%ah
-801044bf:	75 31                	jne    801044f2 <popcli+0x42>
+80104a3c:	f6 c4 02             	test   $0x2,%ah
+80104a3f:	75 31                	jne    80104a72 <popcli+0x42>
     panic("popcli - interruptible");
   if(--mycpu()->ncli < 0)
-801044c1:	e8 0a f4 ff ff       	call   801038d0 <mycpu>
-801044c6:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
-801044cd:	78 30                	js     801044ff <popcli+0x4f>
+80104a41:	e8 8a f1 ff ff       	call   80103bd0 <mycpu>
+80104a46:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
+80104a4d:	78 30                	js     80104a7f <popcli+0x4f>
     panic("popcli");
   if(mycpu()->ncli == 0 && mycpu()->intena)
-801044cf:	e8 fc f3 ff ff       	call   801038d0 <mycpu>
-801044d4:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
-801044da:	85 d2                	test   %edx,%edx
-801044dc:	74 02                	je     801044e0 <popcli+0x30>
+80104a4f:	e8 7c f1 ff ff       	call   80103bd0 <mycpu>
+80104a54:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
+80104a5a:	85 d2                	test   %edx,%edx
+80104a5c:	74 02                	je     80104a60 <popcli+0x30>
     sti();
 }
-801044de:	c9                   	leave  
-801044df:	c3                   	ret    
+80104a5e:	c9                   	leave  
+80104a5f:	c3                   	ret    
   if(mycpu()->ncli == 0 && mycpu()->intena)
-801044e0:	e8 eb f3 ff ff       	call   801038d0 <mycpu>
-801044e5:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
-801044eb:	85 c0                	test   %eax,%eax
-801044ed:	74 ef                	je     801044de <popcli+0x2e>
+80104a60:	e8 6b f1 ff ff       	call   80103bd0 <mycpu>
+80104a65:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
+80104a6b:	85 c0                	test   %eax,%eax
+80104a6d:	74 ef                	je     80104a5e <popcli+0x2e>
   asm volatile("sti");
-801044ef:	fb                   	sti    
+80104a6f:	fb                   	sti    
 }
-801044f0:	c9                   	leave  
-801044f1:	c3                   	ret    
+80104a70:	c9                   	leave  
+80104a71:	c3                   	ret    
     panic("popcli - interruptible");
-801044f2:	83 ec 0c             	sub    $0xc,%esp
-801044f5:	68 4f 77 10 80       	push   $0x8010774f
-801044fa:	e8 91 be ff ff       	call   80100390 <panic>
+80104a72:	83 ec 0c             	sub    $0xc,%esp
+80104a75:	68 6f 7d 10 80       	push   $0x80107d6f
+80104a7a:	e8 11 b9 ff ff       	call   80100390 <panic>
     panic("popcli");
-801044ff:	83 ec 0c             	sub    $0xc,%esp
-80104502:	68 66 77 10 80       	push   $0x80107766
-80104507:	e8 84 be ff ff       	call   80100390 <panic>
-8010450c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80104510 <holding>:
-{
-80104510:	f3 0f 1e fb          	endbr32 
-80104514:	55                   	push   %ebp
-80104515:	89 e5                	mov    %esp,%ebp
-80104517:	56                   	push   %esi
-80104518:	53                   	push   %ebx
-80104519:	8b 75 08             	mov    0x8(%ebp),%esi
-8010451c:	31 db                	xor    %ebx,%ebx
+80104a7f:	83 ec 0c             	sub    $0xc,%esp
+80104a82:	68 86 7d 10 80       	push   $0x80107d86
+80104a87:	e8 04 b9 ff ff       	call   80100390 <panic>
+80104a8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104a90 <holding>:
+{
+80104a90:	f3 0f 1e fb          	endbr32 
+80104a94:	55                   	push   %ebp
+80104a95:	89 e5                	mov    %esp,%ebp
+80104a97:	56                   	push   %esi
+80104a98:	53                   	push   %ebx
+80104a99:	8b 75 08             	mov    0x8(%ebp),%esi
+80104a9c:	31 db                	xor    %ebx,%ebx
   pushcli();
-8010451e:	e8 3d ff ff ff       	call   80104460 <pushcli>
+80104a9e:	e8 3d ff ff ff       	call   801049e0 <pushcli>
   r = lock->locked && lock->cpu == mycpu();
-80104523:	8b 06                	mov    (%esi),%eax
-80104525:	85 c0                	test   %eax,%eax
-80104527:	75 0f                	jne    80104538 <holding+0x28>
+80104aa3:	8b 06                	mov    (%esi),%eax
+80104aa5:	85 c0                	test   %eax,%eax
+80104aa7:	75 0f                	jne    80104ab8 <holding+0x28>
   popcli();
-80104529:	e8 82 ff ff ff       	call   801044b0 <popcli>
+80104aa9:	e8 82 ff ff ff       	call   80104a30 <popcli>
 }
-8010452e:	89 d8                	mov    %ebx,%eax
-80104530:	5b                   	pop    %ebx
-80104531:	5e                   	pop    %esi
-80104532:	5d                   	pop    %ebp
-80104533:	c3                   	ret    
-80104534:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104aae:	89 d8                	mov    %ebx,%eax
+80104ab0:	5b                   	pop    %ebx
+80104ab1:	5e                   	pop    %esi
+80104ab2:	5d                   	pop    %ebp
+80104ab3:	c3                   	ret    
+80104ab4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   r = lock->locked && lock->cpu == mycpu();
-80104538:	8b 5e 08             	mov    0x8(%esi),%ebx
-8010453b:	e8 90 f3 ff ff       	call   801038d0 <mycpu>
-80104540:	39 c3                	cmp    %eax,%ebx
-80104542:	0f 94 c3             	sete   %bl
+80104ab8:	8b 5e 08             	mov    0x8(%esi),%ebx
+80104abb:	e8 10 f1 ff ff       	call   80103bd0 <mycpu>
+80104ac0:	39 c3                	cmp    %eax,%ebx
+80104ac2:	0f 94 c3             	sete   %bl
   popcli();
-80104545:	e8 66 ff ff ff       	call   801044b0 <popcli>
+80104ac5:	e8 66 ff ff ff       	call   80104a30 <popcli>
   r = lock->locked && lock->cpu == mycpu();
-8010454a:	0f b6 db             	movzbl %bl,%ebx
+80104aca:	0f b6 db             	movzbl %bl,%ebx
 }
-8010454d:	89 d8                	mov    %ebx,%eax
-8010454f:	5b                   	pop    %ebx
-80104550:	5e                   	pop    %esi
-80104551:	5d                   	pop    %ebp
-80104552:	c3                   	ret    
-80104553:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010455a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80104560 <acquire>:
-{
-80104560:	f3 0f 1e fb          	endbr32 
-80104564:	55                   	push   %ebp
-80104565:	89 e5                	mov    %esp,%ebp
-80104567:	56                   	push   %esi
-80104568:	53                   	push   %ebx
+80104acd:	89 d8                	mov    %ebx,%eax
+80104acf:	5b                   	pop    %ebx
+80104ad0:	5e                   	pop    %esi
+80104ad1:	5d                   	pop    %ebp
+80104ad2:	c3                   	ret    
+80104ad3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104ada:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104ae0 <acquire>:
+{
+80104ae0:	f3 0f 1e fb          	endbr32 
+80104ae4:	55                   	push   %ebp
+80104ae5:	89 e5                	mov    %esp,%ebp
+80104ae7:	56                   	push   %esi
+80104ae8:	53                   	push   %ebx
   pushcli(); // disable interrupts to avoid deadlock.
-80104569:	e8 f2 fe ff ff       	call   80104460 <pushcli>
+80104ae9:	e8 f2 fe ff ff       	call   801049e0 <pushcli>
   if(holding(lk))
-8010456e:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80104571:	83 ec 0c             	sub    $0xc,%esp
-80104574:	53                   	push   %ebx
-80104575:	e8 96 ff ff ff       	call   80104510 <holding>
-8010457a:	83 c4 10             	add    $0x10,%esp
-8010457d:	85 c0                	test   %eax,%eax
-8010457f:	0f 85 7f 00 00 00    	jne    80104604 <acquire+0xa4>
-80104585:	89 c6                	mov    %eax,%esi
+80104aee:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104af1:	83 ec 0c             	sub    $0xc,%esp
+80104af4:	53                   	push   %ebx
+80104af5:	e8 96 ff ff ff       	call   80104a90 <holding>
+80104afa:	83 c4 10             	add    $0x10,%esp
+80104afd:	85 c0                	test   %eax,%eax
+80104aff:	0f 85 7f 00 00 00    	jne    80104b84 <acquire+0xa4>
+80104b05:	89 c6                	mov    %eax,%esi
   asm volatile("lock; xchgl %0, %1" :
-80104587:	ba 01 00 00 00       	mov    $0x1,%edx
-8010458c:	eb 05                	jmp    80104593 <acquire+0x33>
-8010458e:	66 90                	xchg   %ax,%ax
-80104590:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80104593:	89 d0                	mov    %edx,%eax
-80104595:	f0 87 03             	lock xchg %eax,(%ebx)
+80104b07:	ba 01 00 00 00       	mov    $0x1,%edx
+80104b0c:	eb 05                	jmp    80104b13 <acquire+0x33>
+80104b0e:	66 90                	xchg   %ax,%ax
+80104b10:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104b13:	89 d0                	mov    %edx,%eax
+80104b15:	f0 87 03             	lock xchg %eax,(%ebx)
   while(xchg(&lk->locked, 1) != 0)
-80104598:	85 c0                	test   %eax,%eax
-8010459a:	75 f4                	jne    80104590 <acquire+0x30>
+80104b18:	85 c0                	test   %eax,%eax
+80104b1a:	75 f4                	jne    80104b10 <acquire+0x30>
   __sync_synchronize();
-8010459c:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+80104b1c:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
   lk->cpu = mycpu();
-801045a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
-801045a4:	e8 27 f3 ff ff       	call   801038d0 <mycpu>
-801045a9:	89 43 08             	mov    %eax,0x8(%ebx)
+80104b21:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104b24:	e8 a7 f0 ff ff       	call   80103bd0 <mycpu>
+80104b29:	89 43 08             	mov    %eax,0x8(%ebx)
   ebp = (uint*)v - 2;
-801045ac:	89 e8                	mov    %ebp,%eax
-801045ae:	66 90                	xchg   %ax,%ax
+80104b2c:	89 e8                	mov    %ebp,%eax
+80104b2e:	66 90                	xchg   %ax,%ax
     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-801045b0:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
-801045b6:	81 fa fe ff ff 7f    	cmp    $0x7ffffffe,%edx
-801045bc:	77 22                	ja     801045e0 <acquire+0x80>
+80104b30:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
+80104b36:	81 fa fe ff ff 7f    	cmp    $0x7ffffffe,%edx
+80104b3c:	77 22                	ja     80104b60 <acquire+0x80>
     pcs[i] = ebp[1];     // saved %eip
-801045be:	8b 50 04             	mov    0x4(%eax),%edx
-801045c1:	89 54 b3 0c          	mov    %edx,0xc(%ebx,%esi,4)
+80104b3e:	8b 50 04             	mov    0x4(%eax),%edx
+80104b41:	89 54 b3 0c          	mov    %edx,0xc(%ebx,%esi,4)
   for(i = 0; i < 10; i++){
-801045c5:	83 c6 01             	add    $0x1,%esi
+80104b45:	83 c6 01             	add    $0x1,%esi
     ebp = (uint*)ebp[0]; // saved %ebp
-801045c8:	8b 00                	mov    (%eax),%eax
+80104b48:	8b 00                	mov    (%eax),%eax
   for(i = 0; i < 10; i++){
-801045ca:	83 fe 0a             	cmp    $0xa,%esi
-801045cd:	75 e1                	jne    801045b0 <acquire+0x50>
+80104b4a:	83 fe 0a             	cmp    $0xa,%esi
+80104b4d:	75 e1                	jne    80104b30 <acquire+0x50>
 }
-801045cf:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801045d2:	5b                   	pop    %ebx
-801045d3:	5e                   	pop    %esi
-801045d4:	5d                   	pop    %ebp
-801045d5:	c3                   	ret    
-801045d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801045dd:	8d 76 00             	lea    0x0(%esi),%esi
+80104b4f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104b52:	5b                   	pop    %ebx
+80104b53:	5e                   	pop    %esi
+80104b54:	5d                   	pop    %ebp
+80104b55:	c3                   	ret    
+80104b56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b5d:	8d 76 00             	lea    0x0(%esi),%esi
   for(; i < 10; i++)
-801045e0:	8d 44 b3 0c          	lea    0xc(%ebx,%esi,4),%eax
-801045e4:	83 c3 34             	add    $0x34,%ebx
-801045e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801045ee:	66 90                	xchg   %ax,%ax
+80104b60:	8d 44 b3 0c          	lea    0xc(%ebx,%esi,4),%eax
+80104b64:	83 c3 34             	add    $0x34,%ebx
+80104b67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b6e:	66 90                	xchg   %ax,%ax
     pcs[i] = 0;
-801045f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80104b70:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   for(; i < 10; i++)
-801045f6:	83 c0 04             	add    $0x4,%eax
-801045f9:	39 d8                	cmp    %ebx,%eax
-801045fb:	75 f3                	jne    801045f0 <acquire+0x90>
-}
-801045fd:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104600:	5b                   	pop    %ebx
-80104601:	5e                   	pop    %esi
-80104602:	5d                   	pop    %ebp
-80104603:	c3                   	ret    
+80104b76:	83 c0 04             	add    $0x4,%eax
+80104b79:	39 d8                	cmp    %ebx,%eax
+80104b7b:	75 f3                	jne    80104b70 <acquire+0x90>
+}
+80104b7d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104b80:	5b                   	pop    %ebx
+80104b81:	5e                   	pop    %esi
+80104b82:	5d                   	pop    %ebp
+80104b83:	c3                   	ret    
     panic("acquire");
-80104604:	83 ec 0c             	sub    $0xc,%esp
-80104607:	68 6d 77 10 80       	push   $0x8010776d
-8010460c:	e8 7f bd ff ff       	call   80100390 <panic>
-80104611:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104618:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010461f:	90                   	nop
-
-80104620 <release>:
-{
-80104620:	f3 0f 1e fb          	endbr32 
-80104624:	55                   	push   %ebp
-80104625:	89 e5                	mov    %esp,%ebp
-80104627:	53                   	push   %ebx
-80104628:	83 ec 10             	sub    $0x10,%esp
-8010462b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104b84:	83 ec 0c             	sub    $0xc,%esp
+80104b87:	68 8d 7d 10 80       	push   $0x80107d8d
+80104b8c:	e8 ff b7 ff ff       	call   80100390 <panic>
+80104b91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b98:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b9f:	90                   	nop
+
+80104ba0 <release>:
+{
+80104ba0:	f3 0f 1e fb          	endbr32 
+80104ba4:	55                   	push   %ebp
+80104ba5:	89 e5                	mov    %esp,%ebp
+80104ba7:	53                   	push   %ebx
+80104ba8:	83 ec 10             	sub    $0x10,%esp
+80104bab:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(!holding(lk))
-8010462e:	53                   	push   %ebx
-8010462f:	e8 dc fe ff ff       	call   80104510 <holding>
-80104634:	83 c4 10             	add    $0x10,%esp
-80104637:	85 c0                	test   %eax,%eax
-80104639:	74 22                	je     8010465d <release+0x3d>
+80104bae:	53                   	push   %ebx
+80104baf:	e8 dc fe ff ff       	call   80104a90 <holding>
+80104bb4:	83 c4 10             	add    $0x10,%esp
+80104bb7:	85 c0                	test   %eax,%eax
+80104bb9:	74 22                	je     80104bdd <release+0x3d>
   lk->pcs[0] = 0;
-8010463b:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80104bbb:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
   lk->cpu = 0;
-80104642:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+80104bc2:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
   __sync_synchronize();
-80104649:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+80104bc9:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
   asm volatile("movl $0, %0" : "+m" (lk->locked) : );
-8010464e:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80104bce:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
 }
-80104654:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104657:	c9                   	leave  
+80104bd4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104bd7:	c9                   	leave  
   popcli();
-80104658:	e9 53 fe ff ff       	jmp    801044b0 <popcli>
+80104bd8:	e9 53 fe ff ff       	jmp    80104a30 <popcli>
     panic("release");
-8010465d:	83 ec 0c             	sub    $0xc,%esp
-80104660:	68 75 77 10 80       	push   $0x80107775
-80104665:	e8 26 bd ff ff       	call   80100390 <panic>
-8010466a:	66 90                	xchg   %ax,%ax
-8010466c:	66 90                	xchg   %ax,%ax
-8010466e:	66 90                	xchg   %ax,%ax
+80104bdd:	83 ec 0c             	sub    $0xc,%esp
+80104be0:	68 95 7d 10 80       	push   $0x80107d95
+80104be5:	e8 a6 b7 ff ff       	call   80100390 <panic>
+80104bea:	66 90                	xchg   %ax,%ax
+80104bec:	66 90                	xchg   %ax,%ax
+80104bee:	66 90                	xchg   %ax,%ax
 
-80104670 <memset>:
+80104bf0 <memset>:
 #include "types.h"
 #include "x86.h"
 
 void*
 memset(void *dst, int c, uint n)
 {
-80104670:	f3 0f 1e fb          	endbr32 
-80104674:	55                   	push   %ebp
-80104675:	89 e5                	mov    %esp,%ebp
-80104677:	57                   	push   %edi
-80104678:	8b 55 08             	mov    0x8(%ebp),%edx
-8010467b:	8b 4d 10             	mov    0x10(%ebp),%ecx
-8010467e:	53                   	push   %ebx
-8010467f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104bf0:	f3 0f 1e fb          	endbr32 
+80104bf4:	55                   	push   %ebp
+80104bf5:	89 e5                	mov    %esp,%ebp
+80104bf7:	57                   	push   %edi
+80104bf8:	8b 55 08             	mov    0x8(%ebp),%edx
+80104bfb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80104bfe:	53                   	push   %ebx
+80104bff:	8b 45 0c             	mov    0xc(%ebp),%eax
   if ((int)dst%4 == 0 && n%4 == 0){
-80104682:	89 d7                	mov    %edx,%edi
-80104684:	09 cf                	or     %ecx,%edi
-80104686:	83 e7 03             	and    $0x3,%edi
-80104689:	75 25                	jne    801046b0 <memset+0x40>
+80104c02:	89 d7                	mov    %edx,%edi
+80104c04:	09 cf                	or     %ecx,%edi
+80104c06:	83 e7 03             	and    $0x3,%edi
+80104c09:	75 25                	jne    80104c30 <memset+0x40>
     c &= 0xFF;
-8010468b:	0f b6 f8             	movzbl %al,%edi
+80104c0b:	0f b6 f8             	movzbl %al,%edi
     stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
-8010468e:	c1 e0 18             	shl    $0x18,%eax
-80104691:	89 fb                	mov    %edi,%ebx
-80104693:	c1 e9 02             	shr    $0x2,%ecx
-80104696:	c1 e3 10             	shl    $0x10,%ebx
-80104699:	09 d8                	or     %ebx,%eax
-8010469b:	09 f8                	or     %edi,%eax
-8010469d:	c1 e7 08             	shl    $0x8,%edi
-801046a0:	09 f8                	or     %edi,%eax
+80104c0e:	c1 e0 18             	shl    $0x18,%eax
+80104c11:	89 fb                	mov    %edi,%ebx
+80104c13:	c1 e9 02             	shr    $0x2,%ecx
+80104c16:	c1 e3 10             	shl    $0x10,%ebx
+80104c19:	09 d8                	or     %ebx,%eax
+80104c1b:	09 f8                	or     %edi,%eax
+80104c1d:	c1 e7 08             	shl    $0x8,%edi
+80104c20:	09 f8                	or     %edi,%eax
   asm volatile("cld; rep stosl" :
-801046a2:	89 d7                	mov    %edx,%edi
-801046a4:	fc                   	cld    
-801046a5:	f3 ab                	rep stos %eax,%es:(%edi)
+80104c22:	89 d7                	mov    %edx,%edi
+80104c24:	fc                   	cld    
+80104c25:	f3 ab                	rep stos %eax,%es:(%edi)
   } else
     stosb(dst, c, n);
   return dst;
 }
-801046a7:	5b                   	pop    %ebx
-801046a8:	89 d0                	mov    %edx,%eax
-801046aa:	5f                   	pop    %edi
-801046ab:	5d                   	pop    %ebp
-801046ac:	c3                   	ret    
-801046ad:	8d 76 00             	lea    0x0(%esi),%esi
+80104c27:	5b                   	pop    %ebx
+80104c28:	89 d0                	mov    %edx,%eax
+80104c2a:	5f                   	pop    %edi
+80104c2b:	5d                   	pop    %ebp
+80104c2c:	c3                   	ret    
+80104c2d:	8d 76 00             	lea    0x0(%esi),%esi
   asm volatile("cld; rep stosb" :
-801046b0:	89 d7                	mov    %edx,%edi
-801046b2:	fc                   	cld    
-801046b3:	f3 aa                	rep stos %al,%es:(%edi)
-801046b5:	5b                   	pop    %ebx
-801046b6:	89 d0                	mov    %edx,%eax
-801046b8:	5f                   	pop    %edi
-801046b9:	5d                   	pop    %ebp
-801046ba:	c3                   	ret    
-801046bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801046bf:	90                   	nop
+80104c30:	89 d7                	mov    %edx,%edi
+80104c32:	fc                   	cld    
+80104c33:	f3 aa                	rep stos %al,%es:(%edi)
+80104c35:	5b                   	pop    %ebx
+80104c36:	89 d0                	mov    %edx,%eax
+80104c38:	5f                   	pop    %edi
+80104c39:	5d                   	pop    %ebp
+80104c3a:	c3                   	ret    
+80104c3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104c3f:	90                   	nop
 
-801046c0 <memcmp>:
+80104c40 <memcmp>:
 
 int
 memcmp(const void *v1, const void *v2, uint n)
 {
-801046c0:	f3 0f 1e fb          	endbr32 
-801046c4:	55                   	push   %ebp
-801046c5:	89 e5                	mov    %esp,%ebp
-801046c7:	56                   	push   %esi
-801046c8:	8b 75 10             	mov    0x10(%ebp),%esi
-801046cb:	8b 55 08             	mov    0x8(%ebp),%edx
-801046ce:	53                   	push   %ebx
-801046cf:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104c40:	f3 0f 1e fb          	endbr32 
+80104c44:	55                   	push   %ebp
+80104c45:	89 e5                	mov    %esp,%ebp
+80104c47:	56                   	push   %esi
+80104c48:	8b 75 10             	mov    0x10(%ebp),%esi
+80104c4b:	8b 55 08             	mov    0x8(%ebp),%edx
+80104c4e:	53                   	push   %ebx
+80104c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
   const uchar *s1, *s2;
 
   s1 = v1;
   s2 = v2;
   while(n-- > 0){
-801046d2:	85 f6                	test   %esi,%esi
-801046d4:	74 2a                	je     80104700 <memcmp+0x40>
-801046d6:	01 c6                	add    %eax,%esi
-801046d8:	eb 10                	jmp    801046ea <memcmp+0x2a>
-801046da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104c52:	85 f6                	test   %esi,%esi
+80104c54:	74 2a                	je     80104c80 <memcmp+0x40>
+80104c56:	01 c6                	add    %eax,%esi
+80104c58:	eb 10                	jmp    80104c6a <memcmp+0x2a>
+80104c5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(*s1 != *s2)
       return *s1 - *s2;
     s1++, s2++;
-801046e0:	83 c0 01             	add    $0x1,%eax
-801046e3:	83 c2 01             	add    $0x1,%edx
+80104c60:	83 c0 01             	add    $0x1,%eax
+80104c63:	83 c2 01             	add    $0x1,%edx
   while(n-- > 0){
-801046e6:	39 f0                	cmp    %esi,%eax
-801046e8:	74 16                	je     80104700 <memcmp+0x40>
+80104c66:	39 f0                	cmp    %esi,%eax
+80104c68:	74 16                	je     80104c80 <memcmp+0x40>
     if(*s1 != *s2)
-801046ea:	0f b6 0a             	movzbl (%edx),%ecx
-801046ed:	0f b6 18             	movzbl (%eax),%ebx
-801046f0:	38 d9                	cmp    %bl,%cl
-801046f2:	74 ec                	je     801046e0 <memcmp+0x20>
+80104c6a:	0f b6 0a             	movzbl (%edx),%ecx
+80104c6d:	0f b6 18             	movzbl (%eax),%ebx
+80104c70:	38 d9                	cmp    %bl,%cl
+80104c72:	74 ec                	je     80104c60 <memcmp+0x20>
       return *s1 - *s2;
-801046f4:	0f b6 c1             	movzbl %cl,%eax
-801046f7:	29 d8                	sub    %ebx,%eax
+80104c74:	0f b6 c1             	movzbl %cl,%eax
+80104c77:	29 d8                	sub    %ebx,%eax
   }
 
   return 0;
 }
-801046f9:	5b                   	pop    %ebx
-801046fa:	5e                   	pop    %esi
-801046fb:	5d                   	pop    %ebp
-801046fc:	c3                   	ret    
-801046fd:	8d 76 00             	lea    0x0(%esi),%esi
-80104700:	5b                   	pop    %ebx
+80104c79:	5b                   	pop    %ebx
+80104c7a:	5e                   	pop    %esi
+80104c7b:	5d                   	pop    %ebp
+80104c7c:	c3                   	ret    
+80104c7d:	8d 76 00             	lea    0x0(%esi),%esi
+80104c80:	5b                   	pop    %ebx
   return 0;
-80104701:	31 c0                	xor    %eax,%eax
+80104c81:	31 c0                	xor    %eax,%eax
 }
-80104703:	5e                   	pop    %esi
-80104704:	5d                   	pop    %ebp
-80104705:	c3                   	ret    
-80104706:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010470d:	8d 76 00             	lea    0x0(%esi),%esi
+80104c83:	5e                   	pop    %esi
+80104c84:	5d                   	pop    %ebp
+80104c85:	c3                   	ret    
+80104c86:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104c8d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104710 <memmove>:
+80104c90 <memmove>:
 
 void*
 memmove(void *dst, const void *src, uint n)
 {
-80104710:	f3 0f 1e fb          	endbr32 
-80104714:	55                   	push   %ebp
-80104715:	89 e5                	mov    %esp,%ebp
-80104717:	57                   	push   %edi
-80104718:	8b 55 08             	mov    0x8(%ebp),%edx
-8010471b:	8b 4d 10             	mov    0x10(%ebp),%ecx
-8010471e:	56                   	push   %esi
-8010471f:	8b 75 0c             	mov    0xc(%ebp),%esi
+80104c90:	f3 0f 1e fb          	endbr32 
+80104c94:	55                   	push   %ebp
+80104c95:	89 e5                	mov    %esp,%ebp
+80104c97:	57                   	push   %edi
+80104c98:	8b 55 08             	mov    0x8(%ebp),%edx
+80104c9b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80104c9e:	56                   	push   %esi
+80104c9f:	8b 75 0c             	mov    0xc(%ebp),%esi
   const char *s;
   char *d;
 
   s = src;
   d = dst;
   if(s < d && s + n > d){
-80104722:	39 d6                	cmp    %edx,%esi
-80104724:	73 2a                	jae    80104750 <memmove+0x40>
-80104726:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
-80104729:	39 fa                	cmp    %edi,%edx
-8010472b:	73 23                	jae    80104750 <memmove+0x40>
-8010472d:	8d 41 ff             	lea    -0x1(%ecx),%eax
+80104ca2:	39 d6                	cmp    %edx,%esi
+80104ca4:	73 2a                	jae    80104cd0 <memmove+0x40>
+80104ca6:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
+80104ca9:	39 fa                	cmp    %edi,%edx
+80104cab:	73 23                	jae    80104cd0 <memmove+0x40>
+80104cad:	8d 41 ff             	lea    -0x1(%ecx),%eax
     s += n;
     d += n;
     while(n-- > 0)
-80104730:	85 c9                	test   %ecx,%ecx
-80104732:	74 13                	je     80104747 <memmove+0x37>
-80104734:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104cb0:	85 c9                	test   %ecx,%ecx
+80104cb2:	74 13                	je     80104cc7 <memmove+0x37>
+80104cb4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       *--d = *--s;
-80104738:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
-8010473c:	88 0c 02             	mov    %cl,(%edx,%eax,1)
+80104cb8:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+80104cbc:	88 0c 02             	mov    %cl,(%edx,%eax,1)
     while(n-- > 0)
-8010473f:	83 e8 01             	sub    $0x1,%eax
-80104742:	83 f8 ff             	cmp    $0xffffffff,%eax
-80104745:	75 f1                	jne    80104738 <memmove+0x28>
+80104cbf:	83 e8 01             	sub    $0x1,%eax
+80104cc2:	83 f8 ff             	cmp    $0xffffffff,%eax
+80104cc5:	75 f1                	jne    80104cb8 <memmove+0x28>
   } else
     while(n-- > 0)
       *d++ = *s++;
 
   return dst;
 }
-80104747:	5e                   	pop    %esi
-80104748:	89 d0                	mov    %edx,%eax
-8010474a:	5f                   	pop    %edi
-8010474b:	5d                   	pop    %ebp
-8010474c:	c3                   	ret    
-8010474d:	8d 76 00             	lea    0x0(%esi),%esi
+80104cc7:	5e                   	pop    %esi
+80104cc8:	89 d0                	mov    %edx,%eax
+80104cca:	5f                   	pop    %edi
+80104ccb:	5d                   	pop    %ebp
+80104ccc:	c3                   	ret    
+80104ccd:	8d 76 00             	lea    0x0(%esi),%esi
     while(n-- > 0)
-80104750:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
-80104753:	89 d7                	mov    %edx,%edi
-80104755:	85 c9                	test   %ecx,%ecx
-80104757:	74 ee                	je     80104747 <memmove+0x37>
-80104759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104cd0:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
+80104cd3:	89 d7                	mov    %edx,%edi
+80104cd5:	85 c9                	test   %ecx,%ecx
+80104cd7:	74 ee                	je     80104cc7 <memmove+0x37>
+80104cd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       *d++ = *s++;
-80104760:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+80104ce0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
     while(n-- > 0)
-80104761:	39 f0                	cmp    %esi,%eax
-80104763:	75 fb                	jne    80104760 <memmove+0x50>
+80104ce1:	39 f0                	cmp    %esi,%eax
+80104ce3:	75 fb                	jne    80104ce0 <memmove+0x50>
 }
-80104765:	5e                   	pop    %esi
-80104766:	89 d0                	mov    %edx,%eax
-80104768:	5f                   	pop    %edi
-80104769:	5d                   	pop    %ebp
-8010476a:	c3                   	ret    
-8010476b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010476f:	90                   	nop
+80104ce5:	5e                   	pop    %esi
+80104ce6:	89 d0                	mov    %edx,%eax
+80104ce8:	5f                   	pop    %edi
+80104ce9:	5d                   	pop    %ebp
+80104cea:	c3                   	ret    
+80104ceb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104cef:	90                   	nop
 
-80104770 <memcpy>:
+80104cf0 <memcpy>:
 
 // memcpy exists to placate GCC.  Use memmove.
 void*
 memcpy(void *dst, const void *src, uint n)
 {
-80104770:	f3 0f 1e fb          	endbr32 
+80104cf0:	f3 0f 1e fb          	endbr32 
   return memmove(dst, src, n);
-80104774:	eb 9a                	jmp    80104710 <memmove>
-80104776:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010477d:	8d 76 00             	lea    0x0(%esi),%esi
+80104cf4:	eb 9a                	jmp    80104c90 <memmove>
+80104cf6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104cfd:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104780 <strncmp>:
+80104d00 <strncmp>:
 }
 
 int
 strncmp(const char *p, const char *q, uint n)
 {
-80104780:	f3 0f 1e fb          	endbr32 
-80104784:	55                   	push   %ebp
-80104785:	89 e5                	mov    %esp,%ebp
-80104787:	56                   	push   %esi
-80104788:	8b 75 10             	mov    0x10(%ebp),%esi
-8010478b:	8b 4d 08             	mov    0x8(%ebp),%ecx
-8010478e:	53                   	push   %ebx
-8010478f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104d00:	f3 0f 1e fb          	endbr32 
+80104d04:	55                   	push   %ebp
+80104d05:	89 e5                	mov    %esp,%ebp
+80104d07:	56                   	push   %esi
+80104d08:	8b 75 10             	mov    0x10(%ebp),%esi
+80104d0b:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80104d0e:	53                   	push   %ebx
+80104d0f:	8b 45 0c             	mov    0xc(%ebp),%eax
   while(n > 0 && *p && *p == *q)
-80104792:	85 f6                	test   %esi,%esi
-80104794:	74 32                	je     801047c8 <strncmp+0x48>
-80104796:	01 c6                	add    %eax,%esi
-80104798:	eb 14                	jmp    801047ae <strncmp+0x2e>
-8010479a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801047a0:	38 da                	cmp    %bl,%dl
-801047a2:	75 14                	jne    801047b8 <strncmp+0x38>
+80104d12:	85 f6                	test   %esi,%esi
+80104d14:	74 32                	je     80104d48 <strncmp+0x48>
+80104d16:	01 c6                	add    %eax,%esi
+80104d18:	eb 14                	jmp    80104d2e <strncmp+0x2e>
+80104d1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104d20:	38 da                	cmp    %bl,%dl
+80104d22:	75 14                	jne    80104d38 <strncmp+0x38>
     n--, p++, q++;
-801047a4:	83 c0 01             	add    $0x1,%eax
-801047a7:	83 c1 01             	add    $0x1,%ecx
+80104d24:	83 c0 01             	add    $0x1,%eax
+80104d27:	83 c1 01             	add    $0x1,%ecx
   while(n > 0 && *p && *p == *q)
-801047aa:	39 f0                	cmp    %esi,%eax
-801047ac:	74 1a                	je     801047c8 <strncmp+0x48>
-801047ae:	0f b6 11             	movzbl (%ecx),%edx
-801047b1:	0f b6 18             	movzbl (%eax),%ebx
-801047b4:	84 d2                	test   %dl,%dl
-801047b6:	75 e8                	jne    801047a0 <strncmp+0x20>
+80104d2a:	39 f0                	cmp    %esi,%eax
+80104d2c:	74 1a                	je     80104d48 <strncmp+0x48>
+80104d2e:	0f b6 11             	movzbl (%ecx),%edx
+80104d31:	0f b6 18             	movzbl (%eax),%ebx
+80104d34:	84 d2                	test   %dl,%dl
+80104d36:	75 e8                	jne    80104d20 <strncmp+0x20>
   if(n == 0)
     return 0;
   return (uchar)*p - (uchar)*q;
-801047b8:	0f b6 c2             	movzbl %dl,%eax
-801047bb:	29 d8                	sub    %ebx,%eax
+80104d38:	0f b6 c2             	movzbl %dl,%eax
+80104d3b:	29 d8                	sub    %ebx,%eax
 }
-801047bd:	5b                   	pop    %ebx
-801047be:	5e                   	pop    %esi
-801047bf:	5d                   	pop    %ebp
-801047c0:	c3                   	ret    
-801047c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801047c8:	5b                   	pop    %ebx
+80104d3d:	5b                   	pop    %ebx
+80104d3e:	5e                   	pop    %esi
+80104d3f:	5d                   	pop    %ebp
+80104d40:	c3                   	ret    
+80104d41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104d48:	5b                   	pop    %ebx
     return 0;
-801047c9:	31 c0                	xor    %eax,%eax
+80104d49:	31 c0                	xor    %eax,%eax
 }
-801047cb:	5e                   	pop    %esi
-801047cc:	5d                   	pop    %ebp
-801047cd:	c3                   	ret    
-801047ce:	66 90                	xchg   %ax,%ax
+80104d4b:	5e                   	pop    %esi
+80104d4c:	5d                   	pop    %ebp
+80104d4d:	c3                   	ret    
+80104d4e:	66 90                	xchg   %ax,%ax
 
-801047d0 <strncpy>:
+80104d50 <strncpy>:
 
 char*
 strncpy(char *s, const char *t, int n)
 {
-801047d0:	f3 0f 1e fb          	endbr32 
-801047d4:	55                   	push   %ebp
-801047d5:	89 e5                	mov    %esp,%ebp
-801047d7:	57                   	push   %edi
-801047d8:	56                   	push   %esi
-801047d9:	8b 75 08             	mov    0x8(%ebp),%esi
-801047dc:	53                   	push   %ebx
-801047dd:	8b 45 10             	mov    0x10(%ebp),%eax
+80104d50:	f3 0f 1e fb          	endbr32 
+80104d54:	55                   	push   %ebp
+80104d55:	89 e5                	mov    %esp,%ebp
+80104d57:	57                   	push   %edi
+80104d58:	56                   	push   %esi
+80104d59:	8b 75 08             	mov    0x8(%ebp),%esi
+80104d5c:	53                   	push   %ebx
+80104d5d:	8b 45 10             	mov    0x10(%ebp),%eax
   char *os;
 
   os = s;
   while(n-- > 0 && (*s++ = *t++) != 0)
-801047e0:	89 f2                	mov    %esi,%edx
-801047e2:	eb 1b                	jmp    801047ff <strncpy+0x2f>
-801047e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801047e8:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-801047ec:	8b 7d 0c             	mov    0xc(%ebp),%edi
-801047ef:	83 c2 01             	add    $0x1,%edx
-801047f2:	0f b6 7f ff          	movzbl -0x1(%edi),%edi
-801047f6:	89 f9                	mov    %edi,%ecx
-801047f8:	88 4a ff             	mov    %cl,-0x1(%edx)
-801047fb:	84 c9                	test   %cl,%cl
-801047fd:	74 09                	je     80104808 <strncpy+0x38>
-801047ff:	89 c3                	mov    %eax,%ebx
-80104801:	83 e8 01             	sub    $0x1,%eax
-80104804:	85 db                	test   %ebx,%ebx
-80104806:	7f e0                	jg     801047e8 <strncpy+0x18>
+80104d60:	89 f2                	mov    %esi,%edx
+80104d62:	eb 1b                	jmp    80104d7f <strncpy+0x2f>
+80104d64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104d68:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+80104d6c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+80104d6f:	83 c2 01             	add    $0x1,%edx
+80104d72:	0f b6 7f ff          	movzbl -0x1(%edi),%edi
+80104d76:	89 f9                	mov    %edi,%ecx
+80104d78:	88 4a ff             	mov    %cl,-0x1(%edx)
+80104d7b:	84 c9                	test   %cl,%cl
+80104d7d:	74 09                	je     80104d88 <strncpy+0x38>
+80104d7f:	89 c3                	mov    %eax,%ebx
+80104d81:	83 e8 01             	sub    $0x1,%eax
+80104d84:	85 db                	test   %ebx,%ebx
+80104d86:	7f e0                	jg     80104d68 <strncpy+0x18>
     ;
   while(n-- > 0)
-80104808:	89 d1                	mov    %edx,%ecx
-8010480a:	85 c0                	test   %eax,%eax
-8010480c:	7e 15                	jle    80104823 <strncpy+0x53>
-8010480e:	66 90                	xchg   %ax,%ax
+80104d88:	89 d1                	mov    %edx,%ecx
+80104d8a:	85 c0                	test   %eax,%eax
+80104d8c:	7e 15                	jle    80104da3 <strncpy+0x53>
+80104d8e:	66 90                	xchg   %ax,%ax
     *s++ = 0;
-80104810:	83 c1 01             	add    $0x1,%ecx
-80104813:	c6 41 ff 00          	movb   $0x0,-0x1(%ecx)
+80104d90:	83 c1 01             	add    $0x1,%ecx
+80104d93:	c6 41 ff 00          	movb   $0x0,-0x1(%ecx)
   while(n-- > 0)
-80104817:	89 c8                	mov    %ecx,%eax
-80104819:	f7 d0                	not    %eax
-8010481b:	01 d0                	add    %edx,%eax
-8010481d:	01 d8                	add    %ebx,%eax
-8010481f:	85 c0                	test   %eax,%eax
-80104821:	7f ed                	jg     80104810 <strncpy+0x40>
+80104d97:	89 c8                	mov    %ecx,%eax
+80104d99:	f7 d0                	not    %eax
+80104d9b:	01 d0                	add    %edx,%eax
+80104d9d:	01 d8                	add    %ebx,%eax
+80104d9f:	85 c0                	test   %eax,%eax
+80104da1:	7f ed                	jg     80104d90 <strncpy+0x40>
   return os;
 }
-80104823:	5b                   	pop    %ebx
-80104824:	89 f0                	mov    %esi,%eax
-80104826:	5e                   	pop    %esi
-80104827:	5f                   	pop    %edi
-80104828:	5d                   	pop    %ebp
-80104829:	c3                   	ret    
-8010482a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104da3:	5b                   	pop    %ebx
+80104da4:	89 f0                	mov    %esi,%eax
+80104da6:	5e                   	pop    %esi
+80104da7:	5f                   	pop    %edi
+80104da8:	5d                   	pop    %ebp
+80104da9:	c3                   	ret    
+80104daa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104830 <safestrcpy>:
+80104db0 <safestrcpy>:
 
 // Like strncpy but guaranteed to NUL-terminate.
 char*
 safestrcpy(char *s, const char *t, int n)
 {
-80104830:	f3 0f 1e fb          	endbr32 
-80104834:	55                   	push   %ebp
-80104835:	89 e5                	mov    %esp,%ebp
-80104837:	56                   	push   %esi
-80104838:	8b 55 10             	mov    0x10(%ebp),%edx
-8010483b:	8b 75 08             	mov    0x8(%ebp),%esi
-8010483e:	53                   	push   %ebx
-8010483f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104db0:	f3 0f 1e fb          	endbr32 
+80104db4:	55                   	push   %ebp
+80104db5:	89 e5                	mov    %esp,%ebp
+80104db7:	56                   	push   %esi
+80104db8:	8b 55 10             	mov    0x10(%ebp),%edx
+80104dbb:	8b 75 08             	mov    0x8(%ebp),%esi
+80104dbe:	53                   	push   %ebx
+80104dbf:	8b 45 0c             	mov    0xc(%ebp),%eax
   char *os;
 
   os = s;
   if(n <= 0)
-80104842:	85 d2                	test   %edx,%edx
-80104844:	7e 21                	jle    80104867 <safestrcpy+0x37>
-80104846:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
-8010484a:	89 f2                	mov    %esi,%edx
-8010484c:	eb 12                	jmp    80104860 <safestrcpy+0x30>
-8010484e:	66 90                	xchg   %ax,%ax
+80104dc2:	85 d2                	test   %edx,%edx
+80104dc4:	7e 21                	jle    80104de7 <safestrcpy+0x37>
+80104dc6:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
+80104dca:	89 f2                	mov    %esi,%edx
+80104dcc:	eb 12                	jmp    80104de0 <safestrcpy+0x30>
+80104dce:	66 90                	xchg   %ax,%ax
     return os;
   while(--n > 0 && (*s++ = *t++) != 0)
-80104850:	0f b6 08             	movzbl (%eax),%ecx
-80104853:	83 c0 01             	add    $0x1,%eax
-80104856:	83 c2 01             	add    $0x1,%edx
-80104859:	88 4a ff             	mov    %cl,-0x1(%edx)
-8010485c:	84 c9                	test   %cl,%cl
-8010485e:	74 04                	je     80104864 <safestrcpy+0x34>
-80104860:	39 d8                	cmp    %ebx,%eax
-80104862:	75 ec                	jne    80104850 <safestrcpy+0x20>
+80104dd0:	0f b6 08             	movzbl (%eax),%ecx
+80104dd3:	83 c0 01             	add    $0x1,%eax
+80104dd6:	83 c2 01             	add    $0x1,%edx
+80104dd9:	88 4a ff             	mov    %cl,-0x1(%edx)
+80104ddc:	84 c9                	test   %cl,%cl
+80104dde:	74 04                	je     80104de4 <safestrcpy+0x34>
+80104de0:	39 d8                	cmp    %ebx,%eax
+80104de2:	75 ec                	jne    80104dd0 <safestrcpy+0x20>
     ;
   *s = 0;
-80104864:	c6 02 00             	movb   $0x0,(%edx)
+80104de4:	c6 02 00             	movb   $0x0,(%edx)
   return os;
 }
-80104867:	89 f0                	mov    %esi,%eax
-80104869:	5b                   	pop    %ebx
-8010486a:	5e                   	pop    %esi
-8010486b:	5d                   	pop    %ebp
-8010486c:	c3                   	ret    
-8010486d:	8d 76 00             	lea    0x0(%esi),%esi
+80104de7:	89 f0                	mov    %esi,%eax
+80104de9:	5b                   	pop    %ebx
+80104dea:	5e                   	pop    %esi
+80104deb:	5d                   	pop    %ebp
+80104dec:	c3                   	ret    
+80104ded:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104870 <strlen>:
+80104df0 <strlen>:
 
 int
 strlen(const char *s)
 {
-80104870:	f3 0f 1e fb          	endbr32 
-80104874:	55                   	push   %ebp
+80104df0:	f3 0f 1e fb          	endbr32 
+80104df4:	55                   	push   %ebp
   int n;
 
   for(n = 0; s[n]; n++)
-80104875:	31 c0                	xor    %eax,%eax
+80104df5:	31 c0                	xor    %eax,%eax
 {
-80104877:	89 e5                	mov    %esp,%ebp
-80104879:	8b 55 08             	mov    0x8(%ebp),%edx
+80104df7:	89 e5                	mov    %esp,%ebp
+80104df9:	8b 55 08             	mov    0x8(%ebp),%edx
   for(n = 0; s[n]; n++)
-8010487c:	80 3a 00             	cmpb   $0x0,(%edx)
-8010487f:	74 10                	je     80104891 <strlen+0x21>
-80104881:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104888:	83 c0 01             	add    $0x1,%eax
-8010488b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-8010488f:	75 f7                	jne    80104888 <strlen+0x18>
+80104dfc:	80 3a 00             	cmpb   $0x0,(%edx)
+80104dff:	74 10                	je     80104e11 <strlen+0x21>
+80104e01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104e08:	83 c0 01             	add    $0x1,%eax
+80104e0b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+80104e0f:	75 f7                	jne    80104e08 <strlen+0x18>
     ;
   return n;
 }
-80104891:	5d                   	pop    %ebp
-80104892:	c3                   	ret    
+80104e11:	5d                   	pop    %ebp
+80104e12:	c3                   	ret    
 
-80104893 <swtch>:
+80104e13 <swtch>:
 # a struct context, and save its address in *old.
 # Switch stacks to new and pop previously-saved registers.
 
 .globl swtch
 swtch:
   movl 4(%esp), %eax
-80104893:	8b 44 24 04          	mov    0x4(%esp),%eax
+80104e13:	8b 44 24 04          	mov    0x4(%esp),%eax
   movl 8(%esp), %edx
-80104897:	8b 54 24 08          	mov    0x8(%esp),%edx
+80104e17:	8b 54 24 08          	mov    0x8(%esp),%edx
 
   # Save old callee-saved registers
   pushl %ebp
-8010489b:	55                   	push   %ebp
+80104e1b:	55                   	push   %ebp
   pushl %ebx
-8010489c:	53                   	push   %ebx
+80104e1c:	53                   	push   %ebx
   pushl %esi
-8010489d:	56                   	push   %esi
+80104e1d:	56                   	push   %esi
   pushl %edi
-8010489e:	57                   	push   %edi
+80104e1e:	57                   	push   %edi
 
   # Switch stacks
   movl %esp, (%eax)
-8010489f:	89 20                	mov    %esp,(%eax)
+80104e1f:	89 20                	mov    %esp,(%eax)
   movl %edx, %esp
-801048a1:	89 d4                	mov    %edx,%esp
+80104e21:	89 d4                	mov    %edx,%esp
 
   # Load new callee-saved registers
   popl %edi
-801048a3:	5f                   	pop    %edi
+80104e23:	5f                   	pop    %edi
   popl %esi
-801048a4:	5e                   	pop    %esi
+80104e24:	5e                   	pop    %esi
   popl %ebx
-801048a5:	5b                   	pop    %ebx
+80104e25:	5b                   	pop    %ebx
   popl %ebp
-801048a6:	5d                   	pop    %ebp
+80104e26:	5d                   	pop    %ebp
   ret
-801048a7:	c3                   	ret    
-801048a8:	66 90                	xchg   %ax,%ax
-801048aa:	66 90                	xchg   %ax,%ax
-801048ac:	66 90                	xchg   %ax,%ax
-801048ae:	66 90                	xchg   %ax,%ax
+80104e27:	c3                   	ret    
+80104e28:	66 90                	xchg   %ax,%ax
+80104e2a:	66 90                	xchg   %ax,%ax
+80104e2c:	66 90                	xchg   %ax,%ax
+80104e2e:	66 90                	xchg   %ax,%ax
 
-801048b0 <fetchint>:
+80104e30 <fetchint>:
 // to a saved program counter, and then the first argument.
 
 // Fetch the int at addr from the current process.
 int
 fetchint(uint addr, int *ip)
 {
-801048b0:	f3 0f 1e fb          	endbr32 
-801048b4:	55                   	push   %ebp
-801048b5:	89 e5                	mov    %esp,%ebp
-801048b7:	53                   	push   %ebx
-801048b8:	83 ec 04             	sub    $0x4,%esp
-801048bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104e30:	f3 0f 1e fb          	endbr32 
+80104e34:	55                   	push   %ebp
+80104e35:	89 e5                	mov    %esp,%ebp
+80104e37:	53                   	push   %ebx
+80104e38:	83 ec 04             	sub    $0x4,%esp
+80104e3b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct proc *curproc = myproc();
-801048be:	e8 9d f0 ff ff       	call   80103960 <myproc>
+80104e3e:	e8 1d ee ff ff       	call   80103c60 <myproc>
 
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-801048c3:	8b 00                	mov    (%eax),%eax
-801048c5:	39 d8                	cmp    %ebx,%eax
-801048c7:	76 17                	jbe    801048e0 <fetchint+0x30>
-801048c9:	8d 53 04             	lea    0x4(%ebx),%edx
-801048cc:	39 d0                	cmp    %edx,%eax
-801048ce:	72 10                	jb     801048e0 <fetchint+0x30>
+80104e43:	8b 00                	mov    (%eax),%eax
+80104e45:	39 d8                	cmp    %ebx,%eax
+80104e47:	76 17                	jbe    80104e60 <fetchint+0x30>
+80104e49:	8d 53 04             	lea    0x4(%ebx),%edx
+80104e4c:	39 d0                	cmp    %edx,%eax
+80104e4e:	72 10                	jb     80104e60 <fetchint+0x30>
     return -1;
   *ip = *(int*)(addr);
-801048d0:	8b 45 0c             	mov    0xc(%ebp),%eax
-801048d3:	8b 13                	mov    (%ebx),%edx
-801048d5:	89 10                	mov    %edx,(%eax)
+80104e50:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104e53:	8b 13                	mov    (%ebx),%edx
+80104e55:	89 10                	mov    %edx,(%eax)
   return 0;
-801048d7:	31 c0                	xor    %eax,%eax
+80104e57:	31 c0                	xor    %eax,%eax
 }
-801048d9:	83 c4 04             	add    $0x4,%esp
-801048dc:	5b                   	pop    %ebx
-801048dd:	5d                   	pop    %ebp
-801048de:	c3                   	ret    
-801048df:	90                   	nop
-    return -1;
-801048e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801048e5:	eb f2                	jmp    801048d9 <fetchint+0x29>
-801048e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801048ee:	66 90                	xchg   %ax,%ax
+80104e59:	83 c4 04             	add    $0x4,%esp
+80104e5c:	5b                   	pop    %ebx
+80104e5d:	5d                   	pop    %ebp
+80104e5e:	c3                   	ret    
+80104e5f:	90                   	nop
+    return -1;
+80104e60:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104e65:	eb f2                	jmp    80104e59 <fetchint+0x29>
+80104e67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104e6e:	66 90                	xchg   %ax,%ax
 
-801048f0 <fetchstr>:
+80104e70 <fetchstr>:
 // Fetch the nul-terminated string at addr from the current process.
 // Doesn't actually copy the string - just sets *pp to point at it.
 // Returns length of string, not including nul.
 int
 fetchstr(uint addr, char **pp)
 {
-801048f0:	f3 0f 1e fb          	endbr32 
-801048f4:	55                   	push   %ebp
-801048f5:	89 e5                	mov    %esp,%ebp
-801048f7:	53                   	push   %ebx
-801048f8:	83 ec 04             	sub    $0x4,%esp
-801048fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104e70:	f3 0f 1e fb          	endbr32 
+80104e74:	55                   	push   %ebp
+80104e75:	89 e5                	mov    %esp,%ebp
+80104e77:	53                   	push   %ebx
+80104e78:	83 ec 04             	sub    $0x4,%esp
+80104e7b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   char *s, *ep;
   struct proc *curproc = myproc();
-801048fe:	e8 5d f0 ff ff       	call   80103960 <myproc>
+80104e7e:	e8 dd ed ff ff       	call   80103c60 <myproc>
 
   if(addr >= curproc->sz)
-80104903:	39 18                	cmp    %ebx,(%eax)
-80104905:	76 31                	jbe    80104938 <fetchstr+0x48>
+80104e83:	39 18                	cmp    %ebx,(%eax)
+80104e85:	76 31                	jbe    80104eb8 <fetchstr+0x48>
     return -1;
   *pp = (char*)addr;
-80104907:	8b 55 0c             	mov    0xc(%ebp),%edx
-8010490a:	89 1a                	mov    %ebx,(%edx)
+80104e87:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104e8a:	89 1a                	mov    %ebx,(%edx)
   ep = (char*)curproc->sz;
-8010490c:	8b 10                	mov    (%eax),%edx
+80104e8c:	8b 10                	mov    (%eax),%edx
   for(s = *pp; s < ep; s++){
-8010490e:	39 d3                	cmp    %edx,%ebx
-80104910:	73 26                	jae    80104938 <fetchstr+0x48>
-80104912:	89 d8                	mov    %ebx,%eax
-80104914:	eb 11                	jmp    80104927 <fetchstr+0x37>
-80104916:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010491d:	8d 76 00             	lea    0x0(%esi),%esi
-80104920:	83 c0 01             	add    $0x1,%eax
-80104923:	39 c2                	cmp    %eax,%edx
-80104925:	76 11                	jbe    80104938 <fetchstr+0x48>
+80104e8e:	39 d3                	cmp    %edx,%ebx
+80104e90:	73 26                	jae    80104eb8 <fetchstr+0x48>
+80104e92:	89 d8                	mov    %ebx,%eax
+80104e94:	eb 11                	jmp    80104ea7 <fetchstr+0x37>
+80104e96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104e9d:	8d 76 00             	lea    0x0(%esi),%esi
+80104ea0:	83 c0 01             	add    $0x1,%eax
+80104ea3:	39 c2                	cmp    %eax,%edx
+80104ea5:	76 11                	jbe    80104eb8 <fetchstr+0x48>
     if(*s == 0)
-80104927:	80 38 00             	cmpb   $0x0,(%eax)
-8010492a:	75 f4                	jne    80104920 <fetchstr+0x30>
+80104ea7:	80 38 00             	cmpb   $0x0,(%eax)
+80104eaa:	75 f4                	jne    80104ea0 <fetchstr+0x30>
       return s - *pp;
   }
   return -1;
 }
-8010492c:	83 c4 04             	add    $0x4,%esp
+80104eac:	83 c4 04             	add    $0x4,%esp
       return s - *pp;
-8010492f:	29 d8                	sub    %ebx,%eax
+80104eaf:	29 d8                	sub    %ebx,%eax
 }
-80104931:	5b                   	pop    %ebx
-80104932:	5d                   	pop    %ebp
-80104933:	c3                   	ret    
-80104934:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104938:	83 c4 04             	add    $0x4,%esp
-    return -1;
-8010493b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104940:	5b                   	pop    %ebx
-80104941:	5d                   	pop    %ebp
-80104942:	c3                   	ret    
-80104943:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010494a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104eb1:	5b                   	pop    %ebx
+80104eb2:	5d                   	pop    %ebp
+80104eb3:	c3                   	ret    
+80104eb4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104eb8:	83 c4 04             	add    $0x4,%esp
+    return -1;
+80104ebb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104ec0:	5b                   	pop    %ebx
+80104ec1:	5d                   	pop    %ebp
+80104ec2:	c3                   	ret    
+80104ec3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104eca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104950 <argint>:
+80104ed0 <argint>:
 
 // Fetch the nth 32-bit system call argument.
 int
 argint(int n, int *ip)
 {
-80104950:	f3 0f 1e fb          	endbr32 
-80104954:	55                   	push   %ebp
-80104955:	89 e5                	mov    %esp,%ebp
-80104957:	56                   	push   %esi
-80104958:	53                   	push   %ebx
+80104ed0:	f3 0f 1e fb          	endbr32 
+80104ed4:	55                   	push   %ebp
+80104ed5:	89 e5                	mov    %esp,%ebp
+80104ed7:	56                   	push   %esi
+80104ed8:	53                   	push   %ebx
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104959:	e8 02 f0 ff ff       	call   80103960 <myproc>
-8010495e:	8b 55 08             	mov    0x8(%ebp),%edx
-80104961:	8b 40 18             	mov    0x18(%eax),%eax
-80104964:	8b 40 44             	mov    0x44(%eax),%eax
-80104967:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+80104ed9:	e8 82 ed ff ff       	call   80103c60 <myproc>
+80104ede:	8b 55 08             	mov    0x8(%ebp),%edx
+80104ee1:	8b 40 18             	mov    0x18(%eax),%eax
+80104ee4:	8b 40 44             	mov    0x44(%eax),%eax
+80104ee7:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
   struct proc *curproc = myproc();
-8010496a:	e8 f1 ef ff ff       	call   80103960 <myproc>
+80104eea:	e8 71 ed ff ff       	call   80103c60 <myproc>
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-8010496f:	8d 73 04             	lea    0x4(%ebx),%esi
+80104eef:	8d 73 04             	lea    0x4(%ebx),%esi
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-80104972:	8b 00                	mov    (%eax),%eax
-80104974:	39 c6                	cmp    %eax,%esi
-80104976:	73 18                	jae    80104990 <argint+0x40>
-80104978:	8d 53 08             	lea    0x8(%ebx),%edx
-8010497b:	39 d0                	cmp    %edx,%eax
-8010497d:	72 11                	jb     80104990 <argint+0x40>
+80104ef2:	8b 00                	mov    (%eax),%eax
+80104ef4:	39 c6                	cmp    %eax,%esi
+80104ef6:	73 18                	jae    80104f10 <argint+0x40>
+80104ef8:	8d 53 08             	lea    0x8(%ebx),%edx
+80104efb:	39 d0                	cmp    %edx,%eax
+80104efd:	72 11                	jb     80104f10 <argint+0x40>
   *ip = *(int*)(addr);
-8010497f:	8b 45 0c             	mov    0xc(%ebp),%eax
-80104982:	8b 53 04             	mov    0x4(%ebx),%edx
-80104985:	89 10                	mov    %edx,(%eax)
+80104eff:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104f02:	8b 53 04             	mov    0x4(%ebx),%edx
+80104f05:	89 10                	mov    %edx,(%eax)
   return 0;
-80104987:	31 c0                	xor    %eax,%eax
+80104f07:	31 c0                	xor    %eax,%eax
 }
-80104989:	5b                   	pop    %ebx
-8010498a:	5e                   	pop    %esi
-8010498b:	5d                   	pop    %ebp
-8010498c:	c3                   	ret    
-8010498d:	8d 76 00             	lea    0x0(%esi),%esi
+80104f09:	5b                   	pop    %ebx
+80104f0a:	5e                   	pop    %esi
+80104f0b:	5d                   	pop    %ebp
+80104f0c:	c3                   	ret    
+80104f0d:	8d 76 00             	lea    0x0(%esi),%esi
     return -1;
-80104990:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104f10:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104995:	eb f2                	jmp    80104989 <argint+0x39>
-80104997:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010499e:	66 90                	xchg   %ax,%ax
+80104f15:	eb f2                	jmp    80104f09 <argint+0x39>
+80104f17:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104f1e:	66 90                	xchg   %ax,%ax
 
-801049a0 <argptr>:
+80104f20 <argptr>:
 // Fetch the nth word-sized system call argument as a pointer
 // to a block of memory of size bytes.  Check that the pointer
 // lies within the process address space.
 int
 argptr(int n, char **pp, int size)
 {
-801049a0:	f3 0f 1e fb          	endbr32 
-801049a4:	55                   	push   %ebp
-801049a5:	89 e5                	mov    %esp,%ebp
-801049a7:	56                   	push   %esi
-801049a8:	53                   	push   %ebx
-801049a9:	83 ec 10             	sub    $0x10,%esp
-801049ac:	8b 5d 10             	mov    0x10(%ebp),%ebx
+80104f20:	f3 0f 1e fb          	endbr32 
+80104f24:	55                   	push   %ebp
+80104f25:	89 e5                	mov    %esp,%ebp
+80104f27:	56                   	push   %esi
+80104f28:	53                   	push   %ebx
+80104f29:	83 ec 10             	sub    $0x10,%esp
+80104f2c:	8b 5d 10             	mov    0x10(%ebp),%ebx
   int i;
   struct proc *curproc = myproc();
-801049af:	e8 ac ef ff ff       	call   80103960 <myproc>
+80104f2f:	e8 2c ed ff ff       	call   80103c60 <myproc>
  
   if(argint(n, &i) < 0)
-801049b4:	83 ec 08             	sub    $0x8,%esp
+80104f34:	83 ec 08             	sub    $0x8,%esp
   struct proc *curproc = myproc();
-801049b7:	89 c6                	mov    %eax,%esi
+80104f37:	89 c6                	mov    %eax,%esi
   if(argint(n, &i) < 0)
-801049b9:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801049bc:	50                   	push   %eax
-801049bd:	ff 75 08             	pushl  0x8(%ebp)
-801049c0:	e8 8b ff ff ff       	call   80104950 <argint>
+80104f39:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104f3c:	50                   	push   %eax
+80104f3d:	ff 75 08             	pushl  0x8(%ebp)
+80104f40:	e8 8b ff ff ff       	call   80104ed0 <argint>
     return -1;
   if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
-801049c5:	83 c4 10             	add    $0x10,%esp
-801049c8:	85 c0                	test   %eax,%eax
-801049ca:	78 24                	js     801049f0 <argptr+0x50>
-801049cc:	85 db                	test   %ebx,%ebx
-801049ce:	78 20                	js     801049f0 <argptr+0x50>
-801049d0:	8b 16                	mov    (%esi),%edx
-801049d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801049d5:	39 c2                	cmp    %eax,%edx
-801049d7:	76 17                	jbe    801049f0 <argptr+0x50>
-801049d9:	01 c3                	add    %eax,%ebx
-801049db:	39 da                	cmp    %ebx,%edx
-801049dd:	72 11                	jb     801049f0 <argptr+0x50>
+80104f45:	83 c4 10             	add    $0x10,%esp
+80104f48:	85 c0                	test   %eax,%eax
+80104f4a:	78 24                	js     80104f70 <argptr+0x50>
+80104f4c:	85 db                	test   %ebx,%ebx
+80104f4e:	78 20                	js     80104f70 <argptr+0x50>
+80104f50:	8b 16                	mov    (%esi),%edx
+80104f52:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104f55:	39 c2                	cmp    %eax,%edx
+80104f57:	76 17                	jbe    80104f70 <argptr+0x50>
+80104f59:	01 c3                	add    %eax,%ebx
+80104f5b:	39 da                	cmp    %ebx,%edx
+80104f5d:	72 11                	jb     80104f70 <argptr+0x50>
     return -1;
   *pp = (char*)i;
-801049df:	8b 55 0c             	mov    0xc(%ebp),%edx
-801049e2:	89 02                	mov    %eax,(%edx)
+80104f5f:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104f62:	89 02                	mov    %eax,(%edx)
   return 0;
-801049e4:	31 c0                	xor    %eax,%eax
+80104f64:	31 c0                	xor    %eax,%eax
 }
-801049e6:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801049e9:	5b                   	pop    %ebx
-801049ea:	5e                   	pop    %esi
-801049eb:	5d                   	pop    %ebp
-801049ec:	c3                   	ret    
-801049ed:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-801049f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801049f5:	eb ef                	jmp    801049e6 <argptr+0x46>
-801049f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801049fe:	66 90                	xchg   %ax,%ax
+80104f66:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104f69:	5b                   	pop    %ebx
+80104f6a:	5e                   	pop    %esi
+80104f6b:	5d                   	pop    %ebp
+80104f6c:	c3                   	ret    
+80104f6d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80104f70:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104f75:	eb ef                	jmp    80104f66 <argptr+0x46>
+80104f77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104f7e:	66 90                	xchg   %ax,%ax
 
-80104a00 <argstr>:
+80104f80 <argstr>:
 // Check that the pointer is valid and the string is nul-terminated.
 // (There is no shared writable memory, so the string can't change
 // between this check and being used by the kernel.)
 int
 argstr(int n, char **pp)
 {
-80104a00:	f3 0f 1e fb          	endbr32 
-80104a04:	55                   	push   %ebp
-80104a05:	89 e5                	mov    %esp,%ebp
-80104a07:	83 ec 20             	sub    $0x20,%esp
+80104f80:	f3 0f 1e fb          	endbr32 
+80104f84:	55                   	push   %ebp
+80104f85:	89 e5                	mov    %esp,%ebp
+80104f87:	83 ec 20             	sub    $0x20,%esp
   int addr;
   if(argint(n, &addr) < 0)
-80104a0a:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104a0d:	50                   	push   %eax
-80104a0e:	ff 75 08             	pushl  0x8(%ebp)
-80104a11:	e8 3a ff ff ff       	call   80104950 <argint>
-80104a16:	83 c4 10             	add    $0x10,%esp
-80104a19:	85 c0                	test   %eax,%eax
-80104a1b:	78 13                	js     80104a30 <argstr+0x30>
+80104f8a:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104f8d:	50                   	push   %eax
+80104f8e:	ff 75 08             	pushl  0x8(%ebp)
+80104f91:	e8 3a ff ff ff       	call   80104ed0 <argint>
+80104f96:	83 c4 10             	add    $0x10,%esp
+80104f99:	85 c0                	test   %eax,%eax
+80104f9b:	78 13                	js     80104fb0 <argstr+0x30>
     return -1;
   return fetchstr(addr, pp);
-80104a1d:	83 ec 08             	sub    $0x8,%esp
-80104a20:	ff 75 0c             	pushl  0xc(%ebp)
-80104a23:	ff 75 f4             	pushl  -0xc(%ebp)
-80104a26:	e8 c5 fe ff ff       	call   801048f0 <fetchstr>
-80104a2b:	83 c4 10             	add    $0x10,%esp
-}
-80104a2e:	c9                   	leave  
-80104a2f:	c3                   	ret    
-80104a30:	c9                   	leave  
-    return -1;
-80104a31:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104a36:	c3                   	ret    
-80104a37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104a3e:	66 90                	xchg   %ax,%ax
+80104f9d:	83 ec 08             	sub    $0x8,%esp
+80104fa0:	ff 75 0c             	pushl  0xc(%ebp)
+80104fa3:	ff 75 f4             	pushl  -0xc(%ebp)
+80104fa6:	e8 c5 fe ff ff       	call   80104e70 <fetchstr>
+80104fab:	83 c4 10             	add    $0x10,%esp
+}
+80104fae:	c9                   	leave  
+80104faf:	c3                   	ret    
+80104fb0:	c9                   	leave  
+    return -1;
+80104fb1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104fb6:	c3                   	ret    
+80104fb7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104fbe:	66 90                	xchg   %ax,%ax
 
-80104a40 <syscall>:
-[SYS_close]   sys_close,
+80104fc0 <syscall>:
+[SYS_get_burst_time] sys_get_burst_time,
 };
 
 void
 syscall(void)
 {
-80104a40:	f3 0f 1e fb          	endbr32 
-80104a44:	55                   	push   %ebp
-80104a45:	89 e5                	mov    %esp,%ebp
-80104a47:	53                   	push   %ebx
-80104a48:	83 ec 04             	sub    $0x4,%esp
+80104fc0:	f3 0f 1e fb          	endbr32 
+80104fc4:	55                   	push   %ebp
+80104fc5:	89 e5                	mov    %esp,%ebp
+80104fc7:	53                   	push   %ebx
+80104fc8:	83 ec 04             	sub    $0x4,%esp
   int num;
   struct proc *curproc = myproc();
-80104a4b:	e8 10 ef ff ff       	call   80103960 <myproc>
-80104a50:	89 c3                	mov    %eax,%ebx
+80104fcb:	e8 90 ec ff ff       	call   80103c60 <myproc>
+80104fd0:	89 c3                	mov    %eax,%ebx
 
   num = curproc->tf->eax;
-80104a52:	8b 40 18             	mov    0x18(%eax),%eax
-80104a55:	8b 40 1c             	mov    0x1c(%eax),%eax
+80104fd2:	8b 40 18             	mov    0x18(%eax),%eax
+80104fd5:	8b 40 1c             	mov    0x1c(%eax),%eax
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-80104a58:	8d 50 ff             	lea    -0x1(%eax),%edx
-80104a5b:	83 fa 14             	cmp    $0x14,%edx
-80104a5e:	77 20                	ja     80104a80 <syscall+0x40>
-80104a60:	8b 14 85 a0 77 10 80 	mov    -0x7fef8860(,%eax,4),%edx
-80104a67:	85 d2                	test   %edx,%edx
-80104a69:	74 15                	je     80104a80 <syscall+0x40>
+80104fd8:	8d 50 ff             	lea    -0x1(%eax),%edx
+80104fdb:	83 fa 19             	cmp    $0x19,%edx
+80104fde:	77 20                	ja     80105000 <syscall+0x40>
+80104fe0:	8b 14 85 c0 7d 10 80 	mov    -0x7fef8240(,%eax,4),%edx
+80104fe7:	85 d2                	test   %edx,%edx
+80104fe9:	74 15                	je     80105000 <syscall+0x40>
     curproc->tf->eax = syscalls[num]();
-80104a6b:	ff d2                	call   *%edx
-80104a6d:	89 c2                	mov    %eax,%edx
-80104a6f:	8b 43 18             	mov    0x18(%ebx),%eax
-80104a72:	89 50 1c             	mov    %edx,0x1c(%eax)
+80104feb:	ff d2                	call   *%edx
+80104fed:	89 c2                	mov    %eax,%edx
+80104fef:	8b 43 18             	mov    0x18(%ebx),%eax
+80104ff2:	89 50 1c             	mov    %edx,0x1c(%eax)
   } else {
     cprintf("%d %s: unknown sys call %d\n",
             curproc->pid, curproc->name, num);
     curproc->tf->eax = -1;
   }
 }
-80104a75:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104a78:	c9                   	leave  
-80104a79:	c3                   	ret    
-80104a7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104ff5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104ff8:	c9                   	leave  
+80104ff9:	c3                   	ret    
+80104ffa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     cprintf("%d %s: unknown sys call %d\n",
-80104a80:	50                   	push   %eax
+80105000:	50                   	push   %eax
             curproc->pid, curproc->name, num);
-80104a81:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80105001:	8d 43 6c             	lea    0x6c(%ebx),%eax
     cprintf("%d %s: unknown sys call %d\n",
-80104a84:	50                   	push   %eax
-80104a85:	ff 73 10             	pushl  0x10(%ebx)
-80104a88:	68 7d 77 10 80       	push   $0x8010777d
-80104a8d:	e8 1e bc ff ff       	call   801006b0 <cprintf>
+80105004:	50                   	push   %eax
+80105005:	ff 73 10             	pushl  0x10(%ebx)
+80105008:	68 9d 7d 10 80       	push   $0x80107d9d
+8010500d:	e8 9e b6 ff ff       	call   801006b0 <cprintf>
     curproc->tf->eax = -1;
-80104a92:	8b 43 18             	mov    0x18(%ebx),%eax
-80104a95:	83 c4 10             	add    $0x10,%esp
-80104a98:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
-}
-80104a9f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104aa2:	c9                   	leave  
-80104aa3:	c3                   	ret    
-80104aa4:	66 90                	xchg   %ax,%ax
-80104aa6:	66 90                	xchg   %ax,%ax
-80104aa8:	66 90                	xchg   %ax,%ax
-80104aaa:	66 90                	xchg   %ax,%ax
-80104aac:	66 90                	xchg   %ax,%ax
-80104aae:	66 90                	xchg   %ax,%ax
+80105012:	8b 43 18             	mov    0x18(%ebx),%eax
+80105015:	83 c4 10             	add    $0x10,%esp
+80105018:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
+}
+8010501f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105022:	c9                   	leave  
+80105023:	c3                   	ret    
+80105024:	66 90                	xchg   %ax,%ax
+80105026:	66 90                	xchg   %ax,%ax
+80105028:	66 90                	xchg   %ax,%ax
+8010502a:	66 90                	xchg   %ax,%ax
+8010502c:	66 90                	xchg   %ax,%ax
+8010502e:	66 90                	xchg   %ax,%ax
 
-80104ab0 <create>:
+80105030 <create>:
   return -1;
 }
 
 static struct inode*
 create(char *path, short type, short major, short minor)
 {
-80104ab0:	55                   	push   %ebp
-80104ab1:	89 e5                	mov    %esp,%ebp
-80104ab3:	57                   	push   %edi
-80104ab4:	56                   	push   %esi
+80105030:	55                   	push   %ebp
+80105031:	89 e5                	mov    %esp,%ebp
+80105033:	57                   	push   %edi
+80105034:	56                   	push   %esi
   struct inode *ip, *dp;
   char name[DIRSIZ];
 
   if((dp = nameiparent(path, name)) == 0)
-80104ab5:	8d 7d da             	lea    -0x26(%ebp),%edi
+80105035:	8d 7d da             	lea    -0x26(%ebp),%edi
 {
-80104ab8:	53                   	push   %ebx
-80104ab9:	83 ec 34             	sub    $0x34,%esp
-80104abc:	89 4d d0             	mov    %ecx,-0x30(%ebp)
-80104abf:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80105038:	53                   	push   %ebx
+80105039:	83 ec 34             	sub    $0x34,%esp
+8010503c:	89 4d d0             	mov    %ecx,-0x30(%ebp)
+8010503f:	8b 4d 08             	mov    0x8(%ebp),%ecx
   if((dp = nameiparent(path, name)) == 0)
-80104ac2:	57                   	push   %edi
-80104ac3:	50                   	push   %eax
+80105042:	57                   	push   %edi
+80105043:	50                   	push   %eax
 {
-80104ac4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-80104ac7:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+80105044:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+80105047:	89 4d cc             	mov    %ecx,-0x34(%ebp)
   if((dp = nameiparent(path, name)) == 0)
-80104aca:	e8 81 d5 ff ff       	call   80102050 <nameiparent>
-80104acf:	83 c4 10             	add    $0x10,%esp
-80104ad2:	85 c0                	test   %eax,%eax
-80104ad4:	0f 84 46 01 00 00    	je     80104c20 <create+0x170>
+8010504a:	e8 01 d0 ff ff       	call   80102050 <nameiparent>
+8010504f:	83 c4 10             	add    $0x10,%esp
+80105052:	85 c0                	test   %eax,%eax
+80105054:	0f 84 46 01 00 00    	je     801051a0 <create+0x170>
     return 0;
   ilock(dp);
-80104ada:	83 ec 0c             	sub    $0xc,%esp
-80104add:	89 c3                	mov    %eax,%ebx
-80104adf:	50                   	push   %eax
-80104ae0:	e8 7b cc ff ff       	call   80101760 <ilock>
+8010505a:	83 ec 0c             	sub    $0xc,%esp
+8010505d:	89 c3                	mov    %eax,%ebx
+8010505f:	50                   	push   %eax
+80105060:	e8 fb c6 ff ff       	call   80101760 <ilock>
 
   if((ip = dirlookup(dp, name, 0)) != 0){
-80104ae5:	83 c4 0c             	add    $0xc,%esp
-80104ae8:	6a 00                	push   $0x0
-80104aea:	57                   	push   %edi
-80104aeb:	53                   	push   %ebx
-80104aec:	e8 bf d1 ff ff       	call   80101cb0 <dirlookup>
-80104af1:	83 c4 10             	add    $0x10,%esp
-80104af4:	89 c6                	mov    %eax,%esi
-80104af6:	85 c0                	test   %eax,%eax
-80104af8:	74 56                	je     80104b50 <create+0xa0>
+80105065:	83 c4 0c             	add    $0xc,%esp
+80105068:	6a 00                	push   $0x0
+8010506a:	57                   	push   %edi
+8010506b:	53                   	push   %ebx
+8010506c:	e8 3f cc ff ff       	call   80101cb0 <dirlookup>
+80105071:	83 c4 10             	add    $0x10,%esp
+80105074:	89 c6                	mov    %eax,%esi
+80105076:	85 c0                	test   %eax,%eax
+80105078:	74 56                	je     801050d0 <create+0xa0>
     iunlockput(dp);
-80104afa:	83 ec 0c             	sub    $0xc,%esp
-80104afd:	53                   	push   %ebx
-80104afe:	e8 fd ce ff ff       	call   80101a00 <iunlockput>
+8010507a:	83 ec 0c             	sub    $0xc,%esp
+8010507d:	53                   	push   %ebx
+8010507e:	e8 7d c9 ff ff       	call   80101a00 <iunlockput>
     ilock(ip);
-80104b03:	89 34 24             	mov    %esi,(%esp)
-80104b06:	e8 55 cc ff ff       	call   80101760 <ilock>
+80105083:	89 34 24             	mov    %esi,(%esp)
+80105086:	e8 d5 c6 ff ff       	call   80101760 <ilock>
     if(type == T_FILE && ip->type == T_FILE)
-80104b0b:	83 c4 10             	add    $0x10,%esp
-80104b0e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
-80104b13:	75 1b                	jne    80104b30 <create+0x80>
-80104b15:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
-80104b1a:	75 14                	jne    80104b30 <create+0x80>
+8010508b:	83 c4 10             	add    $0x10,%esp
+8010508e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
+80105093:	75 1b                	jne    801050b0 <create+0x80>
+80105095:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
+8010509a:	75 14                	jne    801050b0 <create+0x80>
     panic("create: dirlink");
 
   iunlockput(dp);
 
   return ip;
 }
-80104b1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104b1f:	89 f0                	mov    %esi,%eax
-80104b21:	5b                   	pop    %ebx
-80104b22:	5e                   	pop    %esi
-80104b23:	5f                   	pop    %edi
-80104b24:	5d                   	pop    %ebp
-80104b25:	c3                   	ret    
-80104b26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104b2d:	8d 76 00             	lea    0x0(%esi),%esi
+8010509c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010509f:	89 f0                	mov    %esi,%eax
+801050a1:	5b                   	pop    %ebx
+801050a2:	5e                   	pop    %esi
+801050a3:	5f                   	pop    %edi
+801050a4:	5d                   	pop    %ebp
+801050a5:	c3                   	ret    
+801050a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801050ad:	8d 76 00             	lea    0x0(%esi),%esi
     iunlockput(ip);
-80104b30:	83 ec 0c             	sub    $0xc,%esp
-80104b33:	56                   	push   %esi
+801050b0:	83 ec 0c             	sub    $0xc,%esp
+801050b3:	56                   	push   %esi
     return 0;
-80104b34:	31 f6                	xor    %esi,%esi
+801050b4:	31 f6                	xor    %esi,%esi
     iunlockput(ip);
-80104b36:	e8 c5 ce ff ff       	call   80101a00 <iunlockput>
+801050b6:	e8 45 c9 ff ff       	call   80101a00 <iunlockput>
     return 0;
-80104b3b:	83 c4 10             	add    $0x10,%esp
+801050bb:	83 c4 10             	add    $0x10,%esp
 }
-80104b3e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104b41:	89 f0                	mov    %esi,%eax
-80104b43:	5b                   	pop    %ebx
-80104b44:	5e                   	pop    %esi
-80104b45:	5f                   	pop    %edi
-80104b46:	5d                   	pop    %ebp
-80104b47:	c3                   	ret    
-80104b48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104b4f:	90                   	nop
+801050be:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801050c1:	89 f0                	mov    %esi,%eax
+801050c3:	5b                   	pop    %ebx
+801050c4:	5e                   	pop    %esi
+801050c5:	5f                   	pop    %edi
+801050c6:	5d                   	pop    %ebp
+801050c7:	c3                   	ret    
+801050c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801050cf:	90                   	nop
   if((ip = ialloc(dp->dev, type)) == 0)
-80104b50:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
-80104b54:	83 ec 08             	sub    $0x8,%esp
-80104b57:	50                   	push   %eax
-80104b58:	ff 33                	pushl  (%ebx)
-80104b5a:	e8 81 ca ff ff       	call   801015e0 <ialloc>
-80104b5f:	83 c4 10             	add    $0x10,%esp
-80104b62:	89 c6                	mov    %eax,%esi
-80104b64:	85 c0                	test   %eax,%eax
-80104b66:	0f 84 cd 00 00 00    	je     80104c39 <create+0x189>
+801050d0:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
+801050d4:	83 ec 08             	sub    $0x8,%esp
+801050d7:	50                   	push   %eax
+801050d8:	ff 33                	pushl  (%ebx)
+801050da:	e8 01 c5 ff ff       	call   801015e0 <ialloc>
+801050df:	83 c4 10             	add    $0x10,%esp
+801050e2:	89 c6                	mov    %eax,%esi
+801050e4:	85 c0                	test   %eax,%eax
+801050e6:	0f 84 cd 00 00 00    	je     801051b9 <create+0x189>
   ilock(ip);
-80104b6c:	83 ec 0c             	sub    $0xc,%esp
-80104b6f:	50                   	push   %eax
-80104b70:	e8 eb cb ff ff       	call   80101760 <ilock>
+801050ec:	83 ec 0c             	sub    $0xc,%esp
+801050ef:	50                   	push   %eax
+801050f0:	e8 6b c6 ff ff       	call   80101760 <ilock>
   ip->major = major;
-80104b75:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
-80104b79:	66 89 46 52          	mov    %ax,0x52(%esi)
+801050f5:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
+801050f9:	66 89 46 52          	mov    %ax,0x52(%esi)
   ip->minor = minor;
-80104b7d:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
-80104b81:	66 89 46 54          	mov    %ax,0x54(%esi)
+801050fd:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
+80105101:	66 89 46 54          	mov    %ax,0x54(%esi)
   ip->nlink = 1;
-80104b85:	b8 01 00 00 00       	mov    $0x1,%eax
-80104b8a:	66 89 46 56          	mov    %ax,0x56(%esi)
+80105105:	b8 01 00 00 00       	mov    $0x1,%eax
+8010510a:	66 89 46 56          	mov    %ax,0x56(%esi)
   iupdate(ip);
-80104b8e:	89 34 24             	mov    %esi,(%esp)
-80104b91:	e8 0a cb ff ff       	call   801016a0 <iupdate>
+8010510e:	89 34 24             	mov    %esi,(%esp)
+80105111:	e8 8a c5 ff ff       	call   801016a0 <iupdate>
   if(type == T_DIR){  // Create . and .. entries.
-80104b96:	83 c4 10             	add    $0x10,%esp
-80104b99:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
-80104b9e:	74 30                	je     80104bd0 <create+0x120>
+80105116:	83 c4 10             	add    $0x10,%esp
+80105119:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
+8010511e:	74 30                	je     80105150 <create+0x120>
   if(dirlink(dp, name, ip->inum) < 0)
-80104ba0:	83 ec 04             	sub    $0x4,%esp
-80104ba3:	ff 76 04             	pushl  0x4(%esi)
-80104ba6:	57                   	push   %edi
-80104ba7:	53                   	push   %ebx
-80104ba8:	e8 c3 d3 ff ff       	call   80101f70 <dirlink>
-80104bad:	83 c4 10             	add    $0x10,%esp
-80104bb0:	85 c0                	test   %eax,%eax
-80104bb2:	78 78                	js     80104c2c <create+0x17c>
+80105120:	83 ec 04             	sub    $0x4,%esp
+80105123:	ff 76 04             	pushl  0x4(%esi)
+80105126:	57                   	push   %edi
+80105127:	53                   	push   %ebx
+80105128:	e8 43 ce ff ff       	call   80101f70 <dirlink>
+8010512d:	83 c4 10             	add    $0x10,%esp
+80105130:	85 c0                	test   %eax,%eax
+80105132:	78 78                	js     801051ac <create+0x17c>
   iunlockput(dp);
-80104bb4:	83 ec 0c             	sub    $0xc,%esp
-80104bb7:	53                   	push   %ebx
-80104bb8:	e8 43 ce ff ff       	call   80101a00 <iunlockput>
+80105134:	83 ec 0c             	sub    $0xc,%esp
+80105137:	53                   	push   %ebx
+80105138:	e8 c3 c8 ff ff       	call   80101a00 <iunlockput>
   return ip;
-80104bbd:	83 c4 10             	add    $0x10,%esp
+8010513d:	83 c4 10             	add    $0x10,%esp
 }
-80104bc0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104bc3:	89 f0                	mov    %esi,%eax
-80104bc5:	5b                   	pop    %ebx
-80104bc6:	5e                   	pop    %esi
-80104bc7:	5f                   	pop    %edi
-80104bc8:	5d                   	pop    %ebp
-80104bc9:	c3                   	ret    
-80104bca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105140:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105143:	89 f0                	mov    %esi,%eax
+80105145:	5b                   	pop    %ebx
+80105146:	5e                   	pop    %esi
+80105147:	5f                   	pop    %edi
+80105148:	5d                   	pop    %ebp
+80105149:	c3                   	ret    
+8010514a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     iupdate(dp);
-80104bd0:	83 ec 0c             	sub    $0xc,%esp
+80105150:	83 ec 0c             	sub    $0xc,%esp
     dp->nlink++;  // for ".."
-80104bd3:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+80105153:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
     iupdate(dp);
-80104bd8:	53                   	push   %ebx
-80104bd9:	e8 c2 ca ff ff       	call   801016a0 <iupdate>
+80105158:	53                   	push   %ebx
+80105159:	e8 42 c5 ff ff       	call   801016a0 <iupdate>
     if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
-80104bde:	83 c4 0c             	add    $0xc,%esp
-80104be1:	ff 76 04             	pushl  0x4(%esi)
-80104be4:	68 14 78 10 80       	push   $0x80107814
-80104be9:	56                   	push   %esi
-80104bea:	e8 81 d3 ff ff       	call   80101f70 <dirlink>
-80104bef:	83 c4 10             	add    $0x10,%esp
-80104bf2:	85 c0                	test   %eax,%eax
-80104bf4:	78 18                	js     80104c0e <create+0x15e>
-80104bf6:	83 ec 04             	sub    $0x4,%esp
-80104bf9:	ff 73 04             	pushl  0x4(%ebx)
-80104bfc:	68 13 78 10 80       	push   $0x80107813
-80104c01:	56                   	push   %esi
-80104c02:	e8 69 d3 ff ff       	call   80101f70 <dirlink>
-80104c07:	83 c4 10             	add    $0x10,%esp
-80104c0a:	85 c0                	test   %eax,%eax
-80104c0c:	79 92                	jns    80104ba0 <create+0xf0>
+8010515e:	83 c4 0c             	add    $0xc,%esp
+80105161:	ff 76 04             	pushl  0x4(%esi)
+80105164:	68 48 7e 10 80       	push   $0x80107e48
+80105169:	56                   	push   %esi
+8010516a:	e8 01 ce ff ff       	call   80101f70 <dirlink>
+8010516f:	83 c4 10             	add    $0x10,%esp
+80105172:	85 c0                	test   %eax,%eax
+80105174:	78 18                	js     8010518e <create+0x15e>
+80105176:	83 ec 04             	sub    $0x4,%esp
+80105179:	ff 73 04             	pushl  0x4(%ebx)
+8010517c:	68 47 7e 10 80       	push   $0x80107e47
+80105181:	56                   	push   %esi
+80105182:	e8 e9 cd ff ff       	call   80101f70 <dirlink>
+80105187:	83 c4 10             	add    $0x10,%esp
+8010518a:	85 c0                	test   %eax,%eax
+8010518c:	79 92                	jns    80105120 <create+0xf0>
       panic("create dots");
-80104c0e:	83 ec 0c             	sub    $0xc,%esp
-80104c11:	68 07 78 10 80       	push   $0x80107807
-80104c16:	e8 75 b7 ff ff       	call   80100390 <panic>
-80104c1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104c1f:	90                   	nop
+8010518e:	83 ec 0c             	sub    $0xc,%esp
+80105191:	68 3b 7e 10 80       	push   $0x80107e3b
+80105196:	e8 f5 b1 ff ff       	call   80100390 <panic>
+8010519b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010519f:	90                   	nop
 }
-80104c20:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801051a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
     return 0;
-80104c23:	31 f6                	xor    %esi,%esi
+801051a3:	31 f6                	xor    %esi,%esi
 }
-80104c25:	5b                   	pop    %ebx
-80104c26:	89 f0                	mov    %esi,%eax
-80104c28:	5e                   	pop    %esi
-80104c29:	5f                   	pop    %edi
-80104c2a:	5d                   	pop    %ebp
-80104c2b:	c3                   	ret    
+801051a5:	5b                   	pop    %ebx
+801051a6:	89 f0                	mov    %esi,%eax
+801051a8:	5e                   	pop    %esi
+801051a9:	5f                   	pop    %edi
+801051aa:	5d                   	pop    %ebp
+801051ab:	c3                   	ret    
     panic("create: dirlink");
-80104c2c:	83 ec 0c             	sub    $0xc,%esp
-80104c2f:	68 16 78 10 80       	push   $0x80107816
-80104c34:	e8 57 b7 ff ff       	call   80100390 <panic>
+801051ac:	83 ec 0c             	sub    $0xc,%esp
+801051af:	68 4a 7e 10 80       	push   $0x80107e4a
+801051b4:	e8 d7 b1 ff ff       	call   80100390 <panic>
     panic("create: ialloc");
-80104c39:	83 ec 0c             	sub    $0xc,%esp
-80104c3c:	68 f8 77 10 80       	push   $0x801077f8
-80104c41:	e8 4a b7 ff ff       	call   80100390 <panic>
-80104c46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104c4d:	8d 76 00             	lea    0x0(%esi),%esi
+801051b9:	83 ec 0c             	sub    $0xc,%esp
+801051bc:	68 2c 7e 10 80       	push   $0x80107e2c
+801051c1:	e8 ca b1 ff ff       	call   80100390 <panic>
+801051c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801051cd:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104c50 <argfd.constprop.0>:
+801051d0 <argfd.constprop.0>:
 argfd(int n, int *pfd, struct file **pf)
-80104c50:	55                   	push   %ebp
-80104c51:	89 e5                	mov    %esp,%ebp
-80104c53:	56                   	push   %esi
-80104c54:	89 d6                	mov    %edx,%esi
-80104c56:	53                   	push   %ebx
-80104c57:	89 c3                	mov    %eax,%ebx
+801051d0:	55                   	push   %ebp
+801051d1:	89 e5                	mov    %esp,%ebp
+801051d3:	56                   	push   %esi
+801051d4:	89 d6                	mov    %edx,%esi
+801051d6:	53                   	push   %ebx
+801051d7:	89 c3                	mov    %eax,%ebx
   if(argint(n, &fd) < 0)
-80104c59:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801051d9:	8d 45 f4             	lea    -0xc(%ebp),%eax
 argfd(int n, int *pfd, struct file **pf)
-80104c5c:	83 ec 18             	sub    $0x18,%esp
+801051dc:	83 ec 18             	sub    $0x18,%esp
   if(argint(n, &fd) < 0)
-80104c5f:	50                   	push   %eax
-80104c60:	6a 00                	push   $0x0
-80104c62:	e8 e9 fc ff ff       	call   80104950 <argint>
-80104c67:	83 c4 10             	add    $0x10,%esp
-80104c6a:	85 c0                	test   %eax,%eax
-80104c6c:	78 2a                	js     80104c98 <argfd.constprop.0+0x48>
+801051df:	50                   	push   %eax
+801051e0:	6a 00                	push   $0x0
+801051e2:	e8 e9 fc ff ff       	call   80104ed0 <argint>
+801051e7:	83 c4 10             	add    $0x10,%esp
+801051ea:	85 c0                	test   %eax,%eax
+801051ec:	78 2a                	js     80105218 <argfd.constprop.0+0x48>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104c6e:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104c72:	77 24                	ja     80104c98 <argfd.constprop.0+0x48>
-80104c74:	e8 e7 ec ff ff       	call   80103960 <myproc>
-80104c79:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104c7c:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
-80104c80:	85 c0                	test   %eax,%eax
-80104c82:	74 14                	je     80104c98 <argfd.constprop.0+0x48>
+801051ee:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+801051f2:	77 24                	ja     80105218 <argfd.constprop.0+0x48>
+801051f4:	e8 67 ea ff ff       	call   80103c60 <myproc>
+801051f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
+801051fc:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
+80105200:	85 c0                	test   %eax,%eax
+80105202:	74 14                	je     80105218 <argfd.constprop.0+0x48>
   if(pfd)
-80104c84:	85 db                	test   %ebx,%ebx
-80104c86:	74 02                	je     80104c8a <argfd.constprop.0+0x3a>
+80105204:	85 db                	test   %ebx,%ebx
+80105206:	74 02                	je     8010520a <argfd.constprop.0+0x3a>
     *pfd = fd;
-80104c88:	89 13                	mov    %edx,(%ebx)
+80105208:	89 13                	mov    %edx,(%ebx)
     *pf = f;
-80104c8a:	89 06                	mov    %eax,(%esi)
+8010520a:	89 06                	mov    %eax,(%esi)
   return 0;
-80104c8c:	31 c0                	xor    %eax,%eax
+8010520c:	31 c0                	xor    %eax,%eax
 }
-80104c8e:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104c91:	5b                   	pop    %ebx
-80104c92:	5e                   	pop    %esi
-80104c93:	5d                   	pop    %ebp
-80104c94:	c3                   	ret    
-80104c95:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-80104c98:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104c9d:	eb ef                	jmp    80104c8e <argfd.constprop.0+0x3e>
-80104c9f:	90                   	nop
+8010520e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105211:	5b                   	pop    %ebx
+80105212:	5e                   	pop    %esi
+80105213:	5d                   	pop    %ebp
+80105214:	c3                   	ret    
+80105215:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80105218:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010521d:	eb ef                	jmp    8010520e <argfd.constprop.0+0x3e>
+8010521f:	90                   	nop
 
-80104ca0 <sys_dup>:
+80105220 <sys_dup>:
 {
-80104ca0:	f3 0f 1e fb          	endbr32 
-80104ca4:	55                   	push   %ebp
+80105220:	f3 0f 1e fb          	endbr32 
+80105224:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0)
-80104ca5:	31 c0                	xor    %eax,%eax
+80105225:	31 c0                	xor    %eax,%eax
 {
-80104ca7:	89 e5                	mov    %esp,%ebp
-80104ca9:	56                   	push   %esi
-80104caa:	53                   	push   %ebx
+80105227:	89 e5                	mov    %esp,%ebp
+80105229:	56                   	push   %esi
+8010522a:	53                   	push   %ebx
   if(argfd(0, 0, &f) < 0)
-80104cab:	8d 55 f4             	lea    -0xc(%ebp),%edx
+8010522b:	8d 55 f4             	lea    -0xc(%ebp),%edx
 {
-80104cae:	83 ec 10             	sub    $0x10,%esp
+8010522e:	83 ec 10             	sub    $0x10,%esp
   if(argfd(0, 0, &f) < 0)
-80104cb1:	e8 9a ff ff ff       	call   80104c50 <argfd.constprop.0>
-80104cb6:	85 c0                	test   %eax,%eax
-80104cb8:	78 1e                	js     80104cd8 <sys_dup+0x38>
+80105231:	e8 9a ff ff ff       	call   801051d0 <argfd.constprop.0>
+80105236:	85 c0                	test   %eax,%eax
+80105238:	78 1e                	js     80105258 <sys_dup+0x38>
   if((fd=fdalloc(f)) < 0)
-80104cba:	8b 75 f4             	mov    -0xc(%ebp),%esi
+8010523a:	8b 75 f4             	mov    -0xc(%ebp),%esi
   for(fd = 0; fd < NOFILE; fd++){
-80104cbd:	31 db                	xor    %ebx,%ebx
+8010523d:	31 db                	xor    %ebx,%ebx
   struct proc *curproc = myproc();
-80104cbf:	e8 9c ec ff ff       	call   80103960 <myproc>
+8010523f:	e8 1c ea ff ff       	call   80103c60 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-80104cc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105244:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[fd] == 0){
-80104cc8:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-80104ccc:	85 d2                	test   %edx,%edx
-80104cce:	74 20                	je     80104cf0 <sys_dup+0x50>
+80105248:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+8010524c:	85 d2                	test   %edx,%edx
+8010524e:	74 20                	je     80105270 <sys_dup+0x50>
   for(fd = 0; fd < NOFILE; fd++){
-80104cd0:	83 c3 01             	add    $0x1,%ebx
-80104cd3:	83 fb 10             	cmp    $0x10,%ebx
-80104cd6:	75 f0                	jne    80104cc8 <sys_dup+0x28>
-}
-80104cd8:	8d 65 f8             	lea    -0x8(%ebp),%esp
-    return -1;
-80104cdb:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-}
-80104ce0:	89 d8                	mov    %ebx,%eax
-80104ce2:	5b                   	pop    %ebx
-80104ce3:	5e                   	pop    %esi
-80104ce4:	5d                   	pop    %ebp
-80104ce5:	c3                   	ret    
-80104ce6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104ced:	8d 76 00             	lea    0x0(%esi),%esi
+80105250:	83 c3 01             	add    $0x1,%ebx
+80105253:	83 fb 10             	cmp    $0x10,%ebx
+80105256:	75 f0                	jne    80105248 <sys_dup+0x28>
+}
+80105258:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    return -1;
+8010525b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+}
+80105260:	89 d8                	mov    %ebx,%eax
+80105262:	5b                   	pop    %ebx
+80105263:	5e                   	pop    %esi
+80105264:	5d                   	pop    %ebp
+80105265:	c3                   	ret    
+80105266:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010526d:	8d 76 00             	lea    0x0(%esi),%esi
       curproc->ofile[fd] = f;
-80104cf0:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
+80105270:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
   filedup(f);
-80104cf4:	83 ec 0c             	sub    $0xc,%esp
-80104cf7:	ff 75 f4             	pushl  -0xc(%ebp)
-80104cfa:	e8 71 c1 ff ff       	call   80100e70 <filedup>
+80105274:	83 ec 0c             	sub    $0xc,%esp
+80105277:	ff 75 f4             	pushl  -0xc(%ebp)
+8010527a:	e8 f1 bb ff ff       	call   80100e70 <filedup>
   return fd;
-80104cff:	83 c4 10             	add    $0x10,%esp
+8010527f:	83 c4 10             	add    $0x10,%esp
 }
-80104d02:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104d05:	89 d8                	mov    %ebx,%eax
-80104d07:	5b                   	pop    %ebx
-80104d08:	5e                   	pop    %esi
-80104d09:	5d                   	pop    %ebp
-80104d0a:	c3                   	ret    
-80104d0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104d0f:	90                   	nop
+80105282:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105285:	89 d8                	mov    %ebx,%eax
+80105287:	5b                   	pop    %ebx
+80105288:	5e                   	pop    %esi
+80105289:	5d                   	pop    %ebp
+8010528a:	c3                   	ret    
+8010528b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010528f:	90                   	nop
 
-80104d10 <sys_read>:
+80105290 <sys_read>:
 {
-80104d10:	f3 0f 1e fb          	endbr32 
-80104d14:	55                   	push   %ebp
+80105290:	f3 0f 1e fb          	endbr32 
+80105294:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104d15:	31 c0                	xor    %eax,%eax
+80105295:	31 c0                	xor    %eax,%eax
 {
-80104d17:	89 e5                	mov    %esp,%ebp
-80104d19:	83 ec 18             	sub    $0x18,%esp
+80105297:	89 e5                	mov    %esp,%ebp
+80105299:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104d1c:	8d 55 ec             	lea    -0x14(%ebp),%edx
-80104d1f:	e8 2c ff ff ff       	call   80104c50 <argfd.constprop.0>
-80104d24:	85 c0                	test   %eax,%eax
-80104d26:	78 48                	js     80104d70 <sys_read+0x60>
-80104d28:	83 ec 08             	sub    $0x8,%esp
-80104d2b:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104d2e:	50                   	push   %eax
-80104d2f:	6a 02                	push   $0x2
-80104d31:	e8 1a fc ff ff       	call   80104950 <argint>
-80104d36:	83 c4 10             	add    $0x10,%esp
-80104d39:	85 c0                	test   %eax,%eax
-80104d3b:	78 33                	js     80104d70 <sys_read+0x60>
-80104d3d:	83 ec 04             	sub    $0x4,%esp
-80104d40:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104d43:	ff 75 f0             	pushl  -0x10(%ebp)
-80104d46:	50                   	push   %eax
-80104d47:	6a 01                	push   $0x1
-80104d49:	e8 52 fc ff ff       	call   801049a0 <argptr>
-80104d4e:	83 c4 10             	add    $0x10,%esp
-80104d51:	85 c0                	test   %eax,%eax
-80104d53:	78 1b                	js     80104d70 <sys_read+0x60>
+8010529c:	8d 55 ec             	lea    -0x14(%ebp),%edx
+8010529f:	e8 2c ff ff ff       	call   801051d0 <argfd.constprop.0>
+801052a4:	85 c0                	test   %eax,%eax
+801052a6:	78 48                	js     801052f0 <sys_read+0x60>
+801052a8:	83 ec 08             	sub    $0x8,%esp
+801052ab:	8d 45 f0             	lea    -0x10(%ebp),%eax
+801052ae:	50                   	push   %eax
+801052af:	6a 02                	push   $0x2
+801052b1:	e8 1a fc ff ff       	call   80104ed0 <argint>
+801052b6:	83 c4 10             	add    $0x10,%esp
+801052b9:	85 c0                	test   %eax,%eax
+801052bb:	78 33                	js     801052f0 <sys_read+0x60>
+801052bd:	83 ec 04             	sub    $0x4,%esp
+801052c0:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801052c3:	ff 75 f0             	pushl  -0x10(%ebp)
+801052c6:	50                   	push   %eax
+801052c7:	6a 01                	push   $0x1
+801052c9:	e8 52 fc ff ff       	call   80104f20 <argptr>
+801052ce:	83 c4 10             	add    $0x10,%esp
+801052d1:	85 c0                	test   %eax,%eax
+801052d3:	78 1b                	js     801052f0 <sys_read+0x60>
   return fileread(f, p, n);
-80104d55:	83 ec 04             	sub    $0x4,%esp
-80104d58:	ff 75 f0             	pushl  -0x10(%ebp)
-80104d5b:	ff 75 f4             	pushl  -0xc(%ebp)
-80104d5e:	ff 75 ec             	pushl  -0x14(%ebp)
-80104d61:	e8 8a c2 ff ff       	call   80100ff0 <fileread>
-80104d66:	83 c4 10             	add    $0x10,%esp
-}
-80104d69:	c9                   	leave  
-80104d6a:	c3                   	ret    
-80104d6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104d6f:	90                   	nop
-80104d70:	c9                   	leave  
-    return -1;
-80104d71:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104d76:	c3                   	ret    
-80104d77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104d7e:	66 90                	xchg   %ax,%ax
+801052d5:	83 ec 04             	sub    $0x4,%esp
+801052d8:	ff 75 f0             	pushl  -0x10(%ebp)
+801052db:	ff 75 f4             	pushl  -0xc(%ebp)
+801052de:	ff 75 ec             	pushl  -0x14(%ebp)
+801052e1:	e8 0a bd ff ff       	call   80100ff0 <fileread>
+801052e6:	83 c4 10             	add    $0x10,%esp
+}
+801052e9:	c9                   	leave  
+801052ea:	c3                   	ret    
+801052eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801052ef:	90                   	nop
+801052f0:	c9                   	leave  
+    return -1;
+801052f1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801052f6:	c3                   	ret    
+801052f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801052fe:	66 90                	xchg   %ax,%ax
 
-80104d80 <sys_write>:
+80105300 <sys_write>:
 {
-80104d80:	f3 0f 1e fb          	endbr32 
-80104d84:	55                   	push   %ebp
+80105300:	f3 0f 1e fb          	endbr32 
+80105304:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104d85:	31 c0                	xor    %eax,%eax
+80105305:	31 c0                	xor    %eax,%eax
 {
-80104d87:	89 e5                	mov    %esp,%ebp
-80104d89:	83 ec 18             	sub    $0x18,%esp
+80105307:	89 e5                	mov    %esp,%ebp
+80105309:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104d8c:	8d 55 ec             	lea    -0x14(%ebp),%edx
-80104d8f:	e8 bc fe ff ff       	call   80104c50 <argfd.constprop.0>
-80104d94:	85 c0                	test   %eax,%eax
-80104d96:	78 48                	js     80104de0 <sys_write+0x60>
-80104d98:	83 ec 08             	sub    $0x8,%esp
-80104d9b:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104d9e:	50                   	push   %eax
-80104d9f:	6a 02                	push   $0x2
-80104da1:	e8 aa fb ff ff       	call   80104950 <argint>
-80104da6:	83 c4 10             	add    $0x10,%esp
-80104da9:	85 c0                	test   %eax,%eax
-80104dab:	78 33                	js     80104de0 <sys_write+0x60>
-80104dad:	83 ec 04             	sub    $0x4,%esp
-80104db0:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104db3:	ff 75 f0             	pushl  -0x10(%ebp)
-80104db6:	50                   	push   %eax
-80104db7:	6a 01                	push   $0x1
-80104db9:	e8 e2 fb ff ff       	call   801049a0 <argptr>
-80104dbe:	83 c4 10             	add    $0x10,%esp
-80104dc1:	85 c0                	test   %eax,%eax
-80104dc3:	78 1b                	js     80104de0 <sys_write+0x60>
+8010530c:	8d 55 ec             	lea    -0x14(%ebp),%edx
+8010530f:	e8 bc fe ff ff       	call   801051d0 <argfd.constprop.0>
+80105314:	85 c0                	test   %eax,%eax
+80105316:	78 48                	js     80105360 <sys_write+0x60>
+80105318:	83 ec 08             	sub    $0x8,%esp
+8010531b:	8d 45 f0             	lea    -0x10(%ebp),%eax
+8010531e:	50                   	push   %eax
+8010531f:	6a 02                	push   $0x2
+80105321:	e8 aa fb ff ff       	call   80104ed0 <argint>
+80105326:	83 c4 10             	add    $0x10,%esp
+80105329:	85 c0                	test   %eax,%eax
+8010532b:	78 33                	js     80105360 <sys_write+0x60>
+8010532d:	83 ec 04             	sub    $0x4,%esp
+80105330:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105333:	ff 75 f0             	pushl  -0x10(%ebp)
+80105336:	50                   	push   %eax
+80105337:	6a 01                	push   $0x1
+80105339:	e8 e2 fb ff ff       	call   80104f20 <argptr>
+8010533e:	83 c4 10             	add    $0x10,%esp
+80105341:	85 c0                	test   %eax,%eax
+80105343:	78 1b                	js     80105360 <sys_write+0x60>
   return filewrite(f, p, n);
-80104dc5:	83 ec 04             	sub    $0x4,%esp
-80104dc8:	ff 75 f0             	pushl  -0x10(%ebp)
-80104dcb:	ff 75 f4             	pushl  -0xc(%ebp)
-80104dce:	ff 75 ec             	pushl  -0x14(%ebp)
-80104dd1:	e8 ba c2 ff ff       	call   80101090 <filewrite>
-80104dd6:	83 c4 10             	add    $0x10,%esp
-}
-80104dd9:	c9                   	leave  
-80104dda:	c3                   	ret    
-80104ddb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104ddf:	90                   	nop
-80104de0:	c9                   	leave  
-    return -1;
-80104de1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104de6:	c3                   	ret    
-80104de7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104dee:	66 90                	xchg   %ax,%ax
+80105345:	83 ec 04             	sub    $0x4,%esp
+80105348:	ff 75 f0             	pushl  -0x10(%ebp)
+8010534b:	ff 75 f4             	pushl  -0xc(%ebp)
+8010534e:	ff 75 ec             	pushl  -0x14(%ebp)
+80105351:	e8 3a bd ff ff       	call   80101090 <filewrite>
+80105356:	83 c4 10             	add    $0x10,%esp
+}
+80105359:	c9                   	leave  
+8010535a:	c3                   	ret    
+8010535b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010535f:	90                   	nop
+80105360:	c9                   	leave  
+    return -1;
+80105361:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105366:	c3                   	ret    
+80105367:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010536e:	66 90                	xchg   %ax,%ax
 
-80104df0 <sys_close>:
+80105370 <sys_close>:
 {
-80104df0:	f3 0f 1e fb          	endbr32 
-80104df4:	55                   	push   %ebp
-80104df5:	89 e5                	mov    %esp,%ebp
-80104df7:	83 ec 18             	sub    $0x18,%esp
+80105370:	f3 0f 1e fb          	endbr32 
+80105374:	55                   	push   %ebp
+80105375:	89 e5                	mov    %esp,%ebp
+80105377:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, &fd, &f) < 0)
-80104dfa:	8d 55 f4             	lea    -0xc(%ebp),%edx
-80104dfd:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104e00:	e8 4b fe ff ff       	call   80104c50 <argfd.constprop.0>
-80104e05:	85 c0                	test   %eax,%eax
-80104e07:	78 27                	js     80104e30 <sys_close+0x40>
+8010537a:	8d 55 f4             	lea    -0xc(%ebp),%edx
+8010537d:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105380:	e8 4b fe ff ff       	call   801051d0 <argfd.constprop.0>
+80105385:	85 c0                	test   %eax,%eax
+80105387:	78 27                	js     801053b0 <sys_close+0x40>
   myproc()->ofile[fd] = 0;
-80104e09:	e8 52 eb ff ff       	call   80103960 <myproc>
-80104e0e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+80105389:	e8 d2 e8 ff ff       	call   80103c60 <myproc>
+8010538e:	8b 55 f0             	mov    -0x10(%ebp),%edx
   fileclose(f);
-80104e11:	83 ec 0c             	sub    $0xc,%esp
+80105391:	83 ec 0c             	sub    $0xc,%esp
   myproc()->ofile[fd] = 0;
-80104e14:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
-80104e1b:	00 
+80105394:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
+8010539b:	00 
   fileclose(f);
-80104e1c:	ff 75 f4             	pushl  -0xc(%ebp)
-80104e1f:	e8 9c c0 ff ff       	call   80100ec0 <fileclose>
+8010539c:	ff 75 f4             	pushl  -0xc(%ebp)
+8010539f:	e8 1c bb ff ff       	call   80100ec0 <fileclose>
   return 0;
-80104e24:	83 c4 10             	add    $0x10,%esp
-80104e27:	31 c0                	xor    %eax,%eax
+801053a4:	83 c4 10             	add    $0x10,%esp
+801053a7:	31 c0                	xor    %eax,%eax
 }
-80104e29:	c9                   	leave  
-80104e2a:	c3                   	ret    
-80104e2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104e2f:	90                   	nop
-80104e30:	c9                   	leave  
+801053a9:	c9                   	leave  
+801053aa:	c3                   	ret    
+801053ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801053af:	90                   	nop
+801053b0:	c9                   	leave  
     return -1;
-80104e31:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801053b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80104e36:	c3                   	ret    
-80104e37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104e3e:	66 90                	xchg   %ax,%ax
+801053b6:	c3                   	ret    
+801053b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801053be:	66 90                	xchg   %ax,%ax
 
-80104e40 <sys_fstat>:
+801053c0 <sys_fstat>:
 {
-80104e40:	f3 0f 1e fb          	endbr32 
-80104e44:	55                   	push   %ebp
+801053c0:	f3 0f 1e fb          	endbr32 
+801053c4:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-80104e45:	31 c0                	xor    %eax,%eax
+801053c5:	31 c0                	xor    %eax,%eax
 {
-80104e47:	89 e5                	mov    %esp,%ebp
-80104e49:	83 ec 18             	sub    $0x18,%esp
+801053c7:	89 e5                	mov    %esp,%ebp
+801053c9:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-80104e4c:	8d 55 f0             	lea    -0x10(%ebp),%edx
-80104e4f:	e8 fc fd ff ff       	call   80104c50 <argfd.constprop.0>
-80104e54:	85 c0                	test   %eax,%eax
-80104e56:	78 30                	js     80104e88 <sys_fstat+0x48>
-80104e58:	83 ec 04             	sub    $0x4,%esp
-80104e5b:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104e5e:	6a 14                	push   $0x14
-80104e60:	50                   	push   %eax
-80104e61:	6a 01                	push   $0x1
-80104e63:	e8 38 fb ff ff       	call   801049a0 <argptr>
-80104e68:	83 c4 10             	add    $0x10,%esp
-80104e6b:	85 c0                	test   %eax,%eax
-80104e6d:	78 19                	js     80104e88 <sys_fstat+0x48>
+801053cc:	8d 55 f0             	lea    -0x10(%ebp),%edx
+801053cf:	e8 fc fd ff ff       	call   801051d0 <argfd.constprop.0>
+801053d4:	85 c0                	test   %eax,%eax
+801053d6:	78 30                	js     80105408 <sys_fstat+0x48>
+801053d8:	83 ec 04             	sub    $0x4,%esp
+801053db:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801053de:	6a 14                	push   $0x14
+801053e0:	50                   	push   %eax
+801053e1:	6a 01                	push   $0x1
+801053e3:	e8 38 fb ff ff       	call   80104f20 <argptr>
+801053e8:	83 c4 10             	add    $0x10,%esp
+801053eb:	85 c0                	test   %eax,%eax
+801053ed:	78 19                	js     80105408 <sys_fstat+0x48>
   return filestat(f, st);
-80104e6f:	83 ec 08             	sub    $0x8,%esp
-80104e72:	ff 75 f4             	pushl  -0xc(%ebp)
-80104e75:	ff 75 f0             	pushl  -0x10(%ebp)
-80104e78:	e8 23 c1 ff ff       	call   80100fa0 <filestat>
-80104e7d:	83 c4 10             	add    $0x10,%esp
-}
-80104e80:	c9                   	leave  
-80104e81:	c3                   	ret    
-80104e82:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104e88:	c9                   	leave  
-    return -1;
-80104e89:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104e8e:	c3                   	ret    
-80104e8f:	90                   	nop
-
-80104e90 <sys_link>:
-{
-80104e90:	f3 0f 1e fb          	endbr32 
-80104e94:	55                   	push   %ebp
-80104e95:	89 e5                	mov    %esp,%ebp
-80104e97:	57                   	push   %edi
-80104e98:	56                   	push   %esi
+801053ef:	83 ec 08             	sub    $0x8,%esp
+801053f2:	ff 75 f4             	pushl  -0xc(%ebp)
+801053f5:	ff 75 f0             	pushl  -0x10(%ebp)
+801053f8:	e8 a3 bb ff ff       	call   80100fa0 <filestat>
+801053fd:	83 c4 10             	add    $0x10,%esp
+}
+80105400:	c9                   	leave  
+80105401:	c3                   	ret    
+80105402:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105408:	c9                   	leave  
+    return -1;
+80105409:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+8010540e:	c3                   	ret    
+8010540f:	90                   	nop
+
+80105410 <sys_link>:
+{
+80105410:	f3 0f 1e fb          	endbr32 
+80105414:	55                   	push   %ebp
+80105415:	89 e5                	mov    %esp,%ebp
+80105417:	57                   	push   %edi
+80105418:	56                   	push   %esi
   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-80104e99:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+80105419:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 {
-80104e9c:	53                   	push   %ebx
-80104e9d:	83 ec 34             	sub    $0x34,%esp
+8010541c:	53                   	push   %ebx
+8010541d:	83 ec 34             	sub    $0x34,%esp
   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-80104ea0:	50                   	push   %eax
-80104ea1:	6a 00                	push   $0x0
-80104ea3:	e8 58 fb ff ff       	call   80104a00 <argstr>
-80104ea8:	83 c4 10             	add    $0x10,%esp
-80104eab:	85 c0                	test   %eax,%eax
-80104ead:	0f 88 ff 00 00 00    	js     80104fb2 <sys_link+0x122>
-80104eb3:	83 ec 08             	sub    $0x8,%esp
-80104eb6:	8d 45 d0             	lea    -0x30(%ebp),%eax
-80104eb9:	50                   	push   %eax
-80104eba:	6a 01                	push   $0x1
-80104ebc:	e8 3f fb ff ff       	call   80104a00 <argstr>
-80104ec1:	83 c4 10             	add    $0x10,%esp
-80104ec4:	85 c0                	test   %eax,%eax
-80104ec6:	0f 88 e6 00 00 00    	js     80104fb2 <sys_link+0x122>
+80105420:	50                   	push   %eax
+80105421:	6a 00                	push   $0x0
+80105423:	e8 58 fb ff ff       	call   80104f80 <argstr>
+80105428:	83 c4 10             	add    $0x10,%esp
+8010542b:	85 c0                	test   %eax,%eax
+8010542d:	0f 88 ff 00 00 00    	js     80105532 <sys_link+0x122>
+80105433:	83 ec 08             	sub    $0x8,%esp
+80105436:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80105439:	50                   	push   %eax
+8010543a:	6a 01                	push   $0x1
+8010543c:	e8 3f fb ff ff       	call   80104f80 <argstr>
+80105441:	83 c4 10             	add    $0x10,%esp
+80105444:	85 c0                	test   %eax,%eax
+80105446:	0f 88 e6 00 00 00    	js     80105532 <sys_link+0x122>
   begin_op();
-80104ecc:	e8 5f de ff ff       	call   80102d30 <begin_op>
+8010544c:	e8 df d8 ff ff       	call   80102d30 <begin_op>
   if((ip = namei(old)) == 0){
-80104ed1:	83 ec 0c             	sub    $0xc,%esp
-80104ed4:	ff 75 d4             	pushl  -0x2c(%ebp)
-80104ed7:	e8 54 d1 ff ff       	call   80102030 <namei>
-80104edc:	83 c4 10             	add    $0x10,%esp
-80104edf:	89 c3                	mov    %eax,%ebx
-80104ee1:	85 c0                	test   %eax,%eax
-80104ee3:	0f 84 e8 00 00 00    	je     80104fd1 <sys_link+0x141>
+80105451:	83 ec 0c             	sub    $0xc,%esp
+80105454:	ff 75 d4             	pushl  -0x2c(%ebp)
+80105457:	e8 d4 cb ff ff       	call   80102030 <namei>
+8010545c:	83 c4 10             	add    $0x10,%esp
+8010545f:	89 c3                	mov    %eax,%ebx
+80105461:	85 c0                	test   %eax,%eax
+80105463:	0f 84 e8 00 00 00    	je     80105551 <sys_link+0x141>
   ilock(ip);
-80104ee9:	83 ec 0c             	sub    $0xc,%esp
-80104eec:	50                   	push   %eax
-80104eed:	e8 6e c8 ff ff       	call   80101760 <ilock>
+80105469:	83 ec 0c             	sub    $0xc,%esp
+8010546c:	50                   	push   %eax
+8010546d:	e8 ee c2 ff ff       	call   80101760 <ilock>
   if(ip->type == T_DIR){
-80104ef2:	83 c4 10             	add    $0x10,%esp
-80104ef5:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80104efa:	0f 84 b9 00 00 00    	je     80104fb9 <sys_link+0x129>
+80105472:	83 c4 10             	add    $0x10,%esp
+80105475:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+8010547a:	0f 84 b9 00 00 00    	je     80105539 <sys_link+0x129>
   iupdate(ip);
-80104f00:	83 ec 0c             	sub    $0xc,%esp
+80105480:	83 ec 0c             	sub    $0xc,%esp
   ip->nlink++;
-80104f03:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+80105483:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
   if((dp = nameiparent(new, name)) == 0)
-80104f08:	8d 7d da             	lea    -0x26(%ebp),%edi
+80105488:	8d 7d da             	lea    -0x26(%ebp),%edi
   iupdate(ip);
-80104f0b:	53                   	push   %ebx
-80104f0c:	e8 8f c7 ff ff       	call   801016a0 <iupdate>
+8010548b:	53                   	push   %ebx
+8010548c:	e8 0f c2 ff ff       	call   801016a0 <iupdate>
   iunlock(ip);
-80104f11:	89 1c 24             	mov    %ebx,(%esp)
-80104f14:	e8 27 c9 ff ff       	call   80101840 <iunlock>
+80105491:	89 1c 24             	mov    %ebx,(%esp)
+80105494:	e8 a7 c3 ff ff       	call   80101840 <iunlock>
   if((dp = nameiparent(new, name)) == 0)
-80104f19:	58                   	pop    %eax
-80104f1a:	5a                   	pop    %edx
-80104f1b:	57                   	push   %edi
-80104f1c:	ff 75 d0             	pushl  -0x30(%ebp)
-80104f1f:	e8 2c d1 ff ff       	call   80102050 <nameiparent>
-80104f24:	83 c4 10             	add    $0x10,%esp
-80104f27:	89 c6                	mov    %eax,%esi
-80104f29:	85 c0                	test   %eax,%eax
-80104f2b:	74 5f                	je     80104f8c <sys_link+0xfc>
+80105499:	58                   	pop    %eax
+8010549a:	5a                   	pop    %edx
+8010549b:	57                   	push   %edi
+8010549c:	ff 75 d0             	pushl  -0x30(%ebp)
+8010549f:	e8 ac cb ff ff       	call   80102050 <nameiparent>
+801054a4:	83 c4 10             	add    $0x10,%esp
+801054a7:	89 c6                	mov    %eax,%esi
+801054a9:	85 c0                	test   %eax,%eax
+801054ab:	74 5f                	je     8010550c <sys_link+0xfc>
   ilock(dp);
-80104f2d:	83 ec 0c             	sub    $0xc,%esp
-80104f30:	50                   	push   %eax
-80104f31:	e8 2a c8 ff ff       	call   80101760 <ilock>
+801054ad:	83 ec 0c             	sub    $0xc,%esp
+801054b0:	50                   	push   %eax
+801054b1:	e8 aa c2 ff ff       	call   80101760 <ilock>
   if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
-80104f36:	8b 03                	mov    (%ebx),%eax
-80104f38:	83 c4 10             	add    $0x10,%esp
-80104f3b:	39 06                	cmp    %eax,(%esi)
-80104f3d:	75 41                	jne    80104f80 <sys_link+0xf0>
-80104f3f:	83 ec 04             	sub    $0x4,%esp
-80104f42:	ff 73 04             	pushl  0x4(%ebx)
-80104f45:	57                   	push   %edi
-80104f46:	56                   	push   %esi
-80104f47:	e8 24 d0 ff ff       	call   80101f70 <dirlink>
-80104f4c:	83 c4 10             	add    $0x10,%esp
-80104f4f:	85 c0                	test   %eax,%eax
-80104f51:	78 2d                	js     80104f80 <sys_link+0xf0>
+801054b6:	8b 03                	mov    (%ebx),%eax
+801054b8:	83 c4 10             	add    $0x10,%esp
+801054bb:	39 06                	cmp    %eax,(%esi)
+801054bd:	75 41                	jne    80105500 <sys_link+0xf0>
+801054bf:	83 ec 04             	sub    $0x4,%esp
+801054c2:	ff 73 04             	pushl  0x4(%ebx)
+801054c5:	57                   	push   %edi
+801054c6:	56                   	push   %esi
+801054c7:	e8 a4 ca ff ff       	call   80101f70 <dirlink>
+801054cc:	83 c4 10             	add    $0x10,%esp
+801054cf:	85 c0                	test   %eax,%eax
+801054d1:	78 2d                	js     80105500 <sys_link+0xf0>
   iunlockput(dp);
-80104f53:	83 ec 0c             	sub    $0xc,%esp
-80104f56:	56                   	push   %esi
-80104f57:	e8 a4 ca ff ff       	call   80101a00 <iunlockput>
+801054d3:	83 ec 0c             	sub    $0xc,%esp
+801054d6:	56                   	push   %esi
+801054d7:	e8 24 c5 ff ff       	call   80101a00 <iunlockput>
   iput(ip);
-80104f5c:	89 1c 24             	mov    %ebx,(%esp)
-80104f5f:	e8 2c c9 ff ff       	call   80101890 <iput>
+801054dc:	89 1c 24             	mov    %ebx,(%esp)
+801054df:	e8 ac c3 ff ff       	call   80101890 <iput>
   end_op();
-80104f64:	e8 37 de ff ff       	call   80102da0 <end_op>
+801054e4:	e8 b7 d8 ff ff       	call   80102da0 <end_op>
   return 0;
-80104f69:	83 c4 10             	add    $0x10,%esp
-80104f6c:	31 c0                	xor    %eax,%eax
+801054e9:	83 c4 10             	add    $0x10,%esp
+801054ec:	31 c0                	xor    %eax,%eax
 }
-80104f6e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104f71:	5b                   	pop    %ebx
-80104f72:	5e                   	pop    %esi
-80104f73:	5f                   	pop    %edi
-80104f74:	5d                   	pop    %ebp
-80104f75:	c3                   	ret    
-80104f76:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104f7d:	8d 76 00             	lea    0x0(%esi),%esi
+801054ee:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801054f1:	5b                   	pop    %ebx
+801054f2:	5e                   	pop    %esi
+801054f3:	5f                   	pop    %edi
+801054f4:	5d                   	pop    %ebp
+801054f5:	c3                   	ret    
+801054f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801054fd:	8d 76 00             	lea    0x0(%esi),%esi
     iunlockput(dp);
-80104f80:	83 ec 0c             	sub    $0xc,%esp
-80104f83:	56                   	push   %esi
-80104f84:	e8 77 ca ff ff       	call   80101a00 <iunlockput>
+80105500:	83 ec 0c             	sub    $0xc,%esp
+80105503:	56                   	push   %esi
+80105504:	e8 f7 c4 ff ff       	call   80101a00 <iunlockput>
     goto bad;
-80104f89:	83 c4 10             	add    $0x10,%esp
+80105509:	83 c4 10             	add    $0x10,%esp
   ilock(ip);
-80104f8c:	83 ec 0c             	sub    $0xc,%esp
-80104f8f:	53                   	push   %ebx
-80104f90:	e8 cb c7 ff ff       	call   80101760 <ilock>
+8010550c:	83 ec 0c             	sub    $0xc,%esp
+8010550f:	53                   	push   %ebx
+80105510:	e8 4b c2 ff ff       	call   80101760 <ilock>
   ip->nlink--;
-80104f95:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+80105515:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
   iupdate(ip);
-80104f9a:	89 1c 24             	mov    %ebx,(%esp)
-80104f9d:	e8 fe c6 ff ff       	call   801016a0 <iupdate>
+8010551a:	89 1c 24             	mov    %ebx,(%esp)
+8010551d:	e8 7e c1 ff ff       	call   801016a0 <iupdate>
   iunlockput(ip);
-80104fa2:	89 1c 24             	mov    %ebx,(%esp)
-80104fa5:	e8 56 ca ff ff       	call   80101a00 <iunlockput>
+80105522:	89 1c 24             	mov    %ebx,(%esp)
+80105525:	e8 d6 c4 ff ff       	call   80101a00 <iunlockput>
   end_op();
-80104faa:	e8 f1 dd ff ff       	call   80102da0 <end_op>
+8010552a:	e8 71 d8 ff ff       	call   80102da0 <end_op>
   return -1;
-80104faf:	83 c4 10             	add    $0x10,%esp
-80104fb2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104fb7:	eb b5                	jmp    80104f6e <sys_link+0xde>
+8010552f:	83 c4 10             	add    $0x10,%esp
+80105532:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105537:	eb b5                	jmp    801054ee <sys_link+0xde>
     iunlockput(ip);
-80104fb9:	83 ec 0c             	sub    $0xc,%esp
-80104fbc:	53                   	push   %ebx
-80104fbd:	e8 3e ca ff ff       	call   80101a00 <iunlockput>
+80105539:	83 ec 0c             	sub    $0xc,%esp
+8010553c:	53                   	push   %ebx
+8010553d:	e8 be c4 ff ff       	call   80101a00 <iunlockput>
     end_op();
-80104fc2:	e8 d9 dd ff ff       	call   80102da0 <end_op>
+80105542:	e8 59 d8 ff ff       	call   80102da0 <end_op>
     return -1;
-80104fc7:	83 c4 10             	add    $0x10,%esp
-80104fca:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104fcf:	eb 9d                	jmp    80104f6e <sys_link+0xde>
+80105547:	83 c4 10             	add    $0x10,%esp
+8010554a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010554f:	eb 9d                	jmp    801054ee <sys_link+0xde>
     end_op();
-80104fd1:	e8 ca dd ff ff       	call   80102da0 <end_op>
+80105551:	e8 4a d8 ff ff       	call   80102da0 <end_op>
     return -1;
-80104fd6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104fdb:	eb 91                	jmp    80104f6e <sys_link+0xde>
-80104fdd:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104fe0 <sys_unlink>:
-{
-80104fe0:	f3 0f 1e fb          	endbr32 
-80104fe4:	55                   	push   %ebp
-80104fe5:	89 e5                	mov    %esp,%ebp
-80104fe7:	57                   	push   %edi
-80104fe8:	56                   	push   %esi
+80105556:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010555b:	eb 91                	jmp    801054ee <sys_link+0xde>
+8010555d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80105560 <sys_unlink>:
+{
+80105560:	f3 0f 1e fb          	endbr32 
+80105564:	55                   	push   %ebp
+80105565:	89 e5                	mov    %esp,%ebp
+80105567:	57                   	push   %edi
+80105568:	56                   	push   %esi
   if(argstr(0, &path) < 0)
-80104fe9:	8d 45 c0             	lea    -0x40(%ebp),%eax
+80105569:	8d 45 c0             	lea    -0x40(%ebp),%eax
 {
-80104fec:	53                   	push   %ebx
-80104fed:	83 ec 54             	sub    $0x54,%esp
+8010556c:	53                   	push   %ebx
+8010556d:	83 ec 54             	sub    $0x54,%esp
   if(argstr(0, &path) < 0)
-80104ff0:	50                   	push   %eax
-80104ff1:	6a 00                	push   $0x0
-80104ff3:	e8 08 fa ff ff       	call   80104a00 <argstr>
-80104ff8:	83 c4 10             	add    $0x10,%esp
-80104ffb:	85 c0                	test   %eax,%eax
-80104ffd:	0f 88 7d 01 00 00    	js     80105180 <sys_unlink+0x1a0>
+80105570:	50                   	push   %eax
+80105571:	6a 00                	push   $0x0
+80105573:	e8 08 fa ff ff       	call   80104f80 <argstr>
+80105578:	83 c4 10             	add    $0x10,%esp
+8010557b:	85 c0                	test   %eax,%eax
+8010557d:	0f 88 7d 01 00 00    	js     80105700 <sys_unlink+0x1a0>
   begin_op();
-80105003:	e8 28 dd ff ff       	call   80102d30 <begin_op>
+80105583:	e8 a8 d7 ff ff       	call   80102d30 <begin_op>
   if((dp = nameiparent(path, name)) == 0){
-80105008:	8d 5d ca             	lea    -0x36(%ebp),%ebx
-8010500b:	83 ec 08             	sub    $0x8,%esp
-8010500e:	53                   	push   %ebx
-8010500f:	ff 75 c0             	pushl  -0x40(%ebp)
-80105012:	e8 39 d0 ff ff       	call   80102050 <nameiparent>
-80105017:	83 c4 10             	add    $0x10,%esp
-8010501a:	89 c6                	mov    %eax,%esi
-8010501c:	85 c0                	test   %eax,%eax
-8010501e:	0f 84 66 01 00 00    	je     8010518a <sys_unlink+0x1aa>
+80105588:	8d 5d ca             	lea    -0x36(%ebp),%ebx
+8010558b:	83 ec 08             	sub    $0x8,%esp
+8010558e:	53                   	push   %ebx
+8010558f:	ff 75 c0             	pushl  -0x40(%ebp)
+80105592:	e8 b9 ca ff ff       	call   80102050 <nameiparent>
+80105597:	83 c4 10             	add    $0x10,%esp
+8010559a:	89 c6                	mov    %eax,%esi
+8010559c:	85 c0                	test   %eax,%eax
+8010559e:	0f 84 66 01 00 00    	je     8010570a <sys_unlink+0x1aa>
   ilock(dp);
-80105024:	83 ec 0c             	sub    $0xc,%esp
-80105027:	50                   	push   %eax
-80105028:	e8 33 c7 ff ff       	call   80101760 <ilock>
+801055a4:	83 ec 0c             	sub    $0xc,%esp
+801055a7:	50                   	push   %eax
+801055a8:	e8 b3 c1 ff ff       	call   80101760 <ilock>
   if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
-8010502d:	58                   	pop    %eax
-8010502e:	5a                   	pop    %edx
-8010502f:	68 14 78 10 80       	push   $0x80107814
-80105034:	53                   	push   %ebx
-80105035:	e8 56 cc ff ff       	call   80101c90 <namecmp>
-8010503a:	83 c4 10             	add    $0x10,%esp
-8010503d:	85 c0                	test   %eax,%eax
-8010503f:	0f 84 03 01 00 00    	je     80105148 <sys_unlink+0x168>
-80105045:	83 ec 08             	sub    $0x8,%esp
-80105048:	68 13 78 10 80       	push   $0x80107813
-8010504d:	53                   	push   %ebx
-8010504e:	e8 3d cc ff ff       	call   80101c90 <namecmp>
-80105053:	83 c4 10             	add    $0x10,%esp
-80105056:	85 c0                	test   %eax,%eax
-80105058:	0f 84 ea 00 00 00    	je     80105148 <sys_unlink+0x168>
+801055ad:	58                   	pop    %eax
+801055ae:	5a                   	pop    %edx
+801055af:	68 48 7e 10 80       	push   $0x80107e48
+801055b4:	53                   	push   %ebx
+801055b5:	e8 d6 c6 ff ff       	call   80101c90 <namecmp>
+801055ba:	83 c4 10             	add    $0x10,%esp
+801055bd:	85 c0                	test   %eax,%eax
+801055bf:	0f 84 03 01 00 00    	je     801056c8 <sys_unlink+0x168>
+801055c5:	83 ec 08             	sub    $0x8,%esp
+801055c8:	68 47 7e 10 80       	push   $0x80107e47
+801055cd:	53                   	push   %ebx
+801055ce:	e8 bd c6 ff ff       	call   80101c90 <namecmp>
+801055d3:	83 c4 10             	add    $0x10,%esp
+801055d6:	85 c0                	test   %eax,%eax
+801055d8:	0f 84 ea 00 00 00    	je     801056c8 <sys_unlink+0x168>
   if((ip = dirlookup(dp, name, &off)) == 0)
-8010505e:	83 ec 04             	sub    $0x4,%esp
-80105061:	8d 45 c4             	lea    -0x3c(%ebp),%eax
-80105064:	50                   	push   %eax
-80105065:	53                   	push   %ebx
-80105066:	56                   	push   %esi
-80105067:	e8 44 cc ff ff       	call   80101cb0 <dirlookup>
-8010506c:	83 c4 10             	add    $0x10,%esp
-8010506f:	89 c3                	mov    %eax,%ebx
-80105071:	85 c0                	test   %eax,%eax
-80105073:	0f 84 cf 00 00 00    	je     80105148 <sys_unlink+0x168>
+801055de:	83 ec 04             	sub    $0x4,%esp
+801055e1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
+801055e4:	50                   	push   %eax
+801055e5:	53                   	push   %ebx
+801055e6:	56                   	push   %esi
+801055e7:	e8 c4 c6 ff ff       	call   80101cb0 <dirlookup>
+801055ec:	83 c4 10             	add    $0x10,%esp
+801055ef:	89 c3                	mov    %eax,%ebx
+801055f1:	85 c0                	test   %eax,%eax
+801055f3:	0f 84 cf 00 00 00    	je     801056c8 <sys_unlink+0x168>
   ilock(ip);
-80105079:	83 ec 0c             	sub    $0xc,%esp
-8010507c:	50                   	push   %eax
-8010507d:	e8 de c6 ff ff       	call   80101760 <ilock>
+801055f9:	83 ec 0c             	sub    $0xc,%esp
+801055fc:	50                   	push   %eax
+801055fd:	e8 5e c1 ff ff       	call   80101760 <ilock>
   if(ip->nlink < 1)
-80105082:	83 c4 10             	add    $0x10,%esp
-80105085:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
-8010508a:	0f 8e 23 01 00 00    	jle    801051b3 <sys_unlink+0x1d3>
+80105602:	83 c4 10             	add    $0x10,%esp
+80105605:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+8010560a:	0f 8e 23 01 00 00    	jle    80105733 <sys_unlink+0x1d3>
   if(ip->type == T_DIR && !isdirempty(ip)){
-80105090:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80105095:	8d 7d d8             	lea    -0x28(%ebp),%edi
-80105098:	74 66                	je     80105100 <sys_unlink+0x120>
+80105610:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105615:	8d 7d d8             	lea    -0x28(%ebp),%edi
+80105618:	74 66                	je     80105680 <sys_unlink+0x120>
   memset(&de, 0, sizeof(de));
-8010509a:	83 ec 04             	sub    $0x4,%esp
-8010509d:	6a 10                	push   $0x10
-8010509f:	6a 00                	push   $0x0
-801050a1:	57                   	push   %edi
-801050a2:	e8 c9 f5 ff ff       	call   80104670 <memset>
+8010561a:	83 ec 04             	sub    $0x4,%esp
+8010561d:	6a 10                	push   $0x10
+8010561f:	6a 00                	push   $0x0
+80105621:	57                   	push   %edi
+80105622:	e8 c9 f5 ff ff       	call   80104bf0 <memset>
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-801050a7:	6a 10                	push   $0x10
-801050a9:	ff 75 c4             	pushl  -0x3c(%ebp)
-801050ac:	57                   	push   %edi
-801050ad:	56                   	push   %esi
-801050ae:	e8 ad ca ff ff       	call   80101b60 <writei>
-801050b3:	83 c4 20             	add    $0x20,%esp
-801050b6:	83 f8 10             	cmp    $0x10,%eax
-801050b9:	0f 85 e7 00 00 00    	jne    801051a6 <sys_unlink+0x1c6>
+80105627:	6a 10                	push   $0x10
+80105629:	ff 75 c4             	pushl  -0x3c(%ebp)
+8010562c:	57                   	push   %edi
+8010562d:	56                   	push   %esi
+8010562e:	e8 2d c5 ff ff       	call   80101b60 <writei>
+80105633:	83 c4 20             	add    $0x20,%esp
+80105636:	83 f8 10             	cmp    $0x10,%eax
+80105639:	0f 85 e7 00 00 00    	jne    80105726 <sys_unlink+0x1c6>
   if(ip->type == T_DIR){
-801050bf:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-801050c4:	0f 84 96 00 00 00    	je     80105160 <sys_unlink+0x180>
+8010563f:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105644:	0f 84 96 00 00 00    	je     801056e0 <sys_unlink+0x180>
   iunlockput(dp);
-801050ca:	83 ec 0c             	sub    $0xc,%esp
-801050cd:	56                   	push   %esi
-801050ce:	e8 2d c9 ff ff       	call   80101a00 <iunlockput>
+8010564a:	83 ec 0c             	sub    $0xc,%esp
+8010564d:	56                   	push   %esi
+8010564e:	e8 ad c3 ff ff       	call   80101a00 <iunlockput>
   ip->nlink--;
-801050d3:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+80105653:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
   iupdate(ip);
-801050d8:	89 1c 24             	mov    %ebx,(%esp)
-801050db:	e8 c0 c5 ff ff       	call   801016a0 <iupdate>
+80105658:	89 1c 24             	mov    %ebx,(%esp)
+8010565b:	e8 40 c0 ff ff       	call   801016a0 <iupdate>
   iunlockput(ip);
-801050e0:	89 1c 24             	mov    %ebx,(%esp)
-801050e3:	e8 18 c9 ff ff       	call   80101a00 <iunlockput>
+80105660:	89 1c 24             	mov    %ebx,(%esp)
+80105663:	e8 98 c3 ff ff       	call   80101a00 <iunlockput>
   end_op();
-801050e8:	e8 b3 dc ff ff       	call   80102da0 <end_op>
+80105668:	e8 33 d7 ff ff       	call   80102da0 <end_op>
   return 0;
-801050ed:	83 c4 10             	add    $0x10,%esp
-801050f0:	31 c0                	xor    %eax,%eax
+8010566d:	83 c4 10             	add    $0x10,%esp
+80105670:	31 c0                	xor    %eax,%eax
 }
-801050f2:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801050f5:	5b                   	pop    %ebx
-801050f6:	5e                   	pop    %esi
-801050f7:	5f                   	pop    %edi
-801050f8:	5d                   	pop    %ebp
-801050f9:	c3                   	ret    
-801050fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105672:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105675:	5b                   	pop    %ebx
+80105676:	5e                   	pop    %esi
+80105677:	5f                   	pop    %edi
+80105678:	5d                   	pop    %ebp
+80105679:	c3                   	ret    
+8010567a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
-80105100:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
-80105104:	76 94                	jbe    8010509a <sys_unlink+0xba>
-80105106:	ba 20 00 00 00       	mov    $0x20,%edx
-8010510b:	eb 0b                	jmp    80105118 <sys_unlink+0x138>
-8010510d:	8d 76 00             	lea    0x0(%esi),%esi
-80105110:	83 c2 10             	add    $0x10,%edx
-80105113:	39 53 58             	cmp    %edx,0x58(%ebx)
-80105116:	76 82                	jbe    8010509a <sys_unlink+0xba>
+80105680:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
+80105684:	76 94                	jbe    8010561a <sys_unlink+0xba>
+80105686:	ba 20 00 00 00       	mov    $0x20,%edx
+8010568b:	eb 0b                	jmp    80105698 <sys_unlink+0x138>
+8010568d:	8d 76 00             	lea    0x0(%esi),%esi
+80105690:	83 c2 10             	add    $0x10,%edx
+80105693:	39 53 58             	cmp    %edx,0x58(%ebx)
+80105696:	76 82                	jbe    8010561a <sys_unlink+0xba>
     if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80105118:	6a 10                	push   $0x10
-8010511a:	52                   	push   %edx
-8010511b:	57                   	push   %edi
-8010511c:	53                   	push   %ebx
-8010511d:	89 55 b4             	mov    %edx,-0x4c(%ebp)
-80105120:	e8 3b c9 ff ff       	call   80101a60 <readi>
-80105125:	83 c4 10             	add    $0x10,%esp
-80105128:	8b 55 b4             	mov    -0x4c(%ebp),%edx
-8010512b:	83 f8 10             	cmp    $0x10,%eax
-8010512e:	75 69                	jne    80105199 <sys_unlink+0x1b9>
+80105698:	6a 10                	push   $0x10
+8010569a:	52                   	push   %edx
+8010569b:	57                   	push   %edi
+8010569c:	53                   	push   %ebx
+8010569d:	89 55 b4             	mov    %edx,-0x4c(%ebp)
+801056a0:	e8 bb c3 ff ff       	call   80101a60 <readi>
+801056a5:	83 c4 10             	add    $0x10,%esp
+801056a8:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+801056ab:	83 f8 10             	cmp    $0x10,%eax
+801056ae:	75 69                	jne    80105719 <sys_unlink+0x1b9>
     if(de.inum != 0)
-80105130:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
-80105135:	74 d9                	je     80105110 <sys_unlink+0x130>
+801056b0:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+801056b5:	74 d9                	je     80105690 <sys_unlink+0x130>
     iunlockput(ip);
-80105137:	83 ec 0c             	sub    $0xc,%esp
-8010513a:	53                   	push   %ebx
-8010513b:	e8 c0 c8 ff ff       	call   80101a00 <iunlockput>
+801056b7:	83 ec 0c             	sub    $0xc,%esp
+801056ba:	53                   	push   %ebx
+801056bb:	e8 40 c3 ff ff       	call   80101a00 <iunlockput>
     goto bad;
-80105140:	83 c4 10             	add    $0x10,%esp
-80105143:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105147:	90                   	nop
+801056c0:	83 c4 10             	add    $0x10,%esp
+801056c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801056c7:	90                   	nop
   iunlockput(dp);
-80105148:	83 ec 0c             	sub    $0xc,%esp
-8010514b:	56                   	push   %esi
-8010514c:	e8 af c8 ff ff       	call   80101a00 <iunlockput>
+801056c8:	83 ec 0c             	sub    $0xc,%esp
+801056cb:	56                   	push   %esi
+801056cc:	e8 2f c3 ff ff       	call   80101a00 <iunlockput>
   end_op();
-80105151:	e8 4a dc ff ff       	call   80102da0 <end_op>
+801056d1:	e8 ca d6 ff ff       	call   80102da0 <end_op>
   return -1;
-80105156:	83 c4 10             	add    $0x10,%esp
-80105159:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010515e:	eb 92                	jmp    801050f2 <sys_unlink+0x112>
+801056d6:	83 c4 10             	add    $0x10,%esp
+801056d9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801056de:	eb 92                	jmp    80105672 <sys_unlink+0x112>
     iupdate(dp);
-80105160:	83 ec 0c             	sub    $0xc,%esp
+801056e0:	83 ec 0c             	sub    $0xc,%esp
     dp->nlink--;
-80105163:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
+801056e3:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
     iupdate(dp);
-80105168:	56                   	push   %esi
-80105169:	e8 32 c5 ff ff       	call   801016a0 <iupdate>
-8010516e:	83 c4 10             	add    $0x10,%esp
-80105171:	e9 54 ff ff ff       	jmp    801050ca <sys_unlink+0xea>
-80105176:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010517d:	8d 76 00             	lea    0x0(%esi),%esi
+801056e8:	56                   	push   %esi
+801056e9:	e8 b2 bf ff ff       	call   801016a0 <iupdate>
+801056ee:	83 c4 10             	add    $0x10,%esp
+801056f1:	e9 54 ff ff ff       	jmp    8010564a <sys_unlink+0xea>
+801056f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801056fd:	8d 76 00             	lea    0x0(%esi),%esi
     return -1;
-80105180:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105185:	e9 68 ff ff ff       	jmp    801050f2 <sys_unlink+0x112>
+80105700:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105705:	e9 68 ff ff ff       	jmp    80105672 <sys_unlink+0x112>
     end_op();
-8010518a:	e8 11 dc ff ff       	call   80102da0 <end_op>
+8010570a:	e8 91 d6 ff ff       	call   80102da0 <end_op>
     return -1;
-8010518f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105194:	e9 59 ff ff ff       	jmp    801050f2 <sys_unlink+0x112>
+8010570f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105714:	e9 59 ff ff ff       	jmp    80105672 <sys_unlink+0x112>
       panic("isdirempty: readi");
-80105199:	83 ec 0c             	sub    $0xc,%esp
-8010519c:	68 38 78 10 80       	push   $0x80107838
-801051a1:	e8 ea b1 ff ff       	call   80100390 <panic>
+80105719:	83 ec 0c             	sub    $0xc,%esp
+8010571c:	68 6c 7e 10 80       	push   $0x80107e6c
+80105721:	e8 6a ac ff ff       	call   80100390 <panic>
     panic("unlink: writei");
-801051a6:	83 ec 0c             	sub    $0xc,%esp
-801051a9:	68 4a 78 10 80       	push   $0x8010784a
-801051ae:	e8 dd b1 ff ff       	call   80100390 <panic>
+80105726:	83 ec 0c             	sub    $0xc,%esp
+80105729:	68 7e 7e 10 80       	push   $0x80107e7e
+8010572e:	e8 5d ac ff ff       	call   80100390 <panic>
     panic("unlink: nlink < 1");
-801051b3:	83 ec 0c             	sub    $0xc,%esp
-801051b6:	68 26 78 10 80       	push   $0x80107826
-801051bb:	e8 d0 b1 ff ff       	call   80100390 <panic>
+80105733:	83 ec 0c             	sub    $0xc,%esp
+80105736:	68 5a 7e 10 80       	push   $0x80107e5a
+8010573b:	e8 50 ac ff ff       	call   80100390 <panic>
 
-801051c0 <sys_open>:
+80105740 <sys_open>:
 
 int
 sys_open(void)
 {
-801051c0:	f3 0f 1e fb          	endbr32 
-801051c4:	55                   	push   %ebp
-801051c5:	89 e5                	mov    %esp,%ebp
-801051c7:	57                   	push   %edi
-801051c8:	56                   	push   %esi
+80105740:	f3 0f 1e fb          	endbr32 
+80105744:	55                   	push   %ebp
+80105745:	89 e5                	mov    %esp,%ebp
+80105747:	57                   	push   %edi
+80105748:	56                   	push   %esi
   char *path;
   int fd, omode;
   struct file *f;
   struct inode *ip;
 
   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-801051c9:	8d 45 e0             	lea    -0x20(%ebp),%eax
+80105749:	8d 45 e0             	lea    -0x20(%ebp),%eax
 {
-801051cc:	53                   	push   %ebx
-801051cd:	83 ec 24             	sub    $0x24,%esp
+8010574c:	53                   	push   %ebx
+8010574d:	83 ec 24             	sub    $0x24,%esp
   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-801051d0:	50                   	push   %eax
-801051d1:	6a 00                	push   $0x0
-801051d3:	e8 28 f8 ff ff       	call   80104a00 <argstr>
-801051d8:	83 c4 10             	add    $0x10,%esp
-801051db:	85 c0                	test   %eax,%eax
-801051dd:	0f 88 8a 00 00 00    	js     8010526d <sys_open+0xad>
-801051e3:	83 ec 08             	sub    $0x8,%esp
-801051e6:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-801051e9:	50                   	push   %eax
-801051ea:	6a 01                	push   $0x1
-801051ec:	e8 5f f7 ff ff       	call   80104950 <argint>
-801051f1:	83 c4 10             	add    $0x10,%esp
-801051f4:	85 c0                	test   %eax,%eax
-801051f6:	78 75                	js     8010526d <sys_open+0xad>
+80105750:	50                   	push   %eax
+80105751:	6a 00                	push   $0x0
+80105753:	e8 28 f8 ff ff       	call   80104f80 <argstr>
+80105758:	83 c4 10             	add    $0x10,%esp
+8010575b:	85 c0                	test   %eax,%eax
+8010575d:	0f 88 8a 00 00 00    	js     801057ed <sys_open+0xad>
+80105763:	83 ec 08             	sub    $0x8,%esp
+80105766:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105769:	50                   	push   %eax
+8010576a:	6a 01                	push   $0x1
+8010576c:	e8 5f f7 ff ff       	call   80104ed0 <argint>
+80105771:	83 c4 10             	add    $0x10,%esp
+80105774:	85 c0                	test   %eax,%eax
+80105776:	78 75                	js     801057ed <sys_open+0xad>
     return -1;
 
   begin_op();
-801051f8:	e8 33 db ff ff       	call   80102d30 <begin_op>
+80105778:	e8 b3 d5 ff ff       	call   80102d30 <begin_op>
 
   if(omode & O_CREATE){
-801051fd:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
-80105201:	75 75                	jne    80105278 <sys_open+0xb8>
+8010577d:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
+80105781:	75 75                	jne    801057f8 <sys_open+0xb8>
     if(ip == 0){
       end_op();
       return -1;
     }
   } else {
     if((ip = namei(path)) == 0){
-80105203:	83 ec 0c             	sub    $0xc,%esp
-80105206:	ff 75 e0             	pushl  -0x20(%ebp)
-80105209:	e8 22 ce ff ff       	call   80102030 <namei>
-8010520e:	83 c4 10             	add    $0x10,%esp
-80105211:	89 c6                	mov    %eax,%esi
-80105213:	85 c0                	test   %eax,%eax
-80105215:	74 7e                	je     80105295 <sys_open+0xd5>
+80105783:	83 ec 0c             	sub    $0xc,%esp
+80105786:	ff 75 e0             	pushl  -0x20(%ebp)
+80105789:	e8 a2 c8 ff ff       	call   80102030 <namei>
+8010578e:	83 c4 10             	add    $0x10,%esp
+80105791:	89 c6                	mov    %eax,%esi
+80105793:	85 c0                	test   %eax,%eax
+80105795:	74 7e                	je     80105815 <sys_open+0xd5>
       end_op();
       return -1;
     }
     ilock(ip);
-80105217:	83 ec 0c             	sub    $0xc,%esp
-8010521a:	50                   	push   %eax
-8010521b:	e8 40 c5 ff ff       	call   80101760 <ilock>
+80105797:	83 ec 0c             	sub    $0xc,%esp
+8010579a:	50                   	push   %eax
+8010579b:	e8 c0 bf ff ff       	call   80101760 <ilock>
     if(ip->type == T_DIR && omode != O_RDONLY){
-80105220:	83 c4 10             	add    $0x10,%esp
-80105223:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
-80105228:	0f 84 c2 00 00 00    	je     801052f0 <sys_open+0x130>
+801057a0:	83 c4 10             	add    $0x10,%esp
+801057a3:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+801057a8:	0f 84 c2 00 00 00    	je     80105870 <sys_open+0x130>
       end_op();
       return -1;
     }
   }
 
   if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
-8010522e:	e8 cd bb ff ff       	call   80100e00 <filealloc>
-80105233:	89 c7                	mov    %eax,%edi
-80105235:	85 c0                	test   %eax,%eax
-80105237:	74 23                	je     8010525c <sys_open+0x9c>
+801057ae:	e8 4d b6 ff ff       	call   80100e00 <filealloc>
+801057b3:	89 c7                	mov    %eax,%edi
+801057b5:	85 c0                	test   %eax,%eax
+801057b7:	74 23                	je     801057dc <sys_open+0x9c>
   struct proc *curproc = myproc();
-80105239:	e8 22 e7 ff ff       	call   80103960 <myproc>
+801057b9:	e8 a2 e4 ff ff       	call   80103c60 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-8010523e:	31 db                	xor    %ebx,%ebx
+801057be:	31 db                	xor    %ebx,%ebx
     if(curproc->ofile[fd] == 0){
-80105240:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-80105244:	85 d2                	test   %edx,%edx
-80105246:	74 60                	je     801052a8 <sys_open+0xe8>
+801057c0:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+801057c4:	85 d2                	test   %edx,%edx
+801057c6:	74 60                	je     80105828 <sys_open+0xe8>
   for(fd = 0; fd < NOFILE; fd++){
-80105248:	83 c3 01             	add    $0x1,%ebx
-8010524b:	83 fb 10             	cmp    $0x10,%ebx
-8010524e:	75 f0                	jne    80105240 <sys_open+0x80>
+801057c8:	83 c3 01             	add    $0x1,%ebx
+801057cb:	83 fb 10             	cmp    $0x10,%ebx
+801057ce:	75 f0                	jne    801057c0 <sys_open+0x80>
     if(f)
       fileclose(f);
-80105250:	83 ec 0c             	sub    $0xc,%esp
-80105253:	57                   	push   %edi
-80105254:	e8 67 bc ff ff       	call   80100ec0 <fileclose>
-80105259:	83 c4 10             	add    $0x10,%esp
+801057d0:	83 ec 0c             	sub    $0xc,%esp
+801057d3:	57                   	push   %edi
+801057d4:	e8 e7 b6 ff ff       	call   80100ec0 <fileclose>
+801057d9:	83 c4 10             	add    $0x10,%esp
     iunlockput(ip);
-8010525c:	83 ec 0c             	sub    $0xc,%esp
-8010525f:	56                   	push   %esi
-80105260:	e8 9b c7 ff ff       	call   80101a00 <iunlockput>
+801057dc:	83 ec 0c             	sub    $0xc,%esp
+801057df:	56                   	push   %esi
+801057e0:	e8 1b c2 ff ff       	call   80101a00 <iunlockput>
     end_op();
-80105265:	e8 36 db ff ff       	call   80102da0 <end_op>
+801057e5:	e8 b6 d5 ff ff       	call   80102da0 <end_op>
     return -1;
-8010526a:	83 c4 10             	add    $0x10,%esp
-8010526d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80105272:	eb 6d                	jmp    801052e1 <sys_open+0x121>
-80105274:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801057ea:	83 c4 10             	add    $0x10,%esp
+801057ed:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+801057f2:	eb 6d                	jmp    80105861 <sys_open+0x121>
+801057f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     ip = create(path, T_FILE, 0, 0);
-80105278:	83 ec 0c             	sub    $0xc,%esp
-8010527b:	8b 45 e0             	mov    -0x20(%ebp),%eax
-8010527e:	31 c9                	xor    %ecx,%ecx
-80105280:	ba 02 00 00 00       	mov    $0x2,%edx
-80105285:	6a 00                	push   $0x0
-80105287:	e8 24 f8 ff ff       	call   80104ab0 <create>
+801057f8:	83 ec 0c             	sub    $0xc,%esp
+801057fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801057fe:	31 c9                	xor    %ecx,%ecx
+80105800:	ba 02 00 00 00       	mov    $0x2,%edx
+80105805:	6a 00                	push   $0x0
+80105807:	e8 24 f8 ff ff       	call   80105030 <create>
     if(ip == 0){
-8010528c:	83 c4 10             	add    $0x10,%esp
+8010580c:	83 c4 10             	add    $0x10,%esp
     ip = create(path, T_FILE, 0, 0);
-8010528f:	89 c6                	mov    %eax,%esi
+8010580f:	89 c6                	mov    %eax,%esi
     if(ip == 0){
-80105291:	85 c0                	test   %eax,%eax
-80105293:	75 99                	jne    8010522e <sys_open+0x6e>
+80105811:	85 c0                	test   %eax,%eax
+80105813:	75 99                	jne    801057ae <sys_open+0x6e>
       end_op();
-80105295:	e8 06 db ff ff       	call   80102da0 <end_op>
+80105815:	e8 86 d5 ff ff       	call   80102da0 <end_op>
       return -1;
-8010529a:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-8010529f:	eb 40                	jmp    801052e1 <sys_open+0x121>
-801052a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010581a:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+8010581f:	eb 40                	jmp    80105861 <sys_open+0x121>
+80105821:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   }
   iunlock(ip);
-801052a8:	83 ec 0c             	sub    $0xc,%esp
+80105828:	83 ec 0c             	sub    $0xc,%esp
       curproc->ofile[fd] = f;
-801052ab:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
+8010582b:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
   iunlock(ip);
-801052af:	56                   	push   %esi
-801052b0:	e8 8b c5 ff ff       	call   80101840 <iunlock>
+8010582f:	56                   	push   %esi
+80105830:	e8 0b c0 ff ff       	call   80101840 <iunlock>
   end_op();
-801052b5:	e8 e6 da ff ff       	call   80102da0 <end_op>
+80105835:	e8 66 d5 ff ff       	call   80102da0 <end_op>
 
   f->type = FD_INODE;
-801052ba:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
+8010583a:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
   f->ip = ip;
   f->off = 0;
   f->readable = !(omode & O_WRONLY);
-801052c0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80105840:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801052c3:	83 c4 10             	add    $0x10,%esp
+80105843:	83 c4 10             	add    $0x10,%esp
   f->ip = ip;
-801052c6:	89 77 10             	mov    %esi,0x10(%edi)
+80105846:	89 77 10             	mov    %esi,0x10(%edi)
   f->readable = !(omode & O_WRONLY);
-801052c9:	89 d0                	mov    %edx,%eax
+80105849:	89 d0                	mov    %edx,%eax
   f->off = 0;
-801052cb:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
+8010584b:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
   f->readable = !(omode & O_WRONLY);
-801052d2:	f7 d0                	not    %eax
-801052d4:	83 e0 01             	and    $0x1,%eax
+80105852:	f7 d0                	not    %eax
+80105854:	83 e0 01             	and    $0x1,%eax
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801052d7:	83 e2 03             	and    $0x3,%edx
+80105857:	83 e2 03             	and    $0x3,%edx
   f->readable = !(omode & O_WRONLY);
-801052da:	88 47 08             	mov    %al,0x8(%edi)
+8010585a:	88 47 08             	mov    %al,0x8(%edi)
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801052dd:	0f 95 47 09          	setne  0x9(%edi)
+8010585d:	0f 95 47 09          	setne  0x9(%edi)
   return fd;
 }
-801052e1:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801052e4:	89 d8                	mov    %ebx,%eax
-801052e6:	5b                   	pop    %ebx
-801052e7:	5e                   	pop    %esi
-801052e8:	5f                   	pop    %edi
-801052e9:	5d                   	pop    %ebp
-801052ea:	c3                   	ret    
-801052eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801052ef:	90                   	nop
+80105861:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105864:	89 d8                	mov    %ebx,%eax
+80105866:	5b                   	pop    %ebx
+80105867:	5e                   	pop    %esi
+80105868:	5f                   	pop    %edi
+80105869:	5d                   	pop    %ebp
+8010586a:	c3                   	ret    
+8010586b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010586f:	90                   	nop
     if(ip->type == T_DIR && omode != O_RDONLY){
-801052f0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-801052f3:	85 c9                	test   %ecx,%ecx
-801052f5:	0f 84 33 ff ff ff    	je     8010522e <sys_open+0x6e>
-801052fb:	e9 5c ff ff ff       	jmp    8010525c <sys_open+0x9c>
+80105870:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80105873:	85 c9                	test   %ecx,%ecx
+80105875:	0f 84 33 ff ff ff    	je     801057ae <sys_open+0x6e>
+8010587b:	e9 5c ff ff ff       	jmp    801057dc <sys_open+0x9c>
 
-80105300 <sys_mkdir>:
+80105880 <sys_mkdir>:
 
 int
 sys_mkdir(void)
 {
-80105300:	f3 0f 1e fb          	endbr32 
-80105304:	55                   	push   %ebp
-80105305:	89 e5                	mov    %esp,%ebp
-80105307:	83 ec 18             	sub    $0x18,%esp
+80105880:	f3 0f 1e fb          	endbr32 
+80105884:	55                   	push   %ebp
+80105885:	89 e5                	mov    %esp,%ebp
+80105887:	83 ec 18             	sub    $0x18,%esp
   char *path;
   struct inode *ip;
 
   begin_op();
-8010530a:	e8 21 da ff ff       	call   80102d30 <begin_op>
+8010588a:	e8 a1 d4 ff ff       	call   80102d30 <begin_op>
   if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
-8010530f:	83 ec 08             	sub    $0x8,%esp
-80105312:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105315:	50                   	push   %eax
-80105316:	6a 00                	push   $0x0
-80105318:	e8 e3 f6 ff ff       	call   80104a00 <argstr>
-8010531d:	83 c4 10             	add    $0x10,%esp
-80105320:	85 c0                	test   %eax,%eax
-80105322:	78 34                	js     80105358 <sys_mkdir+0x58>
-80105324:	83 ec 0c             	sub    $0xc,%esp
-80105327:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010532a:	31 c9                	xor    %ecx,%ecx
-8010532c:	ba 01 00 00 00       	mov    $0x1,%edx
-80105331:	6a 00                	push   $0x0
-80105333:	e8 78 f7 ff ff       	call   80104ab0 <create>
-80105338:	83 c4 10             	add    $0x10,%esp
-8010533b:	85 c0                	test   %eax,%eax
-8010533d:	74 19                	je     80105358 <sys_mkdir+0x58>
+8010588f:	83 ec 08             	sub    $0x8,%esp
+80105892:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105895:	50                   	push   %eax
+80105896:	6a 00                	push   $0x0
+80105898:	e8 e3 f6 ff ff       	call   80104f80 <argstr>
+8010589d:	83 c4 10             	add    $0x10,%esp
+801058a0:	85 c0                	test   %eax,%eax
+801058a2:	78 34                	js     801058d8 <sys_mkdir+0x58>
+801058a4:	83 ec 0c             	sub    $0xc,%esp
+801058a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801058aa:	31 c9                	xor    %ecx,%ecx
+801058ac:	ba 01 00 00 00       	mov    $0x1,%edx
+801058b1:	6a 00                	push   $0x0
+801058b3:	e8 78 f7 ff ff       	call   80105030 <create>
+801058b8:	83 c4 10             	add    $0x10,%esp
+801058bb:	85 c0                	test   %eax,%eax
+801058bd:	74 19                	je     801058d8 <sys_mkdir+0x58>
     end_op();
     return -1;
   }
   iunlockput(ip);
-8010533f:	83 ec 0c             	sub    $0xc,%esp
-80105342:	50                   	push   %eax
-80105343:	e8 b8 c6 ff ff       	call   80101a00 <iunlockput>
+801058bf:	83 ec 0c             	sub    $0xc,%esp
+801058c2:	50                   	push   %eax
+801058c3:	e8 38 c1 ff ff       	call   80101a00 <iunlockput>
   end_op();
-80105348:	e8 53 da ff ff       	call   80102da0 <end_op>
+801058c8:	e8 d3 d4 ff ff       	call   80102da0 <end_op>
   return 0;
-8010534d:	83 c4 10             	add    $0x10,%esp
-80105350:	31 c0                	xor    %eax,%eax
+801058cd:	83 c4 10             	add    $0x10,%esp
+801058d0:	31 c0                	xor    %eax,%eax
 }
-80105352:	c9                   	leave  
-80105353:	c3                   	ret    
-80105354:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801058d2:	c9                   	leave  
+801058d3:	c3                   	ret    
+801058d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     end_op();
-80105358:	e8 43 da ff ff       	call   80102da0 <end_op>
+801058d8:	e8 c3 d4 ff ff       	call   80102da0 <end_op>
     return -1;
-8010535d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801058dd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105362:	c9                   	leave  
-80105363:	c3                   	ret    
-80105364:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010536b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010536f:	90                   	nop
+801058e2:	c9                   	leave  
+801058e3:	c3                   	ret    
+801058e4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801058eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801058ef:	90                   	nop
 
-80105370 <sys_mknod>:
+801058f0 <sys_mknod>:
 
 int
 sys_mknod(void)
 {
-80105370:	f3 0f 1e fb          	endbr32 
-80105374:	55                   	push   %ebp
-80105375:	89 e5                	mov    %esp,%ebp
-80105377:	83 ec 18             	sub    $0x18,%esp
+801058f0:	f3 0f 1e fb          	endbr32 
+801058f4:	55                   	push   %ebp
+801058f5:	89 e5                	mov    %esp,%ebp
+801058f7:	83 ec 18             	sub    $0x18,%esp
   struct inode *ip;
   char *path;
   int major, minor;
 
   begin_op();
-8010537a:	e8 b1 d9 ff ff       	call   80102d30 <begin_op>
+801058fa:	e8 31 d4 ff ff       	call   80102d30 <begin_op>
   if((argstr(0, &path)) < 0 ||
-8010537f:	83 ec 08             	sub    $0x8,%esp
-80105382:	8d 45 ec             	lea    -0x14(%ebp),%eax
-80105385:	50                   	push   %eax
-80105386:	6a 00                	push   $0x0
-80105388:	e8 73 f6 ff ff       	call   80104a00 <argstr>
-8010538d:	83 c4 10             	add    $0x10,%esp
-80105390:	85 c0                	test   %eax,%eax
-80105392:	78 64                	js     801053f8 <sys_mknod+0x88>
+801058ff:	83 ec 08             	sub    $0x8,%esp
+80105902:	8d 45 ec             	lea    -0x14(%ebp),%eax
+80105905:	50                   	push   %eax
+80105906:	6a 00                	push   $0x0
+80105908:	e8 73 f6 ff ff       	call   80104f80 <argstr>
+8010590d:	83 c4 10             	add    $0x10,%esp
+80105910:	85 c0                	test   %eax,%eax
+80105912:	78 64                	js     80105978 <sys_mknod+0x88>
      argint(1, &major) < 0 ||
-80105394:	83 ec 08             	sub    $0x8,%esp
-80105397:	8d 45 f0             	lea    -0x10(%ebp),%eax
-8010539a:	50                   	push   %eax
-8010539b:	6a 01                	push   $0x1
-8010539d:	e8 ae f5 ff ff       	call   80104950 <argint>
+80105914:	83 ec 08             	sub    $0x8,%esp
+80105917:	8d 45 f0             	lea    -0x10(%ebp),%eax
+8010591a:	50                   	push   %eax
+8010591b:	6a 01                	push   $0x1
+8010591d:	e8 ae f5 ff ff       	call   80104ed0 <argint>
   if((argstr(0, &path)) < 0 ||
-801053a2:	83 c4 10             	add    $0x10,%esp
-801053a5:	85 c0                	test   %eax,%eax
-801053a7:	78 4f                	js     801053f8 <sys_mknod+0x88>
+80105922:	83 c4 10             	add    $0x10,%esp
+80105925:	85 c0                	test   %eax,%eax
+80105927:	78 4f                	js     80105978 <sys_mknod+0x88>
      argint(2, &minor) < 0 ||
-801053a9:	83 ec 08             	sub    $0x8,%esp
-801053ac:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801053af:	50                   	push   %eax
-801053b0:	6a 02                	push   $0x2
-801053b2:	e8 99 f5 ff ff       	call   80104950 <argint>
+80105929:	83 ec 08             	sub    $0x8,%esp
+8010592c:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010592f:	50                   	push   %eax
+80105930:	6a 02                	push   $0x2
+80105932:	e8 99 f5 ff ff       	call   80104ed0 <argint>
      argint(1, &major) < 0 ||
-801053b7:	83 c4 10             	add    $0x10,%esp
-801053ba:	85 c0                	test   %eax,%eax
-801053bc:	78 3a                	js     801053f8 <sys_mknod+0x88>
+80105937:	83 c4 10             	add    $0x10,%esp
+8010593a:	85 c0                	test   %eax,%eax
+8010593c:	78 3a                	js     80105978 <sys_mknod+0x88>
      (ip = create(path, T_DEV, major, minor)) == 0){
-801053be:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
-801053c2:	83 ec 0c             	sub    $0xc,%esp
-801053c5:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
-801053c9:	ba 03 00 00 00       	mov    $0x3,%edx
-801053ce:	50                   	push   %eax
-801053cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
-801053d2:	e8 d9 f6 ff ff       	call   80104ab0 <create>
+8010593e:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
+80105942:	83 ec 0c             	sub    $0xc,%esp
+80105945:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
+80105949:	ba 03 00 00 00       	mov    $0x3,%edx
+8010594e:	50                   	push   %eax
+8010594f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80105952:	e8 d9 f6 ff ff       	call   80105030 <create>
      argint(2, &minor) < 0 ||
-801053d7:	83 c4 10             	add    $0x10,%esp
-801053da:	85 c0                	test   %eax,%eax
-801053dc:	74 1a                	je     801053f8 <sys_mknod+0x88>
+80105957:	83 c4 10             	add    $0x10,%esp
+8010595a:	85 c0                	test   %eax,%eax
+8010595c:	74 1a                	je     80105978 <sys_mknod+0x88>
     end_op();
     return -1;
   }
   iunlockput(ip);
-801053de:	83 ec 0c             	sub    $0xc,%esp
-801053e1:	50                   	push   %eax
-801053e2:	e8 19 c6 ff ff       	call   80101a00 <iunlockput>
+8010595e:	83 ec 0c             	sub    $0xc,%esp
+80105961:	50                   	push   %eax
+80105962:	e8 99 c0 ff ff       	call   80101a00 <iunlockput>
   end_op();
-801053e7:	e8 b4 d9 ff ff       	call   80102da0 <end_op>
+80105967:	e8 34 d4 ff ff       	call   80102da0 <end_op>
   return 0;
-801053ec:	83 c4 10             	add    $0x10,%esp
-801053ef:	31 c0                	xor    %eax,%eax
+8010596c:	83 c4 10             	add    $0x10,%esp
+8010596f:	31 c0                	xor    %eax,%eax
 }
-801053f1:	c9                   	leave  
-801053f2:	c3                   	ret    
-801053f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801053f7:	90                   	nop
+80105971:	c9                   	leave  
+80105972:	c3                   	ret    
+80105973:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105977:	90                   	nop
     end_op();
-801053f8:	e8 a3 d9 ff ff       	call   80102da0 <end_op>
+80105978:	e8 23 d4 ff ff       	call   80102da0 <end_op>
     return -1;
-801053fd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010597d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105402:	c9                   	leave  
-80105403:	c3                   	ret    
-80105404:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010540b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010540f:	90                   	nop
+80105982:	c9                   	leave  
+80105983:	c3                   	ret    
+80105984:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010598b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010598f:	90                   	nop
 
-80105410 <sys_chdir>:
+80105990 <sys_chdir>:
 
 int
 sys_chdir(void)
 {
-80105410:	f3 0f 1e fb          	endbr32 
-80105414:	55                   	push   %ebp
-80105415:	89 e5                	mov    %esp,%ebp
-80105417:	56                   	push   %esi
-80105418:	53                   	push   %ebx
-80105419:	83 ec 10             	sub    $0x10,%esp
+80105990:	f3 0f 1e fb          	endbr32 
+80105994:	55                   	push   %ebp
+80105995:	89 e5                	mov    %esp,%ebp
+80105997:	56                   	push   %esi
+80105998:	53                   	push   %ebx
+80105999:	83 ec 10             	sub    $0x10,%esp
   char *path;
   struct inode *ip;
   struct proc *curproc = myproc();
-8010541c:	e8 3f e5 ff ff       	call   80103960 <myproc>
-80105421:	89 c6                	mov    %eax,%esi
+8010599c:	e8 bf e2 ff ff       	call   80103c60 <myproc>
+801059a1:	89 c6                	mov    %eax,%esi
   
   begin_op();
-80105423:	e8 08 d9 ff ff       	call   80102d30 <begin_op>
+801059a3:	e8 88 d3 ff ff       	call   80102d30 <begin_op>
   if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
-80105428:	83 ec 08             	sub    $0x8,%esp
-8010542b:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010542e:	50                   	push   %eax
-8010542f:	6a 00                	push   $0x0
-80105431:	e8 ca f5 ff ff       	call   80104a00 <argstr>
-80105436:	83 c4 10             	add    $0x10,%esp
-80105439:	85 c0                	test   %eax,%eax
-8010543b:	78 73                	js     801054b0 <sys_chdir+0xa0>
-8010543d:	83 ec 0c             	sub    $0xc,%esp
-80105440:	ff 75 f4             	pushl  -0xc(%ebp)
-80105443:	e8 e8 cb ff ff       	call   80102030 <namei>
-80105448:	83 c4 10             	add    $0x10,%esp
-8010544b:	89 c3                	mov    %eax,%ebx
-8010544d:	85 c0                	test   %eax,%eax
-8010544f:	74 5f                	je     801054b0 <sys_chdir+0xa0>
+801059a8:	83 ec 08             	sub    $0x8,%esp
+801059ab:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801059ae:	50                   	push   %eax
+801059af:	6a 00                	push   $0x0
+801059b1:	e8 ca f5 ff ff       	call   80104f80 <argstr>
+801059b6:	83 c4 10             	add    $0x10,%esp
+801059b9:	85 c0                	test   %eax,%eax
+801059bb:	78 73                	js     80105a30 <sys_chdir+0xa0>
+801059bd:	83 ec 0c             	sub    $0xc,%esp
+801059c0:	ff 75 f4             	pushl  -0xc(%ebp)
+801059c3:	e8 68 c6 ff ff       	call   80102030 <namei>
+801059c8:	83 c4 10             	add    $0x10,%esp
+801059cb:	89 c3                	mov    %eax,%ebx
+801059cd:	85 c0                	test   %eax,%eax
+801059cf:	74 5f                	je     80105a30 <sys_chdir+0xa0>
     end_op();
     return -1;
   }
   ilock(ip);
-80105451:	83 ec 0c             	sub    $0xc,%esp
-80105454:	50                   	push   %eax
-80105455:	e8 06 c3 ff ff       	call   80101760 <ilock>
+801059d1:	83 ec 0c             	sub    $0xc,%esp
+801059d4:	50                   	push   %eax
+801059d5:	e8 86 bd ff ff       	call   80101760 <ilock>
   if(ip->type != T_DIR){
-8010545a:	83 c4 10             	add    $0x10,%esp
-8010545d:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80105462:	75 2c                	jne    80105490 <sys_chdir+0x80>
+801059da:	83 c4 10             	add    $0x10,%esp
+801059dd:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+801059e2:	75 2c                	jne    80105a10 <sys_chdir+0x80>
     iunlockput(ip);
     end_op();
     return -1;
   }
   iunlock(ip);
-80105464:	83 ec 0c             	sub    $0xc,%esp
-80105467:	53                   	push   %ebx
-80105468:	e8 d3 c3 ff ff       	call   80101840 <iunlock>
+801059e4:	83 ec 0c             	sub    $0xc,%esp
+801059e7:	53                   	push   %ebx
+801059e8:	e8 53 be ff ff       	call   80101840 <iunlock>
   iput(curproc->cwd);
-8010546d:	58                   	pop    %eax
-8010546e:	ff 76 68             	pushl  0x68(%esi)
-80105471:	e8 1a c4 ff ff       	call   80101890 <iput>
+801059ed:	58                   	pop    %eax
+801059ee:	ff 76 68             	pushl  0x68(%esi)
+801059f1:	e8 9a be ff ff       	call   80101890 <iput>
   end_op();
-80105476:	e8 25 d9 ff ff       	call   80102da0 <end_op>
+801059f6:	e8 a5 d3 ff ff       	call   80102da0 <end_op>
   curproc->cwd = ip;
-8010547b:	89 5e 68             	mov    %ebx,0x68(%esi)
+801059fb:	89 5e 68             	mov    %ebx,0x68(%esi)
   return 0;
-8010547e:	83 c4 10             	add    $0x10,%esp
-80105481:	31 c0                	xor    %eax,%eax
+801059fe:	83 c4 10             	add    $0x10,%esp
+80105a01:	31 c0                	xor    %eax,%eax
 }
-80105483:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80105486:	5b                   	pop    %ebx
-80105487:	5e                   	pop    %esi
-80105488:	5d                   	pop    %ebp
-80105489:	c3                   	ret    
-8010548a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105a03:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105a06:	5b                   	pop    %ebx
+80105a07:	5e                   	pop    %esi
+80105a08:	5d                   	pop    %ebp
+80105a09:	c3                   	ret    
+80105a0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     iunlockput(ip);
-80105490:	83 ec 0c             	sub    $0xc,%esp
-80105493:	53                   	push   %ebx
-80105494:	e8 67 c5 ff ff       	call   80101a00 <iunlockput>
+80105a10:	83 ec 0c             	sub    $0xc,%esp
+80105a13:	53                   	push   %ebx
+80105a14:	e8 e7 bf ff ff       	call   80101a00 <iunlockput>
     end_op();
-80105499:	e8 02 d9 ff ff       	call   80102da0 <end_op>
+80105a19:	e8 82 d3 ff ff       	call   80102da0 <end_op>
     return -1;
-8010549e:	83 c4 10             	add    $0x10,%esp
-801054a1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801054a6:	eb db                	jmp    80105483 <sys_chdir+0x73>
-801054a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801054af:	90                   	nop
+80105a1e:	83 c4 10             	add    $0x10,%esp
+80105a21:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105a26:	eb db                	jmp    80105a03 <sys_chdir+0x73>
+80105a28:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a2f:	90                   	nop
     end_op();
-801054b0:	e8 eb d8 ff ff       	call   80102da0 <end_op>
+80105a30:	e8 6b d3 ff ff       	call   80102da0 <end_op>
     return -1;
-801054b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801054ba:	eb c7                	jmp    80105483 <sys_chdir+0x73>
-801054bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105a35:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105a3a:	eb c7                	jmp    80105a03 <sys_chdir+0x73>
+80105a3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801054c0 <sys_exec>:
+80105a40 <sys_exec>:
 
 int
 sys_exec(void)
 {
-801054c0:	f3 0f 1e fb          	endbr32 
-801054c4:	55                   	push   %ebp
-801054c5:	89 e5                	mov    %esp,%ebp
-801054c7:	57                   	push   %edi
-801054c8:	56                   	push   %esi
+80105a40:	f3 0f 1e fb          	endbr32 
+80105a44:	55                   	push   %ebp
+80105a45:	89 e5                	mov    %esp,%ebp
+80105a47:	57                   	push   %edi
+80105a48:	56                   	push   %esi
   char *path, *argv[MAXARG];
   int i;
   uint uargv, uarg;
 
   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-801054c9:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
+80105a49:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
 {
-801054cf:	53                   	push   %ebx
-801054d0:	81 ec a4 00 00 00    	sub    $0xa4,%esp
+80105a4f:	53                   	push   %ebx
+80105a50:	81 ec a4 00 00 00    	sub    $0xa4,%esp
   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-801054d6:	50                   	push   %eax
-801054d7:	6a 00                	push   $0x0
-801054d9:	e8 22 f5 ff ff       	call   80104a00 <argstr>
-801054de:	83 c4 10             	add    $0x10,%esp
-801054e1:	85 c0                	test   %eax,%eax
-801054e3:	0f 88 8b 00 00 00    	js     80105574 <sys_exec+0xb4>
-801054e9:	83 ec 08             	sub    $0x8,%esp
-801054ec:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
-801054f2:	50                   	push   %eax
-801054f3:	6a 01                	push   $0x1
-801054f5:	e8 56 f4 ff ff       	call   80104950 <argint>
-801054fa:	83 c4 10             	add    $0x10,%esp
-801054fd:	85 c0                	test   %eax,%eax
-801054ff:	78 73                	js     80105574 <sys_exec+0xb4>
+80105a56:	50                   	push   %eax
+80105a57:	6a 00                	push   $0x0
+80105a59:	e8 22 f5 ff ff       	call   80104f80 <argstr>
+80105a5e:	83 c4 10             	add    $0x10,%esp
+80105a61:	85 c0                	test   %eax,%eax
+80105a63:	0f 88 8b 00 00 00    	js     80105af4 <sys_exec+0xb4>
+80105a69:	83 ec 08             	sub    $0x8,%esp
+80105a6c:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
+80105a72:	50                   	push   %eax
+80105a73:	6a 01                	push   $0x1
+80105a75:	e8 56 f4 ff ff       	call   80104ed0 <argint>
+80105a7a:	83 c4 10             	add    $0x10,%esp
+80105a7d:	85 c0                	test   %eax,%eax
+80105a7f:	78 73                	js     80105af4 <sys_exec+0xb4>
     return -1;
   }
   memset(argv, 0, sizeof(argv));
-80105501:	83 ec 04             	sub    $0x4,%esp
-80105504:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+80105a81:	83 ec 04             	sub    $0x4,%esp
+80105a84:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
   for(i=0;; i++){
-8010550a:	31 db                	xor    %ebx,%ebx
+80105a8a:	31 db                	xor    %ebx,%ebx
   memset(argv, 0, sizeof(argv));
-8010550c:	68 80 00 00 00       	push   $0x80
-80105511:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
-80105517:	6a 00                	push   $0x0
-80105519:	50                   	push   %eax
-8010551a:	e8 51 f1 ff ff       	call   80104670 <memset>
-8010551f:	83 c4 10             	add    $0x10,%esp
-80105522:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105a8c:	68 80 00 00 00       	push   $0x80
+80105a91:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
+80105a97:	6a 00                	push   $0x0
+80105a99:	50                   	push   %eax
+80105a9a:	e8 51 f1 ff ff       	call   80104bf0 <memset>
+80105a9f:	83 c4 10             	add    $0x10,%esp
+80105aa2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(i >= NELEM(argv))
       return -1;
     if(fetchint(uargv+4*i, (int*)&uarg) < 0)
-80105528:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
-8010552e:	8d 34 9d 00 00 00 00 	lea    0x0(,%ebx,4),%esi
-80105535:	83 ec 08             	sub    $0x8,%esp
-80105538:	57                   	push   %edi
-80105539:	01 f0                	add    %esi,%eax
-8010553b:	50                   	push   %eax
-8010553c:	e8 6f f3 ff ff       	call   801048b0 <fetchint>
-80105541:	83 c4 10             	add    $0x10,%esp
-80105544:	85 c0                	test   %eax,%eax
-80105546:	78 2c                	js     80105574 <sys_exec+0xb4>
+80105aa8:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
+80105aae:	8d 34 9d 00 00 00 00 	lea    0x0(,%ebx,4),%esi
+80105ab5:	83 ec 08             	sub    $0x8,%esp
+80105ab8:	57                   	push   %edi
+80105ab9:	01 f0                	add    %esi,%eax
+80105abb:	50                   	push   %eax
+80105abc:	e8 6f f3 ff ff       	call   80104e30 <fetchint>
+80105ac1:	83 c4 10             	add    $0x10,%esp
+80105ac4:	85 c0                	test   %eax,%eax
+80105ac6:	78 2c                	js     80105af4 <sys_exec+0xb4>
       return -1;
     if(uarg == 0){
-80105548:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
-8010554e:	85 c0                	test   %eax,%eax
-80105550:	74 36                	je     80105588 <sys_exec+0xc8>
+80105ac8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
+80105ace:	85 c0                	test   %eax,%eax
+80105ad0:	74 36                	je     80105b08 <sys_exec+0xc8>
       argv[i] = 0;
       break;
     }
     if(fetchstr(uarg, &argv[i]) < 0)
-80105552:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
-80105558:	83 ec 08             	sub    $0x8,%esp
-8010555b:	8d 14 31             	lea    (%ecx,%esi,1),%edx
-8010555e:	52                   	push   %edx
-8010555f:	50                   	push   %eax
-80105560:	e8 8b f3 ff ff       	call   801048f0 <fetchstr>
-80105565:	83 c4 10             	add    $0x10,%esp
-80105568:	85 c0                	test   %eax,%eax
-8010556a:	78 08                	js     80105574 <sys_exec+0xb4>
+80105ad2:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
+80105ad8:	83 ec 08             	sub    $0x8,%esp
+80105adb:	8d 14 31             	lea    (%ecx,%esi,1),%edx
+80105ade:	52                   	push   %edx
+80105adf:	50                   	push   %eax
+80105ae0:	e8 8b f3 ff ff       	call   80104e70 <fetchstr>
+80105ae5:	83 c4 10             	add    $0x10,%esp
+80105ae8:	85 c0                	test   %eax,%eax
+80105aea:	78 08                	js     80105af4 <sys_exec+0xb4>
   for(i=0;; i++){
-8010556c:	83 c3 01             	add    $0x1,%ebx
+80105aec:	83 c3 01             	add    $0x1,%ebx
     if(i >= NELEM(argv))
-8010556f:	83 fb 20             	cmp    $0x20,%ebx
-80105572:	75 b4                	jne    80105528 <sys_exec+0x68>
+80105aef:	83 fb 20             	cmp    $0x20,%ebx
+80105af2:	75 b4                	jne    80105aa8 <sys_exec+0x68>
       return -1;
   }
   return exec(path, argv);
 }
-80105574:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105af4:	8d 65 f4             	lea    -0xc(%ebp),%esp
     return -1;
-80105577:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105af7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-8010557c:	5b                   	pop    %ebx
-8010557d:	5e                   	pop    %esi
-8010557e:	5f                   	pop    %edi
-8010557f:	5d                   	pop    %ebp
-80105580:	c3                   	ret    
-80105581:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105afc:	5b                   	pop    %ebx
+80105afd:	5e                   	pop    %esi
+80105afe:	5f                   	pop    %edi
+80105aff:	5d                   	pop    %ebp
+80105b00:	c3                   	ret    
+80105b01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   return exec(path, argv);
-80105588:	83 ec 08             	sub    $0x8,%esp
-8010558b:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+80105b08:	83 ec 08             	sub    $0x8,%esp
+80105b0b:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
       argv[i] = 0;
-80105591:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
-80105598:	00 00 00 00 
+80105b11:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
+80105b18:	00 00 00 00 
   return exec(path, argv);
-8010559c:	50                   	push   %eax
-8010559d:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
-801055a3:	e8 d8 b4 ff ff       	call   80100a80 <exec>
-801055a8:	83 c4 10             	add    $0x10,%esp
-}
-801055ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801055ae:	5b                   	pop    %ebx
-801055af:	5e                   	pop    %esi
-801055b0:	5f                   	pop    %edi
-801055b1:	5d                   	pop    %ebp
-801055b2:	c3                   	ret    
-801055b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801055ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105b1c:	50                   	push   %eax
+80105b1d:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
+80105b23:	e8 58 af ff ff       	call   80100a80 <exec>
+80105b28:	83 c4 10             	add    $0x10,%esp
+}
+80105b2b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105b2e:	5b                   	pop    %ebx
+80105b2f:	5e                   	pop    %esi
+80105b30:	5f                   	pop    %edi
+80105b31:	5d                   	pop    %ebp
+80105b32:	c3                   	ret    
+80105b33:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105b3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801055c0 <sys_pipe>:
+80105b40 <sys_pipe>:
 
 int
 sys_pipe(void)
 {
-801055c0:	f3 0f 1e fb          	endbr32 
-801055c4:	55                   	push   %ebp
-801055c5:	89 e5                	mov    %esp,%ebp
-801055c7:	57                   	push   %edi
-801055c8:	56                   	push   %esi
+80105b40:	f3 0f 1e fb          	endbr32 
+80105b44:	55                   	push   %ebp
+80105b45:	89 e5                	mov    %esp,%ebp
+80105b47:	57                   	push   %edi
+80105b48:	56                   	push   %esi
   int *fd;
   struct file *rf, *wf;
   int fd0, fd1;
 
   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-801055c9:	8d 45 dc             	lea    -0x24(%ebp),%eax
+80105b49:	8d 45 dc             	lea    -0x24(%ebp),%eax
 {
-801055cc:	53                   	push   %ebx
-801055cd:	83 ec 20             	sub    $0x20,%esp
+80105b4c:	53                   	push   %ebx
+80105b4d:	83 ec 20             	sub    $0x20,%esp
   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-801055d0:	6a 08                	push   $0x8
-801055d2:	50                   	push   %eax
-801055d3:	6a 00                	push   $0x0
-801055d5:	e8 c6 f3 ff ff       	call   801049a0 <argptr>
-801055da:	83 c4 10             	add    $0x10,%esp
-801055dd:	85 c0                	test   %eax,%eax
-801055df:	78 4e                	js     8010562f <sys_pipe+0x6f>
+80105b50:	6a 08                	push   $0x8
+80105b52:	50                   	push   %eax
+80105b53:	6a 00                	push   $0x0
+80105b55:	e8 c6 f3 ff ff       	call   80104f20 <argptr>
+80105b5a:	83 c4 10             	add    $0x10,%esp
+80105b5d:	85 c0                	test   %eax,%eax
+80105b5f:	78 4e                	js     80105baf <sys_pipe+0x6f>
     return -1;
   if(pipealloc(&rf, &wf) < 0)
-801055e1:	83 ec 08             	sub    $0x8,%esp
-801055e4:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-801055e7:	50                   	push   %eax
-801055e8:	8d 45 e0             	lea    -0x20(%ebp),%eax
-801055eb:	50                   	push   %eax
-801055ec:	e8 ff dd ff ff       	call   801033f0 <pipealloc>
-801055f1:	83 c4 10             	add    $0x10,%esp
-801055f4:	85 c0                	test   %eax,%eax
-801055f6:	78 37                	js     8010562f <sys_pipe+0x6f>
+80105b61:	83 ec 08             	sub    $0x8,%esp
+80105b64:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105b67:	50                   	push   %eax
+80105b68:	8d 45 e0             	lea    -0x20(%ebp),%eax
+80105b6b:	50                   	push   %eax
+80105b6c:	e8 7f d8 ff ff       	call   801033f0 <pipealloc>
+80105b71:	83 c4 10             	add    $0x10,%esp
+80105b74:	85 c0                	test   %eax,%eax
+80105b76:	78 37                	js     80105baf <sys_pipe+0x6f>
     return -1;
   fd0 = -1;
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-801055f8:	8b 7d e0             	mov    -0x20(%ebp),%edi
+80105b78:	8b 7d e0             	mov    -0x20(%ebp),%edi
   for(fd = 0; fd < NOFILE; fd++){
-801055fb:	31 db                	xor    %ebx,%ebx
+80105b7b:	31 db                	xor    %ebx,%ebx
   struct proc *curproc = myproc();
-801055fd:	e8 5e e3 ff ff       	call   80103960 <myproc>
+80105b7d:	e8 de e0 ff ff       	call   80103c60 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-80105602:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105b82:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(curproc->ofile[fd] == 0){
-80105608:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
-8010560c:	85 f6                	test   %esi,%esi
-8010560e:	74 30                	je     80105640 <sys_pipe+0x80>
+80105b88:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
+80105b8c:	85 f6                	test   %esi,%esi
+80105b8e:	74 30                	je     80105bc0 <sys_pipe+0x80>
   for(fd = 0; fd < NOFILE; fd++){
-80105610:	83 c3 01             	add    $0x1,%ebx
-80105613:	83 fb 10             	cmp    $0x10,%ebx
-80105616:	75 f0                	jne    80105608 <sys_pipe+0x48>
+80105b90:	83 c3 01             	add    $0x1,%ebx
+80105b93:	83 fb 10             	cmp    $0x10,%ebx
+80105b96:	75 f0                	jne    80105b88 <sys_pipe+0x48>
     if(fd0 >= 0)
       myproc()->ofile[fd0] = 0;
     fileclose(rf);
-80105618:	83 ec 0c             	sub    $0xc,%esp
-8010561b:	ff 75 e0             	pushl  -0x20(%ebp)
-8010561e:	e8 9d b8 ff ff       	call   80100ec0 <fileclose>
+80105b98:	83 ec 0c             	sub    $0xc,%esp
+80105b9b:	ff 75 e0             	pushl  -0x20(%ebp)
+80105b9e:	e8 1d b3 ff ff       	call   80100ec0 <fileclose>
     fileclose(wf);
-80105623:	58                   	pop    %eax
-80105624:	ff 75 e4             	pushl  -0x1c(%ebp)
-80105627:	e8 94 b8 ff ff       	call   80100ec0 <fileclose>
-    return -1;
-8010562c:	83 c4 10             	add    $0x10,%esp
-8010562f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105634:	eb 5b                	jmp    80105691 <sys_pipe+0xd1>
-80105636:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010563d:	8d 76 00             	lea    0x0(%esi),%esi
+80105ba3:	58                   	pop    %eax
+80105ba4:	ff 75 e4             	pushl  -0x1c(%ebp)
+80105ba7:	e8 14 b3 ff ff       	call   80100ec0 <fileclose>
+    return -1;
+80105bac:	83 c4 10             	add    $0x10,%esp
+80105baf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105bb4:	eb 5b                	jmp    80105c11 <sys_pipe+0xd1>
+80105bb6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105bbd:	8d 76 00             	lea    0x0(%esi),%esi
       curproc->ofile[fd] = f;
-80105640:	8d 73 08             	lea    0x8(%ebx),%esi
-80105643:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
+80105bc0:	8d 73 08             	lea    0x8(%ebx),%esi
+80105bc3:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-80105647:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80105bc7:	8b 7d e4             	mov    -0x1c(%ebp),%edi
   struct proc *curproc = myproc();
-8010564a:	e8 11 e3 ff ff       	call   80103960 <myproc>
+80105bca:	e8 91 e0 ff ff       	call   80103c60 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-8010564f:	31 d2                	xor    %edx,%edx
-80105651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105bcf:	31 d2                	xor    %edx,%edx
+80105bd1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[fd] == 0){
-80105658:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
-8010565c:	85 c9                	test   %ecx,%ecx
-8010565e:	74 20                	je     80105680 <sys_pipe+0xc0>
+80105bd8:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
+80105bdc:	85 c9                	test   %ecx,%ecx
+80105bde:	74 20                	je     80105c00 <sys_pipe+0xc0>
   for(fd = 0; fd < NOFILE; fd++){
-80105660:	83 c2 01             	add    $0x1,%edx
-80105663:	83 fa 10             	cmp    $0x10,%edx
-80105666:	75 f0                	jne    80105658 <sys_pipe+0x98>
+80105be0:	83 c2 01             	add    $0x1,%edx
+80105be3:	83 fa 10             	cmp    $0x10,%edx
+80105be6:	75 f0                	jne    80105bd8 <sys_pipe+0x98>
       myproc()->ofile[fd0] = 0;
-80105668:	e8 f3 e2 ff ff       	call   80103960 <myproc>
-8010566d:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
-80105674:	00 
-80105675:	eb a1                	jmp    80105618 <sys_pipe+0x58>
-80105677:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010567e:	66 90                	xchg   %ax,%ax
+80105be8:	e8 73 e0 ff ff       	call   80103c60 <myproc>
+80105bed:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
+80105bf4:	00 
+80105bf5:	eb a1                	jmp    80105b98 <sys_pipe+0x58>
+80105bf7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105bfe:	66 90                	xchg   %ax,%ax
       curproc->ofile[fd] = f;
-80105680:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
+80105c00:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
   }
   fd[0] = fd0;
-80105684:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80105687:	89 18                	mov    %ebx,(%eax)
+80105c04:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80105c07:	89 18                	mov    %ebx,(%eax)
   fd[1] = fd1;
-80105689:	8b 45 dc             	mov    -0x24(%ebp),%eax
-8010568c:	89 50 04             	mov    %edx,0x4(%eax)
+80105c09:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80105c0c:	89 50 04             	mov    %edx,0x4(%eax)
   return 0;
-8010568f:	31 c0                	xor    %eax,%eax
+80105c0f:	31 c0                	xor    %eax,%eax
 }
-80105691:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105694:	5b                   	pop    %ebx
-80105695:	5e                   	pop    %esi
-80105696:	5f                   	pop    %edi
-80105697:	5d                   	pop    %ebp
-80105698:	c3                   	ret    
-80105699:	66 90                	xchg   %ax,%ax
-8010569b:	66 90                	xchg   %ax,%ax
-8010569d:	66 90                	xchg   %ax,%ax
-8010569f:	90                   	nop
+80105c11:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105c14:	5b                   	pop    %ebx
+80105c15:	5e                   	pop    %esi
+80105c16:	5f                   	pop    %edi
+80105c17:	5d                   	pop    %ebp
+80105c18:	c3                   	ret    
+80105c19:	66 90                	xchg   %ax,%ax
+80105c1b:	66 90                	xchg   %ax,%ax
+80105c1d:	66 90                	xchg   %ax,%ax
+80105c1f:	90                   	nop
 
-801056a0 <sys_fork>:
+80105c20 <sys_fork>:
 #include "mmu.h"
 #include "proc.h"
 
 int
 sys_fork(void)
 {
-801056a0:	f3 0f 1e fb          	endbr32 
+80105c20:	f3 0f 1e fb          	endbr32 
   return fork();
-801056a4:	e9 67 e4 ff ff       	jmp    80103b10 <fork>
-801056a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105c24:	e9 e7 e1 ff ff       	jmp    80103e10 <fork>
+80105c29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801056b0 <sys_exit>:
+80105c30 <sys_exit>:
 }
 
 int
 sys_exit(void)
 {
-801056b0:	f3 0f 1e fb          	endbr32 
-801056b4:	55                   	push   %ebp
-801056b5:	89 e5                	mov    %esp,%ebp
-801056b7:	83 ec 08             	sub    $0x8,%esp
+80105c30:	f3 0f 1e fb          	endbr32 
+80105c34:	55                   	push   %ebp
+80105c35:	89 e5                	mov    %esp,%ebp
+80105c37:	83 ec 08             	sub    $0x8,%esp
   exit();
-801056ba:	e8 d1 e6 ff ff       	call   80103d90 <exit>
+80105c3a:	e8 01 e5 ff ff       	call   80104140 <exit>
   return 0;  // not reached
 }
-801056bf:	31 c0                	xor    %eax,%eax
-801056c1:	c9                   	leave  
-801056c2:	c3                   	ret    
-801056c3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801056ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105c3f:	31 c0                	xor    %eax,%eax
+80105c41:	c9                   	leave  
+80105c42:	c3                   	ret    
+80105c43:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105c4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801056d0 <sys_wait>:
+80105c50 <sys_wait>:
 
 int
 sys_wait(void)
 {
-801056d0:	f3 0f 1e fb          	endbr32 
+80105c50:	f3 0f 1e fb          	endbr32 
   return wait();
-801056d4:	e9 07 e9 ff ff       	jmp    80103fe0 <wait>
-801056d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105c54:	e9 37 e7 ff ff       	jmp    80104390 <wait>
+80105c59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801056e0 <sys_kill>:
+80105c60 <sys_kill>:
 }
 
 int
 sys_kill(void)
 {
-801056e0:	f3 0f 1e fb          	endbr32 
-801056e4:	55                   	push   %ebp
-801056e5:	89 e5                	mov    %esp,%ebp
-801056e7:	83 ec 20             	sub    $0x20,%esp
+80105c60:	f3 0f 1e fb          	endbr32 
+80105c64:	55                   	push   %ebp
+80105c65:	89 e5                	mov    %esp,%ebp
+80105c67:	83 ec 20             	sub    $0x20,%esp
   int pid;
 
   if(argint(0, &pid) < 0)
-801056ea:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801056ed:	50                   	push   %eax
-801056ee:	6a 00                	push   $0x0
-801056f0:	e8 5b f2 ff ff       	call   80104950 <argint>
-801056f5:	83 c4 10             	add    $0x10,%esp
-801056f8:	85 c0                	test   %eax,%eax
-801056fa:	78 14                	js     80105710 <sys_kill+0x30>
+80105c6a:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105c6d:	50                   	push   %eax
+80105c6e:	6a 00                	push   $0x0
+80105c70:	e8 5b f2 ff ff       	call   80104ed0 <argint>
+80105c75:	83 c4 10             	add    $0x10,%esp
+80105c78:	85 c0                	test   %eax,%eax
+80105c7a:	78 14                	js     80105c90 <sys_kill+0x30>
     return -1;
   return kill(pid);
-801056fc:	83 ec 0c             	sub    $0xc,%esp
-801056ff:	ff 75 f4             	pushl  -0xc(%ebp)
-80105702:	e8 39 ea ff ff       	call   80104140 <kill>
-80105707:	83 c4 10             	add    $0x10,%esp
-}
-8010570a:	c9                   	leave  
-8010570b:	c3                   	ret    
-8010570c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105710:	c9                   	leave  
-    return -1;
-80105711:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80105716:	c3                   	ret    
-80105717:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010571e:	66 90                	xchg   %ax,%ax
+80105c7c:	83 ec 0c             	sub    $0xc,%esp
+80105c7f:	ff 75 f4             	pushl  -0xc(%ebp)
+80105c82:	e8 79 e8 ff ff       	call   80104500 <kill>
+80105c87:	83 c4 10             	add    $0x10,%esp
+}
+80105c8a:	c9                   	leave  
+80105c8b:	c3                   	ret    
+80105c8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105c90:	c9                   	leave  
+    return -1;
+80105c91:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105c96:	c3                   	ret    
+80105c97:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105c9e:	66 90                	xchg   %ax,%ax
 
-80105720 <sys_getpid>:
+80105ca0 <sys_getpid>:
 
 int
 sys_getpid(void)
 {
-80105720:	f3 0f 1e fb          	endbr32 
-80105724:	55                   	push   %ebp
-80105725:	89 e5                	mov    %esp,%ebp
-80105727:	83 ec 08             	sub    $0x8,%esp
+80105ca0:	f3 0f 1e fb          	endbr32 
+80105ca4:	55                   	push   %ebp
+80105ca5:	89 e5                	mov    %esp,%ebp
+80105ca7:	83 ec 08             	sub    $0x8,%esp
   return myproc()->pid;
-8010572a:	e8 31 e2 ff ff       	call   80103960 <myproc>
-8010572f:	8b 40 10             	mov    0x10(%eax),%eax
+80105caa:	e8 b1 df ff ff       	call   80103c60 <myproc>
+80105caf:	8b 40 10             	mov    0x10(%eax),%eax
 }
-80105732:	c9                   	leave  
-80105733:	c3                   	ret    
-80105734:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010573b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010573f:	90                   	nop
+80105cb2:	c9                   	leave  
+80105cb3:	c3                   	ret    
+80105cb4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105cbb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105cbf:	90                   	nop
 
-80105740 <sys_sbrk>:
+80105cc0 <sys_sbrk>:
 
 int
 sys_sbrk(void)
 {
-80105740:	f3 0f 1e fb          	endbr32 
-80105744:	55                   	push   %ebp
-80105745:	89 e5                	mov    %esp,%ebp
-80105747:	53                   	push   %ebx
+80105cc0:	f3 0f 1e fb          	endbr32 
+80105cc4:	55                   	push   %ebp
+80105cc5:	89 e5                	mov    %esp,%ebp
+80105cc7:	53                   	push   %ebx
   int addr;
   int n;
 
   if(argint(0, &n) < 0)
-80105748:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105cc8:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-8010574b:	83 ec 1c             	sub    $0x1c,%esp
+80105ccb:	83 ec 1c             	sub    $0x1c,%esp
   if(argint(0, &n) < 0)
-8010574e:	50                   	push   %eax
-8010574f:	6a 00                	push   $0x0
-80105751:	e8 fa f1 ff ff       	call   80104950 <argint>
-80105756:	83 c4 10             	add    $0x10,%esp
-80105759:	85 c0                	test   %eax,%eax
-8010575b:	78 23                	js     80105780 <sys_sbrk+0x40>
+80105cce:	50                   	push   %eax
+80105ccf:	6a 00                	push   $0x0
+80105cd1:	e8 fa f1 ff ff       	call   80104ed0 <argint>
+80105cd6:	83 c4 10             	add    $0x10,%esp
+80105cd9:	85 c0                	test   %eax,%eax
+80105cdb:	78 23                	js     80105d00 <sys_sbrk+0x40>
     return -1;
   addr = myproc()->sz;
-8010575d:	e8 fe e1 ff ff       	call   80103960 <myproc>
+80105cdd:	e8 7e df ff ff       	call   80103c60 <myproc>
   if(growproc(n) < 0)
-80105762:	83 ec 0c             	sub    $0xc,%esp
+80105ce2:	83 ec 0c             	sub    $0xc,%esp
   addr = myproc()->sz;
-80105765:	8b 18                	mov    (%eax),%ebx
+80105ce5:	8b 18                	mov    (%eax),%ebx
   if(growproc(n) < 0)
-80105767:	ff 75 f4             	pushl  -0xc(%ebp)
-8010576a:	e8 21 e3 ff ff       	call   80103a90 <growproc>
-8010576f:	83 c4 10             	add    $0x10,%esp
-80105772:	85 c0                	test   %eax,%eax
-80105774:	78 0a                	js     80105780 <sys_sbrk+0x40>
+80105ce7:	ff 75 f4             	pushl  -0xc(%ebp)
+80105cea:	e8 a1 e0 ff ff       	call   80103d90 <growproc>
+80105cef:	83 c4 10             	add    $0x10,%esp
+80105cf2:	85 c0                	test   %eax,%eax
+80105cf4:	78 0a                	js     80105d00 <sys_sbrk+0x40>
     return -1;
   return addr;
 }
-80105776:	89 d8                	mov    %ebx,%eax
-80105778:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010577b:	c9                   	leave  
-8010577c:	c3                   	ret    
-8010577d:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-80105780:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80105785:	eb ef                	jmp    80105776 <sys_sbrk+0x36>
-80105787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010578e:	66 90                	xchg   %ax,%ax
+80105cf6:	89 d8                	mov    %ebx,%eax
+80105cf8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105cfb:	c9                   	leave  
+80105cfc:	c3                   	ret    
+80105cfd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80105d00:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105d05:	eb ef                	jmp    80105cf6 <sys_sbrk+0x36>
+80105d07:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105d0e:	66 90                	xchg   %ax,%ax
 
-80105790 <sys_sleep>:
+80105d10 <sys_sleep>:
 
 int
 sys_sleep(void)
 {
-80105790:	f3 0f 1e fb          	endbr32 
-80105794:	55                   	push   %ebp
-80105795:	89 e5                	mov    %esp,%ebp
-80105797:	53                   	push   %ebx
+80105d10:	f3 0f 1e fb          	endbr32 
+80105d14:	55                   	push   %ebp
+80105d15:	89 e5                	mov    %esp,%ebp
+80105d17:	53                   	push   %ebx
   int n;
   uint ticks0;
 
   if(argint(0, &n) < 0)
-80105798:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105d18:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-8010579b:	83 ec 1c             	sub    $0x1c,%esp
+80105d1b:	83 ec 1c             	sub    $0x1c,%esp
   if(argint(0, &n) < 0)
-8010579e:	50                   	push   %eax
-8010579f:	6a 00                	push   $0x0
-801057a1:	e8 aa f1 ff ff       	call   80104950 <argint>
-801057a6:	83 c4 10             	add    $0x10,%esp
-801057a9:	85 c0                	test   %eax,%eax
-801057ab:	0f 88 86 00 00 00    	js     80105837 <sys_sleep+0xa7>
+80105d1e:	50                   	push   %eax
+80105d1f:	6a 00                	push   $0x0
+80105d21:	e8 aa f1 ff ff       	call   80104ed0 <argint>
+80105d26:	83 c4 10             	add    $0x10,%esp
+80105d29:	85 c0                	test   %eax,%eax
+80105d2b:	0f 88 86 00 00 00    	js     80105db7 <sys_sleep+0xa7>
     return -1;
   acquire(&tickslock);
-801057b1:	83 ec 0c             	sub    $0xc,%esp
-801057b4:	68 60 4c 11 80       	push   $0x80114c60
-801057b9:	e8 a2 ed ff ff       	call   80104560 <acquire>
+80105d31:	83 ec 0c             	sub    $0xc,%esp
+80105d34:	68 60 5f 11 80       	push   $0x80115f60
+80105d39:	e8 a2 ed ff ff       	call   80104ae0 <acquire>
   ticks0 = ticks;
   while(ticks - ticks0 < n){
-801057be:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80105d3e:	8b 55 f4             	mov    -0xc(%ebp),%edx
   ticks0 = ticks;
-801057c1:	8b 1d a0 54 11 80    	mov    0x801154a0,%ebx
+80105d41:	8b 1d a0 67 11 80    	mov    0x801167a0,%ebx
   while(ticks - ticks0 < n){
-801057c7:	83 c4 10             	add    $0x10,%esp
-801057ca:	85 d2                	test   %edx,%edx
-801057cc:	75 23                	jne    801057f1 <sys_sleep+0x61>
-801057ce:	eb 50                	jmp    80105820 <sys_sleep+0x90>
+80105d47:	83 c4 10             	add    $0x10,%esp
+80105d4a:	85 d2                	test   %edx,%edx
+80105d4c:	75 23                	jne    80105d71 <sys_sleep+0x61>
+80105d4e:	eb 50                	jmp    80105da0 <sys_sleep+0x90>
     if(myproc()->killed){
       release(&tickslock);
       return -1;
     }
     sleep(&ticks, &tickslock);
-801057d0:	83 ec 08             	sub    $0x8,%esp
-801057d3:	68 60 4c 11 80       	push   $0x80114c60
-801057d8:	68 a0 54 11 80       	push   $0x801154a0
-801057dd:	e8 3e e7 ff ff       	call   80103f20 <sleep>
+80105d50:	83 ec 08             	sub    $0x8,%esp
+80105d53:	68 60 5f 11 80       	push   $0x80115f60
+80105d58:	68 a0 67 11 80       	push   $0x801167a0
+80105d5d:	e8 6e e5 ff ff       	call   801042d0 <sleep>
   while(ticks - ticks0 < n){
-801057e2:	a1 a0 54 11 80       	mov    0x801154a0,%eax
-801057e7:	83 c4 10             	add    $0x10,%esp
-801057ea:	29 d8                	sub    %ebx,%eax
-801057ec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-801057ef:	73 2f                	jae    80105820 <sys_sleep+0x90>
+80105d62:	a1 a0 67 11 80       	mov    0x801167a0,%eax
+80105d67:	83 c4 10             	add    $0x10,%esp
+80105d6a:	29 d8                	sub    %ebx,%eax
+80105d6c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+80105d6f:	73 2f                	jae    80105da0 <sys_sleep+0x90>
     if(myproc()->killed){
-801057f1:	e8 6a e1 ff ff       	call   80103960 <myproc>
-801057f6:	8b 40 24             	mov    0x24(%eax),%eax
-801057f9:	85 c0                	test   %eax,%eax
-801057fb:	74 d3                	je     801057d0 <sys_sleep+0x40>
+80105d71:	e8 ea de ff ff       	call   80103c60 <myproc>
+80105d76:	8b 40 24             	mov    0x24(%eax),%eax
+80105d79:	85 c0                	test   %eax,%eax
+80105d7b:	74 d3                	je     80105d50 <sys_sleep+0x40>
       release(&tickslock);
-801057fd:	83 ec 0c             	sub    $0xc,%esp
-80105800:	68 60 4c 11 80       	push   $0x80114c60
-80105805:	e8 16 ee ff ff       	call   80104620 <release>
+80105d7d:	83 ec 0c             	sub    $0xc,%esp
+80105d80:	68 60 5f 11 80       	push   $0x80115f60
+80105d85:	e8 16 ee ff ff       	call   80104ba0 <release>
   }
   release(&tickslock);
   return 0;
 }
-8010580a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105d8a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
       return -1;
-8010580d:	83 c4 10             	add    $0x10,%esp
-80105810:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105d8d:	83 c4 10             	add    $0x10,%esp
+80105d90:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105815:	c9                   	leave  
-80105816:	c3                   	ret    
-80105817:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010581e:	66 90                	xchg   %ax,%ax
+80105d95:	c9                   	leave  
+80105d96:	c3                   	ret    
+80105d97:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105d9e:	66 90                	xchg   %ax,%ax
   release(&tickslock);
-80105820:	83 ec 0c             	sub    $0xc,%esp
-80105823:	68 60 4c 11 80       	push   $0x80114c60
-80105828:	e8 f3 ed ff ff       	call   80104620 <release>
+80105da0:	83 ec 0c             	sub    $0xc,%esp
+80105da3:	68 60 5f 11 80       	push   $0x80115f60
+80105da8:	e8 f3 ed ff ff       	call   80104ba0 <release>
   return 0;
-8010582d:	83 c4 10             	add    $0x10,%esp
-80105830:	31 c0                	xor    %eax,%eax
+80105dad:	83 c4 10             	add    $0x10,%esp
+80105db0:	31 c0                	xor    %eax,%eax
 }
-80105832:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105835:	c9                   	leave  
-80105836:	c3                   	ret    
-    return -1;
-80105837:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010583c:	eb f4                	jmp    80105832 <sys_sleep+0xa2>
-8010583e:	66 90                	xchg   %ax,%ax
+80105db2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105db5:	c9                   	leave  
+80105db6:	c3                   	ret    
+    return -1;
+80105db7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105dbc:	eb f4                	jmp    80105db2 <sys_sleep+0xa2>
+80105dbe:	66 90                	xchg   %ax,%ax
 
-80105840 <sys_uptime>:
+80105dc0 <sys_uptime>:
 
 // return how many clock tick interrupts have occurred
 // since start.
 int
 sys_uptime(void)
 {
-80105840:	f3 0f 1e fb          	endbr32 
-80105844:	55                   	push   %ebp
-80105845:	89 e5                	mov    %esp,%ebp
-80105847:	53                   	push   %ebx
-80105848:	83 ec 10             	sub    $0x10,%esp
+80105dc0:	f3 0f 1e fb          	endbr32 
+80105dc4:	55                   	push   %ebp
+80105dc5:	89 e5                	mov    %esp,%ebp
+80105dc7:	53                   	push   %ebx
+80105dc8:	83 ec 10             	sub    $0x10,%esp
   uint xticks;
 
   acquire(&tickslock);
-8010584b:	68 60 4c 11 80       	push   $0x80114c60
-80105850:	e8 0b ed ff ff       	call   80104560 <acquire>
+80105dcb:	68 60 5f 11 80       	push   $0x80115f60
+80105dd0:	e8 0b ed ff ff       	call   80104ae0 <acquire>
   xticks = ticks;
-80105855:	8b 1d a0 54 11 80    	mov    0x801154a0,%ebx
+80105dd5:	8b 1d a0 67 11 80    	mov    0x801167a0,%ebx
   release(&tickslock);
-8010585b:	c7 04 24 60 4c 11 80 	movl   $0x80114c60,(%esp)
-80105862:	e8 b9 ed ff ff       	call   80104620 <release>
+80105ddb:	c7 04 24 60 5f 11 80 	movl   $0x80115f60,(%esp)
+80105de2:	e8 b9 ed ff ff       	call   80104ba0 <release>
   return xticks;
 }
-80105867:	89 d8                	mov    %ebx,%eax
-80105869:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010586c:	c9                   	leave  
-8010586d:	c3                   	ret    
+80105de7:	89 d8                	mov    %ebx,%eax
+80105de9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105dec:	c9                   	leave  
+80105ded:	c3                   	ret    
+80105dee:	66 90                	xchg   %ax,%ax
+
+80105df0 <sys_getNumProc>:
+
+
+
+int sys_getNumProc(void){
+80105df0:	f3 0f 1e fb          	endbr32 
+  return getNumProc();
+80105df4:	e9 77 e8 ff ff       	jmp    80104670 <getNumProc>
+80105df9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105e00 <sys_getMaxPid>:
+}
 
-8010586e <alltraps>:
+int sys_getMaxPid(void){
+80105e00:	f3 0f 1e fb          	endbr32 
+  return getMaxPid();
+80105e04:	e9 b7 e8 ff ff       	jmp    801046c0 <getMaxPid>
+80105e09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105e10 <sys_getProcInfo>:
+}
+
+int sys_getProcInfo(void){
+80105e10:	f3 0f 1e fb          	endbr32 
+80105e14:	55                   	push   %ebp
+80105e15:	89 e5                	mov    %esp,%ebp
+80105e17:	83 ec 20             	sub    $0x20,%esp
+  int pid;
+  struct processInfo *procInfo;
+
+  argint(0,&pid);
+80105e1a:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105e1d:	50                   	push   %eax
+80105e1e:	6a 00                	push   $0x0
+80105e20:	e8 ab f0 ff ff       	call   80104ed0 <argint>
+  argptr(1, (char**) &procInfo, sizeof(procInfo));
+80105e25:	83 c4 0c             	add    $0xc,%esp
+80105e28:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105e2b:	6a 04                	push   $0x4
+80105e2d:	50                   	push   %eax
+80105e2e:	6a 01                	push   $0x1
+80105e30:	e8 eb f0 ff ff       	call   80104f20 <argptr>
+
+  return getProcInfo(pid, (struct processInfo *) procInfo);
+80105e35:	58                   	pop    %eax
+80105e36:	5a                   	pop    %edx
+80105e37:	ff 75 f4             	pushl  -0xc(%ebp)
+80105e3a:	ff 75 f0             	pushl  -0x10(%ebp)
+80105e3d:	e8 ce e8 ff ff       	call   80104710 <getProcInfo>
+}
+80105e42:	c9                   	leave  
+80105e43:	c3                   	ret    
+80105e44:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105e4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105e4f:	90                   	nop
+
+80105e50 <sys_set_burst_time>:
+
+int sys_set_burst_time(void){
+80105e50:	f3 0f 1e fb          	endbr32 
+80105e54:	55                   	push   %ebp
+80105e55:	89 e5                	mov    %esp,%ebp
+80105e57:	83 ec 20             	sub    $0x20,%esp
+  int n;
+
+  if(argint(0, &n) < 0){
+80105e5a:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105e5d:	50                   	push   %eax
+80105e5e:	6a 00                	push   $0x0
+80105e60:	e8 6b f0 ff ff       	call   80104ed0 <argint>
+80105e65:	83 c4 10             	add    $0x10,%esp
+80105e68:	85 c0                	test   %eax,%eax
+80105e6a:	78 14                	js     80105e80 <sys_set_burst_time+0x30>
+    return -1;
+  }
+
+  return set_burst_time(n);
+80105e6c:	83 ec 0c             	sub    $0xc,%esp
+80105e6f:	ff 75 f4             	pushl  -0xc(%ebp)
+80105e72:	e8 09 e9 ff ff       	call   80104780 <set_burst_time>
+80105e77:	83 c4 10             	add    $0x10,%esp
+}
+80105e7a:	c9                   	leave  
+80105e7b:	c3                   	ret    
+80105e7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105e80:	c9                   	leave  
+    return -1;
+80105e81:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105e86:	c3                   	ret    
+80105e87:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105e8e:	66 90                	xchg   %ax,%ax
+
+80105e90 <sys_get_burst_time>:
+
+int sys_get_burst_time(void){
+80105e90:	f3 0f 1e fb          	endbr32 
+  return get_burst_time();
+80105e94:	e9 47 e9 ff ff       	jmp    801047e0 <get_burst_time>
+
+80105e99 <alltraps>:
 
   # vectors.S sends all traps here.
 .globl alltraps
 alltraps:
   # Build trap frame.
   pushl %ds
-8010586e:	1e                   	push   %ds
+80105e99:	1e                   	push   %ds
   pushl %es
-8010586f:	06                   	push   %es
+80105e9a:	06                   	push   %es
   pushl %fs
-80105870:	0f a0                	push   %fs
+80105e9b:	0f a0                	push   %fs
   pushl %gs
-80105872:	0f a8                	push   %gs
+80105e9d:	0f a8                	push   %gs
   pushal
-80105874:	60                   	pusha  
+80105e9f:	60                   	pusha  
   
   # Set up data segments.
   movw $(SEG_KDATA<<3), %ax
-80105875:	66 b8 10 00          	mov    $0x10,%ax
+80105ea0:	66 b8 10 00          	mov    $0x10,%ax
   movw %ax, %ds
-80105879:	8e d8                	mov    %eax,%ds
+80105ea4:	8e d8                	mov    %eax,%ds
   movw %ax, %es
-8010587b:	8e c0                	mov    %eax,%es
+80105ea6:	8e c0                	mov    %eax,%es
 
   # Call trap(tf), where tf=%esp
   pushl %esp
-8010587d:	54                   	push   %esp
+80105ea8:	54                   	push   %esp
   call trap
-8010587e:	e8 cd 00 00 00       	call   80105950 <trap>
+80105ea9:	e8 c2 00 00 00       	call   80105f70 <trap>
   addl $4, %esp
-80105883:	83 c4 04             	add    $0x4,%esp
+80105eae:	83 c4 04             	add    $0x4,%esp
 
-80105886 <trapret>:
+80105eb1 <trapret>:
 
   # Return falls through to trapret...
 .globl trapret
 trapret:
   popal
-80105886:	61                   	popa   
+80105eb1:	61                   	popa   
   popl %gs
-80105887:	0f a9                	pop    %gs
+80105eb2:	0f a9                	pop    %gs
   popl %fs
-80105889:	0f a1                	pop    %fs
+80105eb4:	0f a1                	pop    %fs
   popl %es
-8010588b:	07                   	pop    %es
+80105eb6:	07                   	pop    %es
   popl %ds
-8010588c:	1f                   	pop    %ds
+80105eb7:	1f                   	pop    %ds
   addl $0x8, %esp  # trapno and errcode
-8010588d:	83 c4 08             	add    $0x8,%esp
+80105eb8:	83 c4 08             	add    $0x8,%esp
   iret
-80105890:	cf                   	iret   
-80105891:	66 90                	xchg   %ax,%ax
-80105893:	66 90                	xchg   %ax,%ax
-80105895:	66 90                	xchg   %ax,%ax
-80105897:	66 90                	xchg   %ax,%ax
-80105899:	66 90                	xchg   %ax,%ax
-8010589b:	66 90                	xchg   %ax,%ax
-8010589d:	66 90                	xchg   %ax,%ax
-8010589f:	90                   	nop
+80105ebb:	cf                   	iret   
+80105ebc:	66 90                	xchg   %ax,%ax
+80105ebe:	66 90                	xchg   %ax,%ax
 
-801058a0 <tvinit>:
+80105ec0 <tvinit>:
 struct spinlock tickslock;
 uint ticks;
 
 void
 tvinit(void)
 {
-801058a0:	f3 0f 1e fb          	endbr32 
-801058a4:	55                   	push   %ebp
+80105ec0:	f3 0f 1e fb          	endbr32 
+80105ec4:	55                   	push   %ebp
   int i;
 
   for(i = 0; i < 256; i++)
-801058a5:	31 c0                	xor    %eax,%eax
+80105ec5:	31 c0                	xor    %eax,%eax
 {
-801058a7:	89 e5                	mov    %esp,%ebp
-801058a9:	83 ec 08             	sub    $0x8,%esp
-801058ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105ec7:	89 e5                	mov    %esp,%ebp
+80105ec9:	83 ec 08             	sub    $0x8,%esp
+80105ecc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
-801058b0:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
-801058b7:	c7 04 c5 a2 4c 11 80 	movl   $0x8e000008,-0x7feeb35e(,%eax,8)
-801058be:	08 00 00 8e 
-801058c2:	66 89 14 c5 a0 4c 11 	mov    %dx,-0x7feeb360(,%eax,8)
-801058c9:	80 
-801058ca:	c1 ea 10             	shr    $0x10,%edx
-801058cd:	66 89 14 c5 a6 4c 11 	mov    %dx,-0x7feeb35a(,%eax,8)
-801058d4:	80 
+80105ed0:	8b 14 85 08 b0 10 80 	mov    -0x7fef4ff8(,%eax,4),%edx
+80105ed7:	c7 04 c5 a2 5f 11 80 	movl   $0x8e000008,-0x7feea05e(,%eax,8)
+80105ede:	08 00 00 8e 
+80105ee2:	66 89 14 c5 a0 5f 11 	mov    %dx,-0x7feea060(,%eax,8)
+80105ee9:	80 
+80105eea:	c1 ea 10             	shr    $0x10,%edx
+80105eed:	66 89 14 c5 a6 5f 11 	mov    %dx,-0x7feea05a(,%eax,8)
+80105ef4:	80 
   for(i = 0; i < 256; i++)
-801058d5:	83 c0 01             	add    $0x1,%eax
-801058d8:	3d 00 01 00 00       	cmp    $0x100,%eax
-801058dd:	75 d1                	jne    801058b0 <tvinit+0x10>
+80105ef5:	83 c0 01             	add    $0x1,%eax
+80105ef8:	3d 00 01 00 00       	cmp    $0x100,%eax
+80105efd:	75 d1                	jne    80105ed0 <tvinit+0x10>
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
 
   initlock(&tickslock, "time");
-801058df:	83 ec 08             	sub    $0x8,%esp
+80105eff:	83 ec 08             	sub    $0x8,%esp
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-801058e2:	a1 08 a1 10 80       	mov    0x8010a108,%eax
-801058e7:	c7 05 a2 4e 11 80 08 	movl   $0xef000008,0x80114ea2
-801058ee:	00 00 ef 
+80105f02:	a1 08 b1 10 80       	mov    0x8010b108,%eax
+80105f07:	c7 05 a2 61 11 80 08 	movl   $0xef000008,0x801161a2
+80105f0e:	00 00 ef 
   initlock(&tickslock, "time");
-801058f1:	68 59 78 10 80       	push   $0x80107859
-801058f6:	68 60 4c 11 80       	push   $0x80114c60
+80105f11:	68 8d 7e 10 80       	push   $0x80107e8d
+80105f16:	68 60 5f 11 80       	push   $0x80115f60
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-801058fb:	66 a3 a0 4e 11 80    	mov    %ax,0x80114ea0
-80105901:	c1 e8 10             	shr    $0x10,%eax
-80105904:	66 a3 a6 4e 11 80    	mov    %ax,0x80114ea6
+80105f1b:	66 a3 a0 61 11 80    	mov    %ax,0x801161a0
+80105f21:	c1 e8 10             	shr    $0x10,%eax
+80105f24:	66 a3 a6 61 11 80    	mov    %ax,0x801161a6
   initlock(&tickslock, "time");
-8010590a:	e8 d1 ea ff ff       	call   801043e0 <initlock>
+80105f2a:	e8 31 ea ff ff       	call   80104960 <initlock>
 }
-8010590f:	83 c4 10             	add    $0x10,%esp
-80105912:	c9                   	leave  
-80105913:	c3                   	ret    
-80105914:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010591b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010591f:	90                   	nop
+80105f2f:	83 c4 10             	add    $0x10,%esp
+80105f32:	c9                   	leave  
+80105f33:	c3                   	ret    
+80105f34:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105f3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105f3f:	90                   	nop
 
-80105920 <idtinit>:
+80105f40 <idtinit>:
 
 void
 idtinit(void)
 {
-80105920:	f3 0f 1e fb          	endbr32 
-80105924:	55                   	push   %ebp
+80105f40:	f3 0f 1e fb          	endbr32 
+80105f44:	55                   	push   %ebp
   pd[0] = size-1;
-80105925:	b8 ff 07 00 00       	mov    $0x7ff,%eax
-8010592a:	89 e5                	mov    %esp,%ebp
-8010592c:	83 ec 10             	sub    $0x10,%esp
-8010592f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+80105f45:	b8 ff 07 00 00       	mov    $0x7ff,%eax
+80105f4a:	89 e5                	mov    %esp,%ebp
+80105f4c:	83 ec 10             	sub    $0x10,%esp
+80105f4f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
   pd[1] = (uint)p;
-80105933:	b8 a0 4c 11 80       	mov    $0x80114ca0,%eax
-80105938:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+80105f53:	b8 a0 5f 11 80       	mov    $0x80115fa0,%eax
+80105f58:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   pd[2] = (uint)p >> 16;
-8010593c:	c1 e8 10             	shr    $0x10,%eax
-8010593f:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+80105f5c:	c1 e8 10             	shr    $0x10,%eax
+80105f5f:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
   asm volatile("lidt (%0)" : : "r" (pd));
-80105943:	8d 45 fa             	lea    -0x6(%ebp),%eax
-80105946:	0f 01 18             	lidtl  (%eax)
+80105f63:	8d 45 fa             	lea    -0x6(%ebp),%eax
+80105f66:	0f 01 18             	lidtl  (%eax)
   lidt(idt, sizeof(idt));
 }
-80105949:	c9                   	leave  
-8010594a:	c3                   	ret    
-8010594b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010594f:	90                   	nop
+80105f69:	c9                   	leave  
+80105f6a:	c3                   	ret    
+80105f6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105f6f:	90                   	nop
 
-80105950 <trap>:
+80105f70 <trap>:
 
 //PAGEBREAK: 41
 void
 trap(struct trapframe *tf)
 {
-80105950:	f3 0f 1e fb          	endbr32 
-80105954:	55                   	push   %ebp
-80105955:	89 e5                	mov    %esp,%ebp
-80105957:	57                   	push   %edi
-80105958:	56                   	push   %esi
-80105959:	53                   	push   %ebx
-8010595a:	83 ec 1c             	sub    $0x1c,%esp
-8010595d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105f70:	f3 0f 1e fb          	endbr32 
+80105f74:	55                   	push   %ebp
+80105f75:	89 e5                	mov    %esp,%ebp
+80105f77:	57                   	push   %edi
+80105f78:	56                   	push   %esi
+80105f79:	53                   	push   %ebx
+80105f7a:	83 ec 1c             	sub    $0x1c,%esp
+80105f7d:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(tf->trapno == T_SYSCALL){
-80105960:	8b 43 30             	mov    0x30(%ebx),%eax
-80105963:	83 f8 40             	cmp    $0x40,%eax
-80105966:	0f 84 bc 01 00 00    	je     80105b28 <trap+0x1d8>
+80105f80:	8b 43 30             	mov    0x30(%ebx),%eax
+80105f83:	83 f8 40             	cmp    $0x40,%eax
+80105f86:	0f 84 bc 01 00 00    	je     80106148 <trap+0x1d8>
     if(myproc()->killed)
       exit();
     return;
   }
 
   switch(tf->trapno){
-8010596c:	83 e8 20             	sub    $0x20,%eax
-8010596f:	83 f8 1f             	cmp    $0x1f,%eax
-80105972:	77 08                	ja     8010597c <trap+0x2c>
-80105974:	3e ff 24 85 00 79 10 	notrack jmp *-0x7fef8700(,%eax,4)
-8010597b:	80 
+80105f8c:	83 e8 20             	sub    $0x20,%eax
+80105f8f:	83 f8 1f             	cmp    $0x1f,%eax
+80105f92:	77 08                	ja     80105f9c <trap+0x2c>
+80105f94:	3e ff 24 85 34 7f 10 	notrack jmp *-0x7fef80cc(,%eax,4)
+80105f9b:	80 
     lapiceoi();
     break;
 
   //PAGEBREAK: 13
   default:
     if(myproc() == 0 || (tf->cs&3) == 0){
-8010597c:	e8 df df ff ff       	call   80103960 <myproc>
-80105981:	8b 7b 38             	mov    0x38(%ebx),%edi
-80105984:	85 c0                	test   %eax,%eax
-80105986:	0f 84 eb 01 00 00    	je     80105b77 <trap+0x227>
-8010598c:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
-80105990:	0f 84 e1 01 00 00    	je     80105b77 <trap+0x227>
+80105f9c:	e8 bf dc ff ff       	call   80103c60 <myproc>
+80105fa1:	8b 7b 38             	mov    0x38(%ebx),%edi
+80105fa4:	85 c0                	test   %eax,%eax
+80105fa6:	0f 84 eb 01 00 00    	je     80106197 <trap+0x227>
+80105fac:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
+80105fb0:	0f 84 e1 01 00 00    	je     80106197 <trap+0x227>
 
 static inline uint
 rcr2(void)
 {
   uint val;
   asm volatile("movl %%cr2,%0" : "=r" (val));
-80105996:	0f 20 d1             	mov    %cr2,%ecx
-80105999:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+80105fb6:	0f 20 d1             	mov    %cr2,%ecx
+80105fb9:	89 4d d8             	mov    %ecx,-0x28(%ebp)
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
               tf->trapno, cpuid(), tf->eip, rcr2());
       panic("trap");
     }
     // In user space, assume process misbehaved.
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-8010599c:	e8 9f df ff ff       	call   80103940 <cpuid>
-801059a1:	8b 73 30             	mov    0x30(%ebx),%esi
-801059a4:	89 45 dc             	mov    %eax,-0x24(%ebp)
-801059a7:	8b 43 34             	mov    0x34(%ebx),%eax
-801059aa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80105fbc:	e8 7f dc ff ff       	call   80103c40 <cpuid>
+80105fc1:	8b 73 30             	mov    0x30(%ebx),%esi
+80105fc4:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80105fc7:	8b 43 34             	mov    0x34(%ebx),%eax
+80105fca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
             "eip 0x%x addr 0x%x--kill proc\n",
             myproc()->pid, myproc()->name, tf->trapno,
-801059ad:	e8 ae df ff ff       	call   80103960 <myproc>
-801059b2:	89 45 e0             	mov    %eax,-0x20(%ebp)
-801059b5:	e8 a6 df ff ff       	call   80103960 <myproc>
+80105fcd:	e8 8e dc ff ff       	call   80103c60 <myproc>
+80105fd2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80105fd5:	e8 86 dc ff ff       	call   80103c60 <myproc>
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-801059ba:	8b 4d d8             	mov    -0x28(%ebp),%ecx
-801059bd:	8b 55 dc             	mov    -0x24(%ebp),%edx
-801059c0:	51                   	push   %ecx
-801059c1:	57                   	push   %edi
-801059c2:	52                   	push   %edx
-801059c3:	ff 75 e4             	pushl  -0x1c(%ebp)
-801059c6:	56                   	push   %esi
+80105fda:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+80105fdd:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80105fe0:	51                   	push   %ecx
+80105fe1:	57                   	push   %edi
+80105fe2:	52                   	push   %edx
+80105fe3:	ff 75 e4             	pushl  -0x1c(%ebp)
+80105fe6:	56                   	push   %esi
             myproc()->pid, myproc()->name, tf->trapno,
-801059c7:	8b 75 e0             	mov    -0x20(%ebp),%esi
-801059ca:	83 c6 6c             	add    $0x6c,%esi
+80105fe7:	8b 75 e0             	mov    -0x20(%ebp),%esi
+80105fea:	83 c6 6c             	add    $0x6c,%esi
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-801059cd:	56                   	push   %esi
-801059ce:	ff 70 10             	pushl  0x10(%eax)
-801059d1:	68 bc 78 10 80       	push   $0x801078bc
-801059d6:	e8 d5 ac ff ff       	call   801006b0 <cprintf>
+80105fed:	56                   	push   %esi
+80105fee:	ff 70 10             	pushl  0x10(%eax)
+80105ff1:	68 f0 7e 10 80       	push   $0x80107ef0
+80105ff6:	e8 b5 a6 ff ff       	call   801006b0 <cprintf>
             tf->err, cpuid(), tf->eip, rcr2());
     myproc()->killed = 1;
-801059db:	83 c4 20             	add    $0x20,%esp
-801059de:	e8 7d df ff ff       	call   80103960 <myproc>
-801059e3:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+80105ffb:	83 c4 20             	add    $0x20,%esp
+80105ffe:	e8 5d dc ff ff       	call   80103c60 <myproc>
+80106003:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
   }
 
   // Force process exit if it has been killed and is in user space.
   // (If it is still executing in the kernel, let it keep running
   // until it gets to the regular system call return.)
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-801059ea:	e8 71 df ff ff       	call   80103960 <myproc>
-801059ef:	85 c0                	test   %eax,%eax
-801059f1:	74 1d                	je     80105a10 <trap+0xc0>
-801059f3:	e8 68 df ff ff       	call   80103960 <myproc>
-801059f8:	8b 50 24             	mov    0x24(%eax),%edx
-801059fb:	85 d2                	test   %edx,%edx
-801059fd:	74 11                	je     80105a10 <trap+0xc0>
-801059ff:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-80105a03:	83 e0 03             	and    $0x3,%eax
-80105a06:	66 83 f8 03          	cmp    $0x3,%ax
-80105a0a:	0f 84 50 01 00 00    	je     80105b60 <trap+0x210>
+8010600a:	e8 51 dc ff ff       	call   80103c60 <myproc>
+8010600f:	85 c0                	test   %eax,%eax
+80106011:	74 1d                	je     80106030 <trap+0xc0>
+80106013:	e8 48 dc ff ff       	call   80103c60 <myproc>
+80106018:	8b 50 24             	mov    0x24(%eax),%edx
+8010601b:	85 d2                	test   %edx,%edx
+8010601d:	74 11                	je     80106030 <trap+0xc0>
+8010601f:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80106023:	83 e0 03             	and    $0x3,%eax
+80106026:	66 83 f8 03          	cmp    $0x3,%ax
+8010602a:	0f 84 50 01 00 00    	je     80106180 <trap+0x210>
     exit();
 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
   if(myproc() && myproc()->state == RUNNING &&
-80105a10:	e8 4b df ff ff       	call   80103960 <myproc>
-80105a15:	85 c0                	test   %eax,%eax
-80105a17:	74 0f                	je     80105a28 <trap+0xd8>
-80105a19:	e8 42 df ff ff       	call   80103960 <myproc>
-80105a1e:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
-80105a22:	0f 84 e8 00 00 00    	je     80105b10 <trap+0x1c0>
+80106030:	e8 2b dc ff ff       	call   80103c60 <myproc>
+80106035:	85 c0                	test   %eax,%eax
+80106037:	74 0f                	je     80106048 <trap+0xd8>
+80106039:	e8 22 dc ff ff       	call   80103c60 <myproc>
+8010603e:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
+80106042:	0f 84 e8 00 00 00    	je     80106130 <trap+0x1c0>
      tf->trapno == T_IRQ0+IRQ_TIMER)
     yield();
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105a28:	e8 33 df ff ff       	call   80103960 <myproc>
-80105a2d:	85 c0                	test   %eax,%eax
-80105a2f:	74 1d                	je     80105a4e <trap+0xfe>
-80105a31:	e8 2a df ff ff       	call   80103960 <myproc>
-80105a36:	8b 40 24             	mov    0x24(%eax),%eax
-80105a39:	85 c0                	test   %eax,%eax
-80105a3b:	74 11                	je     80105a4e <trap+0xfe>
-80105a3d:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-80105a41:	83 e0 03             	and    $0x3,%eax
-80105a44:	66 83 f8 03          	cmp    $0x3,%ax
-80105a48:	0f 84 03 01 00 00    	je     80105b51 <trap+0x201>
+80106048:	e8 13 dc ff ff       	call   80103c60 <myproc>
+8010604d:	85 c0                	test   %eax,%eax
+8010604f:	74 1d                	je     8010606e <trap+0xfe>
+80106051:	e8 0a dc ff ff       	call   80103c60 <myproc>
+80106056:	8b 40 24             	mov    0x24(%eax),%eax
+80106059:	85 c0                	test   %eax,%eax
+8010605b:	74 11                	je     8010606e <trap+0xfe>
+8010605d:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80106061:	83 e0 03             	and    $0x3,%eax
+80106064:	66 83 f8 03          	cmp    $0x3,%ax
+80106068:	0f 84 03 01 00 00    	je     80106171 <trap+0x201>
     exit();
 }
-80105a4e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105a51:	5b                   	pop    %ebx
-80105a52:	5e                   	pop    %esi
-80105a53:	5f                   	pop    %edi
-80105a54:	5d                   	pop    %ebp
-80105a55:	c3                   	ret    
+8010606e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106071:	5b                   	pop    %ebx
+80106072:	5e                   	pop    %esi
+80106073:	5f                   	pop    %edi
+80106074:	5d                   	pop    %ebp
+80106075:	c3                   	ret    
     ideintr();
-80105a56:	e8 85 c7 ff ff       	call   801021e0 <ideintr>
+80106076:	e8 65 c1 ff ff       	call   801021e0 <ideintr>
     lapiceoi();
-80105a5b:	e8 60 ce ff ff       	call   801028c0 <lapiceoi>
+8010607b:	e8 40 c8 ff ff       	call   801028c0 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105a60:	e8 fb de ff ff       	call   80103960 <myproc>
-80105a65:	85 c0                	test   %eax,%eax
-80105a67:	75 8a                	jne    801059f3 <trap+0xa3>
-80105a69:	eb a5                	jmp    80105a10 <trap+0xc0>
+80106080:	e8 db db ff ff       	call   80103c60 <myproc>
+80106085:	85 c0                	test   %eax,%eax
+80106087:	75 8a                	jne    80106013 <trap+0xa3>
+80106089:	eb a5                	jmp    80106030 <trap+0xc0>
     if(cpuid() == 0){
-80105a6b:	e8 d0 de ff ff       	call   80103940 <cpuid>
-80105a70:	85 c0                	test   %eax,%eax
-80105a72:	75 e7                	jne    80105a5b <trap+0x10b>
+8010608b:	e8 b0 db ff ff       	call   80103c40 <cpuid>
+80106090:	85 c0                	test   %eax,%eax
+80106092:	75 e7                	jne    8010607b <trap+0x10b>
       acquire(&tickslock);
-80105a74:	83 ec 0c             	sub    $0xc,%esp
-80105a77:	68 60 4c 11 80       	push   $0x80114c60
-80105a7c:	e8 df ea ff ff       	call   80104560 <acquire>
+80106094:	83 ec 0c             	sub    $0xc,%esp
+80106097:	68 60 5f 11 80       	push   $0x80115f60
+8010609c:	e8 3f ea ff ff       	call   80104ae0 <acquire>
       wakeup(&ticks);
-80105a81:	c7 04 24 a0 54 11 80 	movl   $0x801154a0,(%esp)
+801060a1:	c7 04 24 a0 67 11 80 	movl   $0x801167a0,(%esp)
       ticks++;
-80105a88:	83 05 a0 54 11 80 01 	addl   $0x1,0x801154a0
+801060a8:	83 05 a0 67 11 80 01 	addl   $0x1,0x801167a0
       wakeup(&ticks);
-80105a8f:	e8 4c e6 ff ff       	call   801040e0 <wakeup>
+801060af:	e8 dc e3 ff ff       	call   80104490 <wakeup>
       release(&tickslock);
-80105a94:	c7 04 24 60 4c 11 80 	movl   $0x80114c60,(%esp)
-80105a9b:	e8 80 eb ff ff       	call   80104620 <release>
-80105aa0:	83 c4 10             	add    $0x10,%esp
+801060b4:	c7 04 24 60 5f 11 80 	movl   $0x80115f60,(%esp)
+801060bb:	e8 e0 ea ff ff       	call   80104ba0 <release>
+801060c0:	83 c4 10             	add    $0x10,%esp
     lapiceoi();
-80105aa3:	eb b6                	jmp    80105a5b <trap+0x10b>
+801060c3:	eb b6                	jmp    8010607b <trap+0x10b>
     kbdintr();
-80105aa5:	e8 d6 cc ff ff       	call   80102780 <kbdintr>
+801060c5:	e8 b6 c6 ff ff       	call   80102780 <kbdintr>
     lapiceoi();
-80105aaa:	e8 11 ce ff ff       	call   801028c0 <lapiceoi>
+801060ca:	e8 f1 c7 ff ff       	call   801028c0 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105aaf:	e8 ac de ff ff       	call   80103960 <myproc>
-80105ab4:	85 c0                	test   %eax,%eax
-80105ab6:	0f 85 37 ff ff ff    	jne    801059f3 <trap+0xa3>
-80105abc:	e9 4f ff ff ff       	jmp    80105a10 <trap+0xc0>
+801060cf:	e8 8c db ff ff       	call   80103c60 <myproc>
+801060d4:	85 c0                	test   %eax,%eax
+801060d6:	0f 85 37 ff ff ff    	jne    80106013 <trap+0xa3>
+801060dc:	e9 4f ff ff ff       	jmp    80106030 <trap+0xc0>
     uartintr();
-80105ac1:	e8 4a 02 00 00       	call   80105d10 <uartintr>
+801060e1:	e8 4a 02 00 00       	call   80106330 <uartintr>
     lapiceoi();
-80105ac6:	e8 f5 cd ff ff       	call   801028c0 <lapiceoi>
+801060e6:	e8 d5 c7 ff ff       	call   801028c0 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105acb:	e8 90 de ff ff       	call   80103960 <myproc>
-80105ad0:	85 c0                	test   %eax,%eax
-80105ad2:	0f 85 1b ff ff ff    	jne    801059f3 <trap+0xa3>
-80105ad8:	e9 33 ff ff ff       	jmp    80105a10 <trap+0xc0>
+801060eb:	e8 70 db ff ff       	call   80103c60 <myproc>
+801060f0:	85 c0                	test   %eax,%eax
+801060f2:	0f 85 1b ff ff ff    	jne    80106013 <trap+0xa3>
+801060f8:	e9 33 ff ff ff       	jmp    80106030 <trap+0xc0>
     cprintf("cpu%d: spurious interrupt at %x:%x\n",
-80105add:	8b 7b 38             	mov    0x38(%ebx),%edi
-80105ae0:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
-80105ae4:	e8 57 de ff ff       	call   80103940 <cpuid>
-80105ae9:	57                   	push   %edi
-80105aea:	56                   	push   %esi
-80105aeb:	50                   	push   %eax
-80105aec:	68 64 78 10 80       	push   $0x80107864
-80105af1:	e8 ba ab ff ff       	call   801006b0 <cprintf>
+801060fd:	8b 7b 38             	mov    0x38(%ebx),%edi
+80106100:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
+80106104:	e8 37 db ff ff       	call   80103c40 <cpuid>
+80106109:	57                   	push   %edi
+8010610a:	56                   	push   %esi
+8010610b:	50                   	push   %eax
+8010610c:	68 98 7e 10 80       	push   $0x80107e98
+80106111:	e8 9a a5 ff ff       	call   801006b0 <cprintf>
     lapiceoi();
-80105af6:	e8 c5 cd ff ff       	call   801028c0 <lapiceoi>
+80106116:	e8 a5 c7 ff ff       	call   801028c0 <lapiceoi>
     break;
-80105afb:	83 c4 10             	add    $0x10,%esp
+8010611b:	83 c4 10             	add    $0x10,%esp
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105afe:	e8 5d de ff ff       	call   80103960 <myproc>
-80105b03:	85 c0                	test   %eax,%eax
-80105b05:	0f 85 e8 fe ff ff    	jne    801059f3 <trap+0xa3>
-80105b0b:	e9 00 ff ff ff       	jmp    80105a10 <trap+0xc0>
+8010611e:	e8 3d db ff ff       	call   80103c60 <myproc>
+80106123:	85 c0                	test   %eax,%eax
+80106125:	0f 85 e8 fe ff ff    	jne    80106013 <trap+0xa3>
+8010612b:	e9 00 ff ff ff       	jmp    80106030 <trap+0xc0>
   if(myproc() && myproc()->state == RUNNING &&
-80105b10:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
-80105b14:	0f 85 0e ff ff ff    	jne    80105a28 <trap+0xd8>
+80106130:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
+80106134:	0f 85 0e ff ff ff    	jne    80106048 <trap+0xd8>
     yield();
-80105b1a:	e8 b1 e3 ff ff       	call   80103ed0 <yield>
-80105b1f:	e9 04 ff ff ff       	jmp    80105a28 <trap+0xd8>
-80105b24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010613a:	e8 41 e1 ff ff       	call   80104280 <yield>
+8010613f:	e9 04 ff ff ff       	jmp    80106048 <trap+0xd8>
+80106144:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(myproc()->killed)
-80105b28:	e8 33 de ff ff       	call   80103960 <myproc>
-80105b2d:	8b 70 24             	mov    0x24(%eax),%esi
-80105b30:	85 f6                	test   %esi,%esi
-80105b32:	75 3c                	jne    80105b70 <trap+0x220>
+80106148:	e8 13 db ff ff       	call   80103c60 <myproc>
+8010614d:	8b 70 24             	mov    0x24(%eax),%esi
+80106150:	85 f6                	test   %esi,%esi
+80106152:	75 3c                	jne    80106190 <trap+0x220>
     myproc()->tf = tf;
-80105b34:	e8 27 de ff ff       	call   80103960 <myproc>
-80105b39:	89 58 18             	mov    %ebx,0x18(%eax)
+80106154:	e8 07 db ff ff       	call   80103c60 <myproc>
+80106159:	89 58 18             	mov    %ebx,0x18(%eax)
     syscall();
-80105b3c:	e8 ff ee ff ff       	call   80104a40 <syscall>
+8010615c:	e8 5f ee ff ff       	call   80104fc0 <syscall>
     if(myproc()->killed)
-80105b41:	e8 1a de ff ff       	call   80103960 <myproc>
-80105b46:	8b 48 24             	mov    0x24(%eax),%ecx
-80105b49:	85 c9                	test   %ecx,%ecx
-80105b4b:	0f 84 fd fe ff ff    	je     80105a4e <trap+0xfe>
-}
-80105b51:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105b54:	5b                   	pop    %ebx
-80105b55:	5e                   	pop    %esi
-80105b56:	5f                   	pop    %edi
-80105b57:	5d                   	pop    %ebp
+80106161:	e8 fa da ff ff       	call   80103c60 <myproc>
+80106166:	8b 48 24             	mov    0x24(%eax),%ecx
+80106169:	85 c9                	test   %ecx,%ecx
+8010616b:	0f 84 fd fe ff ff    	je     8010606e <trap+0xfe>
+}
+80106171:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106174:	5b                   	pop    %ebx
+80106175:	5e                   	pop    %esi
+80106176:	5f                   	pop    %edi
+80106177:	5d                   	pop    %ebp
       exit();
-80105b58:	e9 33 e2 ff ff       	jmp    80103d90 <exit>
-80105b5d:	8d 76 00             	lea    0x0(%esi),%esi
+80106178:	e9 c3 df ff ff       	jmp    80104140 <exit>
+8010617d:	8d 76 00             	lea    0x0(%esi),%esi
     exit();
-80105b60:	e8 2b e2 ff ff       	call   80103d90 <exit>
-80105b65:	e9 a6 fe ff ff       	jmp    80105a10 <trap+0xc0>
-80105b6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106180:	e8 bb df ff ff       	call   80104140 <exit>
+80106185:	e9 a6 fe ff ff       	jmp    80106030 <trap+0xc0>
+8010618a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       exit();
-80105b70:	e8 1b e2 ff ff       	call   80103d90 <exit>
-80105b75:	eb bd                	jmp    80105b34 <trap+0x1e4>
-80105b77:	0f 20 d6             	mov    %cr2,%esi
+80106190:	e8 ab df ff ff       	call   80104140 <exit>
+80106195:	eb bd                	jmp    80106154 <trap+0x1e4>
+80106197:	0f 20 d6             	mov    %cr2,%esi
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-80105b7a:	e8 c1 dd ff ff       	call   80103940 <cpuid>
-80105b7f:	83 ec 0c             	sub    $0xc,%esp
-80105b82:	56                   	push   %esi
-80105b83:	57                   	push   %edi
-80105b84:	50                   	push   %eax
-80105b85:	ff 73 30             	pushl  0x30(%ebx)
-80105b88:	68 88 78 10 80       	push   $0x80107888
-80105b8d:	e8 1e ab ff ff       	call   801006b0 <cprintf>
+8010619a:	e8 a1 da ff ff       	call   80103c40 <cpuid>
+8010619f:	83 ec 0c             	sub    $0xc,%esp
+801061a2:	56                   	push   %esi
+801061a3:	57                   	push   %edi
+801061a4:	50                   	push   %eax
+801061a5:	ff 73 30             	pushl  0x30(%ebx)
+801061a8:	68 bc 7e 10 80       	push   $0x80107ebc
+801061ad:	e8 fe a4 ff ff       	call   801006b0 <cprintf>
       panic("trap");
-80105b92:	83 c4 14             	add    $0x14,%esp
-80105b95:	68 5e 78 10 80       	push   $0x8010785e
-80105b9a:	e8 f1 a7 ff ff       	call   80100390 <panic>
-80105b9f:	90                   	nop
+801061b2:	83 c4 14             	add    $0x14,%esp
+801061b5:	68 92 7e 10 80       	push   $0x80107e92
+801061ba:	e8 d1 a1 ff ff       	call   80100390 <panic>
+801061bf:	90                   	nop
 
-80105ba0 <uartgetc>:
+801061c0 <uartgetc>:
   outb(COM1+0, c);
 }
 
 static int
 uartgetc(void)
 {
-80105ba0:	f3 0f 1e fb          	endbr32 
+801061c0:	f3 0f 1e fb          	endbr32 
   if(!uart)
-80105ba4:	a1 bc a5 10 80       	mov    0x8010a5bc,%eax
-80105ba9:	85 c0                	test   %eax,%eax
-80105bab:	74 1b                	je     80105bc8 <uartgetc+0x28>
+801061c4:	a1 bc b5 10 80       	mov    0x8010b5bc,%eax
+801061c9:	85 c0                	test   %eax,%eax
+801061cb:	74 1b                	je     801061e8 <uartgetc+0x28>
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105bad:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105bb2:	ec                   	in     (%dx),%al
+801061cd:	ba fd 03 00 00       	mov    $0x3fd,%edx
+801061d2:	ec                   	in     (%dx),%al
     return -1;
   if(!(inb(COM1+5) & 0x01))
-80105bb3:	a8 01                	test   $0x1,%al
-80105bb5:	74 11                	je     80105bc8 <uartgetc+0x28>
-80105bb7:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105bbc:	ec                   	in     (%dx),%al
+801061d3:	a8 01                	test   $0x1,%al
+801061d5:	74 11                	je     801061e8 <uartgetc+0x28>
+801061d7:	ba f8 03 00 00       	mov    $0x3f8,%edx
+801061dc:	ec                   	in     (%dx),%al
     return -1;
   return inb(COM1+0);
-80105bbd:	0f b6 c0             	movzbl %al,%eax
-80105bc0:	c3                   	ret    
-80105bc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801061dd:	0f b6 c0             	movzbl %al,%eax
+801061e0:	c3                   	ret    
+801061e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     return -1;
-80105bc8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801061e8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105bcd:	c3                   	ret    
-80105bce:	66 90                	xchg   %ax,%ax
+801061ed:	c3                   	ret    
+801061ee:	66 90                	xchg   %ax,%ax
 
-80105bd0 <uartputc.part.0>:
+801061f0 <uartputc.part.0>:
 uartputc(int c)
-80105bd0:	55                   	push   %ebp
-80105bd1:	89 e5                	mov    %esp,%ebp
-80105bd3:	57                   	push   %edi
-80105bd4:	89 c7                	mov    %eax,%edi
-80105bd6:	56                   	push   %esi
-80105bd7:	be fd 03 00 00       	mov    $0x3fd,%esi
-80105bdc:	53                   	push   %ebx
-80105bdd:	bb 80 00 00 00       	mov    $0x80,%ebx
-80105be2:	83 ec 0c             	sub    $0xc,%esp
-80105be5:	eb 1b                	jmp    80105c02 <uartputc.part.0+0x32>
-80105be7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105bee:	66 90                	xchg   %ax,%ax
+801061f0:	55                   	push   %ebp
+801061f1:	89 e5                	mov    %esp,%ebp
+801061f3:	57                   	push   %edi
+801061f4:	89 c7                	mov    %eax,%edi
+801061f6:	56                   	push   %esi
+801061f7:	be fd 03 00 00       	mov    $0x3fd,%esi
+801061fc:	53                   	push   %ebx
+801061fd:	bb 80 00 00 00       	mov    $0x80,%ebx
+80106202:	83 ec 0c             	sub    $0xc,%esp
+80106205:	eb 1b                	jmp    80106222 <uartputc.part.0+0x32>
+80106207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010620e:	66 90                	xchg   %ax,%ax
     microdelay(10);
-80105bf0:	83 ec 0c             	sub    $0xc,%esp
-80105bf3:	6a 0a                	push   $0xa
-80105bf5:	e8 e6 cc ff ff       	call   801028e0 <microdelay>
+80106210:	83 ec 0c             	sub    $0xc,%esp
+80106213:	6a 0a                	push   $0xa
+80106215:	e8 c6 c6 ff ff       	call   801028e0 <microdelay>
   for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-80105bfa:	83 c4 10             	add    $0x10,%esp
-80105bfd:	83 eb 01             	sub    $0x1,%ebx
-80105c00:	74 07                	je     80105c09 <uartputc.part.0+0x39>
-80105c02:	89 f2                	mov    %esi,%edx
-80105c04:	ec                   	in     (%dx),%al
-80105c05:	a8 20                	test   $0x20,%al
-80105c07:	74 e7                	je     80105bf0 <uartputc.part.0+0x20>
+8010621a:	83 c4 10             	add    $0x10,%esp
+8010621d:	83 eb 01             	sub    $0x1,%ebx
+80106220:	74 07                	je     80106229 <uartputc.part.0+0x39>
+80106222:	89 f2                	mov    %esi,%edx
+80106224:	ec                   	in     (%dx),%al
+80106225:	a8 20                	test   $0x20,%al
+80106227:	74 e7                	je     80106210 <uartputc.part.0+0x20>
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80105c09:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105c0e:	89 f8                	mov    %edi,%eax
-80105c10:	ee                   	out    %al,(%dx)
-}
-80105c11:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105c14:	5b                   	pop    %ebx
-80105c15:	5e                   	pop    %esi
-80105c16:	5f                   	pop    %edi
-80105c17:	5d                   	pop    %ebp
-80105c18:	c3                   	ret    
-80105c19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80105c20 <uartinit>:
-{
-80105c20:	f3 0f 1e fb          	endbr32 
-80105c24:	55                   	push   %ebp
-80105c25:	31 c9                	xor    %ecx,%ecx
-80105c27:	89 c8                	mov    %ecx,%eax
-80105c29:	89 e5                	mov    %esp,%ebp
-80105c2b:	57                   	push   %edi
-80105c2c:	56                   	push   %esi
-80105c2d:	53                   	push   %ebx
-80105c2e:	bb fa 03 00 00       	mov    $0x3fa,%ebx
-80105c33:	89 da                	mov    %ebx,%edx
-80105c35:	83 ec 0c             	sub    $0xc,%esp
-80105c38:	ee                   	out    %al,(%dx)
-80105c39:	bf fb 03 00 00       	mov    $0x3fb,%edi
-80105c3e:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
-80105c43:	89 fa                	mov    %edi,%edx
-80105c45:	ee                   	out    %al,(%dx)
-80105c46:	b8 0c 00 00 00       	mov    $0xc,%eax
-80105c4b:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105c50:	ee                   	out    %al,(%dx)
-80105c51:	be f9 03 00 00       	mov    $0x3f9,%esi
-80105c56:	89 c8                	mov    %ecx,%eax
-80105c58:	89 f2                	mov    %esi,%edx
-80105c5a:	ee                   	out    %al,(%dx)
-80105c5b:	b8 03 00 00 00       	mov    $0x3,%eax
-80105c60:	89 fa                	mov    %edi,%edx
-80105c62:	ee                   	out    %al,(%dx)
-80105c63:	ba fc 03 00 00       	mov    $0x3fc,%edx
-80105c68:	89 c8                	mov    %ecx,%eax
-80105c6a:	ee                   	out    %al,(%dx)
-80105c6b:	b8 01 00 00 00       	mov    $0x1,%eax
-80105c70:	89 f2                	mov    %esi,%edx
-80105c72:	ee                   	out    %al,(%dx)
+80106229:	ba f8 03 00 00       	mov    $0x3f8,%edx
+8010622e:	89 f8                	mov    %edi,%eax
+80106230:	ee                   	out    %al,(%dx)
+}
+80106231:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106234:	5b                   	pop    %ebx
+80106235:	5e                   	pop    %esi
+80106236:	5f                   	pop    %edi
+80106237:	5d                   	pop    %ebp
+80106238:	c3                   	ret    
+80106239:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106240 <uartinit>:
+{
+80106240:	f3 0f 1e fb          	endbr32 
+80106244:	55                   	push   %ebp
+80106245:	31 c9                	xor    %ecx,%ecx
+80106247:	89 c8                	mov    %ecx,%eax
+80106249:	89 e5                	mov    %esp,%ebp
+8010624b:	57                   	push   %edi
+8010624c:	56                   	push   %esi
+8010624d:	53                   	push   %ebx
+8010624e:	bb fa 03 00 00       	mov    $0x3fa,%ebx
+80106253:	89 da                	mov    %ebx,%edx
+80106255:	83 ec 0c             	sub    $0xc,%esp
+80106258:	ee                   	out    %al,(%dx)
+80106259:	bf fb 03 00 00       	mov    $0x3fb,%edi
+8010625e:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
+80106263:	89 fa                	mov    %edi,%edx
+80106265:	ee                   	out    %al,(%dx)
+80106266:	b8 0c 00 00 00       	mov    $0xc,%eax
+8010626b:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80106270:	ee                   	out    %al,(%dx)
+80106271:	be f9 03 00 00       	mov    $0x3f9,%esi
+80106276:	89 c8                	mov    %ecx,%eax
+80106278:	89 f2                	mov    %esi,%edx
+8010627a:	ee                   	out    %al,(%dx)
+8010627b:	b8 03 00 00 00       	mov    $0x3,%eax
+80106280:	89 fa                	mov    %edi,%edx
+80106282:	ee                   	out    %al,(%dx)
+80106283:	ba fc 03 00 00       	mov    $0x3fc,%edx
+80106288:	89 c8                	mov    %ecx,%eax
+8010628a:	ee                   	out    %al,(%dx)
+8010628b:	b8 01 00 00 00       	mov    $0x1,%eax
+80106290:	89 f2                	mov    %esi,%edx
+80106292:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105c73:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105c78:	ec                   	in     (%dx),%al
+80106293:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80106298:	ec                   	in     (%dx),%al
   if(inb(COM1+5) == 0xFF)
-80105c79:	3c ff                	cmp    $0xff,%al
-80105c7b:	74 52                	je     80105ccf <uartinit+0xaf>
+80106299:	3c ff                	cmp    $0xff,%al
+8010629b:	74 52                	je     801062ef <uartinit+0xaf>
   uart = 1;
-80105c7d:	c7 05 bc a5 10 80 01 	movl   $0x1,0x8010a5bc
-80105c84:	00 00 00 
-80105c87:	89 da                	mov    %ebx,%edx
-80105c89:	ec                   	in     (%dx),%al
-80105c8a:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105c8f:	ec                   	in     (%dx),%al
+8010629d:	c7 05 bc b5 10 80 01 	movl   $0x1,0x8010b5bc
+801062a4:	00 00 00 
+801062a7:	89 da                	mov    %ebx,%edx
+801062a9:	ec                   	in     (%dx),%al
+801062aa:	ba f8 03 00 00       	mov    $0x3f8,%edx
+801062af:	ec                   	in     (%dx),%al
   ioapicenable(IRQ_COM1, 0);
-80105c90:	83 ec 08             	sub    $0x8,%esp
-80105c93:	be 76 00 00 00       	mov    $0x76,%esi
+801062b0:	83 ec 08             	sub    $0x8,%esp
+801062b3:	be 76 00 00 00       	mov    $0x76,%esi
   for(p="xv6...\n"; *p; p++)
-80105c98:	bb 80 79 10 80       	mov    $0x80107980,%ebx
+801062b8:	bb b4 7f 10 80       	mov    $0x80107fb4,%ebx
   ioapicenable(IRQ_COM1, 0);
-80105c9d:	6a 00                	push   $0x0
-80105c9f:	6a 04                	push   $0x4
-80105ca1:	e8 8a c7 ff ff       	call   80102430 <ioapicenable>
-80105ca6:	83 c4 10             	add    $0x10,%esp
+801062bd:	6a 00                	push   $0x0
+801062bf:	6a 04                	push   $0x4
+801062c1:	e8 6a c1 ff ff       	call   80102430 <ioapicenable>
+801062c6:	83 c4 10             	add    $0x10,%esp
   for(p="xv6...\n"; *p; p++)
-80105ca9:	b8 78 00 00 00       	mov    $0x78,%eax
-80105cae:	eb 04                	jmp    80105cb4 <uartinit+0x94>
-80105cb0:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
+801062c9:	b8 78 00 00 00       	mov    $0x78,%eax
+801062ce:	eb 04                	jmp    801062d4 <uartinit+0x94>
+801062d0:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
   if(!uart)
-80105cb4:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
-80105cba:	85 d2                	test   %edx,%edx
-80105cbc:	74 08                	je     80105cc6 <uartinit+0xa6>
+801062d4:	8b 15 bc b5 10 80    	mov    0x8010b5bc,%edx
+801062da:	85 d2                	test   %edx,%edx
+801062dc:	74 08                	je     801062e6 <uartinit+0xa6>
     uartputc(*p);
-80105cbe:	0f be c0             	movsbl %al,%eax
-80105cc1:	e8 0a ff ff ff       	call   80105bd0 <uartputc.part.0>
+801062de:	0f be c0             	movsbl %al,%eax
+801062e1:	e8 0a ff ff ff       	call   801061f0 <uartputc.part.0>
   for(p="xv6...\n"; *p; p++)
-80105cc6:	89 f0                	mov    %esi,%eax
-80105cc8:	83 c3 01             	add    $0x1,%ebx
-80105ccb:	84 c0                	test   %al,%al
-80105ccd:	75 e1                	jne    80105cb0 <uartinit+0x90>
-}
-80105ccf:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105cd2:	5b                   	pop    %ebx
-80105cd3:	5e                   	pop    %esi
-80105cd4:	5f                   	pop    %edi
-80105cd5:	5d                   	pop    %ebp
-80105cd6:	c3                   	ret    
-80105cd7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105cde:	66 90                	xchg   %ax,%ax
+801062e6:	89 f0                	mov    %esi,%eax
+801062e8:	83 c3 01             	add    $0x1,%ebx
+801062eb:	84 c0                	test   %al,%al
+801062ed:	75 e1                	jne    801062d0 <uartinit+0x90>
+}
+801062ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801062f2:	5b                   	pop    %ebx
+801062f3:	5e                   	pop    %esi
+801062f4:	5f                   	pop    %edi
+801062f5:	5d                   	pop    %ebp
+801062f6:	c3                   	ret    
+801062f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801062fe:	66 90                	xchg   %ax,%ax
 
-80105ce0 <uartputc>:
+80106300 <uartputc>:
 {
-80105ce0:	f3 0f 1e fb          	endbr32 
-80105ce4:	55                   	push   %ebp
+80106300:	f3 0f 1e fb          	endbr32 
+80106304:	55                   	push   %ebp
   if(!uart)
-80105ce5:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
+80106305:	8b 15 bc b5 10 80    	mov    0x8010b5bc,%edx
 {
-80105ceb:	89 e5                	mov    %esp,%ebp
-80105ced:	8b 45 08             	mov    0x8(%ebp),%eax
+8010630b:	89 e5                	mov    %esp,%ebp
+8010630d:	8b 45 08             	mov    0x8(%ebp),%eax
   if(!uart)
-80105cf0:	85 d2                	test   %edx,%edx
-80105cf2:	74 0c                	je     80105d00 <uartputc+0x20>
+80106310:	85 d2                	test   %edx,%edx
+80106312:	74 0c                	je     80106320 <uartputc+0x20>
 }
-80105cf4:	5d                   	pop    %ebp
-80105cf5:	e9 d6 fe ff ff       	jmp    80105bd0 <uartputc.part.0>
-80105cfa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80105d00:	5d                   	pop    %ebp
-80105d01:	c3                   	ret    
-80105d02:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105d09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106314:	5d                   	pop    %ebp
+80106315:	e9 d6 fe ff ff       	jmp    801061f0 <uartputc.part.0>
+8010631a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106320:	5d                   	pop    %ebp
+80106321:	c3                   	ret    
+80106322:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106329:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80105d10 <uartintr>:
+80106330 <uartintr>:
 
 void
 uartintr(void)
 {
-80105d10:	f3 0f 1e fb          	endbr32 
-80105d14:	55                   	push   %ebp
-80105d15:	89 e5                	mov    %esp,%ebp
-80105d17:	83 ec 14             	sub    $0x14,%esp
+80106330:	f3 0f 1e fb          	endbr32 
+80106334:	55                   	push   %ebp
+80106335:	89 e5                	mov    %esp,%ebp
+80106337:	83 ec 14             	sub    $0x14,%esp
   consoleintr(uartgetc);
-80105d1a:	68 a0 5b 10 80       	push   $0x80105ba0
-80105d1f:	e8 3c ab ff ff       	call   80100860 <consoleintr>
+8010633a:	68 c0 61 10 80       	push   $0x801061c0
+8010633f:	e8 1c a5 ff ff       	call   80100860 <consoleintr>
 }
-80105d24:	83 c4 10             	add    $0x10,%esp
-80105d27:	c9                   	leave  
-80105d28:	c3                   	ret    
+80106344:	83 c4 10             	add    $0x10,%esp
+80106347:	c9                   	leave  
+80106348:	c3                   	ret    
 
-80105d29 <vector0>:
+80106349 <vector0>:
 # generated by vectors.pl - do not edit
 # handlers
 .globl alltraps
 .globl vector0
 vector0:
   pushl $0
-80105d29:	6a 00                	push   $0x0
+80106349:	6a 00                	push   $0x0
   pushl $0
-80105d2b:	6a 00                	push   $0x0
+8010634b:	6a 00                	push   $0x0
   jmp alltraps
-80105d2d:	e9 3c fb ff ff       	jmp    8010586e <alltraps>
+8010634d:	e9 47 fb ff ff       	jmp    80105e99 <alltraps>
 
-80105d32 <vector1>:
+80106352 <vector1>:
 .globl vector1
 vector1:
   pushl $0
-80105d32:	6a 00                	push   $0x0
+80106352:	6a 00                	push   $0x0
   pushl $1
-80105d34:	6a 01                	push   $0x1
+80106354:	6a 01                	push   $0x1
   jmp alltraps
-80105d36:	e9 33 fb ff ff       	jmp    8010586e <alltraps>
+80106356:	e9 3e fb ff ff       	jmp    80105e99 <alltraps>
 
-80105d3b <vector2>:
+8010635b <vector2>:
 .globl vector2
 vector2:
   pushl $0
-80105d3b:	6a 00                	push   $0x0
+8010635b:	6a 00                	push   $0x0
   pushl $2
-80105d3d:	6a 02                	push   $0x2
+8010635d:	6a 02                	push   $0x2
   jmp alltraps
-80105d3f:	e9 2a fb ff ff       	jmp    8010586e <alltraps>
+8010635f:	e9 35 fb ff ff       	jmp    80105e99 <alltraps>
 
-80105d44 <vector3>:
+80106364 <vector3>:
 .globl vector3
 vector3:
   pushl $0
-80105d44:	6a 00                	push   $0x0
+80106364:	6a 00                	push   $0x0
   pushl $3
-80105d46:	6a 03                	push   $0x3
+80106366:	6a 03                	push   $0x3
   jmp alltraps
-80105d48:	e9 21 fb ff ff       	jmp    8010586e <alltraps>
+80106368:	e9 2c fb ff ff       	jmp    80105e99 <alltraps>
 
-80105d4d <vector4>:
+8010636d <vector4>:
 .globl vector4
 vector4:
   pushl $0
-80105d4d:	6a 00                	push   $0x0
+8010636d:	6a 00                	push   $0x0
   pushl $4
-80105d4f:	6a 04                	push   $0x4
+8010636f:	6a 04                	push   $0x4
   jmp alltraps
-80105d51:	e9 18 fb ff ff       	jmp    8010586e <alltraps>
+80106371:	e9 23 fb ff ff       	jmp    80105e99 <alltraps>
 
-80105d56 <vector5>:
+80106376 <vector5>:
 .globl vector5
 vector5:
   pushl $0
-80105d56:	6a 00                	push   $0x0
+80106376:	6a 00                	push   $0x0
   pushl $5
-80105d58:	6a 05                	push   $0x5
+80106378:	6a 05                	push   $0x5
   jmp alltraps
-80105d5a:	e9 0f fb ff ff       	jmp    8010586e <alltraps>
+8010637a:	e9 1a fb ff ff       	jmp    80105e99 <alltraps>
 
-80105d5f <vector6>:
+8010637f <vector6>:
 .globl vector6
 vector6:
   pushl $0
-80105d5f:	6a 00                	push   $0x0
+8010637f:	6a 00                	push   $0x0
   pushl $6
-80105d61:	6a 06                	push   $0x6
+80106381:	6a 06                	push   $0x6
   jmp alltraps
-80105d63:	e9 06 fb ff ff       	jmp    8010586e <alltraps>
+80106383:	e9 11 fb ff ff       	jmp    80105e99 <alltraps>
 
-80105d68 <vector7>:
+80106388 <vector7>:
 .globl vector7
 vector7:
   pushl $0
-80105d68:	6a 00                	push   $0x0
+80106388:	6a 00                	push   $0x0
   pushl $7
-80105d6a:	6a 07                	push   $0x7
+8010638a:	6a 07                	push   $0x7
   jmp alltraps
-80105d6c:	e9 fd fa ff ff       	jmp    8010586e <alltraps>
+8010638c:	e9 08 fb ff ff       	jmp    80105e99 <alltraps>
 
-80105d71 <vector8>:
+80106391 <vector8>:
 .globl vector8
 vector8:
   pushl $8
-80105d71:	6a 08                	push   $0x8
+80106391:	6a 08                	push   $0x8
   jmp alltraps
-80105d73:	e9 f6 fa ff ff       	jmp    8010586e <alltraps>
+80106393:	e9 01 fb ff ff       	jmp    80105e99 <alltraps>
 
-80105d78 <vector9>:
+80106398 <vector9>:
 .globl vector9
 vector9:
   pushl $0
-80105d78:	6a 00                	push   $0x0
+80106398:	6a 00                	push   $0x0
   pushl $9
-80105d7a:	6a 09                	push   $0x9
+8010639a:	6a 09                	push   $0x9
   jmp alltraps
-80105d7c:	e9 ed fa ff ff       	jmp    8010586e <alltraps>
+8010639c:	e9 f8 fa ff ff       	jmp    80105e99 <alltraps>
 
-80105d81 <vector10>:
+801063a1 <vector10>:
 .globl vector10
 vector10:
   pushl $10
-80105d81:	6a 0a                	push   $0xa
+801063a1:	6a 0a                	push   $0xa
   jmp alltraps
-80105d83:	e9 e6 fa ff ff       	jmp    8010586e <alltraps>
+801063a3:	e9 f1 fa ff ff       	jmp    80105e99 <alltraps>
 
-80105d88 <vector11>:
+801063a8 <vector11>:
 .globl vector11
 vector11:
   pushl $11
-80105d88:	6a 0b                	push   $0xb
+801063a8:	6a 0b                	push   $0xb
   jmp alltraps
-80105d8a:	e9 df fa ff ff       	jmp    8010586e <alltraps>
+801063aa:	e9 ea fa ff ff       	jmp    80105e99 <alltraps>
 
-80105d8f <vector12>:
+801063af <vector12>:
 .globl vector12
 vector12:
   pushl $12
-80105d8f:	6a 0c                	push   $0xc
+801063af:	6a 0c                	push   $0xc
   jmp alltraps
-80105d91:	e9 d8 fa ff ff       	jmp    8010586e <alltraps>
+801063b1:	e9 e3 fa ff ff       	jmp    80105e99 <alltraps>
 
-80105d96 <vector13>:
+801063b6 <vector13>:
 .globl vector13
 vector13:
   pushl $13
-80105d96:	6a 0d                	push   $0xd
+801063b6:	6a 0d                	push   $0xd
   jmp alltraps
-80105d98:	e9 d1 fa ff ff       	jmp    8010586e <alltraps>
+801063b8:	e9 dc fa ff ff       	jmp    80105e99 <alltraps>
 
-80105d9d <vector14>:
+801063bd <vector14>:
 .globl vector14
 vector14:
   pushl $14
-80105d9d:	6a 0e                	push   $0xe
+801063bd:	6a 0e                	push   $0xe
   jmp alltraps
-80105d9f:	e9 ca fa ff ff       	jmp    8010586e <alltraps>
+801063bf:	e9 d5 fa ff ff       	jmp    80105e99 <alltraps>
 
-80105da4 <vector15>:
+801063c4 <vector15>:
 .globl vector15
 vector15:
   pushl $0
-80105da4:	6a 00                	push   $0x0
+801063c4:	6a 00                	push   $0x0
   pushl $15
-80105da6:	6a 0f                	push   $0xf
+801063c6:	6a 0f                	push   $0xf
   jmp alltraps
-80105da8:	e9 c1 fa ff ff       	jmp    8010586e <alltraps>
+801063c8:	e9 cc fa ff ff       	jmp    80105e99 <alltraps>
 
-80105dad <vector16>:
+801063cd <vector16>:
 .globl vector16
 vector16:
   pushl $0
-80105dad:	6a 00                	push   $0x0
+801063cd:	6a 00                	push   $0x0
   pushl $16
-80105daf:	6a 10                	push   $0x10
+801063cf:	6a 10                	push   $0x10
   jmp alltraps
-80105db1:	e9 b8 fa ff ff       	jmp    8010586e <alltraps>
+801063d1:	e9 c3 fa ff ff       	jmp    80105e99 <alltraps>
 
-80105db6 <vector17>:
+801063d6 <vector17>:
 .globl vector17
 vector17:
   pushl $17
-80105db6:	6a 11                	push   $0x11
+801063d6:	6a 11                	push   $0x11
   jmp alltraps
-80105db8:	e9 b1 fa ff ff       	jmp    8010586e <alltraps>
+801063d8:	e9 bc fa ff ff       	jmp    80105e99 <alltraps>
 
-80105dbd <vector18>:
+801063dd <vector18>:
 .globl vector18
 vector18:
   pushl $0
-80105dbd:	6a 00                	push   $0x0
+801063dd:	6a 00                	push   $0x0
   pushl $18
-80105dbf:	6a 12                	push   $0x12
+801063df:	6a 12                	push   $0x12
   jmp alltraps
-80105dc1:	e9 a8 fa ff ff       	jmp    8010586e <alltraps>
+801063e1:	e9 b3 fa ff ff       	jmp    80105e99 <alltraps>
 
-80105dc6 <vector19>:
+801063e6 <vector19>:
 .globl vector19
 vector19:
   pushl $0
-80105dc6:	6a 00                	push   $0x0
+801063e6:	6a 00                	push   $0x0
   pushl $19
-80105dc8:	6a 13                	push   $0x13
+801063e8:	6a 13                	push   $0x13
   jmp alltraps
-80105dca:	e9 9f fa ff ff       	jmp    8010586e <alltraps>
+801063ea:	e9 aa fa ff ff       	jmp    80105e99 <alltraps>
 
-80105dcf <vector20>:
+801063ef <vector20>:
 .globl vector20
 vector20:
   pushl $0
-80105dcf:	6a 00                	push   $0x0
+801063ef:	6a 00                	push   $0x0
   pushl $20
-80105dd1:	6a 14                	push   $0x14
+801063f1:	6a 14                	push   $0x14
   jmp alltraps
-80105dd3:	e9 96 fa ff ff       	jmp    8010586e <alltraps>
+801063f3:	e9 a1 fa ff ff       	jmp    80105e99 <alltraps>
 
-80105dd8 <vector21>:
+801063f8 <vector21>:
 .globl vector21
 vector21:
   pushl $0
-80105dd8:	6a 00                	push   $0x0
+801063f8:	6a 00                	push   $0x0
   pushl $21
-80105dda:	6a 15                	push   $0x15
+801063fa:	6a 15                	push   $0x15
   jmp alltraps
-80105ddc:	e9 8d fa ff ff       	jmp    8010586e <alltraps>
+801063fc:	e9 98 fa ff ff       	jmp    80105e99 <alltraps>
 
-80105de1 <vector22>:
+80106401 <vector22>:
 .globl vector22
 vector22:
   pushl $0
-80105de1:	6a 00                	push   $0x0
+80106401:	6a 00                	push   $0x0
   pushl $22
-80105de3:	6a 16                	push   $0x16
+80106403:	6a 16                	push   $0x16
   jmp alltraps
-80105de5:	e9 84 fa ff ff       	jmp    8010586e <alltraps>
+80106405:	e9 8f fa ff ff       	jmp    80105e99 <alltraps>
 
-80105dea <vector23>:
+8010640a <vector23>:
 .globl vector23
 vector23:
   pushl $0
-80105dea:	6a 00                	push   $0x0
+8010640a:	6a 00                	push   $0x0
   pushl $23
-80105dec:	6a 17                	push   $0x17
+8010640c:	6a 17                	push   $0x17
   jmp alltraps
-80105dee:	e9 7b fa ff ff       	jmp    8010586e <alltraps>
+8010640e:	e9 86 fa ff ff       	jmp    80105e99 <alltraps>
 
-80105df3 <vector24>:
+80106413 <vector24>:
 .globl vector24
 vector24:
   pushl $0
-80105df3:	6a 00                	push   $0x0
+80106413:	6a 00                	push   $0x0
   pushl $24
-80105df5:	6a 18                	push   $0x18
+80106415:	6a 18                	push   $0x18
   jmp alltraps
-80105df7:	e9 72 fa ff ff       	jmp    8010586e <alltraps>
+80106417:	e9 7d fa ff ff       	jmp    80105e99 <alltraps>
 
-80105dfc <vector25>:
+8010641c <vector25>:
 .globl vector25
 vector25:
   pushl $0
-80105dfc:	6a 00                	push   $0x0
+8010641c:	6a 00                	push   $0x0
   pushl $25
-80105dfe:	6a 19                	push   $0x19
+8010641e:	6a 19                	push   $0x19
   jmp alltraps
-80105e00:	e9 69 fa ff ff       	jmp    8010586e <alltraps>
+80106420:	e9 74 fa ff ff       	jmp    80105e99 <alltraps>
 
-80105e05 <vector26>:
+80106425 <vector26>:
 .globl vector26
 vector26:
   pushl $0
-80105e05:	6a 00                	push   $0x0
+80106425:	6a 00                	push   $0x0
   pushl $26
-80105e07:	6a 1a                	push   $0x1a
+80106427:	6a 1a                	push   $0x1a
   jmp alltraps
-80105e09:	e9 60 fa ff ff       	jmp    8010586e <alltraps>
+80106429:	e9 6b fa ff ff       	jmp    80105e99 <alltraps>
 
-80105e0e <vector27>:
+8010642e <vector27>:
 .globl vector27
 vector27:
   pushl $0
-80105e0e:	6a 00                	push   $0x0
+8010642e:	6a 00                	push   $0x0
   pushl $27
-80105e10:	6a 1b                	push   $0x1b
+80106430:	6a 1b                	push   $0x1b
   jmp alltraps
-80105e12:	e9 57 fa ff ff       	jmp    8010586e <alltraps>
+80106432:	e9 62 fa ff ff       	jmp    80105e99 <alltraps>
 
-80105e17 <vector28>:
+80106437 <vector28>:
 .globl vector28
 vector28:
   pushl $0
-80105e17:	6a 00                	push   $0x0
+80106437:	6a 00                	push   $0x0
   pushl $28
-80105e19:	6a 1c                	push   $0x1c
+80106439:	6a 1c                	push   $0x1c
   jmp alltraps
-80105e1b:	e9 4e fa ff ff       	jmp    8010586e <alltraps>
+8010643b:	e9 59 fa ff ff       	jmp    80105e99 <alltraps>
 
-80105e20 <vector29>:
+80106440 <vector29>:
 .globl vector29
 vector29:
   pushl $0
-80105e20:	6a 00                	push   $0x0
+80106440:	6a 00                	push   $0x0
   pushl $29
-80105e22:	6a 1d                	push   $0x1d
+80106442:	6a 1d                	push   $0x1d
   jmp alltraps
-80105e24:	e9 45 fa ff ff       	jmp    8010586e <alltraps>
+80106444:	e9 50 fa ff ff       	jmp    80105e99 <alltraps>
 
-80105e29 <vector30>:
+80106449 <vector30>:
 .globl vector30
 vector30:
   pushl $0
-80105e29:	6a 00                	push   $0x0
+80106449:	6a 00                	push   $0x0
   pushl $30
-80105e2b:	6a 1e                	push   $0x1e
+8010644b:	6a 1e                	push   $0x1e
   jmp alltraps
-80105e2d:	e9 3c fa ff ff       	jmp    8010586e <alltraps>
+8010644d:	e9 47 fa ff ff       	jmp    80105e99 <alltraps>
 
-80105e32 <vector31>:
+80106452 <vector31>:
 .globl vector31
 vector31:
   pushl $0
-80105e32:	6a 00                	push   $0x0
+80106452:	6a 00                	push   $0x0
   pushl $31
-80105e34:	6a 1f                	push   $0x1f
+80106454:	6a 1f                	push   $0x1f
   jmp alltraps
-80105e36:	e9 33 fa ff ff       	jmp    8010586e <alltraps>
+80106456:	e9 3e fa ff ff       	jmp    80105e99 <alltraps>
 
-80105e3b <vector32>:
+8010645b <vector32>:
 .globl vector32
 vector32:
   pushl $0
-80105e3b:	6a 00                	push   $0x0
+8010645b:	6a 00                	push   $0x0
   pushl $32
-80105e3d:	6a 20                	push   $0x20
+8010645d:	6a 20                	push   $0x20
   jmp alltraps
-80105e3f:	e9 2a fa ff ff       	jmp    8010586e <alltraps>
+8010645f:	e9 35 fa ff ff       	jmp    80105e99 <alltraps>
 
-80105e44 <vector33>:
+80106464 <vector33>:
 .globl vector33
 vector33:
   pushl $0
-80105e44:	6a 00                	push   $0x0
+80106464:	6a 00                	push   $0x0
   pushl $33
-80105e46:	6a 21                	push   $0x21
+80106466:	6a 21                	push   $0x21
   jmp alltraps
-80105e48:	e9 21 fa ff ff       	jmp    8010586e <alltraps>
+80106468:	e9 2c fa ff ff       	jmp    80105e99 <alltraps>
 
-80105e4d <vector34>:
+8010646d <vector34>:
 .globl vector34
 vector34:
   pushl $0
-80105e4d:	6a 00                	push   $0x0
+8010646d:	6a 00                	push   $0x0
   pushl $34
-80105e4f:	6a 22                	push   $0x22
+8010646f:	6a 22                	push   $0x22
   jmp alltraps
-80105e51:	e9 18 fa ff ff       	jmp    8010586e <alltraps>
+80106471:	e9 23 fa ff ff       	jmp    80105e99 <alltraps>
 
-80105e56 <vector35>:
+80106476 <vector35>:
 .globl vector35
 vector35:
   pushl $0
-80105e56:	6a 00                	push   $0x0
+80106476:	6a 00                	push   $0x0
   pushl $35
-80105e58:	6a 23                	push   $0x23
+80106478:	6a 23                	push   $0x23
   jmp alltraps
-80105e5a:	e9 0f fa ff ff       	jmp    8010586e <alltraps>
+8010647a:	e9 1a fa ff ff       	jmp    80105e99 <alltraps>
 
-80105e5f <vector36>:
+8010647f <vector36>:
 .globl vector36
 vector36:
   pushl $0
-80105e5f:	6a 00                	push   $0x0
+8010647f:	6a 00                	push   $0x0
   pushl $36
-80105e61:	6a 24                	push   $0x24
+80106481:	6a 24                	push   $0x24
   jmp alltraps
-80105e63:	e9 06 fa ff ff       	jmp    8010586e <alltraps>
+80106483:	e9 11 fa ff ff       	jmp    80105e99 <alltraps>
 
-80105e68 <vector37>:
+80106488 <vector37>:
 .globl vector37
 vector37:
   pushl $0
-80105e68:	6a 00                	push   $0x0
+80106488:	6a 00                	push   $0x0
   pushl $37
-80105e6a:	6a 25                	push   $0x25
+8010648a:	6a 25                	push   $0x25
   jmp alltraps
-80105e6c:	e9 fd f9 ff ff       	jmp    8010586e <alltraps>
+8010648c:	e9 08 fa ff ff       	jmp    80105e99 <alltraps>
 
-80105e71 <vector38>:
+80106491 <vector38>:
 .globl vector38
 vector38:
   pushl $0
-80105e71:	6a 00                	push   $0x0
+80106491:	6a 00                	push   $0x0
   pushl $38
-80105e73:	6a 26                	push   $0x26
+80106493:	6a 26                	push   $0x26
   jmp alltraps
-80105e75:	e9 f4 f9 ff ff       	jmp    8010586e <alltraps>
+80106495:	e9 ff f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105e7a <vector39>:
+8010649a <vector39>:
 .globl vector39
 vector39:
   pushl $0
-80105e7a:	6a 00                	push   $0x0
+8010649a:	6a 00                	push   $0x0
   pushl $39
-80105e7c:	6a 27                	push   $0x27
+8010649c:	6a 27                	push   $0x27
   jmp alltraps
-80105e7e:	e9 eb f9 ff ff       	jmp    8010586e <alltraps>
+8010649e:	e9 f6 f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105e83 <vector40>:
+801064a3 <vector40>:
 .globl vector40
 vector40:
   pushl $0
-80105e83:	6a 00                	push   $0x0
+801064a3:	6a 00                	push   $0x0
   pushl $40
-80105e85:	6a 28                	push   $0x28
+801064a5:	6a 28                	push   $0x28
   jmp alltraps
-80105e87:	e9 e2 f9 ff ff       	jmp    8010586e <alltraps>
+801064a7:	e9 ed f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105e8c <vector41>:
+801064ac <vector41>:
 .globl vector41
 vector41:
   pushl $0
-80105e8c:	6a 00                	push   $0x0
+801064ac:	6a 00                	push   $0x0
   pushl $41
-80105e8e:	6a 29                	push   $0x29
+801064ae:	6a 29                	push   $0x29
   jmp alltraps
-80105e90:	e9 d9 f9 ff ff       	jmp    8010586e <alltraps>
+801064b0:	e9 e4 f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105e95 <vector42>:
+801064b5 <vector42>:
 .globl vector42
 vector42:
   pushl $0
-80105e95:	6a 00                	push   $0x0
+801064b5:	6a 00                	push   $0x0
   pushl $42
-80105e97:	6a 2a                	push   $0x2a
+801064b7:	6a 2a                	push   $0x2a
   jmp alltraps
-80105e99:	e9 d0 f9 ff ff       	jmp    8010586e <alltraps>
+801064b9:	e9 db f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105e9e <vector43>:
+801064be <vector43>:
 .globl vector43
 vector43:
   pushl $0
-80105e9e:	6a 00                	push   $0x0
+801064be:	6a 00                	push   $0x0
   pushl $43
-80105ea0:	6a 2b                	push   $0x2b
+801064c0:	6a 2b                	push   $0x2b
   jmp alltraps
-80105ea2:	e9 c7 f9 ff ff       	jmp    8010586e <alltraps>
+801064c2:	e9 d2 f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105ea7 <vector44>:
+801064c7 <vector44>:
 .globl vector44
 vector44:
   pushl $0
-80105ea7:	6a 00                	push   $0x0
+801064c7:	6a 00                	push   $0x0
   pushl $44
-80105ea9:	6a 2c                	push   $0x2c
+801064c9:	6a 2c                	push   $0x2c
   jmp alltraps
-80105eab:	e9 be f9 ff ff       	jmp    8010586e <alltraps>
+801064cb:	e9 c9 f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105eb0 <vector45>:
+801064d0 <vector45>:
 .globl vector45
 vector45:
   pushl $0
-80105eb0:	6a 00                	push   $0x0
+801064d0:	6a 00                	push   $0x0
   pushl $45
-80105eb2:	6a 2d                	push   $0x2d
+801064d2:	6a 2d                	push   $0x2d
   jmp alltraps
-80105eb4:	e9 b5 f9 ff ff       	jmp    8010586e <alltraps>
+801064d4:	e9 c0 f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105eb9 <vector46>:
+801064d9 <vector46>:
 .globl vector46
 vector46:
   pushl $0
-80105eb9:	6a 00                	push   $0x0
+801064d9:	6a 00                	push   $0x0
   pushl $46
-80105ebb:	6a 2e                	push   $0x2e
+801064db:	6a 2e                	push   $0x2e
   jmp alltraps
-80105ebd:	e9 ac f9 ff ff       	jmp    8010586e <alltraps>
+801064dd:	e9 b7 f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105ec2 <vector47>:
+801064e2 <vector47>:
 .globl vector47
 vector47:
   pushl $0
-80105ec2:	6a 00                	push   $0x0
+801064e2:	6a 00                	push   $0x0
   pushl $47
-80105ec4:	6a 2f                	push   $0x2f
+801064e4:	6a 2f                	push   $0x2f
   jmp alltraps
-80105ec6:	e9 a3 f9 ff ff       	jmp    8010586e <alltraps>
+801064e6:	e9 ae f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105ecb <vector48>:
+801064eb <vector48>:
 .globl vector48
 vector48:
   pushl $0
-80105ecb:	6a 00                	push   $0x0
+801064eb:	6a 00                	push   $0x0
   pushl $48
-80105ecd:	6a 30                	push   $0x30
+801064ed:	6a 30                	push   $0x30
   jmp alltraps
-80105ecf:	e9 9a f9 ff ff       	jmp    8010586e <alltraps>
+801064ef:	e9 a5 f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105ed4 <vector49>:
+801064f4 <vector49>:
 .globl vector49
 vector49:
   pushl $0
-80105ed4:	6a 00                	push   $0x0
+801064f4:	6a 00                	push   $0x0
   pushl $49
-80105ed6:	6a 31                	push   $0x31
+801064f6:	6a 31                	push   $0x31
   jmp alltraps
-80105ed8:	e9 91 f9 ff ff       	jmp    8010586e <alltraps>
+801064f8:	e9 9c f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105edd <vector50>:
+801064fd <vector50>:
 .globl vector50
 vector50:
   pushl $0
-80105edd:	6a 00                	push   $0x0
+801064fd:	6a 00                	push   $0x0
   pushl $50
-80105edf:	6a 32                	push   $0x32
+801064ff:	6a 32                	push   $0x32
   jmp alltraps
-80105ee1:	e9 88 f9 ff ff       	jmp    8010586e <alltraps>
+80106501:	e9 93 f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105ee6 <vector51>:
+80106506 <vector51>:
 .globl vector51
 vector51:
   pushl $0
-80105ee6:	6a 00                	push   $0x0
+80106506:	6a 00                	push   $0x0
   pushl $51
-80105ee8:	6a 33                	push   $0x33
+80106508:	6a 33                	push   $0x33
   jmp alltraps
-80105eea:	e9 7f f9 ff ff       	jmp    8010586e <alltraps>
+8010650a:	e9 8a f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105eef <vector52>:
+8010650f <vector52>:
 .globl vector52
 vector52:
   pushl $0
-80105eef:	6a 00                	push   $0x0
+8010650f:	6a 00                	push   $0x0
   pushl $52
-80105ef1:	6a 34                	push   $0x34
+80106511:	6a 34                	push   $0x34
   jmp alltraps
-80105ef3:	e9 76 f9 ff ff       	jmp    8010586e <alltraps>
+80106513:	e9 81 f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105ef8 <vector53>:
+80106518 <vector53>:
 .globl vector53
 vector53:
   pushl $0
-80105ef8:	6a 00                	push   $0x0
+80106518:	6a 00                	push   $0x0
   pushl $53
-80105efa:	6a 35                	push   $0x35
+8010651a:	6a 35                	push   $0x35
   jmp alltraps
-80105efc:	e9 6d f9 ff ff       	jmp    8010586e <alltraps>
+8010651c:	e9 78 f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105f01 <vector54>:
+80106521 <vector54>:
 .globl vector54
 vector54:
   pushl $0
-80105f01:	6a 00                	push   $0x0
+80106521:	6a 00                	push   $0x0
   pushl $54
-80105f03:	6a 36                	push   $0x36
+80106523:	6a 36                	push   $0x36
   jmp alltraps
-80105f05:	e9 64 f9 ff ff       	jmp    8010586e <alltraps>
+80106525:	e9 6f f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105f0a <vector55>:
+8010652a <vector55>:
 .globl vector55
 vector55:
   pushl $0
-80105f0a:	6a 00                	push   $0x0
+8010652a:	6a 00                	push   $0x0
   pushl $55
-80105f0c:	6a 37                	push   $0x37
+8010652c:	6a 37                	push   $0x37
   jmp alltraps
-80105f0e:	e9 5b f9 ff ff       	jmp    8010586e <alltraps>
+8010652e:	e9 66 f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105f13 <vector56>:
+80106533 <vector56>:
 .globl vector56
 vector56:
   pushl $0
-80105f13:	6a 00                	push   $0x0
+80106533:	6a 00                	push   $0x0
   pushl $56
-80105f15:	6a 38                	push   $0x38
+80106535:	6a 38                	push   $0x38
   jmp alltraps
-80105f17:	e9 52 f9 ff ff       	jmp    8010586e <alltraps>
+80106537:	e9 5d f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105f1c <vector57>:
+8010653c <vector57>:
 .globl vector57
 vector57:
   pushl $0
-80105f1c:	6a 00                	push   $0x0
+8010653c:	6a 00                	push   $0x0
   pushl $57
-80105f1e:	6a 39                	push   $0x39
+8010653e:	6a 39                	push   $0x39
   jmp alltraps
-80105f20:	e9 49 f9 ff ff       	jmp    8010586e <alltraps>
+80106540:	e9 54 f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105f25 <vector58>:
+80106545 <vector58>:
 .globl vector58
 vector58:
   pushl $0
-80105f25:	6a 00                	push   $0x0
+80106545:	6a 00                	push   $0x0
   pushl $58
-80105f27:	6a 3a                	push   $0x3a
+80106547:	6a 3a                	push   $0x3a
   jmp alltraps
-80105f29:	e9 40 f9 ff ff       	jmp    8010586e <alltraps>
+80106549:	e9 4b f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105f2e <vector59>:
+8010654e <vector59>:
 .globl vector59
 vector59:
   pushl $0
-80105f2e:	6a 00                	push   $0x0
+8010654e:	6a 00                	push   $0x0
   pushl $59
-80105f30:	6a 3b                	push   $0x3b
+80106550:	6a 3b                	push   $0x3b
   jmp alltraps
-80105f32:	e9 37 f9 ff ff       	jmp    8010586e <alltraps>
+80106552:	e9 42 f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105f37 <vector60>:
+80106557 <vector60>:
 .globl vector60
 vector60:
   pushl $0
-80105f37:	6a 00                	push   $0x0
+80106557:	6a 00                	push   $0x0
   pushl $60
-80105f39:	6a 3c                	push   $0x3c
+80106559:	6a 3c                	push   $0x3c
   jmp alltraps
-80105f3b:	e9 2e f9 ff ff       	jmp    8010586e <alltraps>
+8010655b:	e9 39 f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105f40 <vector61>:
+80106560 <vector61>:
 .globl vector61
 vector61:
   pushl $0
-80105f40:	6a 00                	push   $0x0
+80106560:	6a 00                	push   $0x0
   pushl $61
-80105f42:	6a 3d                	push   $0x3d
+80106562:	6a 3d                	push   $0x3d
   jmp alltraps
-80105f44:	e9 25 f9 ff ff       	jmp    8010586e <alltraps>
+80106564:	e9 30 f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105f49 <vector62>:
+80106569 <vector62>:
 .globl vector62
 vector62:
   pushl $0
-80105f49:	6a 00                	push   $0x0
+80106569:	6a 00                	push   $0x0
   pushl $62
-80105f4b:	6a 3e                	push   $0x3e
+8010656b:	6a 3e                	push   $0x3e
   jmp alltraps
-80105f4d:	e9 1c f9 ff ff       	jmp    8010586e <alltraps>
+8010656d:	e9 27 f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105f52 <vector63>:
+80106572 <vector63>:
 .globl vector63
 vector63:
   pushl $0
-80105f52:	6a 00                	push   $0x0
+80106572:	6a 00                	push   $0x0
   pushl $63
-80105f54:	6a 3f                	push   $0x3f
+80106574:	6a 3f                	push   $0x3f
   jmp alltraps
-80105f56:	e9 13 f9 ff ff       	jmp    8010586e <alltraps>
+80106576:	e9 1e f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105f5b <vector64>:
+8010657b <vector64>:
 .globl vector64
 vector64:
   pushl $0
-80105f5b:	6a 00                	push   $0x0
+8010657b:	6a 00                	push   $0x0
   pushl $64
-80105f5d:	6a 40                	push   $0x40
+8010657d:	6a 40                	push   $0x40
   jmp alltraps
-80105f5f:	e9 0a f9 ff ff       	jmp    8010586e <alltraps>
+8010657f:	e9 15 f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105f64 <vector65>:
+80106584 <vector65>:
 .globl vector65
 vector65:
   pushl $0
-80105f64:	6a 00                	push   $0x0
+80106584:	6a 00                	push   $0x0
   pushl $65
-80105f66:	6a 41                	push   $0x41
+80106586:	6a 41                	push   $0x41
   jmp alltraps
-80105f68:	e9 01 f9 ff ff       	jmp    8010586e <alltraps>
+80106588:	e9 0c f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105f6d <vector66>:
+8010658d <vector66>:
 .globl vector66
 vector66:
   pushl $0
-80105f6d:	6a 00                	push   $0x0
+8010658d:	6a 00                	push   $0x0
   pushl $66
-80105f6f:	6a 42                	push   $0x42
+8010658f:	6a 42                	push   $0x42
   jmp alltraps
-80105f71:	e9 f8 f8 ff ff       	jmp    8010586e <alltraps>
+80106591:	e9 03 f9 ff ff       	jmp    80105e99 <alltraps>
 
-80105f76 <vector67>:
+80106596 <vector67>:
 .globl vector67
 vector67:
   pushl $0
-80105f76:	6a 00                	push   $0x0
+80106596:	6a 00                	push   $0x0
   pushl $67
-80105f78:	6a 43                	push   $0x43
+80106598:	6a 43                	push   $0x43
   jmp alltraps
-80105f7a:	e9 ef f8 ff ff       	jmp    8010586e <alltraps>
+8010659a:	e9 fa f8 ff ff       	jmp    80105e99 <alltraps>
 
-80105f7f <vector68>:
+8010659f <vector68>:
 .globl vector68
 vector68:
   pushl $0
-80105f7f:	6a 00                	push   $0x0
+8010659f:	6a 00                	push   $0x0
   pushl $68
-80105f81:	6a 44                	push   $0x44
+801065a1:	6a 44                	push   $0x44
   jmp alltraps
-80105f83:	e9 e6 f8 ff ff       	jmp    8010586e <alltraps>
+801065a3:	e9 f1 f8 ff ff       	jmp    80105e99 <alltraps>
 
-80105f88 <vector69>:
+801065a8 <vector69>:
 .globl vector69
 vector69:
   pushl $0
-80105f88:	6a 00                	push   $0x0
+801065a8:	6a 00                	push   $0x0
   pushl $69
-80105f8a:	6a 45                	push   $0x45
+801065aa:	6a 45                	push   $0x45
   jmp alltraps
-80105f8c:	e9 dd f8 ff ff       	jmp    8010586e <alltraps>
+801065ac:	e9 e8 f8 ff ff       	jmp    80105e99 <alltraps>
 
-80105f91 <vector70>:
+801065b1 <vector70>:
 .globl vector70
 vector70:
   pushl $0
-80105f91:	6a 00                	push   $0x0
+801065b1:	6a 00                	push   $0x0
   pushl $70
-80105f93:	6a 46                	push   $0x46
+801065b3:	6a 46                	push   $0x46
   jmp alltraps
-80105f95:	e9 d4 f8 ff ff       	jmp    8010586e <alltraps>
+801065b5:	e9 df f8 ff ff       	jmp    80105e99 <alltraps>
 
-80105f9a <vector71>:
+801065ba <vector71>:
 .globl vector71
 vector71:
   pushl $0
-80105f9a:	6a 00                	push   $0x0
+801065ba:	6a 00                	push   $0x0
   pushl $71
-80105f9c:	6a 47                	push   $0x47
+801065bc:	6a 47                	push   $0x47
   jmp alltraps
-80105f9e:	e9 cb f8 ff ff       	jmp    8010586e <alltraps>
+801065be:	e9 d6 f8 ff ff       	jmp    80105e99 <alltraps>
 
-80105fa3 <vector72>:
+801065c3 <vector72>:
 .globl vector72
 vector72:
   pushl $0
-80105fa3:	6a 00                	push   $0x0
+801065c3:	6a 00                	push   $0x0
   pushl $72
-80105fa5:	6a 48                	push   $0x48
+801065c5:	6a 48                	push   $0x48
   jmp alltraps
-80105fa7:	e9 c2 f8 ff ff       	jmp    8010586e <alltraps>
+801065c7:	e9 cd f8 ff ff       	jmp    80105e99 <alltraps>
 
-80105fac <vector73>:
+801065cc <vector73>:
 .globl vector73
 vector73:
   pushl $0
-80105fac:	6a 00                	push   $0x0
+801065cc:	6a 00                	push   $0x0
   pushl $73
-80105fae:	6a 49                	push   $0x49
+801065ce:	6a 49                	push   $0x49
   jmp alltraps
-80105fb0:	e9 b9 f8 ff ff       	jmp    8010586e <alltraps>
+801065d0:	e9 c4 f8 ff ff       	jmp    80105e99 <alltraps>
 
-80105fb5 <vector74>:
+801065d5 <vector74>:
 .globl vector74
 vector74:
   pushl $0
-80105fb5:	6a 00                	push   $0x0
+801065d5:	6a 00                	push   $0x0
   pushl $74
-80105fb7:	6a 4a                	push   $0x4a
+801065d7:	6a 4a                	push   $0x4a
   jmp alltraps
-80105fb9:	e9 b0 f8 ff ff       	jmp    8010586e <alltraps>
+801065d9:	e9 bb f8 ff ff       	jmp    80105e99 <alltraps>
 
-80105fbe <vector75>:
+801065de <vector75>:
 .globl vector75
 vector75:
   pushl $0
-80105fbe:	6a 00                	push   $0x0
+801065de:	6a 00                	push   $0x0
   pushl $75
-80105fc0:	6a 4b                	push   $0x4b
+801065e0:	6a 4b                	push   $0x4b
   jmp alltraps
-80105fc2:	e9 a7 f8 ff ff       	jmp    8010586e <alltraps>
+801065e2:	e9 b2 f8 ff ff       	jmp    80105e99 <alltraps>
 
-80105fc7 <vector76>:
+801065e7 <vector76>:
 .globl vector76
 vector76:
   pushl $0
-80105fc7:	6a 00                	push   $0x0
+801065e7:	6a 00                	push   $0x0
   pushl $76
-80105fc9:	6a 4c                	push   $0x4c
+801065e9:	6a 4c                	push   $0x4c
   jmp alltraps
-80105fcb:	e9 9e f8 ff ff       	jmp    8010586e <alltraps>
+801065eb:	e9 a9 f8 ff ff       	jmp    80105e99 <alltraps>
 
-80105fd0 <vector77>:
+801065f0 <vector77>:
 .globl vector77
 vector77:
   pushl $0
-80105fd0:	6a 00                	push   $0x0
+801065f0:	6a 00                	push   $0x0
   pushl $77
-80105fd2:	6a 4d                	push   $0x4d
+801065f2:	6a 4d                	push   $0x4d
   jmp alltraps
-80105fd4:	e9 95 f8 ff ff       	jmp    8010586e <alltraps>
+801065f4:	e9 a0 f8 ff ff       	jmp    80105e99 <alltraps>
 
-80105fd9 <vector78>:
+801065f9 <vector78>:
 .globl vector78
 vector78:
   pushl $0
-80105fd9:	6a 00                	push   $0x0
+801065f9:	6a 00                	push   $0x0
   pushl $78
-80105fdb:	6a 4e                	push   $0x4e
+801065fb:	6a 4e                	push   $0x4e
   jmp alltraps
-80105fdd:	e9 8c f8 ff ff       	jmp    8010586e <alltraps>
+801065fd:	e9 97 f8 ff ff       	jmp    80105e99 <alltraps>
 
-80105fe2 <vector79>:
+80106602 <vector79>:
 .globl vector79
 vector79:
   pushl $0
-80105fe2:	6a 00                	push   $0x0
+80106602:	6a 00                	push   $0x0
   pushl $79
-80105fe4:	6a 4f                	push   $0x4f
+80106604:	6a 4f                	push   $0x4f
   jmp alltraps
-80105fe6:	e9 83 f8 ff ff       	jmp    8010586e <alltraps>
+80106606:	e9 8e f8 ff ff       	jmp    80105e99 <alltraps>
 
-80105feb <vector80>:
+8010660b <vector80>:
 .globl vector80
 vector80:
   pushl $0
-80105feb:	6a 00                	push   $0x0
+8010660b:	6a 00                	push   $0x0
   pushl $80
-80105fed:	6a 50                	push   $0x50
+8010660d:	6a 50                	push   $0x50
   jmp alltraps
-80105fef:	e9 7a f8 ff ff       	jmp    8010586e <alltraps>
+8010660f:	e9 85 f8 ff ff       	jmp    80105e99 <alltraps>
 
-80105ff4 <vector81>:
+80106614 <vector81>:
 .globl vector81
 vector81:
   pushl $0
-80105ff4:	6a 00                	push   $0x0
+80106614:	6a 00                	push   $0x0
   pushl $81
-80105ff6:	6a 51                	push   $0x51
+80106616:	6a 51                	push   $0x51
   jmp alltraps
-80105ff8:	e9 71 f8 ff ff       	jmp    8010586e <alltraps>
+80106618:	e9 7c f8 ff ff       	jmp    80105e99 <alltraps>
 
-80105ffd <vector82>:
+8010661d <vector82>:
 .globl vector82
 vector82:
   pushl $0
-80105ffd:	6a 00                	push   $0x0
+8010661d:	6a 00                	push   $0x0
   pushl $82
-80105fff:	6a 52                	push   $0x52
+8010661f:	6a 52                	push   $0x52
   jmp alltraps
-80106001:	e9 68 f8 ff ff       	jmp    8010586e <alltraps>
+80106621:	e9 73 f8 ff ff       	jmp    80105e99 <alltraps>
 
-80106006 <vector83>:
+80106626 <vector83>:
 .globl vector83
 vector83:
   pushl $0
-80106006:	6a 00                	push   $0x0
+80106626:	6a 00                	push   $0x0
   pushl $83
-80106008:	6a 53                	push   $0x53
+80106628:	6a 53                	push   $0x53
   jmp alltraps
-8010600a:	e9 5f f8 ff ff       	jmp    8010586e <alltraps>
+8010662a:	e9 6a f8 ff ff       	jmp    80105e99 <alltraps>
 
-8010600f <vector84>:
+8010662f <vector84>:
 .globl vector84
 vector84:
   pushl $0
-8010600f:	6a 00                	push   $0x0
+8010662f:	6a 00                	push   $0x0
   pushl $84
-80106011:	6a 54                	push   $0x54
+80106631:	6a 54                	push   $0x54
   jmp alltraps
-80106013:	e9 56 f8 ff ff       	jmp    8010586e <alltraps>
+80106633:	e9 61 f8 ff ff       	jmp    80105e99 <alltraps>
 
-80106018 <vector85>:
+80106638 <vector85>:
 .globl vector85
 vector85:
   pushl $0
-80106018:	6a 00                	push   $0x0
+80106638:	6a 00                	push   $0x0
   pushl $85
-8010601a:	6a 55                	push   $0x55
+8010663a:	6a 55                	push   $0x55
   jmp alltraps
-8010601c:	e9 4d f8 ff ff       	jmp    8010586e <alltraps>
+8010663c:	e9 58 f8 ff ff       	jmp    80105e99 <alltraps>
 
-80106021 <vector86>:
+80106641 <vector86>:
 .globl vector86
 vector86:
   pushl $0
-80106021:	6a 00                	push   $0x0
+80106641:	6a 00                	push   $0x0
   pushl $86
-80106023:	6a 56                	push   $0x56
+80106643:	6a 56                	push   $0x56
   jmp alltraps
-80106025:	e9 44 f8 ff ff       	jmp    8010586e <alltraps>
+80106645:	e9 4f f8 ff ff       	jmp    80105e99 <alltraps>
 
-8010602a <vector87>:
+8010664a <vector87>:
 .globl vector87
 vector87:
   pushl $0
-8010602a:	6a 00                	push   $0x0
+8010664a:	6a 00                	push   $0x0
   pushl $87
-8010602c:	6a 57                	push   $0x57
+8010664c:	6a 57                	push   $0x57
   jmp alltraps
-8010602e:	e9 3b f8 ff ff       	jmp    8010586e <alltraps>
+8010664e:	e9 46 f8 ff ff       	jmp    80105e99 <alltraps>
 
-80106033 <vector88>:
+80106653 <vector88>:
 .globl vector88
 vector88:
   pushl $0
-80106033:	6a 00                	push   $0x0
+80106653:	6a 00                	push   $0x0
   pushl $88
-80106035:	6a 58                	push   $0x58
+80106655:	6a 58                	push   $0x58
   jmp alltraps
-80106037:	e9 32 f8 ff ff       	jmp    8010586e <alltraps>
+80106657:	e9 3d f8 ff ff       	jmp    80105e99 <alltraps>
 
-8010603c <vector89>:
+8010665c <vector89>:
 .globl vector89
 vector89:
   pushl $0
-8010603c:	6a 00                	push   $0x0
+8010665c:	6a 00                	push   $0x0
   pushl $89
-8010603e:	6a 59                	push   $0x59
+8010665e:	6a 59                	push   $0x59
   jmp alltraps
-80106040:	e9 29 f8 ff ff       	jmp    8010586e <alltraps>
+80106660:	e9 34 f8 ff ff       	jmp    80105e99 <alltraps>
 
-80106045 <vector90>:
+80106665 <vector90>:
 .globl vector90
 vector90:
   pushl $0
-80106045:	6a 00                	push   $0x0
+80106665:	6a 00                	push   $0x0
   pushl $90
-80106047:	6a 5a                	push   $0x5a
+80106667:	6a 5a                	push   $0x5a
   jmp alltraps
-80106049:	e9 20 f8 ff ff       	jmp    8010586e <alltraps>
+80106669:	e9 2b f8 ff ff       	jmp    80105e99 <alltraps>
 
-8010604e <vector91>:
+8010666e <vector91>:
 .globl vector91
 vector91:
   pushl $0
-8010604e:	6a 00                	push   $0x0
+8010666e:	6a 00                	push   $0x0
   pushl $91
-80106050:	6a 5b                	push   $0x5b
+80106670:	6a 5b                	push   $0x5b
   jmp alltraps
-80106052:	e9 17 f8 ff ff       	jmp    8010586e <alltraps>
+80106672:	e9 22 f8 ff ff       	jmp    80105e99 <alltraps>
 
-80106057 <vector92>:
+80106677 <vector92>:
 .globl vector92
 vector92:
   pushl $0
-80106057:	6a 00                	push   $0x0
+80106677:	6a 00                	push   $0x0
   pushl $92
-80106059:	6a 5c                	push   $0x5c
+80106679:	6a 5c                	push   $0x5c
   jmp alltraps
-8010605b:	e9 0e f8 ff ff       	jmp    8010586e <alltraps>
+8010667b:	e9 19 f8 ff ff       	jmp    80105e99 <alltraps>
 
-80106060 <vector93>:
+80106680 <vector93>:
 .globl vector93
 vector93:
   pushl $0
-80106060:	6a 00                	push   $0x0
+80106680:	6a 00                	push   $0x0
   pushl $93
-80106062:	6a 5d                	push   $0x5d
+80106682:	6a 5d                	push   $0x5d
   jmp alltraps
-80106064:	e9 05 f8 ff ff       	jmp    8010586e <alltraps>
+80106684:	e9 10 f8 ff ff       	jmp    80105e99 <alltraps>
 
-80106069 <vector94>:
+80106689 <vector94>:
 .globl vector94
 vector94:
   pushl $0
-80106069:	6a 00                	push   $0x0
+80106689:	6a 00                	push   $0x0
   pushl $94
-8010606b:	6a 5e                	push   $0x5e
+8010668b:	6a 5e                	push   $0x5e
   jmp alltraps
-8010606d:	e9 fc f7 ff ff       	jmp    8010586e <alltraps>
+8010668d:	e9 07 f8 ff ff       	jmp    80105e99 <alltraps>
 
-80106072 <vector95>:
+80106692 <vector95>:
 .globl vector95
 vector95:
   pushl $0
-80106072:	6a 00                	push   $0x0
+80106692:	6a 00                	push   $0x0
   pushl $95
-80106074:	6a 5f                	push   $0x5f
+80106694:	6a 5f                	push   $0x5f
   jmp alltraps
-80106076:	e9 f3 f7 ff ff       	jmp    8010586e <alltraps>
+80106696:	e9 fe f7 ff ff       	jmp    80105e99 <alltraps>
 
-8010607b <vector96>:
+8010669b <vector96>:
 .globl vector96
 vector96:
   pushl $0
-8010607b:	6a 00                	push   $0x0
+8010669b:	6a 00                	push   $0x0
   pushl $96
-8010607d:	6a 60                	push   $0x60
+8010669d:	6a 60                	push   $0x60
   jmp alltraps
-8010607f:	e9 ea f7 ff ff       	jmp    8010586e <alltraps>
+8010669f:	e9 f5 f7 ff ff       	jmp    80105e99 <alltraps>
 
-80106084 <vector97>:
+801066a4 <vector97>:
 .globl vector97
 vector97:
   pushl $0
-80106084:	6a 00                	push   $0x0
+801066a4:	6a 00                	push   $0x0
   pushl $97
-80106086:	6a 61                	push   $0x61
+801066a6:	6a 61                	push   $0x61
   jmp alltraps
-80106088:	e9 e1 f7 ff ff       	jmp    8010586e <alltraps>
+801066a8:	e9 ec f7 ff ff       	jmp    80105e99 <alltraps>
 
-8010608d <vector98>:
+801066ad <vector98>:
 .globl vector98
 vector98:
   pushl $0
-8010608d:	6a 00                	push   $0x0
+801066ad:	6a 00                	push   $0x0
   pushl $98
-8010608f:	6a 62                	push   $0x62
+801066af:	6a 62                	push   $0x62
   jmp alltraps
-80106091:	e9 d8 f7 ff ff       	jmp    8010586e <alltraps>
+801066b1:	e9 e3 f7 ff ff       	jmp    80105e99 <alltraps>
 
-80106096 <vector99>:
+801066b6 <vector99>:
 .globl vector99
 vector99:
   pushl $0
-80106096:	6a 00                	push   $0x0
+801066b6:	6a 00                	push   $0x0
   pushl $99
-80106098:	6a 63                	push   $0x63
+801066b8:	6a 63                	push   $0x63
   jmp alltraps
-8010609a:	e9 cf f7 ff ff       	jmp    8010586e <alltraps>
+801066ba:	e9 da f7 ff ff       	jmp    80105e99 <alltraps>
 
-8010609f <vector100>:
+801066bf <vector100>:
 .globl vector100
 vector100:
   pushl $0
-8010609f:	6a 00                	push   $0x0
+801066bf:	6a 00                	push   $0x0
   pushl $100
-801060a1:	6a 64                	push   $0x64
+801066c1:	6a 64                	push   $0x64
   jmp alltraps
-801060a3:	e9 c6 f7 ff ff       	jmp    8010586e <alltraps>
+801066c3:	e9 d1 f7 ff ff       	jmp    80105e99 <alltraps>
 
-801060a8 <vector101>:
+801066c8 <vector101>:
 .globl vector101
 vector101:
   pushl $0
-801060a8:	6a 00                	push   $0x0
+801066c8:	6a 00                	push   $0x0
   pushl $101
-801060aa:	6a 65                	push   $0x65
+801066ca:	6a 65                	push   $0x65
   jmp alltraps
-801060ac:	e9 bd f7 ff ff       	jmp    8010586e <alltraps>
+801066cc:	e9 c8 f7 ff ff       	jmp    80105e99 <alltraps>
 
-801060b1 <vector102>:
+801066d1 <vector102>:
 .globl vector102
 vector102:
   pushl $0
-801060b1:	6a 00                	push   $0x0
+801066d1:	6a 00                	push   $0x0
   pushl $102
-801060b3:	6a 66                	push   $0x66
+801066d3:	6a 66                	push   $0x66
   jmp alltraps
-801060b5:	e9 b4 f7 ff ff       	jmp    8010586e <alltraps>
+801066d5:	e9 bf f7 ff ff       	jmp    80105e99 <alltraps>
 
-801060ba <vector103>:
+801066da <vector103>:
 .globl vector103
 vector103:
   pushl $0
-801060ba:	6a 00                	push   $0x0
+801066da:	6a 00                	push   $0x0
   pushl $103
-801060bc:	6a 67                	push   $0x67
+801066dc:	6a 67                	push   $0x67
   jmp alltraps
-801060be:	e9 ab f7 ff ff       	jmp    8010586e <alltraps>
+801066de:	e9 b6 f7 ff ff       	jmp    80105e99 <alltraps>
 
-801060c3 <vector104>:
+801066e3 <vector104>:
 .globl vector104
 vector104:
   pushl $0
-801060c3:	6a 00                	push   $0x0
+801066e3:	6a 00                	push   $0x0
   pushl $104
-801060c5:	6a 68                	push   $0x68
+801066e5:	6a 68                	push   $0x68
   jmp alltraps
-801060c7:	e9 a2 f7 ff ff       	jmp    8010586e <alltraps>
+801066e7:	e9 ad f7 ff ff       	jmp    80105e99 <alltraps>
 
-801060cc <vector105>:
+801066ec <vector105>:
 .globl vector105
 vector105:
   pushl $0
-801060cc:	6a 00                	push   $0x0
+801066ec:	6a 00                	push   $0x0
   pushl $105
-801060ce:	6a 69                	push   $0x69
+801066ee:	6a 69                	push   $0x69
   jmp alltraps
-801060d0:	e9 99 f7 ff ff       	jmp    8010586e <alltraps>
+801066f0:	e9 a4 f7 ff ff       	jmp    80105e99 <alltraps>
 
-801060d5 <vector106>:
+801066f5 <vector106>:
 .globl vector106
 vector106:
   pushl $0
-801060d5:	6a 00                	push   $0x0
+801066f5:	6a 00                	push   $0x0
   pushl $106
-801060d7:	6a 6a                	push   $0x6a
+801066f7:	6a 6a                	push   $0x6a
   jmp alltraps
-801060d9:	e9 90 f7 ff ff       	jmp    8010586e <alltraps>
+801066f9:	e9 9b f7 ff ff       	jmp    80105e99 <alltraps>
 
-801060de <vector107>:
+801066fe <vector107>:
 .globl vector107
 vector107:
   pushl $0
-801060de:	6a 00                	push   $0x0
+801066fe:	6a 00                	push   $0x0
   pushl $107
-801060e0:	6a 6b                	push   $0x6b
+80106700:	6a 6b                	push   $0x6b
   jmp alltraps
-801060e2:	e9 87 f7 ff ff       	jmp    8010586e <alltraps>
+80106702:	e9 92 f7 ff ff       	jmp    80105e99 <alltraps>
 
-801060e7 <vector108>:
+80106707 <vector108>:
 .globl vector108
 vector108:
   pushl $0
-801060e7:	6a 00                	push   $0x0
+80106707:	6a 00                	push   $0x0
   pushl $108
-801060e9:	6a 6c                	push   $0x6c
+80106709:	6a 6c                	push   $0x6c
   jmp alltraps
-801060eb:	e9 7e f7 ff ff       	jmp    8010586e <alltraps>
+8010670b:	e9 89 f7 ff ff       	jmp    80105e99 <alltraps>
 
-801060f0 <vector109>:
+80106710 <vector109>:
 .globl vector109
 vector109:
   pushl $0
-801060f0:	6a 00                	push   $0x0
+80106710:	6a 00                	push   $0x0
   pushl $109
-801060f2:	6a 6d                	push   $0x6d
+80106712:	6a 6d                	push   $0x6d
   jmp alltraps
-801060f4:	e9 75 f7 ff ff       	jmp    8010586e <alltraps>
+80106714:	e9 80 f7 ff ff       	jmp    80105e99 <alltraps>
 
-801060f9 <vector110>:
+80106719 <vector110>:
 .globl vector110
 vector110:
   pushl $0
-801060f9:	6a 00                	push   $0x0
+80106719:	6a 00                	push   $0x0
   pushl $110
-801060fb:	6a 6e                	push   $0x6e
+8010671b:	6a 6e                	push   $0x6e
   jmp alltraps
-801060fd:	e9 6c f7 ff ff       	jmp    8010586e <alltraps>
+8010671d:	e9 77 f7 ff ff       	jmp    80105e99 <alltraps>
 
-80106102 <vector111>:
+80106722 <vector111>:
 .globl vector111
 vector111:
   pushl $0
-80106102:	6a 00                	push   $0x0
+80106722:	6a 00                	push   $0x0
   pushl $111
-80106104:	6a 6f                	push   $0x6f
+80106724:	6a 6f                	push   $0x6f
   jmp alltraps
-80106106:	e9 63 f7 ff ff       	jmp    8010586e <alltraps>
+80106726:	e9 6e f7 ff ff       	jmp    80105e99 <alltraps>
 
-8010610b <vector112>:
+8010672b <vector112>:
 .globl vector112
 vector112:
   pushl $0
-8010610b:	6a 00                	push   $0x0
+8010672b:	6a 00                	push   $0x0
   pushl $112
-8010610d:	6a 70                	push   $0x70
+8010672d:	6a 70                	push   $0x70
   jmp alltraps
-8010610f:	e9 5a f7 ff ff       	jmp    8010586e <alltraps>
+8010672f:	e9 65 f7 ff ff       	jmp    80105e99 <alltraps>
 
-80106114 <vector113>:
+80106734 <vector113>:
 .globl vector113
 vector113:
   pushl $0
-80106114:	6a 00                	push   $0x0
+80106734:	6a 00                	push   $0x0
   pushl $113
-80106116:	6a 71                	push   $0x71
+80106736:	6a 71                	push   $0x71
   jmp alltraps
-80106118:	e9 51 f7 ff ff       	jmp    8010586e <alltraps>
+80106738:	e9 5c f7 ff ff       	jmp    80105e99 <alltraps>
 
-8010611d <vector114>:
+8010673d <vector114>:
 .globl vector114
 vector114:
   pushl $0
-8010611d:	6a 00                	push   $0x0
+8010673d:	6a 00                	push   $0x0
   pushl $114
-8010611f:	6a 72                	push   $0x72
+8010673f:	6a 72                	push   $0x72
   jmp alltraps
-80106121:	e9 48 f7 ff ff       	jmp    8010586e <alltraps>
+80106741:	e9 53 f7 ff ff       	jmp    80105e99 <alltraps>
 
-80106126 <vector115>:
+80106746 <vector115>:
 .globl vector115
 vector115:
   pushl $0
-80106126:	6a 00                	push   $0x0
+80106746:	6a 00                	push   $0x0
   pushl $115
-80106128:	6a 73                	push   $0x73
+80106748:	6a 73                	push   $0x73
   jmp alltraps
-8010612a:	e9 3f f7 ff ff       	jmp    8010586e <alltraps>
+8010674a:	e9 4a f7 ff ff       	jmp    80105e99 <alltraps>
 
-8010612f <vector116>:
+8010674f <vector116>:
 .globl vector116
 vector116:
   pushl $0
-8010612f:	6a 00                	push   $0x0
+8010674f:	6a 00                	push   $0x0
   pushl $116
-80106131:	6a 74                	push   $0x74
+80106751:	6a 74                	push   $0x74
   jmp alltraps
-80106133:	e9 36 f7 ff ff       	jmp    8010586e <alltraps>
+80106753:	e9 41 f7 ff ff       	jmp    80105e99 <alltraps>
 
-80106138 <vector117>:
+80106758 <vector117>:
 .globl vector117
 vector117:
   pushl $0
-80106138:	6a 00                	push   $0x0
+80106758:	6a 00                	push   $0x0
   pushl $117
-8010613a:	6a 75                	push   $0x75
+8010675a:	6a 75                	push   $0x75
   jmp alltraps
-8010613c:	e9 2d f7 ff ff       	jmp    8010586e <alltraps>
+8010675c:	e9 38 f7 ff ff       	jmp    80105e99 <alltraps>
 
-80106141 <vector118>:
+80106761 <vector118>:
 .globl vector118
 vector118:
   pushl $0
-80106141:	6a 00                	push   $0x0
+80106761:	6a 00                	push   $0x0
   pushl $118
-80106143:	6a 76                	push   $0x76
+80106763:	6a 76                	push   $0x76
   jmp alltraps
-80106145:	e9 24 f7 ff ff       	jmp    8010586e <alltraps>
+80106765:	e9 2f f7 ff ff       	jmp    80105e99 <alltraps>
 
-8010614a <vector119>:
+8010676a <vector119>:
 .globl vector119
 vector119:
   pushl $0
-8010614a:	6a 00                	push   $0x0
+8010676a:	6a 00                	push   $0x0
   pushl $119
-8010614c:	6a 77                	push   $0x77
+8010676c:	6a 77                	push   $0x77
   jmp alltraps
-8010614e:	e9 1b f7 ff ff       	jmp    8010586e <alltraps>
+8010676e:	e9 26 f7 ff ff       	jmp    80105e99 <alltraps>
 
-80106153 <vector120>:
+80106773 <vector120>:
 .globl vector120
 vector120:
   pushl $0
-80106153:	6a 00                	push   $0x0
+80106773:	6a 00                	push   $0x0
   pushl $120
-80106155:	6a 78                	push   $0x78
+80106775:	6a 78                	push   $0x78
   jmp alltraps
-80106157:	e9 12 f7 ff ff       	jmp    8010586e <alltraps>
+80106777:	e9 1d f7 ff ff       	jmp    80105e99 <alltraps>
 
-8010615c <vector121>:
+8010677c <vector121>:
 .globl vector121
 vector121:
   pushl $0
-8010615c:	6a 00                	push   $0x0
+8010677c:	6a 00                	push   $0x0
   pushl $121
-8010615e:	6a 79                	push   $0x79
+8010677e:	6a 79                	push   $0x79
   jmp alltraps
-80106160:	e9 09 f7 ff ff       	jmp    8010586e <alltraps>
+80106780:	e9 14 f7 ff ff       	jmp    80105e99 <alltraps>
 
-80106165 <vector122>:
+80106785 <vector122>:
 .globl vector122
 vector122:
   pushl $0
-80106165:	6a 00                	push   $0x0
+80106785:	6a 00                	push   $0x0
   pushl $122
-80106167:	6a 7a                	push   $0x7a
+80106787:	6a 7a                	push   $0x7a
   jmp alltraps
-80106169:	e9 00 f7 ff ff       	jmp    8010586e <alltraps>
+80106789:	e9 0b f7 ff ff       	jmp    80105e99 <alltraps>
 
-8010616e <vector123>:
+8010678e <vector123>:
 .globl vector123
 vector123:
   pushl $0
-8010616e:	6a 00                	push   $0x0
+8010678e:	6a 00                	push   $0x0
   pushl $123
-80106170:	6a 7b                	push   $0x7b
+80106790:	6a 7b                	push   $0x7b
   jmp alltraps
-80106172:	e9 f7 f6 ff ff       	jmp    8010586e <alltraps>
+80106792:	e9 02 f7 ff ff       	jmp    80105e99 <alltraps>
 
-80106177 <vector124>:
+80106797 <vector124>:
 .globl vector124
 vector124:
   pushl $0
-80106177:	6a 00                	push   $0x0
+80106797:	6a 00                	push   $0x0
   pushl $124
-80106179:	6a 7c                	push   $0x7c
+80106799:	6a 7c                	push   $0x7c
   jmp alltraps
-8010617b:	e9 ee f6 ff ff       	jmp    8010586e <alltraps>
+8010679b:	e9 f9 f6 ff ff       	jmp    80105e99 <alltraps>
 
-80106180 <vector125>:
+801067a0 <vector125>:
 .globl vector125
 vector125:
   pushl $0
-80106180:	6a 00                	push   $0x0
+801067a0:	6a 00                	push   $0x0
   pushl $125
-80106182:	6a 7d                	push   $0x7d
+801067a2:	6a 7d                	push   $0x7d
   jmp alltraps
-80106184:	e9 e5 f6 ff ff       	jmp    8010586e <alltraps>
+801067a4:	e9 f0 f6 ff ff       	jmp    80105e99 <alltraps>
 
-80106189 <vector126>:
+801067a9 <vector126>:
 .globl vector126
 vector126:
   pushl $0
-80106189:	6a 00                	push   $0x0
+801067a9:	6a 00                	push   $0x0
   pushl $126
-8010618b:	6a 7e                	push   $0x7e
+801067ab:	6a 7e                	push   $0x7e
   jmp alltraps
-8010618d:	e9 dc f6 ff ff       	jmp    8010586e <alltraps>
+801067ad:	e9 e7 f6 ff ff       	jmp    80105e99 <alltraps>
 
-80106192 <vector127>:
+801067b2 <vector127>:
 .globl vector127
 vector127:
   pushl $0
-80106192:	6a 00                	push   $0x0
+801067b2:	6a 00                	push   $0x0
   pushl $127
-80106194:	6a 7f                	push   $0x7f
+801067b4:	6a 7f                	push   $0x7f
   jmp alltraps
-80106196:	e9 d3 f6 ff ff       	jmp    8010586e <alltraps>
+801067b6:	e9 de f6 ff ff       	jmp    80105e99 <alltraps>
 
-8010619b <vector128>:
+801067bb <vector128>:
 .globl vector128
 vector128:
   pushl $0
-8010619b:	6a 00                	push   $0x0
+801067bb:	6a 00                	push   $0x0
   pushl $128
-8010619d:	68 80 00 00 00       	push   $0x80
+801067bd:	68 80 00 00 00       	push   $0x80
   jmp alltraps
-801061a2:	e9 c7 f6 ff ff       	jmp    8010586e <alltraps>
+801067c2:	e9 d2 f6 ff ff       	jmp    80105e99 <alltraps>
 
-801061a7 <vector129>:
+801067c7 <vector129>:
 .globl vector129
 vector129:
   pushl $0
-801061a7:	6a 00                	push   $0x0
+801067c7:	6a 00                	push   $0x0
   pushl $129
-801061a9:	68 81 00 00 00       	push   $0x81
+801067c9:	68 81 00 00 00       	push   $0x81
   jmp alltraps
-801061ae:	e9 bb f6 ff ff       	jmp    8010586e <alltraps>
+801067ce:	e9 c6 f6 ff ff       	jmp    80105e99 <alltraps>
 
-801061b3 <vector130>:
+801067d3 <vector130>:
 .globl vector130
 vector130:
   pushl $0
-801061b3:	6a 00                	push   $0x0
+801067d3:	6a 00                	push   $0x0
   pushl $130
-801061b5:	68 82 00 00 00       	push   $0x82
+801067d5:	68 82 00 00 00       	push   $0x82
   jmp alltraps
-801061ba:	e9 af f6 ff ff       	jmp    8010586e <alltraps>
+801067da:	e9 ba f6 ff ff       	jmp    80105e99 <alltraps>
 
-801061bf <vector131>:
+801067df <vector131>:
 .globl vector131
 vector131:
   pushl $0
-801061bf:	6a 00                	push   $0x0
+801067df:	6a 00                	push   $0x0
   pushl $131
-801061c1:	68 83 00 00 00       	push   $0x83
+801067e1:	68 83 00 00 00       	push   $0x83
   jmp alltraps
-801061c6:	e9 a3 f6 ff ff       	jmp    8010586e <alltraps>
+801067e6:	e9 ae f6 ff ff       	jmp    80105e99 <alltraps>
 
-801061cb <vector132>:
+801067eb <vector132>:
 .globl vector132
 vector132:
   pushl $0
-801061cb:	6a 00                	push   $0x0
+801067eb:	6a 00                	push   $0x0
   pushl $132
-801061cd:	68 84 00 00 00       	push   $0x84
+801067ed:	68 84 00 00 00       	push   $0x84
   jmp alltraps
-801061d2:	e9 97 f6 ff ff       	jmp    8010586e <alltraps>
+801067f2:	e9 a2 f6 ff ff       	jmp    80105e99 <alltraps>
 
-801061d7 <vector133>:
+801067f7 <vector133>:
 .globl vector133
 vector133:
   pushl $0
-801061d7:	6a 00                	push   $0x0
+801067f7:	6a 00                	push   $0x0
   pushl $133
-801061d9:	68 85 00 00 00       	push   $0x85
+801067f9:	68 85 00 00 00       	push   $0x85
   jmp alltraps
-801061de:	e9 8b f6 ff ff       	jmp    8010586e <alltraps>
+801067fe:	e9 96 f6 ff ff       	jmp    80105e99 <alltraps>
 
-801061e3 <vector134>:
+80106803 <vector134>:
 .globl vector134
 vector134:
   pushl $0
-801061e3:	6a 00                	push   $0x0
+80106803:	6a 00                	push   $0x0
   pushl $134
-801061e5:	68 86 00 00 00       	push   $0x86
+80106805:	68 86 00 00 00       	push   $0x86
   jmp alltraps
-801061ea:	e9 7f f6 ff ff       	jmp    8010586e <alltraps>
+8010680a:	e9 8a f6 ff ff       	jmp    80105e99 <alltraps>
 
-801061ef <vector135>:
+8010680f <vector135>:
 .globl vector135
 vector135:
   pushl $0
-801061ef:	6a 00                	push   $0x0
+8010680f:	6a 00                	push   $0x0
   pushl $135
-801061f1:	68 87 00 00 00       	push   $0x87
+80106811:	68 87 00 00 00       	push   $0x87
   jmp alltraps
-801061f6:	e9 73 f6 ff ff       	jmp    8010586e <alltraps>
+80106816:	e9 7e f6 ff ff       	jmp    80105e99 <alltraps>
 
-801061fb <vector136>:
+8010681b <vector136>:
 .globl vector136
 vector136:
   pushl $0
-801061fb:	6a 00                	push   $0x0
+8010681b:	6a 00                	push   $0x0
   pushl $136
-801061fd:	68 88 00 00 00       	push   $0x88
+8010681d:	68 88 00 00 00       	push   $0x88
   jmp alltraps
-80106202:	e9 67 f6 ff ff       	jmp    8010586e <alltraps>
+80106822:	e9 72 f6 ff ff       	jmp    80105e99 <alltraps>
 
-80106207 <vector137>:
+80106827 <vector137>:
 .globl vector137
 vector137:
   pushl $0
-80106207:	6a 00                	push   $0x0
+80106827:	6a 00                	push   $0x0
   pushl $137
-80106209:	68 89 00 00 00       	push   $0x89
+80106829:	68 89 00 00 00       	push   $0x89
   jmp alltraps
-8010620e:	e9 5b f6 ff ff       	jmp    8010586e <alltraps>
+8010682e:	e9 66 f6 ff ff       	jmp    80105e99 <alltraps>
 
-80106213 <vector138>:
+80106833 <vector138>:
 .globl vector138
 vector138:
   pushl $0
-80106213:	6a 00                	push   $0x0
+80106833:	6a 00                	push   $0x0
   pushl $138
-80106215:	68 8a 00 00 00       	push   $0x8a
+80106835:	68 8a 00 00 00       	push   $0x8a
   jmp alltraps
-8010621a:	e9 4f f6 ff ff       	jmp    8010586e <alltraps>
+8010683a:	e9 5a f6 ff ff       	jmp    80105e99 <alltraps>
 
-8010621f <vector139>:
+8010683f <vector139>:
 .globl vector139
 vector139:
   pushl $0
-8010621f:	6a 00                	push   $0x0
+8010683f:	6a 00                	push   $0x0
   pushl $139
-80106221:	68 8b 00 00 00       	push   $0x8b
+80106841:	68 8b 00 00 00       	push   $0x8b
   jmp alltraps
-80106226:	e9 43 f6 ff ff       	jmp    8010586e <alltraps>
+80106846:	e9 4e f6 ff ff       	jmp    80105e99 <alltraps>
 
-8010622b <vector140>:
+8010684b <vector140>:
 .globl vector140
 vector140:
   pushl $0
-8010622b:	6a 00                	push   $0x0
+8010684b:	6a 00                	push   $0x0
   pushl $140
-8010622d:	68 8c 00 00 00       	push   $0x8c
+8010684d:	68 8c 00 00 00       	push   $0x8c
   jmp alltraps
-80106232:	e9 37 f6 ff ff       	jmp    8010586e <alltraps>
+80106852:	e9 42 f6 ff ff       	jmp    80105e99 <alltraps>
 
-80106237 <vector141>:
+80106857 <vector141>:
 .globl vector141
 vector141:
   pushl $0
-80106237:	6a 00                	push   $0x0
+80106857:	6a 00                	push   $0x0
   pushl $141
-80106239:	68 8d 00 00 00       	push   $0x8d
+80106859:	68 8d 00 00 00       	push   $0x8d
   jmp alltraps
-8010623e:	e9 2b f6 ff ff       	jmp    8010586e <alltraps>
+8010685e:	e9 36 f6 ff ff       	jmp    80105e99 <alltraps>
 
-80106243 <vector142>:
+80106863 <vector142>:
 .globl vector142
 vector142:
   pushl $0
-80106243:	6a 00                	push   $0x0
+80106863:	6a 00                	push   $0x0
   pushl $142
-80106245:	68 8e 00 00 00       	push   $0x8e
+80106865:	68 8e 00 00 00       	push   $0x8e
   jmp alltraps
-8010624a:	e9 1f f6 ff ff       	jmp    8010586e <alltraps>
+8010686a:	e9 2a f6 ff ff       	jmp    80105e99 <alltraps>
 
-8010624f <vector143>:
+8010686f <vector143>:
 .globl vector143
 vector143:
   pushl $0
-8010624f:	6a 00                	push   $0x0
+8010686f:	6a 00                	push   $0x0
   pushl $143
-80106251:	68 8f 00 00 00       	push   $0x8f
+80106871:	68 8f 00 00 00       	push   $0x8f
   jmp alltraps
-80106256:	e9 13 f6 ff ff       	jmp    8010586e <alltraps>
+80106876:	e9 1e f6 ff ff       	jmp    80105e99 <alltraps>
 
-8010625b <vector144>:
+8010687b <vector144>:
 .globl vector144
 vector144:
   pushl $0
-8010625b:	6a 00                	push   $0x0
+8010687b:	6a 00                	push   $0x0
   pushl $144
-8010625d:	68 90 00 00 00       	push   $0x90
+8010687d:	68 90 00 00 00       	push   $0x90
   jmp alltraps
-80106262:	e9 07 f6 ff ff       	jmp    8010586e <alltraps>
+80106882:	e9 12 f6 ff ff       	jmp    80105e99 <alltraps>
 
-80106267 <vector145>:
+80106887 <vector145>:
 .globl vector145
 vector145:
   pushl $0
-80106267:	6a 00                	push   $0x0
+80106887:	6a 00                	push   $0x0
   pushl $145
-80106269:	68 91 00 00 00       	push   $0x91
+80106889:	68 91 00 00 00       	push   $0x91
   jmp alltraps
-8010626e:	e9 fb f5 ff ff       	jmp    8010586e <alltraps>
+8010688e:	e9 06 f6 ff ff       	jmp    80105e99 <alltraps>
 
-80106273 <vector146>:
+80106893 <vector146>:
 .globl vector146
 vector146:
   pushl $0
-80106273:	6a 00                	push   $0x0
+80106893:	6a 00                	push   $0x0
   pushl $146
-80106275:	68 92 00 00 00       	push   $0x92
+80106895:	68 92 00 00 00       	push   $0x92
   jmp alltraps
-8010627a:	e9 ef f5 ff ff       	jmp    8010586e <alltraps>
+8010689a:	e9 fa f5 ff ff       	jmp    80105e99 <alltraps>
 
-8010627f <vector147>:
+8010689f <vector147>:
 .globl vector147
 vector147:
   pushl $0
-8010627f:	6a 00                	push   $0x0
+8010689f:	6a 00                	push   $0x0
   pushl $147
-80106281:	68 93 00 00 00       	push   $0x93
+801068a1:	68 93 00 00 00       	push   $0x93
   jmp alltraps
-80106286:	e9 e3 f5 ff ff       	jmp    8010586e <alltraps>
+801068a6:	e9 ee f5 ff ff       	jmp    80105e99 <alltraps>
 
-8010628b <vector148>:
+801068ab <vector148>:
 .globl vector148
 vector148:
   pushl $0
-8010628b:	6a 00                	push   $0x0
+801068ab:	6a 00                	push   $0x0
   pushl $148
-8010628d:	68 94 00 00 00       	push   $0x94
+801068ad:	68 94 00 00 00       	push   $0x94
   jmp alltraps
-80106292:	e9 d7 f5 ff ff       	jmp    8010586e <alltraps>
+801068b2:	e9 e2 f5 ff ff       	jmp    80105e99 <alltraps>
 
-80106297 <vector149>:
+801068b7 <vector149>:
 .globl vector149
 vector149:
   pushl $0
-80106297:	6a 00                	push   $0x0
+801068b7:	6a 00                	push   $0x0
   pushl $149
-80106299:	68 95 00 00 00       	push   $0x95
+801068b9:	68 95 00 00 00       	push   $0x95
   jmp alltraps
-8010629e:	e9 cb f5 ff ff       	jmp    8010586e <alltraps>
+801068be:	e9 d6 f5 ff ff       	jmp    80105e99 <alltraps>
 
-801062a3 <vector150>:
+801068c3 <vector150>:
 .globl vector150
 vector150:
   pushl $0
-801062a3:	6a 00                	push   $0x0
+801068c3:	6a 00                	push   $0x0
   pushl $150
-801062a5:	68 96 00 00 00       	push   $0x96
+801068c5:	68 96 00 00 00       	push   $0x96
   jmp alltraps
-801062aa:	e9 bf f5 ff ff       	jmp    8010586e <alltraps>
+801068ca:	e9 ca f5 ff ff       	jmp    80105e99 <alltraps>
 
-801062af <vector151>:
+801068cf <vector151>:
 .globl vector151
 vector151:
   pushl $0
-801062af:	6a 00                	push   $0x0
+801068cf:	6a 00                	push   $0x0
   pushl $151
-801062b1:	68 97 00 00 00       	push   $0x97
+801068d1:	68 97 00 00 00       	push   $0x97
   jmp alltraps
-801062b6:	e9 b3 f5 ff ff       	jmp    8010586e <alltraps>
+801068d6:	e9 be f5 ff ff       	jmp    80105e99 <alltraps>
 
-801062bb <vector152>:
+801068db <vector152>:
 .globl vector152
 vector152:
   pushl $0
-801062bb:	6a 00                	push   $0x0
+801068db:	6a 00                	push   $0x0
   pushl $152
-801062bd:	68 98 00 00 00       	push   $0x98
+801068dd:	68 98 00 00 00       	push   $0x98
   jmp alltraps
-801062c2:	e9 a7 f5 ff ff       	jmp    8010586e <alltraps>
+801068e2:	e9 b2 f5 ff ff       	jmp    80105e99 <alltraps>
 
-801062c7 <vector153>:
+801068e7 <vector153>:
 .globl vector153
 vector153:
   pushl $0
-801062c7:	6a 00                	push   $0x0
+801068e7:	6a 00                	push   $0x0
   pushl $153
-801062c9:	68 99 00 00 00       	push   $0x99
+801068e9:	68 99 00 00 00       	push   $0x99
   jmp alltraps
-801062ce:	e9 9b f5 ff ff       	jmp    8010586e <alltraps>
+801068ee:	e9 a6 f5 ff ff       	jmp    80105e99 <alltraps>
 
-801062d3 <vector154>:
+801068f3 <vector154>:
 .globl vector154
 vector154:
   pushl $0
-801062d3:	6a 00                	push   $0x0
+801068f3:	6a 00                	push   $0x0
   pushl $154
-801062d5:	68 9a 00 00 00       	push   $0x9a
+801068f5:	68 9a 00 00 00       	push   $0x9a
   jmp alltraps
-801062da:	e9 8f f5 ff ff       	jmp    8010586e <alltraps>
+801068fa:	e9 9a f5 ff ff       	jmp    80105e99 <alltraps>
 
-801062df <vector155>:
+801068ff <vector155>:
 .globl vector155
 vector155:
   pushl $0
-801062df:	6a 00                	push   $0x0
+801068ff:	6a 00                	push   $0x0
   pushl $155
-801062e1:	68 9b 00 00 00       	push   $0x9b
+80106901:	68 9b 00 00 00       	push   $0x9b
   jmp alltraps
-801062e6:	e9 83 f5 ff ff       	jmp    8010586e <alltraps>
+80106906:	e9 8e f5 ff ff       	jmp    80105e99 <alltraps>
 
-801062eb <vector156>:
+8010690b <vector156>:
 .globl vector156
 vector156:
   pushl $0
-801062eb:	6a 00                	push   $0x0
+8010690b:	6a 00                	push   $0x0
   pushl $156
-801062ed:	68 9c 00 00 00       	push   $0x9c
+8010690d:	68 9c 00 00 00       	push   $0x9c
   jmp alltraps
-801062f2:	e9 77 f5 ff ff       	jmp    8010586e <alltraps>
+80106912:	e9 82 f5 ff ff       	jmp    80105e99 <alltraps>
 
-801062f7 <vector157>:
+80106917 <vector157>:
 .globl vector157
 vector157:
   pushl $0
-801062f7:	6a 00                	push   $0x0
+80106917:	6a 00                	push   $0x0
   pushl $157
-801062f9:	68 9d 00 00 00       	push   $0x9d
+80106919:	68 9d 00 00 00       	push   $0x9d
   jmp alltraps
-801062fe:	e9 6b f5 ff ff       	jmp    8010586e <alltraps>
+8010691e:	e9 76 f5 ff ff       	jmp    80105e99 <alltraps>
 
-80106303 <vector158>:
+80106923 <vector158>:
 .globl vector158
 vector158:
   pushl $0
-80106303:	6a 00                	push   $0x0
+80106923:	6a 00                	push   $0x0
   pushl $158
-80106305:	68 9e 00 00 00       	push   $0x9e
+80106925:	68 9e 00 00 00       	push   $0x9e
   jmp alltraps
-8010630a:	e9 5f f5 ff ff       	jmp    8010586e <alltraps>
+8010692a:	e9 6a f5 ff ff       	jmp    80105e99 <alltraps>
 
-8010630f <vector159>:
+8010692f <vector159>:
 .globl vector159
 vector159:
   pushl $0
-8010630f:	6a 00                	push   $0x0
+8010692f:	6a 00                	push   $0x0
   pushl $159
-80106311:	68 9f 00 00 00       	push   $0x9f
+80106931:	68 9f 00 00 00       	push   $0x9f
   jmp alltraps
-80106316:	e9 53 f5 ff ff       	jmp    8010586e <alltraps>
+80106936:	e9 5e f5 ff ff       	jmp    80105e99 <alltraps>
 
-8010631b <vector160>:
+8010693b <vector160>:
 .globl vector160
 vector160:
   pushl $0
-8010631b:	6a 00                	push   $0x0
+8010693b:	6a 00                	push   $0x0
   pushl $160
-8010631d:	68 a0 00 00 00       	push   $0xa0
+8010693d:	68 a0 00 00 00       	push   $0xa0
   jmp alltraps
-80106322:	e9 47 f5 ff ff       	jmp    8010586e <alltraps>
+80106942:	e9 52 f5 ff ff       	jmp    80105e99 <alltraps>
 
-80106327 <vector161>:
+80106947 <vector161>:
 .globl vector161
 vector161:
   pushl $0
-80106327:	6a 00                	push   $0x0
+80106947:	6a 00                	push   $0x0
   pushl $161
-80106329:	68 a1 00 00 00       	push   $0xa1
+80106949:	68 a1 00 00 00       	push   $0xa1
   jmp alltraps
-8010632e:	e9 3b f5 ff ff       	jmp    8010586e <alltraps>
+8010694e:	e9 46 f5 ff ff       	jmp    80105e99 <alltraps>
 
-80106333 <vector162>:
+80106953 <vector162>:
 .globl vector162
 vector162:
   pushl $0
-80106333:	6a 00                	push   $0x0
+80106953:	6a 00                	push   $0x0
   pushl $162
-80106335:	68 a2 00 00 00       	push   $0xa2
+80106955:	68 a2 00 00 00       	push   $0xa2
   jmp alltraps
-8010633a:	e9 2f f5 ff ff       	jmp    8010586e <alltraps>
+8010695a:	e9 3a f5 ff ff       	jmp    80105e99 <alltraps>
 
-8010633f <vector163>:
+8010695f <vector163>:
 .globl vector163
 vector163:
   pushl $0
-8010633f:	6a 00                	push   $0x0
+8010695f:	6a 00                	push   $0x0
   pushl $163
-80106341:	68 a3 00 00 00       	push   $0xa3
+80106961:	68 a3 00 00 00       	push   $0xa3
   jmp alltraps
-80106346:	e9 23 f5 ff ff       	jmp    8010586e <alltraps>
+80106966:	e9 2e f5 ff ff       	jmp    80105e99 <alltraps>
 
-8010634b <vector164>:
+8010696b <vector164>:
 .globl vector164
 vector164:
   pushl $0
-8010634b:	6a 00                	push   $0x0
+8010696b:	6a 00                	push   $0x0
   pushl $164
-8010634d:	68 a4 00 00 00       	push   $0xa4
+8010696d:	68 a4 00 00 00       	push   $0xa4
   jmp alltraps
-80106352:	e9 17 f5 ff ff       	jmp    8010586e <alltraps>
+80106972:	e9 22 f5 ff ff       	jmp    80105e99 <alltraps>
 
-80106357 <vector165>:
+80106977 <vector165>:
 .globl vector165
 vector165:
   pushl $0
-80106357:	6a 00                	push   $0x0
+80106977:	6a 00                	push   $0x0
   pushl $165
-80106359:	68 a5 00 00 00       	push   $0xa5
+80106979:	68 a5 00 00 00       	push   $0xa5
   jmp alltraps
-8010635e:	e9 0b f5 ff ff       	jmp    8010586e <alltraps>
+8010697e:	e9 16 f5 ff ff       	jmp    80105e99 <alltraps>
 
-80106363 <vector166>:
+80106983 <vector166>:
 .globl vector166
 vector166:
   pushl $0
-80106363:	6a 00                	push   $0x0
+80106983:	6a 00                	push   $0x0
   pushl $166
-80106365:	68 a6 00 00 00       	push   $0xa6
+80106985:	68 a6 00 00 00       	push   $0xa6
   jmp alltraps
-8010636a:	e9 ff f4 ff ff       	jmp    8010586e <alltraps>
+8010698a:	e9 0a f5 ff ff       	jmp    80105e99 <alltraps>
 
-8010636f <vector167>:
+8010698f <vector167>:
 .globl vector167
 vector167:
   pushl $0
-8010636f:	6a 00                	push   $0x0
+8010698f:	6a 00                	push   $0x0
   pushl $167
-80106371:	68 a7 00 00 00       	push   $0xa7
+80106991:	68 a7 00 00 00       	push   $0xa7
   jmp alltraps
-80106376:	e9 f3 f4 ff ff       	jmp    8010586e <alltraps>
+80106996:	e9 fe f4 ff ff       	jmp    80105e99 <alltraps>
 
-8010637b <vector168>:
+8010699b <vector168>:
 .globl vector168
 vector168:
   pushl $0
-8010637b:	6a 00                	push   $0x0
+8010699b:	6a 00                	push   $0x0
   pushl $168
-8010637d:	68 a8 00 00 00       	push   $0xa8
+8010699d:	68 a8 00 00 00       	push   $0xa8
   jmp alltraps
-80106382:	e9 e7 f4 ff ff       	jmp    8010586e <alltraps>
+801069a2:	e9 f2 f4 ff ff       	jmp    80105e99 <alltraps>
 
-80106387 <vector169>:
+801069a7 <vector169>:
 .globl vector169
 vector169:
   pushl $0
-80106387:	6a 00                	push   $0x0
+801069a7:	6a 00                	push   $0x0
   pushl $169
-80106389:	68 a9 00 00 00       	push   $0xa9
+801069a9:	68 a9 00 00 00       	push   $0xa9
   jmp alltraps
-8010638e:	e9 db f4 ff ff       	jmp    8010586e <alltraps>
+801069ae:	e9 e6 f4 ff ff       	jmp    80105e99 <alltraps>
 
-80106393 <vector170>:
+801069b3 <vector170>:
 .globl vector170
 vector170:
   pushl $0
-80106393:	6a 00                	push   $0x0
+801069b3:	6a 00                	push   $0x0
   pushl $170
-80106395:	68 aa 00 00 00       	push   $0xaa
+801069b5:	68 aa 00 00 00       	push   $0xaa
   jmp alltraps
-8010639a:	e9 cf f4 ff ff       	jmp    8010586e <alltraps>
+801069ba:	e9 da f4 ff ff       	jmp    80105e99 <alltraps>
 
-8010639f <vector171>:
+801069bf <vector171>:
 .globl vector171
 vector171:
   pushl $0
-8010639f:	6a 00                	push   $0x0
+801069bf:	6a 00                	push   $0x0
   pushl $171
-801063a1:	68 ab 00 00 00       	push   $0xab
+801069c1:	68 ab 00 00 00       	push   $0xab
   jmp alltraps
-801063a6:	e9 c3 f4 ff ff       	jmp    8010586e <alltraps>
+801069c6:	e9 ce f4 ff ff       	jmp    80105e99 <alltraps>
 
-801063ab <vector172>:
+801069cb <vector172>:
 .globl vector172
 vector172:
   pushl $0
-801063ab:	6a 00                	push   $0x0
+801069cb:	6a 00                	push   $0x0
   pushl $172
-801063ad:	68 ac 00 00 00       	push   $0xac
+801069cd:	68 ac 00 00 00       	push   $0xac
   jmp alltraps
-801063b2:	e9 b7 f4 ff ff       	jmp    8010586e <alltraps>
+801069d2:	e9 c2 f4 ff ff       	jmp    80105e99 <alltraps>
 
-801063b7 <vector173>:
+801069d7 <vector173>:
 .globl vector173
 vector173:
   pushl $0
-801063b7:	6a 00                	push   $0x0
+801069d7:	6a 00                	push   $0x0
   pushl $173
-801063b9:	68 ad 00 00 00       	push   $0xad
+801069d9:	68 ad 00 00 00       	push   $0xad
   jmp alltraps
-801063be:	e9 ab f4 ff ff       	jmp    8010586e <alltraps>
+801069de:	e9 b6 f4 ff ff       	jmp    80105e99 <alltraps>
 
-801063c3 <vector174>:
+801069e3 <vector174>:
 .globl vector174
 vector174:
   pushl $0
-801063c3:	6a 00                	push   $0x0
+801069e3:	6a 00                	push   $0x0
   pushl $174
-801063c5:	68 ae 00 00 00       	push   $0xae
+801069e5:	68 ae 00 00 00       	push   $0xae
   jmp alltraps
-801063ca:	e9 9f f4 ff ff       	jmp    8010586e <alltraps>
+801069ea:	e9 aa f4 ff ff       	jmp    80105e99 <alltraps>
 
-801063cf <vector175>:
+801069ef <vector175>:
 .globl vector175
 vector175:
   pushl $0
-801063cf:	6a 00                	push   $0x0
+801069ef:	6a 00                	push   $0x0
   pushl $175
-801063d1:	68 af 00 00 00       	push   $0xaf
+801069f1:	68 af 00 00 00       	push   $0xaf
   jmp alltraps
-801063d6:	e9 93 f4 ff ff       	jmp    8010586e <alltraps>
+801069f6:	e9 9e f4 ff ff       	jmp    80105e99 <alltraps>
 
-801063db <vector176>:
+801069fb <vector176>:
 .globl vector176
 vector176:
   pushl $0
-801063db:	6a 00                	push   $0x0
+801069fb:	6a 00                	push   $0x0
   pushl $176
-801063dd:	68 b0 00 00 00       	push   $0xb0
+801069fd:	68 b0 00 00 00       	push   $0xb0
   jmp alltraps
-801063e2:	e9 87 f4 ff ff       	jmp    8010586e <alltraps>
+80106a02:	e9 92 f4 ff ff       	jmp    80105e99 <alltraps>
 
-801063e7 <vector177>:
+80106a07 <vector177>:
 .globl vector177
 vector177:
   pushl $0
-801063e7:	6a 00                	push   $0x0
+80106a07:	6a 00                	push   $0x0
   pushl $177
-801063e9:	68 b1 00 00 00       	push   $0xb1
+80106a09:	68 b1 00 00 00       	push   $0xb1
   jmp alltraps
-801063ee:	e9 7b f4 ff ff       	jmp    8010586e <alltraps>
+80106a0e:	e9 86 f4 ff ff       	jmp    80105e99 <alltraps>
 
-801063f3 <vector178>:
+80106a13 <vector178>:
 .globl vector178
 vector178:
   pushl $0
-801063f3:	6a 00                	push   $0x0
+80106a13:	6a 00                	push   $0x0
   pushl $178
-801063f5:	68 b2 00 00 00       	push   $0xb2
+80106a15:	68 b2 00 00 00       	push   $0xb2
   jmp alltraps
-801063fa:	e9 6f f4 ff ff       	jmp    8010586e <alltraps>
+80106a1a:	e9 7a f4 ff ff       	jmp    80105e99 <alltraps>
 
-801063ff <vector179>:
+80106a1f <vector179>:
 .globl vector179
 vector179:
   pushl $0
-801063ff:	6a 00                	push   $0x0
+80106a1f:	6a 00                	push   $0x0
   pushl $179
-80106401:	68 b3 00 00 00       	push   $0xb3
+80106a21:	68 b3 00 00 00       	push   $0xb3
   jmp alltraps
-80106406:	e9 63 f4 ff ff       	jmp    8010586e <alltraps>
+80106a26:	e9 6e f4 ff ff       	jmp    80105e99 <alltraps>
 
-8010640b <vector180>:
+80106a2b <vector180>:
 .globl vector180
 vector180:
   pushl $0
-8010640b:	6a 00                	push   $0x0
+80106a2b:	6a 00                	push   $0x0
   pushl $180
-8010640d:	68 b4 00 00 00       	push   $0xb4
+80106a2d:	68 b4 00 00 00       	push   $0xb4
   jmp alltraps
-80106412:	e9 57 f4 ff ff       	jmp    8010586e <alltraps>
+80106a32:	e9 62 f4 ff ff       	jmp    80105e99 <alltraps>
 
-80106417 <vector181>:
+80106a37 <vector181>:
 .globl vector181
 vector181:
   pushl $0
-80106417:	6a 00                	push   $0x0
+80106a37:	6a 00                	push   $0x0
   pushl $181
-80106419:	68 b5 00 00 00       	push   $0xb5
+80106a39:	68 b5 00 00 00       	push   $0xb5
   jmp alltraps
-8010641e:	e9 4b f4 ff ff       	jmp    8010586e <alltraps>
+80106a3e:	e9 56 f4 ff ff       	jmp    80105e99 <alltraps>
 
-80106423 <vector182>:
+80106a43 <vector182>:
 .globl vector182
 vector182:
   pushl $0
-80106423:	6a 00                	push   $0x0
+80106a43:	6a 00                	push   $0x0
   pushl $182
-80106425:	68 b6 00 00 00       	push   $0xb6
+80106a45:	68 b6 00 00 00       	push   $0xb6
   jmp alltraps
-8010642a:	e9 3f f4 ff ff       	jmp    8010586e <alltraps>
+80106a4a:	e9 4a f4 ff ff       	jmp    80105e99 <alltraps>
 
-8010642f <vector183>:
+80106a4f <vector183>:
 .globl vector183
 vector183:
   pushl $0
-8010642f:	6a 00                	push   $0x0
+80106a4f:	6a 00                	push   $0x0
   pushl $183
-80106431:	68 b7 00 00 00       	push   $0xb7
+80106a51:	68 b7 00 00 00       	push   $0xb7
   jmp alltraps
-80106436:	e9 33 f4 ff ff       	jmp    8010586e <alltraps>
+80106a56:	e9 3e f4 ff ff       	jmp    80105e99 <alltraps>
 
-8010643b <vector184>:
+80106a5b <vector184>:
 .globl vector184
 vector184:
   pushl $0
-8010643b:	6a 00                	push   $0x0
+80106a5b:	6a 00                	push   $0x0
   pushl $184
-8010643d:	68 b8 00 00 00       	push   $0xb8
+80106a5d:	68 b8 00 00 00       	push   $0xb8
   jmp alltraps
-80106442:	e9 27 f4 ff ff       	jmp    8010586e <alltraps>
+80106a62:	e9 32 f4 ff ff       	jmp    80105e99 <alltraps>
 
-80106447 <vector185>:
+80106a67 <vector185>:
 .globl vector185
 vector185:
   pushl $0
-80106447:	6a 00                	push   $0x0
+80106a67:	6a 00                	push   $0x0
   pushl $185
-80106449:	68 b9 00 00 00       	push   $0xb9
+80106a69:	68 b9 00 00 00       	push   $0xb9
   jmp alltraps
-8010644e:	e9 1b f4 ff ff       	jmp    8010586e <alltraps>
+80106a6e:	e9 26 f4 ff ff       	jmp    80105e99 <alltraps>
 
-80106453 <vector186>:
+80106a73 <vector186>:
 .globl vector186
 vector186:
   pushl $0
-80106453:	6a 00                	push   $0x0
+80106a73:	6a 00                	push   $0x0
   pushl $186
-80106455:	68 ba 00 00 00       	push   $0xba
+80106a75:	68 ba 00 00 00       	push   $0xba
   jmp alltraps
-8010645a:	e9 0f f4 ff ff       	jmp    8010586e <alltraps>
+80106a7a:	e9 1a f4 ff ff       	jmp    80105e99 <alltraps>
 
-8010645f <vector187>:
+80106a7f <vector187>:
 .globl vector187
 vector187:
   pushl $0
-8010645f:	6a 00                	push   $0x0
+80106a7f:	6a 00                	push   $0x0
   pushl $187
-80106461:	68 bb 00 00 00       	push   $0xbb
+80106a81:	68 bb 00 00 00       	push   $0xbb
   jmp alltraps
-80106466:	e9 03 f4 ff ff       	jmp    8010586e <alltraps>
+80106a86:	e9 0e f4 ff ff       	jmp    80105e99 <alltraps>
 
-8010646b <vector188>:
+80106a8b <vector188>:
 .globl vector188
 vector188:
   pushl $0
-8010646b:	6a 00                	push   $0x0
+80106a8b:	6a 00                	push   $0x0
   pushl $188
-8010646d:	68 bc 00 00 00       	push   $0xbc
+80106a8d:	68 bc 00 00 00       	push   $0xbc
   jmp alltraps
-80106472:	e9 f7 f3 ff ff       	jmp    8010586e <alltraps>
+80106a92:	e9 02 f4 ff ff       	jmp    80105e99 <alltraps>
 
-80106477 <vector189>:
+80106a97 <vector189>:
 .globl vector189
 vector189:
   pushl $0
-80106477:	6a 00                	push   $0x0
+80106a97:	6a 00                	push   $0x0
   pushl $189
-80106479:	68 bd 00 00 00       	push   $0xbd
+80106a99:	68 bd 00 00 00       	push   $0xbd
   jmp alltraps
-8010647e:	e9 eb f3 ff ff       	jmp    8010586e <alltraps>
+80106a9e:	e9 f6 f3 ff ff       	jmp    80105e99 <alltraps>
 
-80106483 <vector190>:
+80106aa3 <vector190>:
 .globl vector190
 vector190:
   pushl $0
-80106483:	6a 00                	push   $0x0
+80106aa3:	6a 00                	push   $0x0
   pushl $190
-80106485:	68 be 00 00 00       	push   $0xbe
+80106aa5:	68 be 00 00 00       	push   $0xbe
   jmp alltraps
-8010648a:	e9 df f3 ff ff       	jmp    8010586e <alltraps>
+80106aaa:	e9 ea f3 ff ff       	jmp    80105e99 <alltraps>
 
-8010648f <vector191>:
+80106aaf <vector191>:
 .globl vector191
 vector191:
   pushl $0
-8010648f:	6a 00                	push   $0x0
+80106aaf:	6a 00                	push   $0x0
   pushl $191
-80106491:	68 bf 00 00 00       	push   $0xbf
+80106ab1:	68 bf 00 00 00       	push   $0xbf
   jmp alltraps
-80106496:	e9 d3 f3 ff ff       	jmp    8010586e <alltraps>
+80106ab6:	e9 de f3 ff ff       	jmp    80105e99 <alltraps>
 
-8010649b <vector192>:
+80106abb <vector192>:
 .globl vector192
 vector192:
   pushl $0
-8010649b:	6a 00                	push   $0x0
+80106abb:	6a 00                	push   $0x0
   pushl $192
-8010649d:	68 c0 00 00 00       	push   $0xc0
+80106abd:	68 c0 00 00 00       	push   $0xc0
   jmp alltraps
-801064a2:	e9 c7 f3 ff ff       	jmp    8010586e <alltraps>
+80106ac2:	e9 d2 f3 ff ff       	jmp    80105e99 <alltraps>
 
-801064a7 <vector193>:
+80106ac7 <vector193>:
 .globl vector193
 vector193:
   pushl $0
-801064a7:	6a 00                	push   $0x0
+80106ac7:	6a 00                	push   $0x0
   pushl $193
-801064a9:	68 c1 00 00 00       	push   $0xc1
+80106ac9:	68 c1 00 00 00       	push   $0xc1
   jmp alltraps
-801064ae:	e9 bb f3 ff ff       	jmp    8010586e <alltraps>
+80106ace:	e9 c6 f3 ff ff       	jmp    80105e99 <alltraps>
 
-801064b3 <vector194>:
+80106ad3 <vector194>:
 .globl vector194
 vector194:
   pushl $0
-801064b3:	6a 00                	push   $0x0
+80106ad3:	6a 00                	push   $0x0
   pushl $194
-801064b5:	68 c2 00 00 00       	push   $0xc2
+80106ad5:	68 c2 00 00 00       	push   $0xc2
   jmp alltraps
-801064ba:	e9 af f3 ff ff       	jmp    8010586e <alltraps>
+80106ada:	e9 ba f3 ff ff       	jmp    80105e99 <alltraps>
 
-801064bf <vector195>:
+80106adf <vector195>:
 .globl vector195
 vector195:
   pushl $0
-801064bf:	6a 00                	push   $0x0
+80106adf:	6a 00                	push   $0x0
   pushl $195
-801064c1:	68 c3 00 00 00       	push   $0xc3
+80106ae1:	68 c3 00 00 00       	push   $0xc3
   jmp alltraps
-801064c6:	e9 a3 f3 ff ff       	jmp    8010586e <alltraps>
+80106ae6:	e9 ae f3 ff ff       	jmp    80105e99 <alltraps>
 
-801064cb <vector196>:
+80106aeb <vector196>:
 .globl vector196
 vector196:
   pushl $0
-801064cb:	6a 00                	push   $0x0
+80106aeb:	6a 00                	push   $0x0
   pushl $196
-801064cd:	68 c4 00 00 00       	push   $0xc4
+80106aed:	68 c4 00 00 00       	push   $0xc4
   jmp alltraps
-801064d2:	e9 97 f3 ff ff       	jmp    8010586e <alltraps>
+80106af2:	e9 a2 f3 ff ff       	jmp    80105e99 <alltraps>
 
-801064d7 <vector197>:
+80106af7 <vector197>:
 .globl vector197
 vector197:
   pushl $0
-801064d7:	6a 00                	push   $0x0
+80106af7:	6a 00                	push   $0x0
   pushl $197
-801064d9:	68 c5 00 00 00       	push   $0xc5
+80106af9:	68 c5 00 00 00       	push   $0xc5
   jmp alltraps
-801064de:	e9 8b f3 ff ff       	jmp    8010586e <alltraps>
+80106afe:	e9 96 f3 ff ff       	jmp    80105e99 <alltraps>
 
-801064e3 <vector198>:
+80106b03 <vector198>:
 .globl vector198
 vector198:
   pushl $0
-801064e3:	6a 00                	push   $0x0
+80106b03:	6a 00                	push   $0x0
   pushl $198
-801064e5:	68 c6 00 00 00       	push   $0xc6
+80106b05:	68 c6 00 00 00       	push   $0xc6
   jmp alltraps
-801064ea:	e9 7f f3 ff ff       	jmp    8010586e <alltraps>
+80106b0a:	e9 8a f3 ff ff       	jmp    80105e99 <alltraps>
 
-801064ef <vector199>:
+80106b0f <vector199>:
 .globl vector199
 vector199:
   pushl $0
-801064ef:	6a 00                	push   $0x0
+80106b0f:	6a 00                	push   $0x0
   pushl $199
-801064f1:	68 c7 00 00 00       	push   $0xc7
+80106b11:	68 c7 00 00 00       	push   $0xc7
   jmp alltraps
-801064f6:	e9 73 f3 ff ff       	jmp    8010586e <alltraps>
+80106b16:	e9 7e f3 ff ff       	jmp    80105e99 <alltraps>
 
-801064fb <vector200>:
+80106b1b <vector200>:
 .globl vector200
 vector200:
   pushl $0
-801064fb:	6a 00                	push   $0x0
+80106b1b:	6a 00                	push   $0x0
   pushl $200
-801064fd:	68 c8 00 00 00       	push   $0xc8
+80106b1d:	68 c8 00 00 00       	push   $0xc8
   jmp alltraps
-80106502:	e9 67 f3 ff ff       	jmp    8010586e <alltraps>
+80106b22:	e9 72 f3 ff ff       	jmp    80105e99 <alltraps>
 
-80106507 <vector201>:
+80106b27 <vector201>:
 .globl vector201
 vector201:
   pushl $0
-80106507:	6a 00                	push   $0x0
+80106b27:	6a 00                	push   $0x0
   pushl $201
-80106509:	68 c9 00 00 00       	push   $0xc9
+80106b29:	68 c9 00 00 00       	push   $0xc9
   jmp alltraps
-8010650e:	e9 5b f3 ff ff       	jmp    8010586e <alltraps>
+80106b2e:	e9 66 f3 ff ff       	jmp    80105e99 <alltraps>
 
-80106513 <vector202>:
+80106b33 <vector202>:
 .globl vector202
 vector202:
   pushl $0
-80106513:	6a 00                	push   $0x0
+80106b33:	6a 00                	push   $0x0
   pushl $202
-80106515:	68 ca 00 00 00       	push   $0xca
+80106b35:	68 ca 00 00 00       	push   $0xca
   jmp alltraps
-8010651a:	e9 4f f3 ff ff       	jmp    8010586e <alltraps>
+80106b3a:	e9 5a f3 ff ff       	jmp    80105e99 <alltraps>
 
-8010651f <vector203>:
+80106b3f <vector203>:
 .globl vector203
 vector203:
   pushl $0
-8010651f:	6a 00                	push   $0x0
+80106b3f:	6a 00                	push   $0x0
   pushl $203
-80106521:	68 cb 00 00 00       	push   $0xcb
+80106b41:	68 cb 00 00 00       	push   $0xcb
   jmp alltraps
-80106526:	e9 43 f3 ff ff       	jmp    8010586e <alltraps>
+80106b46:	e9 4e f3 ff ff       	jmp    80105e99 <alltraps>
 
-8010652b <vector204>:
+80106b4b <vector204>:
 .globl vector204
 vector204:
   pushl $0
-8010652b:	6a 00                	push   $0x0
+80106b4b:	6a 00                	push   $0x0
   pushl $204
-8010652d:	68 cc 00 00 00       	push   $0xcc
+80106b4d:	68 cc 00 00 00       	push   $0xcc
   jmp alltraps
-80106532:	e9 37 f3 ff ff       	jmp    8010586e <alltraps>
+80106b52:	e9 42 f3 ff ff       	jmp    80105e99 <alltraps>
 
-80106537 <vector205>:
+80106b57 <vector205>:
 .globl vector205
 vector205:
   pushl $0
-80106537:	6a 00                	push   $0x0
+80106b57:	6a 00                	push   $0x0
   pushl $205
-80106539:	68 cd 00 00 00       	push   $0xcd
+80106b59:	68 cd 00 00 00       	push   $0xcd
   jmp alltraps
-8010653e:	e9 2b f3 ff ff       	jmp    8010586e <alltraps>
+80106b5e:	e9 36 f3 ff ff       	jmp    80105e99 <alltraps>
 
-80106543 <vector206>:
+80106b63 <vector206>:
 .globl vector206
 vector206:
   pushl $0
-80106543:	6a 00                	push   $0x0
+80106b63:	6a 00                	push   $0x0
   pushl $206
-80106545:	68 ce 00 00 00       	push   $0xce
+80106b65:	68 ce 00 00 00       	push   $0xce
   jmp alltraps
-8010654a:	e9 1f f3 ff ff       	jmp    8010586e <alltraps>
+80106b6a:	e9 2a f3 ff ff       	jmp    80105e99 <alltraps>
 
-8010654f <vector207>:
+80106b6f <vector207>:
 .globl vector207
 vector207:
   pushl $0
-8010654f:	6a 00                	push   $0x0
+80106b6f:	6a 00                	push   $0x0
   pushl $207
-80106551:	68 cf 00 00 00       	push   $0xcf
+80106b71:	68 cf 00 00 00       	push   $0xcf
   jmp alltraps
-80106556:	e9 13 f3 ff ff       	jmp    8010586e <alltraps>
+80106b76:	e9 1e f3 ff ff       	jmp    80105e99 <alltraps>
 
-8010655b <vector208>:
+80106b7b <vector208>:
 .globl vector208
 vector208:
   pushl $0
-8010655b:	6a 00                	push   $0x0
+80106b7b:	6a 00                	push   $0x0
   pushl $208
-8010655d:	68 d0 00 00 00       	push   $0xd0
+80106b7d:	68 d0 00 00 00       	push   $0xd0
   jmp alltraps
-80106562:	e9 07 f3 ff ff       	jmp    8010586e <alltraps>
+80106b82:	e9 12 f3 ff ff       	jmp    80105e99 <alltraps>
 
-80106567 <vector209>:
+80106b87 <vector209>:
 .globl vector209
 vector209:
   pushl $0
-80106567:	6a 00                	push   $0x0
+80106b87:	6a 00                	push   $0x0
   pushl $209
-80106569:	68 d1 00 00 00       	push   $0xd1
+80106b89:	68 d1 00 00 00       	push   $0xd1
   jmp alltraps
-8010656e:	e9 fb f2 ff ff       	jmp    8010586e <alltraps>
+80106b8e:	e9 06 f3 ff ff       	jmp    80105e99 <alltraps>
 
-80106573 <vector210>:
+80106b93 <vector210>:
 .globl vector210
 vector210:
   pushl $0
-80106573:	6a 00                	push   $0x0
+80106b93:	6a 00                	push   $0x0
   pushl $210
-80106575:	68 d2 00 00 00       	push   $0xd2
+80106b95:	68 d2 00 00 00       	push   $0xd2
   jmp alltraps
-8010657a:	e9 ef f2 ff ff       	jmp    8010586e <alltraps>
+80106b9a:	e9 fa f2 ff ff       	jmp    80105e99 <alltraps>
 
-8010657f <vector211>:
+80106b9f <vector211>:
 .globl vector211
 vector211:
   pushl $0
-8010657f:	6a 00                	push   $0x0
+80106b9f:	6a 00                	push   $0x0
   pushl $211
-80106581:	68 d3 00 00 00       	push   $0xd3
+80106ba1:	68 d3 00 00 00       	push   $0xd3
   jmp alltraps
-80106586:	e9 e3 f2 ff ff       	jmp    8010586e <alltraps>
+80106ba6:	e9 ee f2 ff ff       	jmp    80105e99 <alltraps>
 
-8010658b <vector212>:
+80106bab <vector212>:
 .globl vector212
 vector212:
   pushl $0
-8010658b:	6a 00                	push   $0x0
+80106bab:	6a 00                	push   $0x0
   pushl $212
-8010658d:	68 d4 00 00 00       	push   $0xd4
+80106bad:	68 d4 00 00 00       	push   $0xd4
   jmp alltraps
-80106592:	e9 d7 f2 ff ff       	jmp    8010586e <alltraps>
+80106bb2:	e9 e2 f2 ff ff       	jmp    80105e99 <alltraps>
 
-80106597 <vector213>:
+80106bb7 <vector213>:
 .globl vector213
 vector213:
   pushl $0
-80106597:	6a 00                	push   $0x0
+80106bb7:	6a 00                	push   $0x0
   pushl $213
-80106599:	68 d5 00 00 00       	push   $0xd5
+80106bb9:	68 d5 00 00 00       	push   $0xd5
   jmp alltraps
-8010659e:	e9 cb f2 ff ff       	jmp    8010586e <alltraps>
+80106bbe:	e9 d6 f2 ff ff       	jmp    80105e99 <alltraps>
 
-801065a3 <vector214>:
+80106bc3 <vector214>:
 .globl vector214
 vector214:
   pushl $0
-801065a3:	6a 00                	push   $0x0
+80106bc3:	6a 00                	push   $0x0
   pushl $214
-801065a5:	68 d6 00 00 00       	push   $0xd6
+80106bc5:	68 d6 00 00 00       	push   $0xd6
   jmp alltraps
-801065aa:	e9 bf f2 ff ff       	jmp    8010586e <alltraps>
+80106bca:	e9 ca f2 ff ff       	jmp    80105e99 <alltraps>
 
-801065af <vector215>:
+80106bcf <vector215>:
 .globl vector215
 vector215:
   pushl $0
-801065af:	6a 00                	push   $0x0
+80106bcf:	6a 00                	push   $0x0
   pushl $215
-801065b1:	68 d7 00 00 00       	push   $0xd7
+80106bd1:	68 d7 00 00 00       	push   $0xd7
   jmp alltraps
-801065b6:	e9 b3 f2 ff ff       	jmp    8010586e <alltraps>
+80106bd6:	e9 be f2 ff ff       	jmp    80105e99 <alltraps>
 
-801065bb <vector216>:
+80106bdb <vector216>:
 .globl vector216
 vector216:
   pushl $0
-801065bb:	6a 00                	push   $0x0
+80106bdb:	6a 00                	push   $0x0
   pushl $216
-801065bd:	68 d8 00 00 00       	push   $0xd8
+80106bdd:	68 d8 00 00 00       	push   $0xd8
   jmp alltraps
-801065c2:	e9 a7 f2 ff ff       	jmp    8010586e <alltraps>
+80106be2:	e9 b2 f2 ff ff       	jmp    80105e99 <alltraps>
 
-801065c7 <vector217>:
+80106be7 <vector217>:
 .globl vector217
 vector217:
   pushl $0
-801065c7:	6a 00                	push   $0x0
+80106be7:	6a 00                	push   $0x0
   pushl $217
-801065c9:	68 d9 00 00 00       	push   $0xd9
+80106be9:	68 d9 00 00 00       	push   $0xd9
   jmp alltraps
-801065ce:	e9 9b f2 ff ff       	jmp    8010586e <alltraps>
+80106bee:	e9 a6 f2 ff ff       	jmp    80105e99 <alltraps>
 
-801065d3 <vector218>:
+80106bf3 <vector218>:
 .globl vector218
 vector218:
   pushl $0
-801065d3:	6a 00                	push   $0x0
+80106bf3:	6a 00                	push   $0x0
   pushl $218
-801065d5:	68 da 00 00 00       	push   $0xda
+80106bf5:	68 da 00 00 00       	push   $0xda
   jmp alltraps
-801065da:	e9 8f f2 ff ff       	jmp    8010586e <alltraps>
+80106bfa:	e9 9a f2 ff ff       	jmp    80105e99 <alltraps>
 
-801065df <vector219>:
+80106bff <vector219>:
 .globl vector219
 vector219:
   pushl $0
-801065df:	6a 00                	push   $0x0
+80106bff:	6a 00                	push   $0x0
   pushl $219
-801065e1:	68 db 00 00 00       	push   $0xdb
+80106c01:	68 db 00 00 00       	push   $0xdb
   jmp alltraps
-801065e6:	e9 83 f2 ff ff       	jmp    8010586e <alltraps>
+80106c06:	e9 8e f2 ff ff       	jmp    80105e99 <alltraps>
 
-801065eb <vector220>:
+80106c0b <vector220>:
 .globl vector220
 vector220:
   pushl $0
-801065eb:	6a 00                	push   $0x0
+80106c0b:	6a 00                	push   $0x0
   pushl $220
-801065ed:	68 dc 00 00 00       	push   $0xdc
+80106c0d:	68 dc 00 00 00       	push   $0xdc
   jmp alltraps
-801065f2:	e9 77 f2 ff ff       	jmp    8010586e <alltraps>
+80106c12:	e9 82 f2 ff ff       	jmp    80105e99 <alltraps>
 
-801065f7 <vector221>:
+80106c17 <vector221>:
 .globl vector221
 vector221:
   pushl $0
-801065f7:	6a 00                	push   $0x0
+80106c17:	6a 00                	push   $0x0
   pushl $221
-801065f9:	68 dd 00 00 00       	push   $0xdd
+80106c19:	68 dd 00 00 00       	push   $0xdd
   jmp alltraps
-801065fe:	e9 6b f2 ff ff       	jmp    8010586e <alltraps>
+80106c1e:	e9 76 f2 ff ff       	jmp    80105e99 <alltraps>
 
-80106603 <vector222>:
+80106c23 <vector222>:
 .globl vector222
 vector222:
   pushl $0
-80106603:	6a 00                	push   $0x0
+80106c23:	6a 00                	push   $0x0
   pushl $222
-80106605:	68 de 00 00 00       	push   $0xde
+80106c25:	68 de 00 00 00       	push   $0xde
   jmp alltraps
-8010660a:	e9 5f f2 ff ff       	jmp    8010586e <alltraps>
+80106c2a:	e9 6a f2 ff ff       	jmp    80105e99 <alltraps>
 
-8010660f <vector223>:
+80106c2f <vector223>:
 .globl vector223
 vector223:
   pushl $0
-8010660f:	6a 00                	push   $0x0
+80106c2f:	6a 00                	push   $0x0
   pushl $223
-80106611:	68 df 00 00 00       	push   $0xdf
+80106c31:	68 df 00 00 00       	push   $0xdf
   jmp alltraps
-80106616:	e9 53 f2 ff ff       	jmp    8010586e <alltraps>
+80106c36:	e9 5e f2 ff ff       	jmp    80105e99 <alltraps>
 
-8010661b <vector224>:
+80106c3b <vector224>:
 .globl vector224
 vector224:
   pushl $0
-8010661b:	6a 00                	push   $0x0
+80106c3b:	6a 00                	push   $0x0
   pushl $224
-8010661d:	68 e0 00 00 00       	push   $0xe0
+80106c3d:	68 e0 00 00 00       	push   $0xe0
   jmp alltraps
-80106622:	e9 47 f2 ff ff       	jmp    8010586e <alltraps>
+80106c42:	e9 52 f2 ff ff       	jmp    80105e99 <alltraps>
 
-80106627 <vector225>:
+80106c47 <vector225>:
 .globl vector225
 vector225:
   pushl $0
-80106627:	6a 00                	push   $0x0
+80106c47:	6a 00                	push   $0x0
   pushl $225
-80106629:	68 e1 00 00 00       	push   $0xe1
+80106c49:	68 e1 00 00 00       	push   $0xe1
   jmp alltraps
-8010662e:	e9 3b f2 ff ff       	jmp    8010586e <alltraps>
+80106c4e:	e9 46 f2 ff ff       	jmp    80105e99 <alltraps>
 
-80106633 <vector226>:
+80106c53 <vector226>:
 .globl vector226
 vector226:
   pushl $0
-80106633:	6a 00                	push   $0x0
+80106c53:	6a 00                	push   $0x0
   pushl $226
-80106635:	68 e2 00 00 00       	push   $0xe2
+80106c55:	68 e2 00 00 00       	push   $0xe2
   jmp alltraps
-8010663a:	e9 2f f2 ff ff       	jmp    8010586e <alltraps>
+80106c5a:	e9 3a f2 ff ff       	jmp    80105e99 <alltraps>
 
-8010663f <vector227>:
+80106c5f <vector227>:
 .globl vector227
 vector227:
   pushl $0
-8010663f:	6a 00                	push   $0x0
+80106c5f:	6a 00                	push   $0x0
   pushl $227
-80106641:	68 e3 00 00 00       	push   $0xe3
+80106c61:	68 e3 00 00 00       	push   $0xe3
   jmp alltraps
-80106646:	e9 23 f2 ff ff       	jmp    8010586e <alltraps>
+80106c66:	e9 2e f2 ff ff       	jmp    80105e99 <alltraps>
 
-8010664b <vector228>:
+80106c6b <vector228>:
 .globl vector228
 vector228:
   pushl $0
-8010664b:	6a 00                	push   $0x0
+80106c6b:	6a 00                	push   $0x0
   pushl $228
-8010664d:	68 e4 00 00 00       	push   $0xe4
+80106c6d:	68 e4 00 00 00       	push   $0xe4
   jmp alltraps
-80106652:	e9 17 f2 ff ff       	jmp    8010586e <alltraps>
+80106c72:	e9 22 f2 ff ff       	jmp    80105e99 <alltraps>
 
-80106657 <vector229>:
+80106c77 <vector229>:
 .globl vector229
 vector229:
   pushl $0
-80106657:	6a 00                	push   $0x0
+80106c77:	6a 00                	push   $0x0
   pushl $229
-80106659:	68 e5 00 00 00       	push   $0xe5
+80106c79:	68 e5 00 00 00       	push   $0xe5
   jmp alltraps
-8010665e:	e9 0b f2 ff ff       	jmp    8010586e <alltraps>
+80106c7e:	e9 16 f2 ff ff       	jmp    80105e99 <alltraps>
 
-80106663 <vector230>:
+80106c83 <vector230>:
 .globl vector230
 vector230:
   pushl $0
-80106663:	6a 00                	push   $0x0
+80106c83:	6a 00                	push   $0x0
   pushl $230
-80106665:	68 e6 00 00 00       	push   $0xe6
+80106c85:	68 e6 00 00 00       	push   $0xe6
   jmp alltraps
-8010666a:	e9 ff f1 ff ff       	jmp    8010586e <alltraps>
+80106c8a:	e9 0a f2 ff ff       	jmp    80105e99 <alltraps>
 
-8010666f <vector231>:
+80106c8f <vector231>:
 .globl vector231
 vector231:
   pushl $0
-8010666f:	6a 00                	push   $0x0
+80106c8f:	6a 00                	push   $0x0
   pushl $231
-80106671:	68 e7 00 00 00       	push   $0xe7
+80106c91:	68 e7 00 00 00       	push   $0xe7
   jmp alltraps
-80106676:	e9 f3 f1 ff ff       	jmp    8010586e <alltraps>
+80106c96:	e9 fe f1 ff ff       	jmp    80105e99 <alltraps>
 
-8010667b <vector232>:
+80106c9b <vector232>:
 .globl vector232
 vector232:
   pushl $0
-8010667b:	6a 00                	push   $0x0
+80106c9b:	6a 00                	push   $0x0
   pushl $232
-8010667d:	68 e8 00 00 00       	push   $0xe8
+80106c9d:	68 e8 00 00 00       	push   $0xe8
   jmp alltraps
-80106682:	e9 e7 f1 ff ff       	jmp    8010586e <alltraps>
+80106ca2:	e9 f2 f1 ff ff       	jmp    80105e99 <alltraps>
 
-80106687 <vector233>:
+80106ca7 <vector233>:
 .globl vector233
 vector233:
   pushl $0
-80106687:	6a 00                	push   $0x0
+80106ca7:	6a 00                	push   $0x0
   pushl $233
-80106689:	68 e9 00 00 00       	push   $0xe9
+80106ca9:	68 e9 00 00 00       	push   $0xe9
   jmp alltraps
-8010668e:	e9 db f1 ff ff       	jmp    8010586e <alltraps>
+80106cae:	e9 e6 f1 ff ff       	jmp    80105e99 <alltraps>
 
-80106693 <vector234>:
+80106cb3 <vector234>:
 .globl vector234
 vector234:
   pushl $0
-80106693:	6a 00                	push   $0x0
+80106cb3:	6a 00                	push   $0x0
   pushl $234
-80106695:	68 ea 00 00 00       	push   $0xea
+80106cb5:	68 ea 00 00 00       	push   $0xea
   jmp alltraps
-8010669a:	e9 cf f1 ff ff       	jmp    8010586e <alltraps>
+80106cba:	e9 da f1 ff ff       	jmp    80105e99 <alltraps>
 
-8010669f <vector235>:
+80106cbf <vector235>:
 .globl vector235
 vector235:
   pushl $0
-8010669f:	6a 00                	push   $0x0
+80106cbf:	6a 00                	push   $0x0
   pushl $235
-801066a1:	68 eb 00 00 00       	push   $0xeb
+80106cc1:	68 eb 00 00 00       	push   $0xeb
   jmp alltraps
-801066a6:	e9 c3 f1 ff ff       	jmp    8010586e <alltraps>
+80106cc6:	e9 ce f1 ff ff       	jmp    80105e99 <alltraps>
 
-801066ab <vector236>:
+80106ccb <vector236>:
 .globl vector236
 vector236:
   pushl $0
-801066ab:	6a 00                	push   $0x0
+80106ccb:	6a 00                	push   $0x0
   pushl $236
-801066ad:	68 ec 00 00 00       	push   $0xec
+80106ccd:	68 ec 00 00 00       	push   $0xec
   jmp alltraps
-801066b2:	e9 b7 f1 ff ff       	jmp    8010586e <alltraps>
+80106cd2:	e9 c2 f1 ff ff       	jmp    80105e99 <alltraps>
 
-801066b7 <vector237>:
+80106cd7 <vector237>:
 .globl vector237
 vector237:
   pushl $0
-801066b7:	6a 00                	push   $0x0
+80106cd7:	6a 00                	push   $0x0
   pushl $237
-801066b9:	68 ed 00 00 00       	push   $0xed
+80106cd9:	68 ed 00 00 00       	push   $0xed
   jmp alltraps
-801066be:	e9 ab f1 ff ff       	jmp    8010586e <alltraps>
+80106cde:	e9 b6 f1 ff ff       	jmp    80105e99 <alltraps>
 
-801066c3 <vector238>:
+80106ce3 <vector238>:
 .globl vector238
 vector238:
   pushl $0
-801066c3:	6a 00                	push   $0x0
+80106ce3:	6a 00                	push   $0x0
   pushl $238
-801066c5:	68 ee 00 00 00       	push   $0xee
+80106ce5:	68 ee 00 00 00       	push   $0xee
   jmp alltraps
-801066ca:	e9 9f f1 ff ff       	jmp    8010586e <alltraps>
+80106cea:	e9 aa f1 ff ff       	jmp    80105e99 <alltraps>
 
-801066cf <vector239>:
+80106cef <vector239>:
 .globl vector239
 vector239:
   pushl $0
-801066cf:	6a 00                	push   $0x0
+80106cef:	6a 00                	push   $0x0
   pushl $239
-801066d1:	68 ef 00 00 00       	push   $0xef
+80106cf1:	68 ef 00 00 00       	push   $0xef
   jmp alltraps
-801066d6:	e9 93 f1 ff ff       	jmp    8010586e <alltraps>
+80106cf6:	e9 9e f1 ff ff       	jmp    80105e99 <alltraps>
 
-801066db <vector240>:
+80106cfb <vector240>:
 .globl vector240
 vector240:
   pushl $0
-801066db:	6a 00                	push   $0x0
+80106cfb:	6a 00                	push   $0x0
   pushl $240
-801066dd:	68 f0 00 00 00       	push   $0xf0
+80106cfd:	68 f0 00 00 00       	push   $0xf0
   jmp alltraps
-801066e2:	e9 87 f1 ff ff       	jmp    8010586e <alltraps>
+80106d02:	e9 92 f1 ff ff       	jmp    80105e99 <alltraps>
 
-801066e7 <vector241>:
+80106d07 <vector241>:
 .globl vector241
 vector241:
   pushl $0
-801066e7:	6a 00                	push   $0x0
+80106d07:	6a 00                	push   $0x0
   pushl $241
-801066e9:	68 f1 00 00 00       	push   $0xf1
+80106d09:	68 f1 00 00 00       	push   $0xf1
   jmp alltraps
-801066ee:	e9 7b f1 ff ff       	jmp    8010586e <alltraps>
+80106d0e:	e9 86 f1 ff ff       	jmp    80105e99 <alltraps>
 
-801066f3 <vector242>:
+80106d13 <vector242>:
 .globl vector242
 vector242:
   pushl $0
-801066f3:	6a 00                	push   $0x0
+80106d13:	6a 00                	push   $0x0
   pushl $242
-801066f5:	68 f2 00 00 00       	push   $0xf2
+80106d15:	68 f2 00 00 00       	push   $0xf2
   jmp alltraps
-801066fa:	e9 6f f1 ff ff       	jmp    8010586e <alltraps>
+80106d1a:	e9 7a f1 ff ff       	jmp    80105e99 <alltraps>
 
-801066ff <vector243>:
+80106d1f <vector243>:
 .globl vector243
 vector243:
   pushl $0
-801066ff:	6a 00                	push   $0x0
+80106d1f:	6a 00                	push   $0x0
   pushl $243
-80106701:	68 f3 00 00 00       	push   $0xf3
+80106d21:	68 f3 00 00 00       	push   $0xf3
   jmp alltraps
-80106706:	e9 63 f1 ff ff       	jmp    8010586e <alltraps>
+80106d26:	e9 6e f1 ff ff       	jmp    80105e99 <alltraps>
 
-8010670b <vector244>:
+80106d2b <vector244>:
 .globl vector244
 vector244:
   pushl $0
-8010670b:	6a 00                	push   $0x0
+80106d2b:	6a 00                	push   $0x0
   pushl $244
-8010670d:	68 f4 00 00 00       	push   $0xf4
+80106d2d:	68 f4 00 00 00       	push   $0xf4
   jmp alltraps
-80106712:	e9 57 f1 ff ff       	jmp    8010586e <alltraps>
+80106d32:	e9 62 f1 ff ff       	jmp    80105e99 <alltraps>
 
-80106717 <vector245>:
+80106d37 <vector245>:
 .globl vector245
 vector245:
   pushl $0
-80106717:	6a 00                	push   $0x0
+80106d37:	6a 00                	push   $0x0
   pushl $245
-80106719:	68 f5 00 00 00       	push   $0xf5
+80106d39:	68 f5 00 00 00       	push   $0xf5
   jmp alltraps
-8010671e:	e9 4b f1 ff ff       	jmp    8010586e <alltraps>
+80106d3e:	e9 56 f1 ff ff       	jmp    80105e99 <alltraps>
 
-80106723 <vector246>:
+80106d43 <vector246>:
 .globl vector246
 vector246:
   pushl $0
-80106723:	6a 00                	push   $0x0
+80106d43:	6a 00                	push   $0x0
   pushl $246
-80106725:	68 f6 00 00 00       	push   $0xf6
+80106d45:	68 f6 00 00 00       	push   $0xf6
   jmp alltraps
-8010672a:	e9 3f f1 ff ff       	jmp    8010586e <alltraps>
+80106d4a:	e9 4a f1 ff ff       	jmp    80105e99 <alltraps>
 
-8010672f <vector247>:
+80106d4f <vector247>:
 .globl vector247
 vector247:
   pushl $0
-8010672f:	6a 00                	push   $0x0
+80106d4f:	6a 00                	push   $0x0
   pushl $247
-80106731:	68 f7 00 00 00       	push   $0xf7
+80106d51:	68 f7 00 00 00       	push   $0xf7
   jmp alltraps
-80106736:	e9 33 f1 ff ff       	jmp    8010586e <alltraps>
+80106d56:	e9 3e f1 ff ff       	jmp    80105e99 <alltraps>
 
-8010673b <vector248>:
+80106d5b <vector248>:
 .globl vector248
 vector248:
   pushl $0
-8010673b:	6a 00                	push   $0x0
+80106d5b:	6a 00                	push   $0x0
   pushl $248
-8010673d:	68 f8 00 00 00       	push   $0xf8
+80106d5d:	68 f8 00 00 00       	push   $0xf8
   jmp alltraps
-80106742:	e9 27 f1 ff ff       	jmp    8010586e <alltraps>
+80106d62:	e9 32 f1 ff ff       	jmp    80105e99 <alltraps>
 
-80106747 <vector249>:
+80106d67 <vector249>:
 .globl vector249
 vector249:
   pushl $0
-80106747:	6a 00                	push   $0x0
+80106d67:	6a 00                	push   $0x0
   pushl $249
-80106749:	68 f9 00 00 00       	push   $0xf9
+80106d69:	68 f9 00 00 00       	push   $0xf9
   jmp alltraps
-8010674e:	e9 1b f1 ff ff       	jmp    8010586e <alltraps>
+80106d6e:	e9 26 f1 ff ff       	jmp    80105e99 <alltraps>
 
-80106753 <vector250>:
+80106d73 <vector250>:
 .globl vector250
 vector250:
   pushl $0
-80106753:	6a 00                	push   $0x0
+80106d73:	6a 00                	push   $0x0
   pushl $250
-80106755:	68 fa 00 00 00       	push   $0xfa
+80106d75:	68 fa 00 00 00       	push   $0xfa
   jmp alltraps
-8010675a:	e9 0f f1 ff ff       	jmp    8010586e <alltraps>
+80106d7a:	e9 1a f1 ff ff       	jmp    80105e99 <alltraps>
 
-8010675f <vector251>:
+80106d7f <vector251>:
 .globl vector251
 vector251:
   pushl $0
-8010675f:	6a 00                	push   $0x0
+80106d7f:	6a 00                	push   $0x0
   pushl $251
-80106761:	68 fb 00 00 00       	push   $0xfb
+80106d81:	68 fb 00 00 00       	push   $0xfb
   jmp alltraps
-80106766:	e9 03 f1 ff ff       	jmp    8010586e <alltraps>
+80106d86:	e9 0e f1 ff ff       	jmp    80105e99 <alltraps>
 
-8010676b <vector252>:
+80106d8b <vector252>:
 .globl vector252
 vector252:
   pushl $0
-8010676b:	6a 00                	push   $0x0
+80106d8b:	6a 00                	push   $0x0
   pushl $252
-8010676d:	68 fc 00 00 00       	push   $0xfc
+80106d8d:	68 fc 00 00 00       	push   $0xfc
   jmp alltraps
-80106772:	e9 f7 f0 ff ff       	jmp    8010586e <alltraps>
+80106d92:	e9 02 f1 ff ff       	jmp    80105e99 <alltraps>
 
-80106777 <vector253>:
+80106d97 <vector253>:
 .globl vector253
 vector253:
   pushl $0
-80106777:	6a 00                	push   $0x0
+80106d97:	6a 00                	push   $0x0
   pushl $253
-80106779:	68 fd 00 00 00       	push   $0xfd
+80106d99:	68 fd 00 00 00       	push   $0xfd
   jmp alltraps
-8010677e:	e9 eb f0 ff ff       	jmp    8010586e <alltraps>
+80106d9e:	e9 f6 f0 ff ff       	jmp    80105e99 <alltraps>
 
-80106783 <vector254>:
+80106da3 <vector254>:
 .globl vector254
 vector254:
   pushl $0
-80106783:	6a 00                	push   $0x0
+80106da3:	6a 00                	push   $0x0
   pushl $254
-80106785:	68 fe 00 00 00       	push   $0xfe
+80106da5:	68 fe 00 00 00       	push   $0xfe
   jmp alltraps
-8010678a:	e9 df f0 ff ff       	jmp    8010586e <alltraps>
+80106daa:	e9 ea f0 ff ff       	jmp    80105e99 <alltraps>
 
-8010678f <vector255>:
+80106daf <vector255>:
 .globl vector255
 vector255:
   pushl $0
-8010678f:	6a 00                	push   $0x0
+80106daf:	6a 00                	push   $0x0
   pushl $255
-80106791:	68 ff 00 00 00       	push   $0xff
+80106db1:	68 ff 00 00 00       	push   $0xff
   jmp alltraps
-80106796:	e9 d3 f0 ff ff       	jmp    8010586e <alltraps>
-8010679b:	66 90                	xchg   %ax,%ax
-8010679d:	66 90                	xchg   %ax,%ax
-8010679f:	90                   	nop
+80106db6:	e9 de f0 ff ff       	jmp    80105e99 <alltraps>
+80106dbb:	66 90                	xchg   %ax,%ax
+80106dbd:	66 90                	xchg   %ax,%ax
+80106dbf:	90                   	nop
 
-801067a0 <walkpgdir>:
+80106dc0 <walkpgdir>:
 // Return the address of the PTE in page table pgdir
 // that corresponds to virtual address va.  If alloc!=0,
 // create any required page table pages.
 static pte_t *
 walkpgdir(pde_t *pgdir, const void *va, int alloc)
 {
-801067a0:	55                   	push   %ebp
-801067a1:	89 e5                	mov    %esp,%ebp
-801067a3:	57                   	push   %edi
-801067a4:	56                   	push   %esi
-801067a5:	89 d6                	mov    %edx,%esi
+80106dc0:	55                   	push   %ebp
+80106dc1:	89 e5                	mov    %esp,%ebp
+80106dc3:	57                   	push   %edi
+80106dc4:	56                   	push   %esi
+80106dc5:	89 d6                	mov    %edx,%esi
   pde_t *pde;
   pte_t *pgtab;
 
   pde = &pgdir[PDX(va)];
-801067a7:	c1 ea 16             	shr    $0x16,%edx
+80106dc7:	c1 ea 16             	shr    $0x16,%edx
 {
-801067aa:	53                   	push   %ebx
+80106dca:	53                   	push   %ebx
   pde = &pgdir[PDX(va)];
-801067ab:	8d 3c 90             	lea    (%eax,%edx,4),%edi
+80106dcb:	8d 3c 90             	lea    (%eax,%edx,4),%edi
 {
-801067ae:	83 ec 0c             	sub    $0xc,%esp
+80106dce:	83 ec 0c             	sub    $0xc,%esp
   if(*pde & PTE_P){
-801067b1:	8b 1f                	mov    (%edi),%ebx
-801067b3:	f6 c3 01             	test   $0x1,%bl
-801067b6:	74 28                	je     801067e0 <walkpgdir+0x40>
+80106dd1:	8b 1f                	mov    (%edi),%ebx
+80106dd3:	f6 c3 01             	test   $0x1,%bl
+80106dd6:	74 28                	je     80106e00 <walkpgdir+0x40>
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-801067b8:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-801067be:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
+80106dd8:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+80106dde:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
     // The permissions here are overly generous, but they can
     // be further restricted by the permissions in the page table
     // entries, if necessary.
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
   }
   return &pgtab[PTX(va)];
-801067c4:	89 f0                	mov    %esi,%eax
+80106de4:	89 f0                	mov    %esi,%eax
 }
-801067c6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106de6:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return &pgtab[PTX(va)];
-801067c9:	c1 e8 0a             	shr    $0xa,%eax
-801067cc:	25 fc 0f 00 00       	and    $0xffc,%eax
-801067d1:	01 d8                	add    %ebx,%eax
-}
-801067d3:	5b                   	pop    %ebx
-801067d4:	5e                   	pop    %esi
-801067d5:	5f                   	pop    %edi
-801067d6:	5d                   	pop    %ebp
-801067d7:	c3                   	ret    
-801067d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801067df:	90                   	nop
+80106de9:	c1 e8 0a             	shr    $0xa,%eax
+80106dec:	25 fc 0f 00 00       	and    $0xffc,%eax
+80106df1:	01 d8                	add    %ebx,%eax
+}
+80106df3:	5b                   	pop    %ebx
+80106df4:	5e                   	pop    %esi
+80106df5:	5f                   	pop    %edi
+80106df6:	5d                   	pop    %ebp
+80106df7:	c3                   	ret    
+80106df8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106dff:	90                   	nop
     if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
-801067e0:	85 c9                	test   %ecx,%ecx
-801067e2:	74 2c                	je     80106810 <walkpgdir+0x70>
-801067e4:	e8 47 be ff ff       	call   80102630 <kalloc>
-801067e9:	89 c3                	mov    %eax,%ebx
-801067eb:	85 c0                	test   %eax,%eax
-801067ed:	74 21                	je     80106810 <walkpgdir+0x70>
+80106e00:	85 c9                	test   %ecx,%ecx
+80106e02:	74 2c                	je     80106e30 <walkpgdir+0x70>
+80106e04:	e8 27 b8 ff ff       	call   80102630 <kalloc>
+80106e09:	89 c3                	mov    %eax,%ebx
+80106e0b:	85 c0                	test   %eax,%eax
+80106e0d:	74 21                	je     80106e30 <walkpgdir+0x70>
     memset(pgtab, 0, PGSIZE);
-801067ef:	83 ec 04             	sub    $0x4,%esp
-801067f2:	68 00 10 00 00       	push   $0x1000
-801067f7:	6a 00                	push   $0x0
-801067f9:	50                   	push   %eax
-801067fa:	e8 71 de ff ff       	call   80104670 <memset>
+80106e0f:	83 ec 04             	sub    $0x4,%esp
+80106e12:	68 00 10 00 00       	push   $0x1000
+80106e17:	6a 00                	push   $0x0
+80106e19:	50                   	push   %eax
+80106e1a:	e8 d1 dd ff ff       	call   80104bf0 <memset>
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-801067ff:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106805:	83 c4 10             	add    $0x10,%esp
-80106808:	83 c8 07             	or     $0x7,%eax
-8010680b:	89 07                	mov    %eax,(%edi)
-8010680d:	eb b5                	jmp    801067c4 <walkpgdir+0x24>
-8010680f:	90                   	nop
+80106e1f:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106e25:	83 c4 10             	add    $0x10,%esp
+80106e28:	83 c8 07             	or     $0x7,%eax
+80106e2b:	89 07                	mov    %eax,(%edi)
+80106e2d:	eb b5                	jmp    80106de4 <walkpgdir+0x24>
+80106e2f:	90                   	nop
 }
-80106810:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106e30:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return 0;
-80106813:	31 c0                	xor    %eax,%eax
+80106e33:	31 c0                	xor    %eax,%eax
 }
-80106815:	5b                   	pop    %ebx
-80106816:	5e                   	pop    %esi
-80106817:	5f                   	pop    %edi
-80106818:	5d                   	pop    %ebp
-80106819:	c3                   	ret    
-8010681a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106e35:	5b                   	pop    %ebx
+80106e36:	5e                   	pop    %esi
+80106e37:	5f                   	pop    %edi
+80106e38:	5d                   	pop    %ebp
+80106e39:	c3                   	ret    
+80106e3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80106820 <mappages>:
+80106e40 <mappages>:
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned.
 static int
 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
 {
-80106820:	55                   	push   %ebp
-80106821:	89 e5                	mov    %esp,%ebp
-80106823:	57                   	push   %edi
-80106824:	89 c7                	mov    %eax,%edi
+80106e40:	55                   	push   %ebp
+80106e41:	89 e5                	mov    %esp,%ebp
+80106e43:	57                   	push   %edi
+80106e44:	89 c7                	mov    %eax,%edi
   char *a, *last;
   pte_t *pte;
 
   a = (char*)PGROUNDDOWN((uint)va);
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-80106826:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
+80106e46:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
 {
-8010682a:	56                   	push   %esi
+80106e4a:	56                   	push   %esi
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-8010682b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106e4b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   a = (char*)PGROUNDDOWN((uint)va);
-80106830:	89 d6                	mov    %edx,%esi
+80106e50:	89 d6                	mov    %edx,%esi
 {
-80106832:	53                   	push   %ebx
+80106e52:	53                   	push   %ebx
   a = (char*)PGROUNDDOWN((uint)va);
-80106833:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+80106e53:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
 {
-80106839:	83 ec 1c             	sub    $0x1c,%esp
+80106e59:	83 ec 1c             	sub    $0x1c,%esp
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-8010683c:	89 45 e0             	mov    %eax,-0x20(%ebp)
-8010683f:	8b 45 08             	mov    0x8(%ebp),%eax
-80106842:	29 f0                	sub    %esi,%eax
-80106844:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106847:	eb 1f                	jmp    80106868 <mappages+0x48>
-80106849:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106e5c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106e5f:	8b 45 08             	mov    0x8(%ebp),%eax
+80106e62:	29 f0                	sub    %esi,%eax
+80106e64:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106e67:	eb 1f                	jmp    80106e88 <mappages+0x48>
+80106e69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(;;){
     if((pte = walkpgdir(pgdir, a, 1)) == 0)
       return -1;
     if(*pte & PTE_P)
-80106850:	f6 00 01             	testb  $0x1,(%eax)
-80106853:	75 45                	jne    8010689a <mappages+0x7a>
+80106e70:	f6 00 01             	testb  $0x1,(%eax)
+80106e73:	75 45                	jne    80106eba <mappages+0x7a>
       panic("remap");
     *pte = pa | perm | PTE_P;
-80106855:	0b 5d 0c             	or     0xc(%ebp),%ebx
-80106858:	83 cb 01             	or     $0x1,%ebx
-8010685b:	89 18                	mov    %ebx,(%eax)
+80106e75:	0b 5d 0c             	or     0xc(%ebp),%ebx
+80106e78:	83 cb 01             	or     $0x1,%ebx
+80106e7b:	89 18                	mov    %ebx,(%eax)
     if(a == last)
-8010685d:	3b 75 e0             	cmp    -0x20(%ebp),%esi
-80106860:	74 2e                	je     80106890 <mappages+0x70>
+80106e7d:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+80106e80:	74 2e                	je     80106eb0 <mappages+0x70>
       break;
     a += PGSIZE;
-80106862:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80106e82:	81 c6 00 10 00 00    	add    $0x1000,%esi
   for(;;){
-80106868:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106e88:	8b 45 e4             	mov    -0x1c(%ebp),%eax
     if((pte = walkpgdir(pgdir, a, 1)) == 0)
-8010686b:	b9 01 00 00 00       	mov    $0x1,%ecx
-80106870:	89 f2                	mov    %esi,%edx
-80106872:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
-80106875:	89 f8                	mov    %edi,%eax
-80106877:	e8 24 ff ff ff       	call   801067a0 <walkpgdir>
-8010687c:	85 c0                	test   %eax,%eax
-8010687e:	75 d0                	jne    80106850 <mappages+0x30>
+80106e8b:	b9 01 00 00 00       	mov    $0x1,%ecx
+80106e90:	89 f2                	mov    %esi,%edx
+80106e92:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
+80106e95:	89 f8                	mov    %edi,%eax
+80106e97:	e8 24 ff ff ff       	call   80106dc0 <walkpgdir>
+80106e9c:	85 c0                	test   %eax,%eax
+80106e9e:	75 d0                	jne    80106e70 <mappages+0x30>
     pa += PGSIZE;
   }
   return 0;
 }
-80106880:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106ea0:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-80106883:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106ea3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80106888:	5b                   	pop    %ebx
-80106889:	5e                   	pop    %esi
-8010688a:	5f                   	pop    %edi
-8010688b:	5d                   	pop    %ebp
-8010688c:	c3                   	ret    
-8010688d:	8d 76 00             	lea    0x0(%esi),%esi
-80106890:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106ea8:	5b                   	pop    %ebx
+80106ea9:	5e                   	pop    %esi
+80106eaa:	5f                   	pop    %edi
+80106eab:	5d                   	pop    %ebp
+80106eac:	c3                   	ret    
+80106ead:	8d 76 00             	lea    0x0(%esi),%esi
+80106eb0:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80106893:	31 c0                	xor    %eax,%eax
+80106eb3:	31 c0                	xor    %eax,%eax
 }
-80106895:	5b                   	pop    %ebx
-80106896:	5e                   	pop    %esi
-80106897:	5f                   	pop    %edi
-80106898:	5d                   	pop    %ebp
-80106899:	c3                   	ret    
+80106eb5:	5b                   	pop    %ebx
+80106eb6:	5e                   	pop    %esi
+80106eb7:	5f                   	pop    %edi
+80106eb8:	5d                   	pop    %ebp
+80106eb9:	c3                   	ret    
       panic("remap");
-8010689a:	83 ec 0c             	sub    $0xc,%esp
-8010689d:	68 88 79 10 80       	push   $0x80107988
-801068a2:	e8 e9 9a ff ff       	call   80100390 <panic>
-801068a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801068ae:	66 90                	xchg   %ax,%ax
+80106eba:	83 ec 0c             	sub    $0xc,%esp
+80106ebd:	68 bc 7f 10 80       	push   $0x80107fbc
+80106ec2:	e8 c9 94 ff ff       	call   80100390 <panic>
+80106ec7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106ece:	66 90                	xchg   %ax,%ax
 
-801068b0 <deallocuvm.part.0>:
+80106ed0 <deallocuvm.part.0>:
 // Deallocate user pages to bring the process size from oldsz to
 // newsz.  oldsz and newsz need not be page-aligned, nor does newsz
 // need to be less than oldsz.  oldsz can be larger than the actual
 // process size.  Returns the new process size.
 int
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-801068b0:	55                   	push   %ebp
-801068b1:	89 e5                	mov    %esp,%ebp
-801068b3:	57                   	push   %edi
-801068b4:	56                   	push   %esi
-801068b5:	89 c6                	mov    %eax,%esi
-801068b7:	53                   	push   %ebx
-801068b8:	89 d3                	mov    %edx,%ebx
+80106ed0:	55                   	push   %ebp
+80106ed1:	89 e5                	mov    %esp,%ebp
+80106ed3:	57                   	push   %edi
+80106ed4:	56                   	push   %esi
+80106ed5:	89 c6                	mov    %eax,%esi
+80106ed7:	53                   	push   %ebx
+80106ed8:	89 d3                	mov    %edx,%ebx
   uint a, pa;
 
   if(newsz >= oldsz)
     return oldsz;
 
   a = PGROUNDUP(newsz);
-801068ba:	8d 91 ff 0f 00 00    	lea    0xfff(%ecx),%edx
-801068c0:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+80106eda:	8d 91 ff 0f 00 00    	lea    0xfff(%ecx),%edx
+80106ee0:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-801068c6:	83 ec 1c             	sub    $0x1c,%esp
-801068c9:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+80106ee6:	83 ec 1c             	sub    $0x1c,%esp
+80106ee9:	89 4d e0             	mov    %ecx,-0x20(%ebp)
   for(; a  < oldsz; a += PGSIZE){
-801068cc:	39 da                	cmp    %ebx,%edx
-801068ce:	73 5b                	jae    8010692b <deallocuvm.part.0+0x7b>
-801068d0:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
-801068d3:	89 d7                	mov    %edx,%edi
-801068d5:	eb 14                	jmp    801068eb <deallocuvm.part.0+0x3b>
-801068d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801068de:	66 90                	xchg   %ax,%ax
-801068e0:	81 c7 00 10 00 00    	add    $0x1000,%edi
-801068e6:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
-801068e9:	76 40                	jbe    8010692b <deallocuvm.part.0+0x7b>
+80106eec:	39 da                	cmp    %ebx,%edx
+80106eee:	73 5b                	jae    80106f4b <deallocuvm.part.0+0x7b>
+80106ef0:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+80106ef3:	89 d7                	mov    %edx,%edi
+80106ef5:	eb 14                	jmp    80106f0b <deallocuvm.part.0+0x3b>
+80106ef7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106efe:	66 90                	xchg   %ax,%ax
+80106f00:	81 c7 00 10 00 00    	add    $0x1000,%edi
+80106f06:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80106f09:	76 40                	jbe    80106f4b <deallocuvm.part.0+0x7b>
     pte = walkpgdir(pgdir, (char*)a, 0);
-801068eb:	31 c9                	xor    %ecx,%ecx
-801068ed:	89 fa                	mov    %edi,%edx
-801068ef:	89 f0                	mov    %esi,%eax
-801068f1:	e8 aa fe ff ff       	call   801067a0 <walkpgdir>
-801068f6:	89 c3                	mov    %eax,%ebx
+80106f0b:	31 c9                	xor    %ecx,%ecx
+80106f0d:	89 fa                	mov    %edi,%edx
+80106f0f:	89 f0                	mov    %esi,%eax
+80106f11:	e8 aa fe ff ff       	call   80106dc0 <walkpgdir>
+80106f16:	89 c3                	mov    %eax,%ebx
     if(!pte)
-801068f8:	85 c0                	test   %eax,%eax
-801068fa:	74 44                	je     80106940 <deallocuvm.part.0+0x90>
+80106f18:	85 c0                	test   %eax,%eax
+80106f1a:	74 44                	je     80106f60 <deallocuvm.part.0+0x90>
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
     else if((*pte & PTE_P) != 0){
-801068fc:	8b 00                	mov    (%eax),%eax
-801068fe:	a8 01                	test   $0x1,%al
-80106900:	74 de                	je     801068e0 <deallocuvm.part.0+0x30>
+80106f1c:	8b 00                	mov    (%eax),%eax
+80106f1e:	a8 01                	test   $0x1,%al
+80106f20:	74 de                	je     80106f00 <deallocuvm.part.0+0x30>
       pa = PTE_ADDR(*pte);
       if(pa == 0)
-80106902:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80106907:	74 47                	je     80106950 <deallocuvm.part.0+0xa0>
+80106f22:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106f27:	74 47                	je     80106f70 <deallocuvm.part.0+0xa0>
         panic("kfree");
       char *v = P2V(pa);
       kfree(v);
-80106909:	83 ec 0c             	sub    $0xc,%esp
+80106f29:	83 ec 0c             	sub    $0xc,%esp
       char *v = P2V(pa);
-8010690c:	05 00 00 00 80       	add    $0x80000000,%eax
-80106911:	81 c7 00 10 00 00    	add    $0x1000,%edi
+80106f2c:	05 00 00 00 80       	add    $0x80000000,%eax
+80106f31:	81 c7 00 10 00 00    	add    $0x1000,%edi
       kfree(v);
-80106917:	50                   	push   %eax
-80106918:	e8 53 bb ff ff       	call   80102470 <kfree>
+80106f37:	50                   	push   %eax
+80106f38:	e8 33 b5 ff ff       	call   80102470 <kfree>
       *pte = 0;
-8010691d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-80106923:	83 c4 10             	add    $0x10,%esp
+80106f3d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80106f43:	83 c4 10             	add    $0x10,%esp
   for(; a  < oldsz; a += PGSIZE){
-80106926:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
-80106929:	77 c0                	ja     801068eb <deallocuvm.part.0+0x3b>
+80106f46:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80106f49:	77 c0                	ja     80106f0b <deallocuvm.part.0+0x3b>
     }
   }
   return newsz;
 }
-8010692b:	8b 45 e0             	mov    -0x20(%ebp),%eax
-8010692e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106931:	5b                   	pop    %ebx
-80106932:	5e                   	pop    %esi
-80106933:	5f                   	pop    %edi
-80106934:	5d                   	pop    %ebp
-80106935:	c3                   	ret    
-80106936:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010693d:	8d 76 00             	lea    0x0(%esi),%esi
+80106f4b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106f4e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106f51:	5b                   	pop    %ebx
+80106f52:	5e                   	pop    %esi
+80106f53:	5f                   	pop    %edi
+80106f54:	5d                   	pop    %ebp
+80106f55:	c3                   	ret    
+80106f56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106f5d:	8d 76 00             	lea    0x0(%esi),%esi
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
-80106940:	89 fa                	mov    %edi,%edx
-80106942:	81 e2 00 00 c0 ff    	and    $0xffc00000,%edx
-80106948:	8d ba 00 00 40 00    	lea    0x400000(%edx),%edi
-8010694e:	eb 96                	jmp    801068e6 <deallocuvm.part.0+0x36>
+80106f60:	89 fa                	mov    %edi,%edx
+80106f62:	81 e2 00 00 c0 ff    	and    $0xffc00000,%edx
+80106f68:	8d ba 00 00 40 00    	lea    0x400000(%edx),%edi
+80106f6e:	eb 96                	jmp    80106f06 <deallocuvm.part.0+0x36>
         panic("kfree");
-80106950:	83 ec 0c             	sub    $0xc,%esp
-80106953:	68 46 73 10 80       	push   $0x80107346
-80106958:	e8 33 9a ff ff       	call   80100390 <panic>
-8010695d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80106960 <seginit>:
-{
-80106960:	f3 0f 1e fb          	endbr32 
-80106964:	55                   	push   %ebp
-80106965:	89 e5                	mov    %esp,%ebp
-80106967:	83 ec 18             	sub    $0x18,%esp
+80106f70:	83 ec 0c             	sub    $0xc,%esp
+80106f73:	68 66 79 10 80       	push   $0x80107966
+80106f78:	e8 13 94 ff ff       	call   80100390 <panic>
+80106f7d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80106f80 <seginit>:
+{
+80106f80:	f3 0f 1e fb          	endbr32 
+80106f84:	55                   	push   %ebp
+80106f85:	89 e5                	mov    %esp,%ebp
+80106f87:	83 ec 18             	sub    $0x18,%esp
   c = &cpus[cpuid()];
-8010696a:	e8 d1 cf ff ff       	call   80103940 <cpuid>
+80106f8a:	e8 b1 cc ff ff       	call   80103c40 <cpuid>
   pd[0] = size-1;
-8010696f:	ba 2f 00 00 00       	mov    $0x2f,%edx
-80106974:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
-8010697a:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
+80106f8f:	ba 2f 00 00 00       	mov    $0x2f,%edx
+80106f94:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
+80106f9a:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-8010697e:	c7 80 f8 27 11 80 ff 	movl   $0xffff,-0x7feed808(%eax)
-80106985:	ff 00 00 
-80106988:	c7 80 fc 27 11 80 00 	movl   $0xcf9a00,-0x7feed804(%eax)
-8010698f:	9a cf 00 
+80106f9e:	c7 80 f8 37 11 80 ff 	movl   $0xffff,-0x7feec808(%eax)
+80106fa5:	ff 00 00 
+80106fa8:	c7 80 fc 37 11 80 00 	movl   $0xcf9a00,-0x7feec804(%eax)
+80106faf:	9a cf 00 
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-80106992:	c7 80 00 28 11 80 ff 	movl   $0xffff,-0x7feed800(%eax)
-80106999:	ff 00 00 
-8010699c:	c7 80 04 28 11 80 00 	movl   $0xcf9200,-0x7feed7fc(%eax)
-801069a3:	92 cf 00 
+80106fb2:	c7 80 00 38 11 80 ff 	movl   $0xffff,-0x7feec800(%eax)
+80106fb9:	ff 00 00 
+80106fbc:	c7 80 04 38 11 80 00 	movl   $0xcf9200,-0x7feec7fc(%eax)
+80106fc3:	92 cf 00 
   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-801069a6:	c7 80 08 28 11 80 ff 	movl   $0xffff,-0x7feed7f8(%eax)
-801069ad:	ff 00 00 
-801069b0:	c7 80 0c 28 11 80 00 	movl   $0xcffa00,-0x7feed7f4(%eax)
-801069b7:	fa cf 00 
+80106fc6:	c7 80 08 38 11 80 ff 	movl   $0xffff,-0x7feec7f8(%eax)
+80106fcd:	ff 00 00 
+80106fd0:	c7 80 0c 38 11 80 00 	movl   $0xcffa00,-0x7feec7f4(%eax)
+80106fd7:	fa cf 00 
   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-801069ba:	c7 80 10 28 11 80 ff 	movl   $0xffff,-0x7feed7f0(%eax)
-801069c1:	ff 00 00 
-801069c4:	c7 80 14 28 11 80 00 	movl   $0xcff200,-0x7feed7ec(%eax)
-801069cb:	f2 cf 00 
+80106fda:	c7 80 10 38 11 80 ff 	movl   $0xffff,-0x7feec7f0(%eax)
+80106fe1:	ff 00 00 
+80106fe4:	c7 80 14 38 11 80 00 	movl   $0xcff200,-0x7feec7ec(%eax)
+80106feb:	f2 cf 00 
   lgdt(c->gdt, sizeof(c->gdt));
-801069ce:	05 f0 27 11 80       	add    $0x801127f0,%eax
+80106fee:	05 f0 37 11 80       	add    $0x801137f0,%eax
   pd[1] = (uint)p;
-801069d3:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
+80106ff3:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
   pd[2] = (uint)p >> 16;
-801069d7:	c1 e8 10             	shr    $0x10,%eax
-801069da:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+80106ff7:	c1 e8 10             	shr    $0x10,%eax
+80106ffa:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
   asm volatile("lgdt (%0)" : : "r" (pd));
-801069de:	8d 45 f2             	lea    -0xe(%ebp),%eax
-801069e1:	0f 01 10             	lgdtl  (%eax)
+80106ffe:	8d 45 f2             	lea    -0xe(%ebp),%eax
+80107001:	0f 01 10             	lgdtl  (%eax)
 }
-801069e4:	c9                   	leave  
-801069e5:	c3                   	ret    
-801069e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801069ed:	8d 76 00             	lea    0x0(%esi),%esi
+80107004:	c9                   	leave  
+80107005:	c3                   	ret    
+80107006:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010700d:	8d 76 00             	lea    0x0(%esi),%esi
 
-801069f0 <switchkvm>:
+80107010 <switchkvm>:
 {
-801069f0:	f3 0f 1e fb          	endbr32 
+80107010:	f3 0f 1e fb          	endbr32 
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-801069f4:	a1 a4 54 11 80       	mov    0x801154a4,%eax
-801069f9:	05 00 00 00 80       	add    $0x80000000,%eax
+80107014:	a1 a4 67 11 80       	mov    0x801167a4,%eax
+80107019:	05 00 00 00 80       	add    $0x80000000,%eax
 }
 
 static inline void
 lcr3(uint val)
 {
   asm volatile("movl %0,%%cr3" : : "r" (val));
-801069fe:	0f 22 d8             	mov    %eax,%cr3
+8010701e:	0f 22 d8             	mov    %eax,%cr3
 }
-80106a01:	c3                   	ret    
-80106a02:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106a09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80106a10 <switchuvm>:
-{
-80106a10:	f3 0f 1e fb          	endbr32 
-80106a14:	55                   	push   %ebp
-80106a15:	89 e5                	mov    %esp,%ebp
-80106a17:	57                   	push   %edi
-80106a18:	56                   	push   %esi
-80106a19:	53                   	push   %ebx
-80106a1a:	83 ec 1c             	sub    $0x1c,%esp
-80106a1d:	8b 75 08             	mov    0x8(%ebp),%esi
+80107021:	c3                   	ret    
+80107022:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107029:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80107030 <switchuvm>:
+{
+80107030:	f3 0f 1e fb          	endbr32 
+80107034:	55                   	push   %ebp
+80107035:	89 e5                	mov    %esp,%ebp
+80107037:	57                   	push   %edi
+80107038:	56                   	push   %esi
+80107039:	53                   	push   %ebx
+8010703a:	83 ec 1c             	sub    $0x1c,%esp
+8010703d:	8b 75 08             	mov    0x8(%ebp),%esi
   if(p == 0)
-80106a20:	85 f6                	test   %esi,%esi
-80106a22:	0f 84 cb 00 00 00    	je     80106af3 <switchuvm+0xe3>
+80107040:	85 f6                	test   %esi,%esi
+80107042:	0f 84 cb 00 00 00    	je     80107113 <switchuvm+0xe3>
   if(p->kstack == 0)
-80106a28:	8b 46 08             	mov    0x8(%esi),%eax
-80106a2b:	85 c0                	test   %eax,%eax
-80106a2d:	0f 84 da 00 00 00    	je     80106b0d <switchuvm+0xfd>
+80107048:	8b 46 08             	mov    0x8(%esi),%eax
+8010704b:	85 c0                	test   %eax,%eax
+8010704d:	0f 84 da 00 00 00    	je     8010712d <switchuvm+0xfd>
   if(p->pgdir == 0)
-80106a33:	8b 46 04             	mov    0x4(%esi),%eax
-80106a36:	85 c0                	test   %eax,%eax
-80106a38:	0f 84 c2 00 00 00    	je     80106b00 <switchuvm+0xf0>
+80107053:	8b 46 04             	mov    0x4(%esi),%eax
+80107056:	85 c0                	test   %eax,%eax
+80107058:	0f 84 c2 00 00 00    	je     80107120 <switchuvm+0xf0>
   pushcli();
-80106a3e:	e8 1d da ff ff       	call   80104460 <pushcli>
+8010705e:	e8 7d d9 ff ff       	call   801049e0 <pushcli>
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106a43:	e8 88 ce ff ff       	call   801038d0 <mycpu>
-80106a48:	89 c3                	mov    %eax,%ebx
-80106a4a:	e8 81 ce ff ff       	call   801038d0 <mycpu>
-80106a4f:	89 c7                	mov    %eax,%edi
-80106a51:	e8 7a ce ff ff       	call   801038d0 <mycpu>
-80106a56:	83 c7 08             	add    $0x8,%edi
-80106a59:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106a5c:	e8 6f ce ff ff       	call   801038d0 <mycpu>
-80106a61:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80106a64:	ba 67 00 00 00       	mov    $0x67,%edx
-80106a69:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
-80106a70:	83 c0 08             	add    $0x8,%eax
-80106a73:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
+80107063:	e8 68 cb ff ff       	call   80103bd0 <mycpu>
+80107068:	89 c3                	mov    %eax,%ebx
+8010706a:	e8 61 cb ff ff       	call   80103bd0 <mycpu>
+8010706f:	89 c7                	mov    %eax,%edi
+80107071:	e8 5a cb ff ff       	call   80103bd0 <mycpu>
+80107076:	83 c7 08             	add    $0x8,%edi
+80107079:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010707c:	e8 4f cb ff ff       	call   80103bd0 <mycpu>
+80107081:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80107084:	ba 67 00 00 00       	mov    $0x67,%edx
+80107089:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
+80107090:	83 c0 08             	add    $0x8,%eax
+80107093:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106a7a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+8010709a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106a7f:	83 c1 08             	add    $0x8,%ecx
-80106a82:	c1 e8 18             	shr    $0x18,%eax
-80106a85:	c1 e9 10             	shr    $0x10,%ecx
-80106a88:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
-80106a8e:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
-80106a94:	b9 99 40 00 00       	mov    $0x4099,%ecx
-80106a99:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
+8010709f:	83 c1 08             	add    $0x8,%ecx
+801070a2:	c1 e8 18             	shr    $0x18,%eax
+801070a5:	c1 e9 10             	shr    $0x10,%ecx
+801070a8:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
+801070ae:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
+801070b4:	b9 99 40 00 00       	mov    $0x4099,%ecx
+801070b9:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106aa0:	bb 10 00 00 00       	mov    $0x10,%ebx
+801070c0:	bb 10 00 00 00       	mov    $0x10,%ebx
   mycpu()->gdt[SEG_TSS].s = 0;
-80106aa5:	e8 26 ce ff ff       	call   801038d0 <mycpu>
-80106aaa:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
+801070c5:	e8 06 cb ff ff       	call   80103bd0 <mycpu>
+801070ca:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106ab1:	e8 1a ce ff ff       	call   801038d0 <mycpu>
-80106ab6:	66 89 58 10          	mov    %bx,0x10(%eax)
+801070d1:	e8 fa ca ff ff       	call   80103bd0 <mycpu>
+801070d6:	66 89 58 10          	mov    %bx,0x10(%eax)
   mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
-80106aba:	8b 5e 08             	mov    0x8(%esi),%ebx
-80106abd:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106ac3:	e8 08 ce ff ff       	call   801038d0 <mycpu>
-80106ac8:	89 58 0c             	mov    %ebx,0xc(%eax)
+801070da:	8b 5e 08             	mov    0x8(%esi),%ebx
+801070dd:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801070e3:	e8 e8 ca ff ff       	call   80103bd0 <mycpu>
+801070e8:	89 58 0c             	mov    %ebx,0xc(%eax)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106acb:	e8 00 ce ff ff       	call   801038d0 <mycpu>
-80106ad0:	66 89 78 6e          	mov    %di,0x6e(%eax)
+801070eb:	e8 e0 ca ff ff       	call   80103bd0 <mycpu>
+801070f0:	66 89 78 6e          	mov    %di,0x6e(%eax)
   asm volatile("ltr %0" : : "r" (sel));
-80106ad4:	b8 28 00 00 00       	mov    $0x28,%eax
-80106ad9:	0f 00 d8             	ltr    %ax
+801070f4:	b8 28 00 00 00       	mov    $0x28,%eax
+801070f9:	0f 00 d8             	ltr    %ax
   lcr3(V2P(p->pgdir));  // switch to process's address space
-80106adc:	8b 46 04             	mov    0x4(%esi),%eax
-80106adf:	05 00 00 00 80       	add    $0x80000000,%eax
+801070fc:	8b 46 04             	mov    0x4(%esi),%eax
+801070ff:	05 00 00 00 80       	add    $0x80000000,%eax
   asm volatile("movl %0,%%cr3" : : "r" (val));
-80106ae4:	0f 22 d8             	mov    %eax,%cr3
+80107104:	0f 22 d8             	mov    %eax,%cr3
 }
-80106ae7:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106aea:	5b                   	pop    %ebx
-80106aeb:	5e                   	pop    %esi
-80106aec:	5f                   	pop    %edi
-80106aed:	5d                   	pop    %ebp
+80107107:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010710a:	5b                   	pop    %ebx
+8010710b:	5e                   	pop    %esi
+8010710c:	5f                   	pop    %edi
+8010710d:	5d                   	pop    %ebp
   popcli();
-80106aee:	e9 bd d9 ff ff       	jmp    801044b0 <popcli>
+8010710e:	e9 1d d9 ff ff       	jmp    80104a30 <popcli>
     panic("switchuvm: no process");
-80106af3:	83 ec 0c             	sub    $0xc,%esp
-80106af6:	68 8e 79 10 80       	push   $0x8010798e
-80106afb:	e8 90 98 ff ff       	call   80100390 <panic>
+80107113:	83 ec 0c             	sub    $0xc,%esp
+80107116:	68 c2 7f 10 80       	push   $0x80107fc2
+8010711b:	e8 70 92 ff ff       	call   80100390 <panic>
     panic("switchuvm: no pgdir");
-80106b00:	83 ec 0c             	sub    $0xc,%esp
-80106b03:	68 b9 79 10 80       	push   $0x801079b9
-80106b08:	e8 83 98 ff ff       	call   80100390 <panic>
+80107120:	83 ec 0c             	sub    $0xc,%esp
+80107123:	68 ed 7f 10 80       	push   $0x80107fed
+80107128:	e8 63 92 ff ff       	call   80100390 <panic>
     panic("switchuvm: no kstack");
-80106b0d:	83 ec 0c             	sub    $0xc,%esp
-80106b10:	68 a4 79 10 80       	push   $0x801079a4
-80106b15:	e8 76 98 ff ff       	call   80100390 <panic>
-80106b1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80106b20 <inituvm>:
-{
-80106b20:	f3 0f 1e fb          	endbr32 
-80106b24:	55                   	push   %ebp
-80106b25:	89 e5                	mov    %esp,%ebp
-80106b27:	57                   	push   %edi
-80106b28:	56                   	push   %esi
-80106b29:	53                   	push   %ebx
-80106b2a:	83 ec 1c             	sub    $0x1c,%esp
-80106b2d:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106b30:	8b 75 10             	mov    0x10(%ebp),%esi
-80106b33:	8b 7d 08             	mov    0x8(%ebp),%edi
-80106b36:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010712d:	83 ec 0c             	sub    $0xc,%esp
+80107130:	68 d8 7f 10 80       	push   $0x80107fd8
+80107135:	e8 56 92 ff ff       	call   80100390 <panic>
+8010713a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80107140 <inituvm>:
+{
+80107140:	f3 0f 1e fb          	endbr32 
+80107144:	55                   	push   %ebp
+80107145:	89 e5                	mov    %esp,%ebp
+80107147:	57                   	push   %edi
+80107148:	56                   	push   %esi
+80107149:	53                   	push   %ebx
+8010714a:	83 ec 1c             	sub    $0x1c,%esp
+8010714d:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107150:	8b 75 10             	mov    0x10(%ebp),%esi
+80107153:	8b 7d 08             	mov    0x8(%ebp),%edi
+80107156:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(sz >= PGSIZE)
-80106b39:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
-80106b3f:	77 4b                	ja     80106b8c <inituvm+0x6c>
+80107159:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+8010715f:	77 4b                	ja     801071ac <inituvm+0x6c>
   mem = kalloc();
-80106b41:	e8 ea ba ff ff       	call   80102630 <kalloc>
+80107161:	e8 ca b4 ff ff       	call   80102630 <kalloc>
   memset(mem, 0, PGSIZE);
-80106b46:	83 ec 04             	sub    $0x4,%esp
-80106b49:	68 00 10 00 00       	push   $0x1000
+80107166:	83 ec 04             	sub    $0x4,%esp
+80107169:	68 00 10 00 00       	push   $0x1000
   mem = kalloc();
-80106b4e:	89 c3                	mov    %eax,%ebx
+8010716e:	89 c3                	mov    %eax,%ebx
   memset(mem, 0, PGSIZE);
-80106b50:	6a 00                	push   $0x0
-80106b52:	50                   	push   %eax
-80106b53:	e8 18 db ff ff       	call   80104670 <memset>
+80107170:	6a 00                	push   $0x0
+80107172:	50                   	push   %eax
+80107173:	e8 78 da ff ff       	call   80104bf0 <memset>
   mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
-80106b58:	58                   	pop    %eax
-80106b59:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106b5f:	5a                   	pop    %edx
-80106b60:	6a 06                	push   $0x6
-80106b62:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106b67:	31 d2                	xor    %edx,%edx
-80106b69:	50                   	push   %eax
-80106b6a:	89 f8                	mov    %edi,%eax
-80106b6c:	e8 af fc ff ff       	call   80106820 <mappages>
+80107178:	58                   	pop    %eax
+80107179:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+8010717f:	5a                   	pop    %edx
+80107180:	6a 06                	push   $0x6
+80107182:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80107187:	31 d2                	xor    %edx,%edx
+80107189:	50                   	push   %eax
+8010718a:	89 f8                	mov    %edi,%eax
+8010718c:	e8 af fc ff ff       	call   80106e40 <mappages>
   memmove(mem, init, sz);
-80106b71:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106b74:	89 75 10             	mov    %esi,0x10(%ebp)
-80106b77:	83 c4 10             	add    $0x10,%esp
-80106b7a:	89 5d 08             	mov    %ebx,0x8(%ebp)
-80106b7d:	89 45 0c             	mov    %eax,0xc(%ebp)
-}
-80106b80:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106b83:	5b                   	pop    %ebx
-80106b84:	5e                   	pop    %esi
-80106b85:	5f                   	pop    %edi
-80106b86:	5d                   	pop    %ebp
+80107191:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80107194:	89 75 10             	mov    %esi,0x10(%ebp)
+80107197:	83 c4 10             	add    $0x10,%esp
+8010719a:	89 5d 08             	mov    %ebx,0x8(%ebp)
+8010719d:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+801071a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801071a3:	5b                   	pop    %ebx
+801071a4:	5e                   	pop    %esi
+801071a5:	5f                   	pop    %edi
+801071a6:	5d                   	pop    %ebp
   memmove(mem, init, sz);
-80106b87:	e9 84 db ff ff       	jmp    80104710 <memmove>
+801071a7:	e9 e4 da ff ff       	jmp    80104c90 <memmove>
     panic("inituvm: more than a page");
-80106b8c:	83 ec 0c             	sub    $0xc,%esp
-80106b8f:	68 cd 79 10 80       	push   $0x801079cd
-80106b94:	e8 f7 97 ff ff       	call   80100390 <panic>
-80106b99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80106ba0 <loaduvm>:
-{
-80106ba0:	f3 0f 1e fb          	endbr32 
-80106ba4:	55                   	push   %ebp
-80106ba5:	89 e5                	mov    %esp,%ebp
-80106ba7:	57                   	push   %edi
-80106ba8:	56                   	push   %esi
-80106ba9:	53                   	push   %ebx
-80106baa:	83 ec 1c             	sub    $0x1c,%esp
-80106bad:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106bb0:	8b 75 18             	mov    0x18(%ebp),%esi
+801071ac:	83 ec 0c             	sub    $0xc,%esp
+801071af:	68 01 80 10 80       	push   $0x80108001
+801071b4:	e8 d7 91 ff ff       	call   80100390 <panic>
+801071b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801071c0 <loaduvm>:
+{
+801071c0:	f3 0f 1e fb          	endbr32 
+801071c4:	55                   	push   %ebp
+801071c5:	89 e5                	mov    %esp,%ebp
+801071c7:	57                   	push   %edi
+801071c8:	56                   	push   %esi
+801071c9:	53                   	push   %ebx
+801071ca:	83 ec 1c             	sub    $0x1c,%esp
+801071cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+801071d0:	8b 75 18             	mov    0x18(%ebp),%esi
   if((uint) addr % PGSIZE != 0)
-80106bb3:	a9 ff 0f 00 00       	test   $0xfff,%eax
-80106bb8:	0f 85 99 00 00 00    	jne    80106c57 <loaduvm+0xb7>
+801071d3:	a9 ff 0f 00 00       	test   $0xfff,%eax
+801071d8:	0f 85 99 00 00 00    	jne    80107277 <loaduvm+0xb7>
   for(i = 0; i < sz; i += PGSIZE){
-80106bbe:	01 f0                	add    %esi,%eax
-80106bc0:	89 f3                	mov    %esi,%ebx
-80106bc2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801071de:	01 f0                	add    %esi,%eax
+801071e0:	89 f3                	mov    %esi,%ebx
+801071e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106bc5:	8b 45 14             	mov    0x14(%ebp),%eax
-80106bc8:	01 f0                	add    %esi,%eax
-80106bca:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801071e5:	8b 45 14             	mov    0x14(%ebp),%eax
+801071e8:	01 f0                	add    %esi,%eax
+801071ea:	89 45 e0             	mov    %eax,-0x20(%ebp)
   for(i = 0; i < sz; i += PGSIZE){
-80106bcd:	85 f6                	test   %esi,%esi
-80106bcf:	75 15                	jne    80106be6 <loaduvm+0x46>
-80106bd1:	eb 6d                	jmp    80106c40 <loaduvm+0xa0>
-80106bd3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106bd7:	90                   	nop
-80106bd8:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
-80106bde:	89 f0                	mov    %esi,%eax
-80106be0:	29 d8                	sub    %ebx,%eax
-80106be2:	39 c6                	cmp    %eax,%esi
-80106be4:	76 5a                	jbe    80106c40 <loaduvm+0xa0>
+801071ed:	85 f6                	test   %esi,%esi
+801071ef:	75 15                	jne    80107206 <loaduvm+0x46>
+801071f1:	eb 6d                	jmp    80107260 <loaduvm+0xa0>
+801071f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801071f7:	90                   	nop
+801071f8:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
+801071fe:	89 f0                	mov    %esi,%eax
+80107200:	29 d8                	sub    %ebx,%eax
+80107202:	39 c6                	cmp    %eax,%esi
+80107204:	76 5a                	jbe    80107260 <loaduvm+0xa0>
     if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
-80106be6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80106be9:	8b 45 08             	mov    0x8(%ebp),%eax
-80106bec:	31 c9                	xor    %ecx,%ecx
-80106bee:	29 da                	sub    %ebx,%edx
-80106bf0:	e8 ab fb ff ff       	call   801067a0 <walkpgdir>
-80106bf5:	85 c0                	test   %eax,%eax
-80106bf7:	74 51                	je     80106c4a <loaduvm+0xaa>
+80107206:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80107209:	8b 45 08             	mov    0x8(%ebp),%eax
+8010720c:	31 c9                	xor    %ecx,%ecx
+8010720e:	29 da                	sub    %ebx,%edx
+80107210:	e8 ab fb ff ff       	call   80106dc0 <walkpgdir>
+80107215:	85 c0                	test   %eax,%eax
+80107217:	74 51                	je     8010726a <loaduvm+0xaa>
     pa = PTE_ADDR(*pte);
-80106bf9:	8b 00                	mov    (%eax),%eax
+80107219:	8b 00                	mov    (%eax),%eax
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106bfb:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+8010721b:	8b 4d e0             	mov    -0x20(%ebp),%ecx
     if(sz - i < PGSIZE)
-80106bfe:	bf 00 10 00 00       	mov    $0x1000,%edi
+8010721e:	bf 00 10 00 00       	mov    $0x1000,%edi
     pa = PTE_ADDR(*pte);
-80106c03:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107223:	25 00 f0 ff ff       	and    $0xfffff000,%eax
     if(sz - i < PGSIZE)
-80106c08:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
-80106c0e:	0f 46 fb             	cmovbe %ebx,%edi
+80107228:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
+8010722e:	0f 46 fb             	cmovbe %ebx,%edi
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106c11:	29 d9                	sub    %ebx,%ecx
-80106c13:	05 00 00 00 80       	add    $0x80000000,%eax
-80106c18:	57                   	push   %edi
-80106c19:	51                   	push   %ecx
-80106c1a:	50                   	push   %eax
-80106c1b:	ff 75 10             	pushl  0x10(%ebp)
-80106c1e:	e8 3d ae ff ff       	call   80101a60 <readi>
-80106c23:	83 c4 10             	add    $0x10,%esp
-80106c26:	39 f8                	cmp    %edi,%eax
-80106c28:	74 ae                	je     80106bd8 <loaduvm+0x38>
+80107231:	29 d9                	sub    %ebx,%ecx
+80107233:	05 00 00 00 80       	add    $0x80000000,%eax
+80107238:	57                   	push   %edi
+80107239:	51                   	push   %ecx
+8010723a:	50                   	push   %eax
+8010723b:	ff 75 10             	pushl  0x10(%ebp)
+8010723e:	e8 1d a8 ff ff       	call   80101a60 <readi>
+80107243:	83 c4 10             	add    $0x10,%esp
+80107246:	39 f8                	cmp    %edi,%eax
+80107248:	74 ae                	je     801071f8 <loaduvm+0x38>
 }
-80106c2a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010724a:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-80106c2d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010724d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80106c32:	5b                   	pop    %ebx
-80106c33:	5e                   	pop    %esi
-80106c34:	5f                   	pop    %edi
-80106c35:	5d                   	pop    %ebp
-80106c36:	c3                   	ret    
-80106c37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106c3e:	66 90                	xchg   %ax,%ax
-80106c40:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107252:	5b                   	pop    %ebx
+80107253:	5e                   	pop    %esi
+80107254:	5f                   	pop    %edi
+80107255:	5d                   	pop    %ebp
+80107256:	c3                   	ret    
+80107257:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010725e:	66 90                	xchg   %ax,%ax
+80107260:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80106c43:	31 c0                	xor    %eax,%eax
+80107263:	31 c0                	xor    %eax,%eax
 }
-80106c45:	5b                   	pop    %ebx
-80106c46:	5e                   	pop    %esi
-80106c47:	5f                   	pop    %edi
-80106c48:	5d                   	pop    %ebp
-80106c49:	c3                   	ret    
+80107265:	5b                   	pop    %ebx
+80107266:	5e                   	pop    %esi
+80107267:	5f                   	pop    %edi
+80107268:	5d                   	pop    %ebp
+80107269:	c3                   	ret    
       panic("loaduvm: address should exist");
-80106c4a:	83 ec 0c             	sub    $0xc,%esp
-80106c4d:	68 e7 79 10 80       	push   $0x801079e7
-80106c52:	e8 39 97 ff ff       	call   80100390 <panic>
+8010726a:	83 ec 0c             	sub    $0xc,%esp
+8010726d:	68 1b 80 10 80       	push   $0x8010801b
+80107272:	e8 19 91 ff ff       	call   80100390 <panic>
     panic("loaduvm: addr must be page aligned");
-80106c57:	83 ec 0c             	sub    $0xc,%esp
-80106c5a:	68 88 7a 10 80       	push   $0x80107a88
-80106c5f:	e8 2c 97 ff ff       	call   80100390 <panic>
-80106c64:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106c6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106c6f:	90                   	nop
-
-80106c70 <allocuvm>:
-{
-80106c70:	f3 0f 1e fb          	endbr32 
-80106c74:	55                   	push   %ebp
-80106c75:	89 e5                	mov    %esp,%ebp
-80106c77:	57                   	push   %edi
-80106c78:	56                   	push   %esi
-80106c79:	53                   	push   %ebx
-80106c7a:	83 ec 1c             	sub    $0x1c,%esp
+80107277:	83 ec 0c             	sub    $0xc,%esp
+8010727a:	68 bc 80 10 80       	push   $0x801080bc
+8010727f:	e8 0c 91 ff ff       	call   80100390 <panic>
+80107284:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010728b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010728f:	90                   	nop
+
+80107290 <allocuvm>:
+{
+80107290:	f3 0f 1e fb          	endbr32 
+80107294:	55                   	push   %ebp
+80107295:	89 e5                	mov    %esp,%ebp
+80107297:	57                   	push   %edi
+80107298:	56                   	push   %esi
+80107299:	53                   	push   %ebx
+8010729a:	83 ec 1c             	sub    $0x1c,%esp
   if(newsz >= KERNBASE)
-80106c7d:	8b 45 10             	mov    0x10(%ebp),%eax
+8010729d:	8b 45 10             	mov    0x10(%ebp),%eax
 {
-80106c80:	8b 7d 08             	mov    0x8(%ebp),%edi
+801072a0:	8b 7d 08             	mov    0x8(%ebp),%edi
   if(newsz >= KERNBASE)
-80106c83:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106c86:	85 c0                	test   %eax,%eax
-80106c88:	0f 88 b2 00 00 00    	js     80106d40 <allocuvm+0xd0>
+801072a3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801072a6:	85 c0                	test   %eax,%eax
+801072a8:	0f 88 b2 00 00 00    	js     80107360 <allocuvm+0xd0>
   if(newsz < oldsz)
-80106c8e:	3b 45 0c             	cmp    0xc(%ebp),%eax
+801072ae:	3b 45 0c             	cmp    0xc(%ebp),%eax
     return oldsz;
-80106c91:	8b 45 0c             	mov    0xc(%ebp),%eax
+801072b1:	8b 45 0c             	mov    0xc(%ebp),%eax
   if(newsz < oldsz)
-80106c94:	0f 82 96 00 00 00    	jb     80106d30 <allocuvm+0xc0>
+801072b4:	0f 82 96 00 00 00    	jb     80107350 <allocuvm+0xc0>
   a = PGROUNDUP(oldsz);
-80106c9a:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
-80106ca0:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+801072ba:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
+801072c0:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
   for(; a < newsz; a += PGSIZE){
-80106ca6:	39 75 10             	cmp    %esi,0x10(%ebp)
-80106ca9:	77 40                	ja     80106ceb <allocuvm+0x7b>
-80106cab:	e9 83 00 00 00       	jmp    80106d33 <allocuvm+0xc3>
+801072c6:	39 75 10             	cmp    %esi,0x10(%ebp)
+801072c9:	77 40                	ja     8010730b <allocuvm+0x7b>
+801072cb:	e9 83 00 00 00       	jmp    80107353 <allocuvm+0xc3>
     memset(mem, 0, PGSIZE);
-80106cb0:	83 ec 04             	sub    $0x4,%esp
-80106cb3:	68 00 10 00 00       	push   $0x1000
-80106cb8:	6a 00                	push   $0x0
-80106cba:	50                   	push   %eax
-80106cbb:	e8 b0 d9 ff ff       	call   80104670 <memset>
+801072d0:	83 ec 04             	sub    $0x4,%esp
+801072d3:	68 00 10 00 00       	push   $0x1000
+801072d8:	6a 00                	push   $0x0
+801072da:	50                   	push   %eax
+801072db:	e8 10 d9 ff ff       	call   80104bf0 <memset>
     if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
-80106cc0:	58                   	pop    %eax
-80106cc1:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106cc7:	5a                   	pop    %edx
-80106cc8:	6a 06                	push   $0x6
-80106cca:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106ccf:	89 f2                	mov    %esi,%edx
-80106cd1:	50                   	push   %eax
-80106cd2:	89 f8                	mov    %edi,%eax
-80106cd4:	e8 47 fb ff ff       	call   80106820 <mappages>
-80106cd9:	83 c4 10             	add    $0x10,%esp
-80106cdc:	85 c0                	test   %eax,%eax
-80106cde:	78 78                	js     80106d58 <allocuvm+0xe8>
+801072e0:	58                   	pop    %eax
+801072e1:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+801072e7:	5a                   	pop    %edx
+801072e8:	6a 06                	push   $0x6
+801072ea:	b9 00 10 00 00       	mov    $0x1000,%ecx
+801072ef:	89 f2                	mov    %esi,%edx
+801072f1:	50                   	push   %eax
+801072f2:	89 f8                	mov    %edi,%eax
+801072f4:	e8 47 fb ff ff       	call   80106e40 <mappages>
+801072f9:	83 c4 10             	add    $0x10,%esp
+801072fc:	85 c0                	test   %eax,%eax
+801072fe:	78 78                	js     80107378 <allocuvm+0xe8>
   for(; a < newsz; a += PGSIZE){
-80106ce0:	81 c6 00 10 00 00    	add    $0x1000,%esi
-80106ce6:	39 75 10             	cmp    %esi,0x10(%ebp)
-80106ce9:	76 48                	jbe    80106d33 <allocuvm+0xc3>
+80107300:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80107306:	39 75 10             	cmp    %esi,0x10(%ebp)
+80107309:	76 48                	jbe    80107353 <allocuvm+0xc3>
     mem = kalloc();
-80106ceb:	e8 40 b9 ff ff       	call   80102630 <kalloc>
-80106cf0:	89 c3                	mov    %eax,%ebx
+8010730b:	e8 20 b3 ff ff       	call   80102630 <kalloc>
+80107310:	89 c3                	mov    %eax,%ebx
     if(mem == 0){
-80106cf2:	85 c0                	test   %eax,%eax
-80106cf4:	75 ba                	jne    80106cb0 <allocuvm+0x40>
+80107312:	85 c0                	test   %eax,%eax
+80107314:	75 ba                	jne    801072d0 <allocuvm+0x40>
       cprintf("allocuvm out of memory\n");
-80106cf6:	83 ec 0c             	sub    $0xc,%esp
-80106cf9:	68 05 7a 10 80       	push   $0x80107a05
-80106cfe:	e8 ad 99 ff ff       	call   801006b0 <cprintf>
+80107316:	83 ec 0c             	sub    $0xc,%esp
+80107319:	68 39 80 10 80       	push   $0x80108039
+8010731e:	e8 8d 93 ff ff       	call   801006b0 <cprintf>
   if(newsz >= oldsz)
-80106d03:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106d06:	83 c4 10             	add    $0x10,%esp
-80106d09:	39 45 10             	cmp    %eax,0x10(%ebp)
-80106d0c:	74 32                	je     80106d40 <allocuvm+0xd0>
-80106d0e:	8b 55 10             	mov    0x10(%ebp),%edx
-80106d11:	89 c1                	mov    %eax,%ecx
-80106d13:	89 f8                	mov    %edi,%eax
-80106d15:	e8 96 fb ff ff       	call   801068b0 <deallocuvm.part.0>
+80107323:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107326:	83 c4 10             	add    $0x10,%esp
+80107329:	39 45 10             	cmp    %eax,0x10(%ebp)
+8010732c:	74 32                	je     80107360 <allocuvm+0xd0>
+8010732e:	8b 55 10             	mov    0x10(%ebp),%edx
+80107331:	89 c1                	mov    %eax,%ecx
+80107333:	89 f8                	mov    %edi,%eax
+80107335:	e8 96 fb ff ff       	call   80106ed0 <deallocuvm.part.0>
       return 0;
-80106d1a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+8010733a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 }
-80106d21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d24:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d27:	5b                   	pop    %ebx
-80106d28:	5e                   	pop    %esi
-80106d29:	5f                   	pop    %edi
-80106d2a:	5d                   	pop    %ebp
-80106d2b:	c3                   	ret    
-80106d2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107341:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80107344:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107347:	5b                   	pop    %ebx
+80107348:	5e                   	pop    %esi
+80107349:	5f                   	pop    %edi
+8010734a:	5d                   	pop    %ebp
+8010734b:	c3                   	ret    
+8010734c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return oldsz;
-80106d30:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107350:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 }
-80106d33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d36:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d39:	5b                   	pop    %ebx
-80106d3a:	5e                   	pop    %esi
-80106d3b:	5f                   	pop    %edi
-80106d3c:	5d                   	pop    %ebp
-80106d3d:	c3                   	ret    
-80106d3e:	66 90                	xchg   %ax,%ax
+80107353:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80107356:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107359:	5b                   	pop    %ebx
+8010735a:	5e                   	pop    %esi
+8010735b:	5f                   	pop    %edi
+8010735c:	5d                   	pop    %ebp
+8010735d:	c3                   	ret    
+8010735e:	66 90                	xchg   %ax,%ax
     return 0;
-80106d40:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80107360:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 }
-80106d47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d4a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d4d:	5b                   	pop    %ebx
-80106d4e:	5e                   	pop    %esi
-80106d4f:	5f                   	pop    %edi
-80106d50:	5d                   	pop    %ebp
-80106d51:	c3                   	ret    
-80106d52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80107367:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010736a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010736d:	5b                   	pop    %ebx
+8010736e:	5e                   	pop    %esi
+8010736f:	5f                   	pop    %edi
+80107370:	5d                   	pop    %ebp
+80107371:	c3                   	ret    
+80107372:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       cprintf("allocuvm out of memory (2)\n");
-80106d58:	83 ec 0c             	sub    $0xc,%esp
-80106d5b:	68 1d 7a 10 80       	push   $0x80107a1d
-80106d60:	e8 4b 99 ff ff       	call   801006b0 <cprintf>
+80107378:	83 ec 0c             	sub    $0xc,%esp
+8010737b:	68 51 80 10 80       	push   $0x80108051
+80107380:	e8 2b 93 ff ff       	call   801006b0 <cprintf>
   if(newsz >= oldsz)
-80106d65:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106d68:	83 c4 10             	add    $0x10,%esp
-80106d6b:	39 45 10             	cmp    %eax,0x10(%ebp)
-80106d6e:	74 0c                	je     80106d7c <allocuvm+0x10c>
-80106d70:	8b 55 10             	mov    0x10(%ebp),%edx
-80106d73:	89 c1                	mov    %eax,%ecx
-80106d75:	89 f8                	mov    %edi,%eax
-80106d77:	e8 34 fb ff ff       	call   801068b0 <deallocuvm.part.0>
+80107385:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107388:	83 c4 10             	add    $0x10,%esp
+8010738b:	39 45 10             	cmp    %eax,0x10(%ebp)
+8010738e:	74 0c                	je     8010739c <allocuvm+0x10c>
+80107390:	8b 55 10             	mov    0x10(%ebp),%edx
+80107393:	89 c1                	mov    %eax,%ecx
+80107395:	89 f8                	mov    %edi,%eax
+80107397:	e8 34 fb ff ff       	call   80106ed0 <deallocuvm.part.0>
       kfree(mem);
-80106d7c:	83 ec 0c             	sub    $0xc,%esp
-80106d7f:	53                   	push   %ebx
-80106d80:	e8 eb b6 ff ff       	call   80102470 <kfree>
+8010739c:	83 ec 0c             	sub    $0xc,%esp
+8010739f:	53                   	push   %ebx
+801073a0:	e8 cb b0 ff ff       	call   80102470 <kfree>
       return 0;
-80106d85:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-80106d8c:	83 c4 10             	add    $0x10,%esp
+801073a5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+801073ac:	83 c4 10             	add    $0x10,%esp
 }
-80106d8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d92:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d95:	5b                   	pop    %ebx
-80106d96:	5e                   	pop    %esi
-80106d97:	5f                   	pop    %edi
-80106d98:	5d                   	pop    %ebp
-80106d99:	c3                   	ret    
-80106d9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80106da0 <deallocuvm>:
-{
-80106da0:	f3 0f 1e fb          	endbr32 
-80106da4:	55                   	push   %ebp
-80106da5:	89 e5                	mov    %esp,%ebp
-80106da7:	8b 55 0c             	mov    0xc(%ebp),%edx
-80106daa:	8b 4d 10             	mov    0x10(%ebp),%ecx
-80106dad:	8b 45 08             	mov    0x8(%ebp),%eax
+801073af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801073b2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801073b5:	5b                   	pop    %ebx
+801073b6:	5e                   	pop    %esi
+801073b7:	5f                   	pop    %edi
+801073b8:	5d                   	pop    %ebp
+801073b9:	c3                   	ret    
+801073ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801073c0 <deallocuvm>:
+{
+801073c0:	f3 0f 1e fb          	endbr32 
+801073c4:	55                   	push   %ebp
+801073c5:	89 e5                	mov    %esp,%ebp
+801073c7:	8b 55 0c             	mov    0xc(%ebp),%edx
+801073ca:	8b 4d 10             	mov    0x10(%ebp),%ecx
+801073cd:	8b 45 08             	mov    0x8(%ebp),%eax
   if(newsz >= oldsz)
-80106db0:	39 d1                	cmp    %edx,%ecx
-80106db2:	73 0c                	jae    80106dc0 <deallocuvm+0x20>
+801073d0:	39 d1                	cmp    %edx,%ecx
+801073d2:	73 0c                	jae    801073e0 <deallocuvm+0x20>
 }
-80106db4:	5d                   	pop    %ebp
-80106db5:	e9 f6 fa ff ff       	jmp    801068b0 <deallocuvm.part.0>
-80106dba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80106dc0:	89 d0                	mov    %edx,%eax
-80106dc2:	5d                   	pop    %ebp
-80106dc3:	c3                   	ret    
-80106dc4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106dcb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106dcf:	90                   	nop
+801073d4:	5d                   	pop    %ebp
+801073d5:	e9 f6 fa ff ff       	jmp    80106ed0 <deallocuvm.part.0>
+801073da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801073e0:	89 d0                	mov    %edx,%eax
+801073e2:	5d                   	pop    %ebp
+801073e3:	c3                   	ret    
+801073e4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801073eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801073ef:	90                   	nop
 
-80106dd0 <freevm>:
+801073f0 <freevm>:
 
 // Free a page table and all the physical memory pages
 // in the user part.
 void
 freevm(pde_t *pgdir)
 {
-80106dd0:	f3 0f 1e fb          	endbr32 
-80106dd4:	55                   	push   %ebp
-80106dd5:	89 e5                	mov    %esp,%ebp
-80106dd7:	57                   	push   %edi
-80106dd8:	56                   	push   %esi
-80106dd9:	53                   	push   %ebx
-80106dda:	83 ec 0c             	sub    $0xc,%esp
-80106ddd:	8b 75 08             	mov    0x8(%ebp),%esi
+801073f0:	f3 0f 1e fb          	endbr32 
+801073f4:	55                   	push   %ebp
+801073f5:	89 e5                	mov    %esp,%ebp
+801073f7:	57                   	push   %edi
+801073f8:	56                   	push   %esi
+801073f9:	53                   	push   %ebx
+801073fa:	83 ec 0c             	sub    $0xc,%esp
+801073fd:	8b 75 08             	mov    0x8(%ebp),%esi
   uint i;
 
   if(pgdir == 0)
-80106de0:	85 f6                	test   %esi,%esi
-80106de2:	74 55                	je     80106e39 <freevm+0x69>
+80107400:	85 f6                	test   %esi,%esi
+80107402:	74 55                	je     80107459 <freevm+0x69>
   if(newsz >= oldsz)
-80106de4:	31 c9                	xor    %ecx,%ecx
-80106de6:	ba 00 00 00 80       	mov    $0x80000000,%edx
-80106deb:	89 f0                	mov    %esi,%eax
-80106ded:	89 f3                	mov    %esi,%ebx
-80106def:	e8 bc fa ff ff       	call   801068b0 <deallocuvm.part.0>
+80107404:	31 c9                	xor    %ecx,%ecx
+80107406:	ba 00 00 00 80       	mov    $0x80000000,%edx
+8010740b:	89 f0                	mov    %esi,%eax
+8010740d:	89 f3                	mov    %esi,%ebx
+8010740f:	e8 bc fa ff ff       	call   80106ed0 <deallocuvm.part.0>
     panic("freevm: no pgdir");
   deallocuvm(pgdir, KERNBASE, 0);
   for(i = 0; i < NPDENTRIES; i++){
-80106df4:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
-80106dfa:	eb 0b                	jmp    80106e07 <freevm+0x37>
-80106dfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106e00:	83 c3 04             	add    $0x4,%ebx
-80106e03:	39 df                	cmp    %ebx,%edi
-80106e05:	74 23                	je     80106e2a <freevm+0x5a>
+80107414:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
+8010741a:	eb 0b                	jmp    80107427 <freevm+0x37>
+8010741c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107420:	83 c3 04             	add    $0x4,%ebx
+80107423:	39 df                	cmp    %ebx,%edi
+80107425:	74 23                	je     8010744a <freevm+0x5a>
     if(pgdir[i] & PTE_P){
-80106e07:	8b 03                	mov    (%ebx),%eax
-80106e09:	a8 01                	test   $0x1,%al
-80106e0b:	74 f3                	je     80106e00 <freevm+0x30>
+80107427:	8b 03                	mov    (%ebx),%eax
+80107429:	a8 01                	test   $0x1,%al
+8010742b:	74 f3                	je     80107420 <freevm+0x30>
       char * v = P2V(PTE_ADDR(pgdir[i]));
-80106e0d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+8010742d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
       kfree(v);
-80106e12:	83 ec 0c             	sub    $0xc,%esp
-80106e15:	83 c3 04             	add    $0x4,%ebx
+80107432:	83 ec 0c             	sub    $0xc,%esp
+80107435:	83 c3 04             	add    $0x4,%ebx
       char * v = P2V(PTE_ADDR(pgdir[i]));
-80106e18:	05 00 00 00 80       	add    $0x80000000,%eax
+80107438:	05 00 00 00 80       	add    $0x80000000,%eax
       kfree(v);
-80106e1d:	50                   	push   %eax
-80106e1e:	e8 4d b6 ff ff       	call   80102470 <kfree>
-80106e23:	83 c4 10             	add    $0x10,%esp
+8010743d:	50                   	push   %eax
+8010743e:	e8 2d b0 ff ff       	call   80102470 <kfree>
+80107443:	83 c4 10             	add    $0x10,%esp
   for(i = 0; i < NPDENTRIES; i++){
-80106e26:	39 df                	cmp    %ebx,%edi
-80106e28:	75 dd                	jne    80106e07 <freevm+0x37>
+80107446:	39 df                	cmp    %ebx,%edi
+80107448:	75 dd                	jne    80107427 <freevm+0x37>
     }
   }
   kfree((char*)pgdir);
-80106e2a:	89 75 08             	mov    %esi,0x8(%ebp)
+8010744a:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-80106e2d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106e30:	5b                   	pop    %ebx
-80106e31:	5e                   	pop    %esi
-80106e32:	5f                   	pop    %edi
-80106e33:	5d                   	pop    %ebp
+8010744d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107450:	5b                   	pop    %ebx
+80107451:	5e                   	pop    %esi
+80107452:	5f                   	pop    %edi
+80107453:	5d                   	pop    %ebp
   kfree((char*)pgdir);
-80106e34:	e9 37 b6 ff ff       	jmp    80102470 <kfree>
+80107454:	e9 17 b0 ff ff       	jmp    80102470 <kfree>
     panic("freevm: no pgdir");
-80106e39:	83 ec 0c             	sub    $0xc,%esp
-80106e3c:	68 39 7a 10 80       	push   $0x80107a39
-80106e41:	e8 4a 95 ff ff       	call   80100390 <panic>
-80106e46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106e4d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80106e50 <setupkvm>:
-{
-80106e50:	f3 0f 1e fb          	endbr32 
-80106e54:	55                   	push   %ebp
-80106e55:	89 e5                	mov    %esp,%ebp
-80106e57:	56                   	push   %esi
-80106e58:	53                   	push   %ebx
+80107459:	83 ec 0c             	sub    $0xc,%esp
+8010745c:	68 6d 80 10 80       	push   $0x8010806d
+80107461:	e8 2a 8f ff ff       	call   80100390 <panic>
+80107466:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010746d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80107470 <setupkvm>:
+{
+80107470:	f3 0f 1e fb          	endbr32 
+80107474:	55                   	push   %ebp
+80107475:	89 e5                	mov    %esp,%ebp
+80107477:	56                   	push   %esi
+80107478:	53                   	push   %ebx
   if((pgdir = (pde_t*)kalloc()) == 0)
-80106e59:	e8 d2 b7 ff ff       	call   80102630 <kalloc>
-80106e5e:	89 c6                	mov    %eax,%esi
-80106e60:	85 c0                	test   %eax,%eax
-80106e62:	74 42                	je     80106ea6 <setupkvm+0x56>
+80107479:	e8 b2 b1 ff ff       	call   80102630 <kalloc>
+8010747e:	89 c6                	mov    %eax,%esi
+80107480:	85 c0                	test   %eax,%eax
+80107482:	74 42                	je     801074c6 <setupkvm+0x56>
   memset(pgdir, 0, PGSIZE);
-80106e64:	83 ec 04             	sub    $0x4,%esp
+80107484:	83 ec 04             	sub    $0x4,%esp
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80106e67:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
+80107487:	bb 20 b4 10 80       	mov    $0x8010b420,%ebx
   memset(pgdir, 0, PGSIZE);
-80106e6c:	68 00 10 00 00       	push   $0x1000
-80106e71:	6a 00                	push   $0x0
-80106e73:	50                   	push   %eax
-80106e74:	e8 f7 d7 ff ff       	call   80104670 <memset>
-80106e79:	83 c4 10             	add    $0x10,%esp
+8010748c:	68 00 10 00 00       	push   $0x1000
+80107491:	6a 00                	push   $0x0
+80107493:	50                   	push   %eax
+80107494:	e8 57 d7 ff ff       	call   80104bf0 <memset>
+80107499:	83 c4 10             	add    $0x10,%esp
                 (uint)k->phys_start, k->perm) < 0) {
-80106e7c:	8b 43 04             	mov    0x4(%ebx),%eax
+8010749c:	8b 43 04             	mov    0x4(%ebx),%eax
     if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
-80106e7f:	83 ec 08             	sub    $0x8,%esp
-80106e82:	8b 4b 08             	mov    0x8(%ebx),%ecx
-80106e85:	ff 73 0c             	pushl  0xc(%ebx)
-80106e88:	8b 13                	mov    (%ebx),%edx
-80106e8a:	50                   	push   %eax
-80106e8b:	29 c1                	sub    %eax,%ecx
-80106e8d:	89 f0                	mov    %esi,%eax
-80106e8f:	e8 8c f9 ff ff       	call   80106820 <mappages>
-80106e94:	83 c4 10             	add    $0x10,%esp
-80106e97:	85 c0                	test   %eax,%eax
-80106e99:	78 15                	js     80106eb0 <setupkvm+0x60>
+8010749f:	83 ec 08             	sub    $0x8,%esp
+801074a2:	8b 4b 08             	mov    0x8(%ebx),%ecx
+801074a5:	ff 73 0c             	pushl  0xc(%ebx)
+801074a8:	8b 13                	mov    (%ebx),%edx
+801074aa:	50                   	push   %eax
+801074ab:	29 c1                	sub    %eax,%ecx
+801074ad:	89 f0                	mov    %esi,%eax
+801074af:	e8 8c f9 ff ff       	call   80106e40 <mappages>
+801074b4:	83 c4 10             	add    $0x10,%esp
+801074b7:	85 c0                	test   %eax,%eax
+801074b9:	78 15                	js     801074d0 <setupkvm+0x60>
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80106e9b:	83 c3 10             	add    $0x10,%ebx
-80106e9e:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
-80106ea4:	75 d6                	jne    80106e7c <setupkvm+0x2c>
-}
-80106ea6:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80106ea9:	89 f0                	mov    %esi,%eax
-80106eab:	5b                   	pop    %ebx
-80106eac:	5e                   	pop    %esi
-80106ead:	5d                   	pop    %ebp
-80106eae:	c3                   	ret    
-80106eaf:	90                   	nop
+801074bb:	83 c3 10             	add    $0x10,%ebx
+801074be:	81 fb 60 b4 10 80    	cmp    $0x8010b460,%ebx
+801074c4:	75 d6                	jne    8010749c <setupkvm+0x2c>
+}
+801074c6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801074c9:	89 f0                	mov    %esi,%eax
+801074cb:	5b                   	pop    %ebx
+801074cc:	5e                   	pop    %esi
+801074cd:	5d                   	pop    %ebp
+801074ce:	c3                   	ret    
+801074cf:	90                   	nop
       freevm(pgdir);
-80106eb0:	83 ec 0c             	sub    $0xc,%esp
-80106eb3:	56                   	push   %esi
+801074d0:	83 ec 0c             	sub    $0xc,%esp
+801074d3:	56                   	push   %esi
       return 0;
-80106eb4:	31 f6                	xor    %esi,%esi
+801074d4:	31 f6                	xor    %esi,%esi
       freevm(pgdir);
-80106eb6:	e8 15 ff ff ff       	call   80106dd0 <freevm>
+801074d6:	e8 15 ff ff ff       	call   801073f0 <freevm>
       return 0;
-80106ebb:	83 c4 10             	add    $0x10,%esp
+801074db:	83 c4 10             	add    $0x10,%esp
 }
-80106ebe:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80106ec1:	89 f0                	mov    %esi,%eax
-80106ec3:	5b                   	pop    %ebx
-80106ec4:	5e                   	pop    %esi
-80106ec5:	5d                   	pop    %ebp
-80106ec6:	c3                   	ret    
-80106ec7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106ece:	66 90                	xchg   %ax,%ax
-
-80106ed0 <kvmalloc>:
-{
-80106ed0:	f3 0f 1e fb          	endbr32 
-80106ed4:	55                   	push   %ebp
-80106ed5:	89 e5                	mov    %esp,%ebp
-80106ed7:	83 ec 08             	sub    $0x8,%esp
+801074de:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801074e1:	89 f0                	mov    %esi,%eax
+801074e3:	5b                   	pop    %ebx
+801074e4:	5e                   	pop    %esi
+801074e5:	5d                   	pop    %ebp
+801074e6:	c3                   	ret    
+801074e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801074ee:	66 90                	xchg   %ax,%ax
+
+801074f0 <kvmalloc>:
+{
+801074f0:	f3 0f 1e fb          	endbr32 
+801074f4:	55                   	push   %ebp
+801074f5:	89 e5                	mov    %esp,%ebp
+801074f7:	83 ec 08             	sub    $0x8,%esp
   kpgdir = setupkvm();
-80106eda:	e8 71 ff ff ff       	call   80106e50 <setupkvm>
-80106edf:	a3 a4 54 11 80       	mov    %eax,0x801154a4
+801074fa:	e8 71 ff ff ff       	call   80107470 <setupkvm>
+801074ff:	a3 a4 67 11 80       	mov    %eax,0x801167a4
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-80106ee4:	05 00 00 00 80       	add    $0x80000000,%eax
-80106ee9:	0f 22 d8             	mov    %eax,%cr3
+80107504:	05 00 00 00 80       	add    $0x80000000,%eax
+80107509:	0f 22 d8             	mov    %eax,%cr3
 }
-80106eec:	c9                   	leave  
-80106eed:	c3                   	ret    
-80106eee:	66 90                	xchg   %ax,%ax
+8010750c:	c9                   	leave  
+8010750d:	c3                   	ret    
+8010750e:	66 90                	xchg   %ax,%ax
 
-80106ef0 <clearpteu>:
+80107510 <clearpteu>:
 
 // Clear PTE_U on a page. Used to create an inaccessible
 // page beneath the user stack.
 void
 clearpteu(pde_t *pgdir, char *uva)
 {
-80106ef0:	f3 0f 1e fb          	endbr32 
-80106ef4:	55                   	push   %ebp
+80107510:	f3 0f 1e fb          	endbr32 
+80107514:	55                   	push   %ebp
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
-80106ef5:	31 c9                	xor    %ecx,%ecx
+80107515:	31 c9                	xor    %ecx,%ecx
 {
-80106ef7:	89 e5                	mov    %esp,%ebp
-80106ef9:	83 ec 08             	sub    $0x8,%esp
+80107517:	89 e5                	mov    %esp,%ebp
+80107519:	83 ec 08             	sub    $0x8,%esp
   pte = walkpgdir(pgdir, uva, 0);
-80106efc:	8b 55 0c             	mov    0xc(%ebp),%edx
-80106eff:	8b 45 08             	mov    0x8(%ebp),%eax
-80106f02:	e8 99 f8 ff ff       	call   801067a0 <walkpgdir>
+8010751c:	8b 55 0c             	mov    0xc(%ebp),%edx
+8010751f:	8b 45 08             	mov    0x8(%ebp),%eax
+80107522:	e8 99 f8 ff ff       	call   80106dc0 <walkpgdir>
   if(pte == 0)
-80106f07:	85 c0                	test   %eax,%eax
-80106f09:	74 05                	je     80106f10 <clearpteu+0x20>
+80107527:	85 c0                	test   %eax,%eax
+80107529:	74 05                	je     80107530 <clearpteu+0x20>
     panic("clearpteu");
   *pte &= ~PTE_U;
-80106f0b:	83 20 fb             	andl   $0xfffffffb,(%eax)
+8010752b:	83 20 fb             	andl   $0xfffffffb,(%eax)
 }
-80106f0e:	c9                   	leave  
-80106f0f:	c3                   	ret    
+8010752e:	c9                   	leave  
+8010752f:	c3                   	ret    
     panic("clearpteu");
-80106f10:	83 ec 0c             	sub    $0xc,%esp
-80106f13:	68 4a 7a 10 80       	push   $0x80107a4a
-80106f18:	e8 73 94 ff ff       	call   80100390 <panic>
-80106f1d:	8d 76 00             	lea    0x0(%esi),%esi
+80107530:	83 ec 0c             	sub    $0xc,%esp
+80107533:	68 7e 80 10 80       	push   $0x8010807e
+80107538:	e8 53 8e ff ff       	call   80100390 <panic>
+8010753d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80106f20 <copyuvm>:
+80107540 <copyuvm>:
 
 // Given a parent process's page table, create a copy
 // of it for a child.
 pde_t*
 copyuvm(pde_t *pgdir, uint sz)
 {
-80106f20:	f3 0f 1e fb          	endbr32 
-80106f24:	55                   	push   %ebp
-80106f25:	89 e5                	mov    %esp,%ebp
-80106f27:	57                   	push   %edi
-80106f28:	56                   	push   %esi
-80106f29:	53                   	push   %ebx
-80106f2a:	83 ec 1c             	sub    $0x1c,%esp
+80107540:	f3 0f 1e fb          	endbr32 
+80107544:	55                   	push   %ebp
+80107545:	89 e5                	mov    %esp,%ebp
+80107547:	57                   	push   %edi
+80107548:	56                   	push   %esi
+80107549:	53                   	push   %ebx
+8010754a:	83 ec 1c             	sub    $0x1c,%esp
   pde_t *d;
   pte_t *pte;
   uint pa, i, flags;
   char *mem;
 
   if((d = setupkvm()) == 0)
-80106f2d:	e8 1e ff ff ff       	call   80106e50 <setupkvm>
-80106f32:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80106f35:	85 c0                	test   %eax,%eax
-80106f37:	0f 84 9b 00 00 00    	je     80106fd8 <copyuvm+0xb8>
+8010754d:	e8 1e ff ff ff       	call   80107470 <setupkvm>
+80107552:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80107555:	85 c0                	test   %eax,%eax
+80107557:	0f 84 9b 00 00 00    	je     801075f8 <copyuvm+0xb8>
     return 0;
   for(i = 0; i < sz; i += PGSIZE){
-80106f3d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80106f40:	85 c9                	test   %ecx,%ecx
-80106f42:	0f 84 90 00 00 00    	je     80106fd8 <copyuvm+0xb8>
-80106f48:	31 f6                	xor    %esi,%esi
-80106f4a:	eb 46                	jmp    80106f92 <copyuvm+0x72>
-80106f4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010755d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80107560:	85 c9                	test   %ecx,%ecx
+80107562:	0f 84 90 00 00 00    	je     801075f8 <copyuvm+0xb8>
+80107568:	31 f6                	xor    %esi,%esi
+8010756a:	eb 46                	jmp    801075b2 <copyuvm+0x72>
+8010756c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       panic("copyuvm: page not present");
     pa = PTE_ADDR(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
       goto bad;
     memmove(mem, (char*)P2V(pa), PGSIZE);
-80106f50:	83 ec 04             	sub    $0x4,%esp
-80106f53:	81 c7 00 00 00 80    	add    $0x80000000,%edi
-80106f59:	68 00 10 00 00       	push   $0x1000
-80106f5e:	57                   	push   %edi
-80106f5f:	50                   	push   %eax
-80106f60:	e8 ab d7 ff ff       	call   80104710 <memmove>
+80107570:	83 ec 04             	sub    $0x4,%esp
+80107573:	81 c7 00 00 00 80    	add    $0x80000000,%edi
+80107579:	68 00 10 00 00       	push   $0x1000
+8010757e:	57                   	push   %edi
+8010757f:	50                   	push   %eax
+80107580:	e8 0b d7 ff ff       	call   80104c90 <memmove>
     if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
-80106f65:	58                   	pop    %eax
-80106f66:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106f6c:	5a                   	pop    %edx
-80106f6d:	ff 75 e4             	pushl  -0x1c(%ebp)
-80106f70:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106f75:	89 f2                	mov    %esi,%edx
-80106f77:	50                   	push   %eax
-80106f78:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106f7b:	e8 a0 f8 ff ff       	call   80106820 <mappages>
-80106f80:	83 c4 10             	add    $0x10,%esp
-80106f83:	85 c0                	test   %eax,%eax
-80106f85:	78 61                	js     80106fe8 <copyuvm+0xc8>
+80107585:	58                   	pop    %eax
+80107586:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+8010758c:	5a                   	pop    %edx
+8010758d:	ff 75 e4             	pushl  -0x1c(%ebp)
+80107590:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80107595:	89 f2                	mov    %esi,%edx
+80107597:	50                   	push   %eax
+80107598:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010759b:	e8 a0 f8 ff ff       	call   80106e40 <mappages>
+801075a0:	83 c4 10             	add    $0x10,%esp
+801075a3:	85 c0                	test   %eax,%eax
+801075a5:	78 61                	js     80107608 <copyuvm+0xc8>
   for(i = 0; i < sz; i += PGSIZE){
-80106f87:	81 c6 00 10 00 00    	add    $0x1000,%esi
-80106f8d:	39 75 0c             	cmp    %esi,0xc(%ebp)
-80106f90:	76 46                	jbe    80106fd8 <copyuvm+0xb8>
+801075a7:	81 c6 00 10 00 00    	add    $0x1000,%esi
+801075ad:	39 75 0c             	cmp    %esi,0xc(%ebp)
+801075b0:	76 46                	jbe    801075f8 <copyuvm+0xb8>
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-80106f92:	8b 45 08             	mov    0x8(%ebp),%eax
-80106f95:	31 c9                	xor    %ecx,%ecx
-80106f97:	89 f2                	mov    %esi,%edx
-80106f99:	e8 02 f8 ff ff       	call   801067a0 <walkpgdir>
-80106f9e:	85 c0                	test   %eax,%eax
-80106fa0:	74 61                	je     80107003 <copyuvm+0xe3>
+801075b2:	8b 45 08             	mov    0x8(%ebp),%eax
+801075b5:	31 c9                	xor    %ecx,%ecx
+801075b7:	89 f2                	mov    %esi,%edx
+801075b9:	e8 02 f8 ff ff       	call   80106dc0 <walkpgdir>
+801075be:	85 c0                	test   %eax,%eax
+801075c0:	74 61                	je     80107623 <copyuvm+0xe3>
     if(!(*pte & PTE_P))
-80106fa2:	8b 00                	mov    (%eax),%eax
-80106fa4:	a8 01                	test   $0x1,%al
-80106fa6:	74 4e                	je     80106ff6 <copyuvm+0xd6>
+801075c2:	8b 00                	mov    (%eax),%eax
+801075c4:	a8 01                	test   $0x1,%al
+801075c6:	74 4e                	je     80107616 <copyuvm+0xd6>
     pa = PTE_ADDR(*pte);
-80106fa8:	89 c7                	mov    %eax,%edi
+801075c8:	89 c7                	mov    %eax,%edi
     flags = PTE_FLAGS(*pte);
-80106faa:	25 ff 0f 00 00       	and    $0xfff,%eax
-80106faf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801075ca:	25 ff 0f 00 00       	and    $0xfff,%eax
+801075cf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     pa = PTE_ADDR(*pte);
-80106fb2:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+801075d2:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
     if((mem = kalloc()) == 0)
-80106fb8:	e8 73 b6 ff ff       	call   80102630 <kalloc>
-80106fbd:	89 c3                	mov    %eax,%ebx
-80106fbf:	85 c0                	test   %eax,%eax
-80106fc1:	75 8d                	jne    80106f50 <copyuvm+0x30>
+801075d8:	e8 53 b0 ff ff       	call   80102630 <kalloc>
+801075dd:	89 c3                	mov    %eax,%ebx
+801075df:	85 c0                	test   %eax,%eax
+801075e1:	75 8d                	jne    80107570 <copyuvm+0x30>
     }
   }
   return d;
 
 bad:
   freevm(d);
-80106fc3:	83 ec 0c             	sub    $0xc,%esp
-80106fc6:	ff 75 e0             	pushl  -0x20(%ebp)
-80106fc9:	e8 02 fe ff ff       	call   80106dd0 <freevm>
+801075e3:	83 ec 0c             	sub    $0xc,%esp
+801075e6:	ff 75 e0             	pushl  -0x20(%ebp)
+801075e9:	e8 02 fe ff ff       	call   801073f0 <freevm>
   return 0;
-80106fce:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
-80106fd5:	83 c4 10             	add    $0x10,%esp
+801075ee:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+801075f5:	83 c4 10             	add    $0x10,%esp
 }
-80106fd8:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106fdb:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106fde:	5b                   	pop    %ebx
-80106fdf:	5e                   	pop    %esi
-80106fe0:	5f                   	pop    %edi
-80106fe1:	5d                   	pop    %ebp
-80106fe2:	c3                   	ret    
-80106fe3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106fe7:	90                   	nop
+801075f8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801075fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801075fe:	5b                   	pop    %ebx
+801075ff:	5e                   	pop    %esi
+80107600:	5f                   	pop    %edi
+80107601:	5d                   	pop    %ebp
+80107602:	c3                   	ret    
+80107603:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107607:	90                   	nop
       kfree(mem);
-80106fe8:	83 ec 0c             	sub    $0xc,%esp
-80106feb:	53                   	push   %ebx
-80106fec:	e8 7f b4 ff ff       	call   80102470 <kfree>
+80107608:	83 ec 0c             	sub    $0xc,%esp
+8010760b:	53                   	push   %ebx
+8010760c:	e8 5f ae ff ff       	call   80102470 <kfree>
       goto bad;
-80106ff1:	83 c4 10             	add    $0x10,%esp
-80106ff4:	eb cd                	jmp    80106fc3 <copyuvm+0xa3>
+80107611:	83 c4 10             	add    $0x10,%esp
+80107614:	eb cd                	jmp    801075e3 <copyuvm+0xa3>
       panic("copyuvm: page not present");
-80106ff6:	83 ec 0c             	sub    $0xc,%esp
-80106ff9:	68 6e 7a 10 80       	push   $0x80107a6e
-80106ffe:	e8 8d 93 ff ff       	call   80100390 <panic>
+80107616:	83 ec 0c             	sub    $0xc,%esp
+80107619:	68 a2 80 10 80       	push   $0x801080a2
+8010761e:	e8 6d 8d ff ff       	call   80100390 <panic>
       panic("copyuvm: pte should exist");
-80107003:	83 ec 0c             	sub    $0xc,%esp
-80107006:	68 54 7a 10 80       	push   $0x80107a54
-8010700b:	e8 80 93 ff ff       	call   80100390 <panic>
+80107623:	83 ec 0c             	sub    $0xc,%esp
+80107626:	68 88 80 10 80       	push   $0x80108088
+8010762b:	e8 60 8d ff ff       	call   80100390 <panic>
 
-80107010 <uva2ka>:
+80107630 <uva2ka>:
 
 //PAGEBREAK!
 // Map user virtual address to kernel address.
 char*
 uva2ka(pde_t *pgdir, char *uva)
 {
-80107010:	f3 0f 1e fb          	endbr32 
-80107014:	55                   	push   %ebp
+80107630:	f3 0f 1e fb          	endbr32 
+80107634:	55                   	push   %ebp
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
-80107015:	31 c9                	xor    %ecx,%ecx
+80107635:	31 c9                	xor    %ecx,%ecx
 {
-80107017:	89 e5                	mov    %esp,%ebp
-80107019:	83 ec 08             	sub    $0x8,%esp
+80107637:	89 e5                	mov    %esp,%ebp
+80107639:	83 ec 08             	sub    $0x8,%esp
   pte = walkpgdir(pgdir, uva, 0);
-8010701c:	8b 55 0c             	mov    0xc(%ebp),%edx
-8010701f:	8b 45 08             	mov    0x8(%ebp),%eax
-80107022:	e8 79 f7 ff ff       	call   801067a0 <walkpgdir>
+8010763c:	8b 55 0c             	mov    0xc(%ebp),%edx
+8010763f:	8b 45 08             	mov    0x8(%ebp),%eax
+80107642:	e8 79 f7 ff ff       	call   80106dc0 <walkpgdir>
   if((*pte & PTE_P) == 0)
-80107027:	8b 00                	mov    (%eax),%eax
+80107647:	8b 00                	mov    (%eax),%eax
     return 0;
   if((*pte & PTE_U) == 0)
     return 0;
   return (char*)P2V(PTE_ADDR(*pte));
 }
-80107029:	c9                   	leave  
+80107649:	c9                   	leave  
   if((*pte & PTE_U) == 0)
-8010702a:	89 c2                	mov    %eax,%edx
+8010764a:	89 c2                	mov    %eax,%edx
   return (char*)P2V(PTE_ADDR(*pte));
-8010702c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+8010764c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   if((*pte & PTE_U) == 0)
-80107031:	83 e2 05             	and    $0x5,%edx
+80107651:	83 e2 05             	and    $0x5,%edx
   return (char*)P2V(PTE_ADDR(*pte));
-80107034:	05 00 00 00 80       	add    $0x80000000,%eax
-80107039:	83 fa 05             	cmp    $0x5,%edx
-8010703c:	ba 00 00 00 00       	mov    $0x0,%edx
-80107041:	0f 45 c2             	cmovne %edx,%eax
-}
-80107044:	c3                   	ret    
-80107045:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010704c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107654:	05 00 00 00 80       	add    $0x80000000,%eax
+80107659:	83 fa 05             	cmp    $0x5,%edx
+8010765c:	ba 00 00 00 00       	mov    $0x0,%edx
+80107661:	0f 45 c2             	cmovne %edx,%eax
+}
+80107664:	c3                   	ret    
+80107665:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010766c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80107050 <copyout>:
+80107670 <copyout>:
 // Copy len bytes from p to user address va in page table pgdir.
 // Most useful when pgdir is not the current page table.
 // uva2ka ensures this only works for PTE_U pages.
 int
 copyout(pde_t *pgdir, uint va, void *p, uint len)
 {
-80107050:	f3 0f 1e fb          	endbr32 
-80107054:	55                   	push   %ebp
-80107055:	89 e5                	mov    %esp,%ebp
-80107057:	57                   	push   %edi
-80107058:	56                   	push   %esi
-80107059:	53                   	push   %ebx
-8010705a:	83 ec 0c             	sub    $0xc,%esp
-8010705d:	8b 75 14             	mov    0x14(%ebp),%esi
-80107060:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107670:	f3 0f 1e fb          	endbr32 
+80107674:	55                   	push   %ebp
+80107675:	89 e5                	mov    %esp,%ebp
+80107677:	57                   	push   %edi
+80107678:	56                   	push   %esi
+80107679:	53                   	push   %ebx
+8010767a:	83 ec 0c             	sub    $0xc,%esp
+8010767d:	8b 75 14             	mov    0x14(%ebp),%esi
+80107680:	8b 55 0c             	mov    0xc(%ebp),%edx
   char *buf, *pa0;
   uint n, va0;
 
   buf = (char*)p;
   while(len > 0){
-80107063:	85 f6                	test   %esi,%esi
-80107065:	75 3c                	jne    801070a3 <copyout+0x53>
-80107067:	eb 67                	jmp    801070d0 <copyout+0x80>
-80107069:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107683:	85 f6                	test   %esi,%esi
+80107685:	75 3c                	jne    801076c3 <copyout+0x53>
+80107687:	eb 67                	jmp    801076f0 <copyout+0x80>
+80107689:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     va0 = (uint)PGROUNDDOWN(va);
     pa0 = uva2ka(pgdir, (char*)va0);
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (va - va0);
-80107070:	8b 55 0c             	mov    0xc(%ebp),%edx
-80107073:	89 fb                	mov    %edi,%ebx
-80107075:	29 d3                	sub    %edx,%ebx
-80107077:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80107690:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107693:	89 fb                	mov    %edi,%ebx
+80107695:	29 d3                	sub    %edx,%ebx
+80107697:	81 c3 00 10 00 00    	add    $0x1000,%ebx
     if(n > len)
-8010707d:	39 f3                	cmp    %esi,%ebx
-8010707f:	0f 47 de             	cmova  %esi,%ebx
+8010769d:	39 f3                	cmp    %esi,%ebx
+8010769f:	0f 47 de             	cmova  %esi,%ebx
       n = len;
     memmove(pa0 + (va - va0), buf, n);
-80107082:	29 fa                	sub    %edi,%edx
-80107084:	83 ec 04             	sub    $0x4,%esp
-80107087:	01 c2                	add    %eax,%edx
-80107089:	53                   	push   %ebx
-8010708a:	ff 75 10             	pushl  0x10(%ebp)
-8010708d:	52                   	push   %edx
-8010708e:	e8 7d d6 ff ff       	call   80104710 <memmove>
+801076a2:	29 fa                	sub    %edi,%edx
+801076a4:	83 ec 04             	sub    $0x4,%esp
+801076a7:	01 c2                	add    %eax,%edx
+801076a9:	53                   	push   %ebx
+801076aa:	ff 75 10             	pushl  0x10(%ebp)
+801076ad:	52                   	push   %edx
+801076ae:	e8 dd d5 ff ff       	call   80104c90 <memmove>
     len -= n;
     buf += n;
-80107093:	01 5d 10             	add    %ebx,0x10(%ebp)
+801076b3:	01 5d 10             	add    %ebx,0x10(%ebp)
     va = va0 + PGSIZE;
-80107096:	8d 97 00 10 00 00    	lea    0x1000(%edi),%edx
+801076b6:	8d 97 00 10 00 00    	lea    0x1000(%edi),%edx
   while(len > 0){
-8010709c:	83 c4 10             	add    $0x10,%esp
-8010709f:	29 de                	sub    %ebx,%esi
-801070a1:	74 2d                	je     801070d0 <copyout+0x80>
+801076bc:	83 c4 10             	add    $0x10,%esp
+801076bf:	29 de                	sub    %ebx,%esi
+801076c1:	74 2d                	je     801076f0 <copyout+0x80>
     va0 = (uint)PGROUNDDOWN(va);
-801070a3:	89 d7                	mov    %edx,%edi
+801076c3:	89 d7                	mov    %edx,%edi
     pa0 = uva2ka(pgdir, (char*)va0);
-801070a5:	83 ec 08             	sub    $0x8,%esp
+801076c5:	83 ec 08             	sub    $0x8,%esp
     va0 = (uint)PGROUNDDOWN(va);
-801070a8:	89 55 0c             	mov    %edx,0xc(%ebp)
-801070ab:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+801076c8:	89 55 0c             	mov    %edx,0xc(%ebp)
+801076cb:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
     pa0 = uva2ka(pgdir, (char*)va0);
-801070b1:	57                   	push   %edi
-801070b2:	ff 75 08             	pushl  0x8(%ebp)
-801070b5:	e8 56 ff ff ff       	call   80107010 <uva2ka>
+801076d1:	57                   	push   %edi
+801076d2:	ff 75 08             	pushl  0x8(%ebp)
+801076d5:	e8 56 ff ff ff       	call   80107630 <uva2ka>
     if(pa0 == 0)
-801070ba:	83 c4 10             	add    $0x10,%esp
-801070bd:	85 c0                	test   %eax,%eax
-801070bf:	75 af                	jne    80107070 <copyout+0x20>
+801076da:	83 c4 10             	add    $0x10,%esp
+801076dd:	85 c0                	test   %eax,%eax
+801076df:	75 af                	jne    80107690 <copyout+0x20>
   }
   return 0;
 }
-801070c1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801076e1:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-801070c4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801076e4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801070c9:	5b                   	pop    %ebx
-801070ca:	5e                   	pop    %esi
-801070cb:	5f                   	pop    %edi
-801070cc:	5d                   	pop    %ebp
-801070cd:	c3                   	ret    
-801070ce:	66 90                	xchg   %ax,%ax
-801070d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801076e9:	5b                   	pop    %ebx
+801076ea:	5e                   	pop    %esi
+801076eb:	5f                   	pop    %edi
+801076ec:	5d                   	pop    %ebp
+801076ed:	c3                   	ret    
+801076ee:	66 90                	xchg   %ax,%ax
+801076f0:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-801070d3:	31 c0                	xor    %eax,%eax
+801076f3:	31 c0                	xor    %eax,%eax
 }
-801070d5:	5b                   	pop    %ebx
-801070d6:	5e                   	pop    %esi
-801070d7:	5f                   	pop    %edi
-801070d8:	5d                   	pop    %ebp
-801070d9:	c3                   	ret    
+801076f5:	5b                   	pop    %ebx
+801076f6:	5e                   	pop    %esi
+801076f7:	5f                   	pop    %edi
+801076f8:	5d                   	pop    %ebp
+801076f9:	c3                   	ret    
diff -ruN xv6-public/kernel.sym xv6-new/kernel.sym
--- xv6-public/kernel.sym	2022-10-07 22:34:12.601878749 +0530
+++ xv6-new/kernel.sym	2022-10-07 22:31:54.561876792 +0530
@@ -1,7 +1,7 @@
 80100000 .text
-801070e0 .rodata
-80108000 .data
-8010a520 .bss
+80107700 .rodata
+80109000 .data
+8010b520 .bss
 00000000 .debug_line
 00000000 .debug_info
 00000000 .debug_abbrev
@@ -12,11 +12,11 @@
 00000000 .comment
 00000000 bio.c
 00000000 console.c
-8010a520 cons
-8010a558 panicked
+8010b520 cons
+8010b558 panicked
 80100410 consputc.part.0
 801005a0 printint
-80107150 digits.1577
+80107770 digits.1592
 00000000 exec.c
 00000000 file.c
 00000000 fs.c
@@ -27,19 +27,19 @@
 80101d70 namex
 00000000 ide.c
 80102070 idestart
-8010a580 idelock
-8010a560 havedisk1
-8010a564 idequeue
+8010b580 idelock
+8010b560 havedisk1
+8010b564 idequeue
 00000000 ioapic.c
 00000000 kalloc.c
 00000000 kbd.c
-8010a5b4 shift.1418
-80107480 shiftcode
-80107380 togglecode
-80107360 charcode.1419
-80108200 normalmap
-80108100 shiftmap
-80108000 ctlmap
+8010b5b4 shift.1430
+80107aa0 shiftcode
+801079a0 togglecode
+80107980 charcode.1431
+80109200 normalmap
+80109100 shiftmap
+80109000 ctlmap
 00000000 lapic.c
 00000000 log.c
 80102b90 install_trans
@@ -53,464 +53,477 @@
 00000000 pipe.c
 00000000 proc.c
 80103790 allocproc
-8010a000 first.1619
-8010a5b8 initproc
-8010772c states.1645
+8010b000 first.1691
+8010b5b8 initproc
+80107d4c states.1717
 00000000 sleeplock.c
 00000000 spinlock.c
 00000000 string.c
 00000000 syscall.c
-801077a0 syscalls
+80107dc0 syscalls
 00000000 sysfile.c
-80104ab0 create
-80104c50 argfd.constprop.0
+80105030 create
+801051d0 argfd.constprop.0
 00000000 sysproc.c
 00000000 trap.c
 00000000 uart.c
-80105ba0 uartgetc
-8010a5bc uart
-80105bd0 uartputc.part.0
+801061c0 uartgetc
+8010b5bc uart
+801061f0 uartputc.part.0
 00000000 vm.c
-801067a0 walkpgdir
-80106820 mappages
-801068b0 deallocuvm.part.0
-8010a420 kmap
+80106dc0 walkpgdir
+80106e40 mappages
+80106ed0 deallocuvm.part.0
+8010b420 kmap
 80100290 consoleread
-801066f3 vector242
-8010614a vector119
+80106d13 vector242
+8010676a vector119
 8010000c entry
-8010602a vector87
-80106021 vector86
-80104830 safestrcpy
-80104df0 sys_close
-8010675f vector251
-8010604e vector91
-80105e44 vector33
-80106333 vector162
-80103ed0 yield
-80112680 log
-80112640 kmem
-80106597 vector213
-801060e7 vector108
-80105c20 uartinit
-80105e9e vector43
+8010664a vector87
+80106641 vector86
+80104db0 safestrcpy
+80105370 sys_close
+80106d7f vector251
+80103970 merge
+8010666e vector91
+80106464 vector33
+80106953 vector162
+80104280 yield
+80113680 log
+80113640 kmem
+80106bb7 vector213
+80106707 vector108
+80106240 uartinit
+801064be vector43
 801028c0 lapiceoi
-80106357 vector165
-80106447 vector185
+80106977 vector165
+80106a67 vector185
 80102380 ioapicinit
-80106126 vector115
+80106746 vector115
 80100ff0 fileread
-80106165 vector122
-80105740 sys_sbrk
-80112760 ioapicid
-801062eb vector156
-80106717 vector245
-80112634 ioapic
-80106477 vector189
-80105d68 vector7
-80105f40 vector61
-80105df3 vector24
-80106102 vector111
-801064fb vector200
-80105f76 vector67
-80106213 vector138
-80105fb5 vector74
-80103cd0 sched
-80104710 memmove
-80105f1c vector57
-80104a40 syscall
-801065a3 vector214
-80106096 vector99
-80103940 cpuid
+80106785 vector122
+80105cc0 sys_sbrk
+80113760 ioapicid
+8010690b vector156
+80106d37 vector245
+80113634 ioapic
+80106a97 vector189
+80106388 vector7
+80106560 vector61
+80106413 vector24
+80106722 vector111
+80106b1b vector200
+80106596 vector67
+80105e00 sys_getMaxPid
+80106833 vector138
+801065d5 vector74
+80104080 sched
+80104c90 memmove
+8010653c vector57
+80104fc0 syscall
+80106bc3 vector214
+801066b6 vector99
+80103c40 cpuid
 80101b60 writei
-80106237 vector141
-801056a0 sys_fork
-8010b5c0 bcache
-801063ab vector172
-801066e7 vector241
-80104400 getcallerpcs
-80105300 sys_mkdir
-80106777 vector253
-80105d44 vector3
-80105d3b vector2
+80106857 vector141
+80105c20 sys_fork
+8010c5c0 bcache
+801069cb vector172
+80106d07 vector241
+80104980 getcallerpcs
+80105880 sys_mkdir
+80106d97 vector253
+80106364 vector3
+8010635b vector2
 80101c90 namecmp
-8010663f vector227
-80106573 vector210
-80104a00 argstr
-8010661b vector224
-80105e8c vector41
+80106c5f vector227
+80106b93 vector210
+80104f80 argstr
+80106c3b vector224
+801064ac vector41
 801006b0 cprintf
 80100e70 filedup
 80102030 namei
-80105dd8 vector21
+801063f8 vector21
 80100040 binit
-801063e7 vector177
-80106141 vector118
-80105f91 vector70
-80105f88 vector69
-801066b7 vector237
-80105f5b vector64
-80105e0e vector27
-801061cb vector132
-80106453 vector186
-80104d10 sys_read
-801065c7 vector217
-801048b0 fetchint
-80106e50 setupkvm
-80104770 memcpy
-80106dd0 freevm
-80105d32 vector1
-801063f3 vector178
-80105e71 vector38
+80106a07 vector177
+80106761 vector118
+801065b1 vector70
+801065a8 vector69
+80106cd7 vector237
+8010657b vector64
+8010642e vector27
+801067eb vector132
+80106a73 vector186
+80105290 sys_read
+80106be7 vector217
+80104e30 fetchint
+80107470 setupkvm
+80104cf0 memcpy
+801073f0 freevm
+80106352 vector1
+80106a13 vector178
+80106491 vector38
 80102470 kfree
-801066c3 vector238
-801038d0 mycpu
+80106ce3 vector238
+80103bd0 mycpu
 80101890 iput
-801061d7 vector133
-80105fac vector73
-8010625b vector144
-80106783 vector254
+801067f7 vector133
+801065cc vector73
+8010687b vector144
+80106da3 vector254
 80101500 readsb
-8010a004 nextpid
-801060a8 vector101
-8010657f vector211
+8010b004 nextpid
+801066c8 vector101
+80106b9f vector211
 801031f0 mpinit
-801063c3 vector174
-801066ff vector243
+801069e3 vector174
+80106d1f vector243
 80100de0 fileinit
-801043e0 initlock
-8010619b vector128
-80107050 copyout
-80105ff4 vector81
-80103f20 sleep
+80105e50 sys_set_burst_time
+80104960 initlock
+801067bb vector128
+80107670 copyout
+80106614 vector81
+801042d0 sleep
+801047e0 get_burst_time
 801028e0 microdelay
-80105d96 vector13
-80105ee6 vector51
-80105dad vector16
-8010ff20 input
-801066db vector240
-80105f01 vector54
-80105dc6 vector19
-80106057 vector92
-8010670b vector244
+801063b6 vector13
+80106506 vector51
+801063cd vector16
+80110f20 input
+80106cfb vector240
+80106521 vector54
+801063e6 vector19
+80106677 vector92
+80106d2b vector244
 80101a30 stati
-8010622b vector140
-801056e0 sys_kill
-80105eb0 vector45
-80105fe2 vector79
+8010684b vector140
+80105c60 sys_kill
+801064d0 vector45
+80106602 vector79
 80103500 pipeclose
-80106657 vector229
-80106303 vector158
-80104e40 sys_fstat
+80106c77 vector229
+80106923 vector158
+801053c0 sys_fstat
 80100640 consolewrite
-80105e7a vector39
-8010637b vector168
+8010649a vector39
+8010699b vector168
 80102da0 end_op
-80105e56 vector35
-80106114 vector113
+80106476 vector35
+80106734 vector113
 80102510 freerange
-80106180 vector125
-80106c70 allocuvm
-80105886 trapret
-801065bb vector216
-80105f52 vector63
-80105e05 vector26
-801064a7 vector193
+801067a0 vector125
+80107290 allocuvm
+80105eb1 trapret
+80106bdb vector216
+80106572 vector63
+80106425 vector26
+80106ac7 vector193
 801027a0 lapicinit
-801064cb vector196
-80106567 vector209
-80105d4d vector4
-80106393 vector170
-8010a5c0 stack
-801061fb vector136
-80105d81 vector10
-80106543 vector206
+80106aeb vector196
+80106b87 vector209
+8010636d vector4
+801069b3 vector170
+8010b5c0 stack
+8010681b vector136
+801063a1 vector10
+80106b63 vector206
 80101840 iunlock
-80105790 sys_sleep
-8010678f vector255
-80106417 vector181
-80105f2e vector59
-80106018 vector85
-8010600f vector84
-8010642f vector183
-8010630f vector159
-8010658b vector212
-80104e90 sys_link
-80105ec2 vector47
-8010664b vector228
-80105e95 vector42
-8010611d vector114
-80107010 uva2ka
-801063cf vector175
-8010624f vector143
+80105d10 sys_sleep
+80106daf vector255
+80106a37 vector181
+8010654e vector59
+80106638 vector85
+8010662f vector84
+80106a4f vector183
+8010692f vector159
+80106bab vector212
+80105410 sys_link
+801064e2 vector47
+80106c6b vector228
+801064b5 vector42
+8010673d vector114
+80107630 uva2ka
+801069ef vector175
+8010686f vector143
 80100e00 filealloc
-801040e0 wakeup
-801061b3 vector130
-80106723 vector246
-80105d78 vector9
-80106243 vector142
-8010609f vector100
-80106507 vector201
-80106ef0 clearpteu
-80103960 myproc
-801058a0 tvinit
-80105f37 vector60
-80105dea vector23
+80104490 wakeup
+801067d3 vector130
+80106d43 vector246
+80106398 vector9
+80106863 vector142
+801066bf vector100
+80106b27 vector201
+80107510 clearpteu
+80103c60 myproc
+80105ec0 tvinit
+80105e90 sys_get_burst_time
+80106557 vector60
+8010640a vector23
 80101730 idup
-801066ab vector236
+80106ccb vector236
 80102780 kbdintr
-801051c0 sys_open
-8010666f vector231
-80105f6d vector66
-80105e20 vector29
+80105740 sys_open
+80106c8f vector231
+8010658d vector66
+80106440 vector29
 80101a60 readi
-801061ef vector135
+8010680f vector135
 80100860 consoleintr
-80104140 kill
-80105fd0 vector77
+80104500 kill
+801065f0 vector77
 801015e0 ialloc
-8010640b vector180
-801154a4 kpgdir
-8010655b vector208
+80106a2b vector180
+801167a4 kpgdir
+80106b7b vector208
 80102990 cmostime
-80105d10 uartintr
-8010608d vector98
-80106084 vector97
-801063db vector176
-801064b3 vector194
-80105e3b vector32
-801154a8 end
-801064ef vector199
-801061bf vector131
-8010676b vector252
+80106330 uartintr
+801066ad vector98
+801066a4 vector97
+801069fb vector176
+80106ad3 vector194
+8010645b vector32
+80105e10 sys_getProcInfo
+801167a8 end
+80106b0f vector199
+801067df vector131
+80106d8b vector252
 80101090 filewrite
-80105d29 vector0
-80104950 argint
+80106349 vector0
+80104ed0 argint
 80100a80 exec
-80106267 vector145
-80104d80 sys_write
-80104620 release
-801048f0 fetchstr
-801060de vector107
-80105e83 vector40
-80103fe0 wait
-801060b1 vector102
-80109000 entrypgdir
+80106887 vector145
+80105300 sys_write
+80104ba0 release
+80104e70 fetchstr
+801066fe vector107
+801064a3 vector40
+80104390 wait
+801066d1 vector102
+8010a000 entrypgdir
 0010000c _start
-80105f13 vector56
-80105f7f vector68
-80105d5f vector6
-8010a48c _binary_initcode_end
+80106533 vector56
+8010659f vector68
+8010637f vector6
+8010b48c _binary_initcode_end
 80100000 multiboot_header
-801061a7 vector129
-80103c30 scheduler
+801067c7 vector129
+80103f30 scheduler
+80103900 insertionSort
 80101cb0 dirlookup
-801064d7 vector197
+80106af7 vector197
 80100ec0 fileclose
 80102d30 begin_op
-801062bb vector152
-80106ed0 kvmalloc
-80106663 vector230
-80104780 strncmp
-80105e68 vector37
-80106537 vector205
-80106327 vector161
-80114c60 tickslock
+801068db vector152
+801074f0 kvmalloc
+80106c83 vector230
+80104d00 strncmp
+80106488 vector37
+80106b57 vector205
+80106947 vector161
+80115f60 tickslock
 801035a0 pipewrite
-801047d0 strncpy
-80105f9a vector71
-80106f20 copyuvm
-8010ffc0 ftable
-8010631b vector160
-801049a0 argptr
-801065af vector215
-801062f7 vector157
-80104ca0 sys_dup
-8010610b vector112
+80104d50 strncpy
+801065ba vector71
+80107540 copyuvm
+80110fc0 ftable
+8010693b vector160
+80104f20 argptr
+80106bcf vector215
+80106917 vector157
+80105220 sys_dup
+8010672b vector112
 80100390 panic
-80103860 forkret
-80106423 vector182
-80105d8f vector12
-801046c0 memcmp
+80103890 forkret
+80106a43 vector182
+801063af vector12
+80104c40 memcmp
 801026a0 kbdgetc
-801060f0 vector109
-80105dcf vector20
-80103b10 fork
-80105ef8 vector53
-80105dbd vector18
+80106710 vector109
+801063ef vector20
+80103e10 fork
+80106518 vector53
+801063dd vector18
 0000008a _binary_entryother_size
-80112780 cpus
-80104340 releasesleep
-80106072 vector95
-80104510 holding
-801109c0 sb
-80104560 acquire
-80106633 vector226
+80113780 cpus
+801048c0 releasesleep
+80106692 vector95
+80104a90 holding
+801119c0 sb
+80104ae0 acquire
+80106c53 vector226
 80102050 nameiparent
-80105ed4 vector49
-80105ea7 vector44
-8011267c lapic
-80105fd9 vector78
-8010586e alltraps
-801063b7 vector173
-80106138 vector117
-80105ffd vector82
-80106603 vector222
-80105d71 vector8
-80106297 vector149
+801064f4 vector49
+801064c7 vector44
+8011367c lapic
+801065f9 vector78
+80105e99 alltraps
+801069d7 vector173
+80106758 vector117
+8010661d vector82
+80106c23 vector222
+80105df0 sys_getNumProc
+80106391 vector8
+801068b7 vector149
 801016a0 iupdate
-80108000 data
-80104670 memset
-8010667b vector232
+80109000 data
+80104bf0 memset
+80106c9b vector232
 80103040 main
-801069f0 switchkvm
-801060d5 vector106
-801065eb vector220
-80106045 vector90
-8010633f vector163
-80106693 vector234
+80107010 switchkvm
+801066f5 vector106
+80106c0b vector220
+80106665 vector90
+8010695f vector163
+80106cb3 vector234
 80102f10 log_write
-801042e0 acquiresleep
-80104fe0 sys_unlink
-80105f49 vector62
-80105dfc vector25
-801064e3 vector198
-80106153 vector120
-8010a48c _binary_entryother_start
+80104860 acquiresleep
+80105560 sys_unlink
+80106569 vector62
+8010641c vector25
+80106b03 vector198
+80104780 set_burst_time
+80106773 vector120
+8010b48c _binary_entryother_start
+80103b70 mergeSort
 80102560 kinit1
-80105edd vector50
-80105da4 vector15
-801062af vector151
-80106006 vector83
-8010603c vector89
-80106033 vector88
-80105950 trap
-80105840 sys_uptime
-801063ff vector179
-80105e4d vector34
-80105eb9 vector46
-801061e3 vector134
-8010660f vector223
-80114ca0 idt
-801065d3 vector218
-801038b0 pinit
-80106da0 deallocuvm
-80106627 vector225
+801064fd vector50
+801063c4 vector15
+801068cf vector151
+80106626 vector83
+8010665c vector89
+80106653 vector88
+80105f70 trap
+80105dc0 sys_uptime
+80106a1f vector179
+8010646d vector34
+801064d9 vector46
+80106803 vector134
+80106c2f vector223
+80115fa0 idt
+80106bf3 vector218
+801038e0 pinit
+801073c0 deallocuvm
+80106c47 vector225
 801028a0 lapicid
-8010645f vector187
-80103a90 growproc
-80104380 holdingsleep
-80112d00 ncpu
-80105e29 vector30
-80103990 userinit
+80106a7f vector187
+80103d90 growproc
+80104900 holdingsleep
+801046c0 getMaxPid
+80113d00 ncpu
+80106449 vector30
+80103c90 userinit
 801000d0 bread
-80106192 vector127
+801067b2 vector127
 801036a0 piperead
-801154a0 ticks
-8010649b vector192
-80106363 vector166
+801167a0 ticks
+80106abb vector192
+80106983 vector166
 80100a30 consoleinit
-80105fc7 vector76
-80105fbe vector75
+801065e7 vector76
+801065de vector75
 801021e0 ideintr
-801064bf vector195
-801062a3 vector150
-80105f25 vector58
-8010673b vector248
-8010616e vector123
-8010607b vector96
-80105e32 vector31
-8010651f vector203
-8010621f vector139
-801062c7 vector153
-8010634b vector164
-801041d0 procdump
-8010615c vector121
-80105ce0 uartputc
-80105d56 vector5
-8010636f vector167
-801062df vector155
-80106747 vector249
+80106adf vector195
+801068c3 vector150
+80106545 vector58
+80106d5b vector248
+8010678e vector123
+8010669b vector96
+80106452 vector31
+80106b3f vector203
+8010683f vector139
+801068e7 vector153
+8010696b vector164
+80104590 procdump
+8010677c vector121
+80106300 uartputc
+80106376 vector5
+8010698f vector167
+801068ff vector155
+80104670 getNumProc
+80106d67 vector249
 801001f0 brelse
-80106753 vector250
-80106177 vector124
-801060f9 vector110
-8010652b vector204
+80104710 getProcInfo
+80106d73 vector250
+80106797 vector124
+80106719 vector110
+80106b4b vector204
 80101760 ilock
-801054c0 sys_exec
-80106207 vector137
-8010a460 _binary_initcode_start
-80104893 swtch
-8010672f vector247
-80105de1 vector22
-80106513 vector202
-80106960 seginit
+80105a40 sys_exec
+80106827 vector137
+8010b460 _binary_initcode_start
+80104e13 swtch
+80106d4f vector247
+80106401 vector22
+80106b33 vector202
+80106f80 seginit
 80101a00 iunlockput
-80105fa3 vector72
-80105f0a vector55
-80106189 vector126
-80105f64 vector65
-80105e17 vector28
-8010a516 _binary_entryother_end
-80106387 vector169
+801065c3 vector72
+8010652a vector55
+801067a9 vector126
+80106584 vector65
+80106437 vector28
+8010b516 _binary_entryother_end
+801069a7 vector169
 801001b0 bwrite
-80106687 vector233
-80105920 idtinit
-80103d90 exit
-801056d0 sys_wait
-801056b0 sys_exit
+80106ca7 vector233
+80105f40 idtinit
+80104140 exit
+80105c50 sys_wait
+80105c30 sys_exit
 80101f70 dirlink
 0000002c _binary_initcode_size
-8010627f vector147
-801042a0 initsleeplock
+8010689f vector147
+80104820 initsleeplock
 80102150 ideinit
-80106ba0 loaduvm
-801060c3 vector104
-8010612f vector116
-80112d20 ptable
+801071c0 loaduvm
+801066e3 vector104
+8010674f vector116
+80113d20 ptable
 80102430 ioapicenable
-801044b0 popcli
-8010a008 vectors
-80105eef vector52
-80105db6 vector17
-8010643b vector184
-80104870 strlen
-801055c0 sys_pipe
+80104a30 popcli
+8010b008 vectors
+8010650f vector52
+801063d6 vector17
+80106a5b vector184
+80104df0 strlen
+80105b40 sys_pipe
 80101540 iinit
 801033d0 picinit
-8010654f vector207
-80106b20 inituvm
-80106483 vector190
-801066cf vector239
-80106069 vector94
-80106060 vector93
+80106b6f vector207
+80107140 inituvm
+80106aa3 vector190
+80106cef vector239
+80106689 vector94
+80106680 vector93
 80102c90 initlog
-8010646b vector188
-80105ecb vector48
+80106a8b vector188
+801064eb vector48
 80102280 iderw
-801065df vector219
-8010628b vector148
-801065f7 vector221
+80106bff vector219
+801068ab vector148
+80106c17 vector221
 80102630 kalloc
-80110960 devsw
-80105720 sys_getpid
-80105feb vector80
-8010639f vector171
-801062d3 vector154
-80105e5f vector36
+80111960 devsw
+80105ca0 sys_getpid
+8010660b vector80
+801069bf vector171
+801068f3 vector154
+8010647f vector36
 801033f0 pipealloc
-8010669f vector235
-801060cc vector105
-80105410 sys_chdir
-801109e0 icache
-80106273 vector146
-8010648f vector191
-801060ba vector103
-80105370 sys_mknod
+80106cbf vector235
+801066ec vector105
+80105990 sys_chdir
+801119e0 icache
+80106893 vector146
+80106aaf vector191
+801066da vector103
+801058f0 sys_mknod
 801028f0 lapicstartap
-80106a10 switchuvm
-80104460 pushcli
+80107030 switchuvm
+801049e0 pushcli
 801025d0 kinit2
-80105d88 vector11
-80105d9d vector14
+801063a8 vector11
+801063bd vector14
 80100fa0 filestat
Binary files xv6-public/lapic.o and xv6-new/lapic.o differ
Binary files xv6-public/log.o and xv6-new/log.o differ
Binary files xv6-public/main.o and xv6-new/main.o differ
Binary files xv6-public/mp.o and xv6-new/mp.o differ
diff -ruN xv6-public/partA_test1.c xv6-new/partA_test1.c
--- xv6-public/partA_test1.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/partA_test1.c	2022-10-04 22:36:28.268194300 +0530
@@ -0,0 +1,9 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(void){
+    printf(1, "Total Number of Active Processes, as computed by getNumProc() system call: %d\n", getNumProc());
+    printf(1, "Maximum PID among those Active Processes, as computed by getMaxPid() system call: %d\n", getMaxPid());
+    exit();
+}
\ No newline at end of file
diff -ruN xv6-public/partA_test2.c xv6-new/partA_test2.c
--- xv6-public/partA_test2.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/partA_test2.c	2022-10-04 22:36:30.188194300 +0530
@@ -0,0 +1,16 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "processInfo.h"
+
+int main(void){
+    struct processInfo procInfo;
+    printf(1, "PID    ParentPID    SIZE    Number of Context Switches\n");
+
+    for(int pid=1; pid<=getMaxPid(); pid++){
+        if(getProcInfo(pid, &procInfo) == 0){ 
+	        printf(1, "%d      %d      %d    %d\n", pid, procInfo.ppid, procInfo.psize, procInfo.numberContextSwitches);
+        }
+    }
+    exit();
+}
\ No newline at end of file
diff -ruN xv6-public/partA_test3.c xv6-new/partA_test3.c
--- xv6-public/partA_test3.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/partA_test3.c	2022-10-05 12:06:56.143761500 +0530
@@ -0,0 +1,11 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(void){
+    for(int i=1; i<10; i++){
+        set_burst_time((3 * i + 7) % 17 + 1);
+        printf(1, "Burst Time: %d\n", get_burst_time());
+    }
+    exit();
+}
\ No newline at end of file
Binary files xv6-public/pipe.o and xv6-new/pipe.o differ
diff -ruN xv6-public/proc.c xv6-new/proc.c
--- xv6-public/proc.c	2022-10-07 22:33:18.231877978 +0530
+++ xv6-new/proc.c	2022-10-07 20:18:23.171763300 +0530
@@ -6,12 +6,19 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "processInfo.h"
+
 
 struct {
   struct spinlock lock;
   struct proc proc[NPROC];
 } ptable;
 
+struct queue_node{
+  struct proc *process;
+  struct queue_node *next;
+};
+
 static struct proc *initproc;
 
 int nextpid = 1;
@@ -26,6 +33,94 @@
   initlock(&ptable.lock, "ptable");
 }
 
+void insertionSort(struct proc *procArray[], int n) 
+{ 
+    int i, j;
+    struct proc *key; 
+    for (i = 1; i < n; i++)
+    { 
+        key = procArray[i]; 
+        j = i - 1; 
+  
+        // Move elements of arr[0..i-1],  
+        // that are greater than key, to one 
+        // position ahead of their 
+        // current position
+        while (j >= 0 && procArray[j] -> burst_time > key -> burst_time)
+        { 
+            procArray[j + 1] = procArray[j]; 
+            j = j - 1; 
+        } 
+        procArray[j + 1] = key; 
+    } 
+} 
+
+
+void merge(struct proc *procArray[], int l, int m, int r)
+{
+    int i, j, k;
+    int n1 = m - l + 1;
+    int n2 = r - m;
+ 
+    /* create temp arrays */
+    struct proc *L[n1], *R[n2];
+ 
+    /* Copy data to temp arrays L[] and R[] */
+    for (i = 0; i < n1; i++)
+        L[i] = procArray[l + i];
+    for (j = 0; j < n2; j++)
+        R[j] = procArray[m + 1 + j];
+ 
+    /* Merge the temp arrays back into arr[l..r]*/
+    i = 0; // Initial index of first subarray
+    j = 0; // Initial index of second subarray
+    k = l; // Initial index of merged subarray
+    while (i < n1 && j < n2) {
+        if ((L[i] -> burst_time) <= (R[j] -> burst_time)) {
+            procArray[k] = L[i];
+            i++;
+        }
+        else {
+            procArray[k] = R[j];
+            j++;
+        }
+        k++;
+    }
+ 
+    /* Copy the remaining elements of L[], if there
+    are any */
+    while (i < n1) {
+        procArray[k] = L[i];
+        i++;
+        k++;
+    }
+ 
+    /* Copy the remaining elements of R[], if there
+    are any */
+    while (j < n2) {
+        procArray[k] = R[j];
+        j++;
+        k++;
+    }
+}
+ 
+/* l is for left index and r is right index of the
+sub-array of arr to be sorted */
+void mergeSort(struct proc *procArray[], int l, int r)
+{
+    if (l < r) {
+        // Same as (l+r)/2, but avoids overflow for
+        // large l and h
+        int m = l + (r - l) / 2;
+ 
+        // Sort first and second halves
+        mergeSort(procArray, l, m);
+        mergeSort(procArray, m + 1, r);
+ 
+        merge(procArray, l, m, r);
+    }
+}
+
 // Must be called with interrupts disabled
 int
 cpuid() {
@@ -88,7 +183,9 @@
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-
+  p->number_of_context_switches = 0;  
+  p->burst_time = 0;
+  p->remaining_completion_time = 0;
   release(&ptable.lock);
 
   // Allocate kernel stack.
@@ -319,31 +416,100 @@
 //  - swtch to start running that process
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
+// void
+// scheduler(void)
+// {
+//   struct proc *p;
+//   struct cpu *c = mycpu();
+//   c->proc = 0;
+  
+//   for(;;){
+//     // Enable interrupts on this processor.
+//     sti();
+
+//     // Loop over process table looking for process to run.
+//     acquire(&ptable.lock);
+//     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+//       if(p->state != RUNNABLE)
+//         continue;
+
+//       // Switch to chosen process.  It is the process's job
+//       // to release ptable.lock and then reacquire it
+//       // before jumping back to us.
+//       (p -> number_of_context_switches)++;
+//       c->proc = p;
+//       switchuvm(p);
+//       p->state = RUNNING;
+
+//       swtch(&(c->scheduler), p->context);
+//       switchkvm();
+
+//       // Process is done running for now.
+//       // It should have changed its p->state before coming back.
+//       c->proc = 0;
+//     }
+//     release(&ptable.lock);
+
+//   }
+// }
+
+
+
+// Hybrid Scheduler 
 void
 scheduler(void)
 {
-  struct proc *p;
+  struct proc *p ;
   struct cpu *c = mycpu();
-  c->proc = 0;
-  
+  c -> proc = 0;
+  int time_quantum = 1e9;
+
+  int proc_to_be_executed_idx = 0;
+
   for(;;){
     // Enable interrupts on this processor.
     sti();
 
-    // Loop over process table looking for process to run.
+    struct proc *procArray[NPROC];
+    int num_of_proc_in_procArray = 0;
+
     acquire(&ptable.lock);
+
+    // Loop over process table looking for process to run.
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
+      if(p->state != RUNNABLE){
         continue;
+      }
+      procArray[num_of_proc_in_procArray++] = p;
+    }
 
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      c->proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
+    if(num_of_proc_in_procArray > 0){
+      insertionSort(procArray, num_of_proc_in_procArray);
+      // mergeSort(procArray, 0, num_of_proc_in_procArray - 1);
+
+      // cprintf("Sorting of processes is done.\n");
+
+      // for(int i = 0; i < num_of_proc_in_procArray; i++){
+      //   cprintf("i : %d     procArray[i]'s PID : %d     \n", i, procArray[i] -> pid);
+      // }
 
-      swtch(&(c->scheduler), p->context);
+      if(time_quantum == 1e9 && procArray[0] -> burst_time != 0){
+        time_quantum = procArray[0] -> burst_time;
+      }
+
+      (procArray[proc_to_be_executed_idx    %    num_of_proc_in_procArray] -> number_of_context_switches)++;
+
+      c->proc = procArray[proc_to_be_executed_idx    %    num_of_proc_in_procArray];
+      switchuvm(procArray[proc_to_be_executed_idx    %    num_of_proc_in_procArray]);
+      procArray[proc_to_be_executed_idx    %    num_of_proc_in_procArray]->state = RUNNING;
+
+      swtch(&(c->scheduler), procArray[proc_to_be_executed_idx    %    num_of_proc_in_procArray]->context);
+      if(procArray[proc_to_be_executed_idx    %    num_of_proc_in_procArray] -> remaining_completion_time < time_quantum){
+        procArray[proc_to_be_executed_idx    %    num_of_proc_in_procArray] -> remaining_completion_time = 0;
+      }else{
+        procArray[proc_to_be_executed_idx    %    num_of_proc_in_procArray] -> remaining_completion_time -= time_quantum;
+      }
+      proc_to_be_executed_idx++;
       switchkvm();
 
       // Process is done running for now.
@@ -351,10 +517,10 @@
       c->proc = 0;
     }
     release(&ptable.lock);
-
   }
 }
 
+
 // Enter scheduler.  Must hold only ptable.lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -532,3 +698,76 @@
     cprintf("\n");
   }
 }
+
+int 
+getNumProc(void){
+  struct proc *p;
+
+  acquire(&ptable.lock);
+
+  int activeProcesses = 0;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state != UNUSED){
+      activeProcesses++;
+    }
+  }
+  release(&ptable.lock);
+  return activeProcesses;
+}
+
+int 
+getMaxPid(void){
+  struct proc *p;
+
+  acquire(&ptable.lock);
+  int maxPID = -1e9;
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(maxPID < (p -> pid)){
+      maxPID = (p -> pid);
+    }
+  }
+  release(&ptable.lock);
+  return maxPID;
+}
+
+int 
+getProcInfo(int pid,struct processInfo* procInfo){
+  struct proc *p;
+
+  acquire(&ptable.lock);
+  int isProcessPresent = -1;
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p -> pid == pid){
+      isProcessPresent = 0;
+      procInfo -> psize = p -> sz;
+      procInfo -> numberContextSwitches = p -> number_of_context_switches;
+      procInfo -> ppid = p -> parent -> pid;
+    }
+  }
+  release(&ptable.lock);
+  return isProcessPresent;
+}
+
+int 
+set_burst_time(int n){
+
+  acquire(&ptable.lock);
+  int BurstTimeSet = -1;
+  mycpu()->proc->burst_time = n;
+  mycpu()->proc->remaining_completion_time = n;
+  BurstTimeSet = 0;
+  release(&ptable.lock);
+  yield();
+  return BurstTimeSet;
+}
+
+int 
+get_burst_time(){
+  
+  acquire(&ptable.lock);
+  int burstTime = -1;
+  burstTime = mycpu()->proc->burst_time;
+  release(&ptable.lock);
+  return burstTime;
+}
\ No newline at end of file
diff -ruN xv6-public/proc.d xv6-new/proc.d
--- xv6-public/proc.d	2022-10-07 22:34:11.151878728 +0530
+++ xv6-new/proc.d	2022-10-07 22:31:53.601876778 +0530
@@ -1,2 +1,2 @@
 proc.o: proc.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h x86.h proc.h spinlock.h
+ memlayout.h mmu.h x86.h proc.h spinlock.h processInfo.h
diff -ruN xv6-public/proc.h xv6-new/proc.h
--- xv6-public/proc.h	2022-10-07 22:33:18.231877978 +0530
+++ xv6-new/proc.h	2022-10-07 19:21:28.331714900 +0530
@@ -49,6 +49,9 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int number_of_context_switches;         // Number of Times this proceess context switches
+  int burst_time;              // CPU burst time of the process
+  int remaining_completion_time;
 };
 
 // Process memory is laid out contiguously, low addresses first:
Binary files xv6-public/proc.o and xv6-new/proc.o differ
diff -ruN xv6-public/processInfo.h xv6-new/processInfo.h
--- xv6-public/processInfo.h	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/processInfo.h	2022-10-04 22:36:38.728194400 +0530
@@ -0,0 +1,6 @@
+struct processInfo
+{
+    int ppid;
+    int psize;
+    int numberContextSwitches;
+};
Binary files xv6-public/sleeplock.o and xv6-new/sleeplock.o differ
Binary files xv6-public/spinlock.o and xv6-new/spinlock.o differ
diff -ruN xv6-public/syscall.c xv6-new/syscall.c
--- xv6-public/syscall.c	2022-10-07 22:33:18.231877978 +0530
+++ xv6-new/syscall.c	2022-10-05 11:33:30.733733100 +0530
@@ -103,6 +103,11 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_getNumProc(void);
+extern int sys_getMaxPid(void);
+extern int sys_getProcInfo(void);
+extern int sys_set_burst_time(void);
+extern int sys_get_burst_time(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +131,11 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getNumProc] sys_getNumProc,
+[SYS_getMaxPid] sys_getMaxPid,
+[SYS_getProcInfo] sys_getProcInfo,
+[SYS_set_burst_time] sys_set_burst_time,
+[SYS_get_burst_time] sys_get_burst_time,
 };
 
 void
diff -ruN xv6-public/syscall.h xv6-new/syscall.h
--- xv6-public/syscall.h	2022-10-07 22:33:18.231877978 +0530
+++ xv6-new/syscall.h	2022-10-05 11:33:00.463732600 +0530
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getNumProc 22
+#define SYS_getMaxPid 23
+#define SYS_getProcInfo 24 
+#define SYS_set_burst_time 25
+#define SYS_get_burst_time 26
\ No newline at end of file
Binary files xv6-public/syscall.o and xv6-new/syscall.o differ
Binary files xv6-public/sysfile.o and xv6-new/sysfile.o differ
diff -ruN xv6-public/sysproc.c xv6-new/sysproc.c
--- xv6-public/sysproc.c	2022-10-07 22:33:18.231877978 +0530
+++ xv6-new/sysproc.c	2022-10-05 11:32:35.643732300 +0530
@@ -89,3 +89,38 @@
   release(&tickslock);
   return xticks;
 }
+
+
+
+int sys_getNumProc(void){
+  return getNumProc();
+}
+
+int sys_getMaxPid(void){
+  return getMaxPid();
+}
+
+int sys_getProcInfo(void){
+  int pid;
+  struct processInfo *procInfo;
+
+  argint(0,&pid);
+  argptr(1, (char**) &procInfo, sizeof(procInfo));
+
+  return getProcInfo(pid, (struct processInfo *) procInfo);
+}
+
+int sys_set_burst_time(void){
+  int n;
+
+  if(argint(0, &n) < 0){
+    return -1;
+  }
+
+  return set_burst_time(n);
+}
+
+int sys_get_burst_time(void){
+  return get_burst_time();
+}
+
Binary files xv6-public/sysproc.o and xv6-new/sysproc.o differ
diff -ruN xv6-public/test1.c xv6-new/test1.c
--- xv6-public/test1.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/test1.c	2022-10-07 18:53:19.871690900 +0530
@@ -0,0 +1,97 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "processInfo.h"
+
+// CPU bound
+void delay(int n)
+{
+    int* data = (int*)malloc(1000*sizeof(int));
+
+    for(int i=0;i<n*1000000;++i)
+        data[i % 1000] = 0;
+
+    for(int j=0;j<n*1000000;j++)
+        data[j % 1000] = 0;
+}
+
+
+int main(int argc, char *argv[])    
+{
+    if (argc < 1)
+    {
+        printf(1, "test-case <number-of-children>\n");
+        exit();
+    }
+    int N = 4;
+
+    int pids[N];
+    int rets[N];
+    int burstTimes[N];
+    set_burst_time(2);
+    printf(1,"Random burst times\n");
+    printf(1, "Burst times of parent process = %d\n", get_burst_time());
+    int x0 = 3,a = 5,b = 4,m = 17;
+    for (int i = 0; i < 4; i++)
+    {
+        x0 = (a*x0+b)%m;
+
+        int ret = fork();
+        if (ret == 0)
+        {
+            // struct processInfo info;
+	        // getProcInfo(getpid(),&info);
+	        // printf(1,"pid = %d  context=%d \n",getpid(),info.numberContextSwitches);
+            
+            if(i == 0){
+                set_burst_time(10000);
+            }else if(i == 1){
+                set_burst_time(1000);
+            }else if(i == 2){
+                set_burst_time(200);
+            }else if(i == 3){
+                set_burst_time(2);
+            }
+            // set_burst_time(x0 + 3);
+            delay(get_burst_time());
+            // getProcInfo(getpid(),&info);
+	        // printf(1,"pid = %d  context=%d \n",getpid(),info.numberContextSwitches); 
+            exit();
+        }
+        else if (ret > 0)
+        {
+            pids[i] = ret;
+            // burstTimes[i] = x0+3;
+            if(i == 0){
+                burstTimes[i] = 10000;
+            }else if(i == 1){
+                burstTimes[i] = 1000;
+            }else if(i == 2){
+                burstTimes[i] = 200;
+            }else if(i == 3){
+                burstTimes[i] = 2;
+            }
+        }
+        else
+        {
+            printf(1, "fork error \n");
+            exit();
+        }
+    }
+    
+    for (int i = 0; i < N; i++)
+    {
+        rets[i] = wait();
+    }
+
+    printf(1, "\nAll children executed\n");
+    for (int i = 0; i < N; i++)
+        printf(1, "Child %d.    pid %d    burst time = %d\n", i, pids[i],burstTimes[i]);
+
+    
+    printf(1, "\nExit order \n");
+    for (int i = 0; i < N; i++)
+        printf(1, "pid %d   burst time = %d\n", rets[i],burstTimes[rets[i]-4]);
+
+    exit();
+}
diff -ruN xv6-public/testIO.c xv6-new/testIO.c
--- xv6-public/testIO.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-new/testIO.c	2022-10-07 17:47:27.621634900 +0530
@@ -0,0 +1,79 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "processInfo.h"
+
+// I/O bound
+void delayIO(int burst_time){
+    for(int i=0;i<burst_time * 10;++i){
+        // printf(1,"%s\n",str);
+        sleep(1);
+    }
+}
+
+int main(int argc, char *argv[])
+{
+    if (argc < 2)
+    {
+        printf(1, "Incorrect Format\n\nInput Format : test<test-case-number> <number-of-child-processes>\nE.g. : testIO 10\n");
+        exit();
+    }
+    int N = atoi(argv[1]);
+
+    int pids[N];
+    int return_order_of_procs[N];
+    int burstTimes[N];
+    set_burst_time(2);
+    printf(1,"Test Case #IO : Decreasing burst times for I/O bound Child Processes\n");
+    printf(1, "Burst times of parent process = %d\n\n", get_burst_time());
+    int first_child_process_pid;
+    
+    for (int i = 0; i < N; i++)
+    {
+        int burst_time = N - i + 5;
+
+        int newProcPID = fork();
+        if (newProcPID == 0)
+        {
+            struct processInfo info;
+	        getProcInfo(getpid(),&info);
+	        printf(1,"Before Execution starts : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches);
+            
+            set_burst_time(burst_time);
+            delayIO(burst_time);
+
+            getProcInfo(getpid(),&info);
+	        printf(1,"After Execution ends : pid = %d  context-switches=%d \n",getpid(),info.numberContextSwitches); 
+            exit();
+        }
+        else if (newProcPID > 0)
+        {
+            if(i == 0){
+                first_child_process_pid = newProcPID;
+            }
+            pids[i] = newProcPID;
+            burstTimes[i] = burst_time;
+        }
+        else
+        {
+            printf(1, "Error occured while forking \n");
+            exit();
+        }
+    }
+
+    for (int i = 0; i < N; i++)
+    {
+        return_order_of_procs[i] = wait();
+    }
+
+    printf(1, "\nAll children executed successfully\n");
+    for (int i = 0; i < N; i++)
+        printf(1, "Child %d    pid %d    burst time = %d\n", i, pids[i],burstTimes[i]);
+
+    
+    printf(1, "\nChild Proceses Exit order \n");
+    for (int i = 0; i < N; i++)
+        printf(1, "pid %d     burst time = %d\n", return_order_of_procs[i], burstTimes[return_order_of_procs[i]-first_child_process_pid]);
+
+    exit();
+}
\ No newline at end of file
Binary files xv6-public/trap.o and xv6-new/trap.o differ
Binary files xv6-public/uart.o and xv6-new/uart.o differ
diff -ruN xv6-public/user.h xv6-new/user.h
--- xv6-public/user.h	2022-10-07 22:33:18.241877978 +0530
+++ xv6-new/user.h	2022-10-05 11:31:34.223731400 +0530
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct processInfo;
 
 // system calls
 int fork(void);
@@ -23,6 +24,11 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getNumProc(void);
+int getMaxPid(void);
+int getProcInfo(int,struct processInfo*);
+int set_burst_time(int);
+int get_burst_time();
 
 // ulib.c
 int stat(const char*, struct stat*);
diff -ruN xv6-public/usys.S xv6-new/usys.S
--- xv6-public/usys.S	2022-10-07 22:33:18.241877978 +0530
+++ xv6-new/usys.S	2022-10-05 11:31:05.713731000 +0530
@@ -29,3 +29,8 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(getNumProc)
+SYSCALL(getMaxPid)
+SYSCALL(getProcInfo)
+SYSCALL(set_burst_time)
+SYSCALL(get_burst_time)
\ No newline at end of file
Binary files xv6-public/vm.o and xv6-new/vm.o differ
Binary files xv6-public/xv6.img and xv6-new/xv6.img differ
